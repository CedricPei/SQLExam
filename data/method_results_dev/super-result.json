[
  {
    "question_id": 0,
    "db_id": "california_schools",
    "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "predicted_sql": "SELECT MAX(`free meal count (k-12)`/`enrollment (k-12)`) AS max_free_rate FROM frpm AS F INNER JOIN schools AS S ON F.cdscode = S.cdscode WHERE S.county = 'Alameda'",
    "gold_sql": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "difficulty": "simple"
  },
  {
    "question_id": 1,
    "db_id": "california_schools",
    "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "predicted_sql": "SELECT `school name`, `free meal count (ages 5-17)`, `enrollment (ages 5-17)`, (`free meal count (ages 5-17)`/`enrollment (ages 5-17)`) as free_rate FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.school = 'Continuation School' ORDER BY free_rate ASC LIMIT 3",
    "gold_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
    "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 2,
    "db_id": "california_schools",
    "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "predicted_sql": "SELECT T2.zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`charter school (y/n)` = 1 AND T1.`district name` = 'Fresno County Office of Education'",
    "gold_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
    "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
    "difficulty": "simple"
  },
  {
    "question_id": 3,
    "db_id": "california_schools",
    "question": "What is the unabbreviated mailing street address of the school with the highest FRPM count for K-12 students?",
    "predicted_sql": "SELECT streetabr, mailzip FROM schools WHERE cdscode = ( SELECT cdscode FROM frpm ORDER BY `frpm count (k-12)` DESC LIMIT 1 )",
    "gold_sql": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 4,
    "db_id": "california_schools",
    "question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
    "predicted_sql": "SELECT T2.phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`charter school (y/n)` = 1 AND T 2.opendate > '2000-01-01' AND T1.`charter funding type` = 'Direct funded'",
    "gold_sql": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
    "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the frpm",
    "difficulty": "moderate"
  },
  {
    "question_id": 5,
    "db_id": "california_schools",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T1.avgscrmath < 400 AND T2.virtual = 'F'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
    "evidence": "Exclusively virtual refers to Virtual = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 6,
    "db_id": "california_schools",
    "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
    "predicted_sql": "SELECT schools.school FROM schools INNER JOIN satscores ON schools.cdscode = satscores.cds WHERE satscores.numtsttakr > 500 AND schools.magnet = 1;",
    "gold_sql": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
    "evidence": "Magnet schools or offer a magnet program means that Magnet = 1",
    "difficulty": "simple"
  },
  {
    "question_id": 7,
    "db_id": "california_schools",
    "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
    "predicted_sql": "SELECT T1.phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cdscode = T2.cds WHERE T2.numge1500 = ( SELECT MAX(numge1500) FROM satscores ) LIMIT 1;",
    "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 8,
    "db_id": "california_schools",
    "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
    "predicted_sql": "SELECT SUM(T1.numtsttakr) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.cdscode ORDER BY T2.`frpm count (k-12)` DESC LIMIT 1",
    "gold_sql": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 9,
    "db_id": "california_schools",
    "question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?",
    "predicted_sql": "SELECT COUNT(DISTINCT s.cdscode) FROM satscores AS ss INNER JOIN schools AS s ON ss.cds = s.cdscode WHERE ss.avgscrmath > 560 AND s.fundingtype = 'Directly Charter Funded'",
    "gold_sql": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 10,
    "db_id": "california_schools",
    "question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?",
    "predicted_sql": "SELECT T2.`frpm count (ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.cdscode ORDER BY T1.avgscrread DESC LIMIT 1",
    "gold_sql": "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 11,
    "db_id": "california_schools",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "predicted_sql": "SELECT cdscode FROM frpm WHERE (`enrollment (k-12)` + `enrollment (ages 5-17)`) > 500",
    "gold_sql": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
    "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
    "difficulty": "simple"
  },
  {
    "question_id": 12,
    "db_id": "california_schools",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "predicted_sql": "SELECT MAX(T2.`free meal count (ages 5-17)` / T2.`enrollment (ages 5-17)`) AS max_eligible_free_rate FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.cdscode WHERE T1.numge1500 / T1.numtsttakr > 0.3",
    "gold_sql": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
    "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 13,
    "db_id": "california_schools",
    "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
    "predicted_sql": "SELECT T2.phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T2.cdscode = T1.cds WHERE T1.numtsttakr != 0 ORDER BY (T1.numge1500 / T1.numtsttakr) DESC LIMIT 3",
    "gold_sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
    "evidence": "Excellence rate = NumGE1500 / NumTstTakr",
    "difficulty": "simple"
  },
  {
    "question_id": 14,
    "db_id": "california_schools",
    "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
    "predicted_sql": "SELECT T1.ncesschool, T1.school FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cdscode = T2.cdscode ORDER BY T2.`enrollment (ages 5-17)` DESC LIMIT 5",
    "gold_sql": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 15,
    "db_id": "california_schools",
    "question": "Which active district has the highest average score in Reading?",
    "predicted_sql": "SELECT s.district FROM schools AS s INNER JOIN satscores AS ss ON s.cdscode = ss.cds WHERE s.statustype = 'Active' ORDER BY ss.avgscrread DESC LIMIT 1",
    "gold_sql": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 16,
    "db_id": "california_schools",
    "question": "How many schools in merged Alameda have number of test takers less than 100?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.school) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cdscode = T2.cds WHERE T1.county = 'Alameda' AND T1.statustype = 'Merged' AND T2.numtsttakr < 100",
    "gold_sql": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Lake'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 17,
    "db_id": "california_schools",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "predicted_sql": "SELECT T2.charternum FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T1.avgscrwrite = 499",
    "gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
    "evidence": "Valid charter number means the number is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 18,
    "db_id": "california_schools",
    "question": "How many schools in Fresno (directly funded) have number of test takers not more than 250?",
    "predicted_sql": "SELECT COUNT(T1.cdscode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cdscode = T2.cds WHERE T1.county = 'Contra Costa' AND T1.fundingtype = 'Directly funded' AND T2.numtsttakr <= 250",
    "gold_sql": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Fresno' AND T2.NumTstTakr <= 250",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 19,
    "db_id": "california_schools",
    "question": "What is the phone number of the school that has the highest average score in Math?",
    "predicted_sql": "SELECT phone FROM schools JOIN satscores ON schools.cdscode = satscores.cds ORDER BY avgscrmath DESC LIMIT 1",
    "gold_sql": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 20,
    "db_id": "california_schools",
    "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "predicted_sql": "SELECT COUNT(*) FROM frpm WHERE `county name` = 'Amador' AND `low grade` = '9' AND `high grade` = '12'",
    "gold_sql": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 21,
    "db_id": "california_schools",
    "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
    "predicted_sql": "SELECT COUNT(DISTINCT s.school) FROM frpm AS f INNER JOIN schools AS s ON f.cdscode = s.cdscode WHERE s.city = 'Los Angeles' AND f.`free meal count (k-12)` > 500 AND f.`frpm count (k-12)` < 700",
    "gold_sql": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `FRPM Count (K-12)`< 700",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 22,
    "db_id": "california_schools",
    "question": "Which school in Contra Costa has the highest number of test takers?",
    "predicted_sql": "SELECT T1.school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cdscode = T2.cds WHERE T1.county = 'Contra Costa' ORDER BY T2.numtsttakr DESC LIMIT 1",
    "gold_sql": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 23,
    "db_id": "california_schools",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "predicted_sql": "SELECT T1.school, T1.street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cdscode = T2.cdscode WHERE ABS(T2.`enrollment (k-12)` - T2.`enrollment (ages 5-17)`) > 30",
    "gold_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
    "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 24,
    "db_id": "california_schools",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "predicted_sql": "SELECT T1.school FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cdscode = T2.cds INNER JOIN frpm AS T3 ON T1.cdscode = T3.cdscode WHERE T3.`percent (%) eligible free (k-12)` > 0.1 AND T2.numge1500 >= 1500;",
    "gold_sql": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
    "evidence": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
    "difficulty": "moderate"
  },
  {
    "question_id": 25,
    "db_id": "california_schools",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "predicted_sql": "SELECT T1.school, T1.fundingtype FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.cdscode = T2.cds WHERE T1.county = 'Riverside' GROUP BY T1.school HAVING AVG(T2.avgscrmath) > 400",
    "gold_sql": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
    "evidence": "Average of average math = sum(average math scores) / count(schools).",
    "difficulty": "moderate"
  },
  {
    "question_id": 26,
    "db_id": "california_schools",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "predicted_sql": "SELECT S.school, S.street, S.city, S.state, S.zip FROM schools AS S INNER JOIN frpm AS F ON S.cdscode = F.cdscode WHERE F.`frpm count (ages 5-17)` > 800 AND S.city = 'Monterey'",
    "gold_sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
    "evidence": "Full communication address should include Street, City, State and zip code if any.",
    "difficulty": "moderate"
  },
  {
    "question_id": 27,
    "db_id": "california_schools",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "predicted_sql": "SELECT s.school, s.phone, avg(ss.avgscrwrite) as average_write_score FROM satscores ss JOIN schools s ON ss.cds = s.cdscode WHERE s.opendate > '1991-12-31' OR (s.closeddate IS NOT NULL AND s.closeddate < '2000-01-01') GROUP BY s.school, s.phone;",
    "gold_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
    "evidence": "Communication number refers to phone number.",
    "difficulty": "moderate"
  },
  {
    "question_id": 28,
    "db_id": "california_schools",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "predicted_sql": "SELECT T1.`school name`, T2.edopsname FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`charter funding type` = 'Locally funded' AND (T1.`enrollment (k-12)` - T1.`enrollment (ages 5-17)`) > (SELECT AVG(T1.`enrollment (k-12)` - T1.`enrollment (ages 5-17)`) FROM frpm AS T1 WHERE T1.`charter funding type` = 'Locally funded')",
    "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "difficulty": "challenging"
  },
  {
    "question_id": 29,
    "db_id": "california_schools",
    "question": "When did the first-through-twelfth-grade school with the largest enrollment open?",
    "predicted_sql": "SELECT opendate FROM schools WHERE cdscode IN ( SELECT cdscode FROM frpm WHERE `enrollment (k-12)` = ( SELECT MAX(`enrollment (k-12)`) FROM frpm ) )",
    "gold_sql": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "evidence": "K-12 means First-through-twelfth-grade",
    "difficulty": "simple"
  },
  {
    "question_id": 30,
    "db_id": "california_schools",
    "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
    "predicted_sql": "SELECT city FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cdscode = T2.cdscode ORDER BY T2.`enrollment (k-12)` ASC LIMIT 5",
    "gold_sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
    "evidence": "K-12 refers to students in grades 1 through 12.",
    "difficulty": "simple"
  },
  {
    "question_id": 31,
    "db_id": "california_schools",
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "predicted_sql": "SELECT \"school name\", `free meal count (k-12)` / `enrollment (k-12)` as eligible_free_rate FROM frpm ORDER BY `enrollment (k-12)` DESC LIMIT 9, 2",
    "gold_sql": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
    "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 32,
    "db_id": "california_schools",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "predicted_sql": "SELECT `school name`, (`frpm count (k-12)` / `enrollment (k-12)`) as free_or_reduced_price_meal_rate FROM frpm WHERE `cdscode` IN ( SELECT cdscode FROM schools WHERE soctype = '66' ) ORDER BY `frpm count (k-12)` DESC LIMIT 5",
    "gold_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
    "evidence": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 33,
    "db_id": "california_schools",
    "question": "If there are any, what are the websites address of the schools with a free meal count of 1,900-2,000 to students aged 5-17? Include the name of the school.",
    "predicted_sql": "SELECT T1.website, T1.school FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cdscode = T2.cdscode WHERE T2.`free meal count (ages 5-17)` BETWEEN 1900 AND 2000",
    "gold_sql": "SELECT T2.Website, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Free Meal Count (Ages 5-17)` BETWEEN 1900 AND 2000 AND T2.Website IS NOT NULL",
    "evidence": "",
    "difficulty": "moderate"
  },
  {
    "question_id": 34,
    "db_id": "california_schools",
    "question": "What is the free rate for students between the ages of 5 and 17 at the school run by Kacey Gibson?",
    "predicted_sql": "SELECT (`free meal count (ages 5-17)` / `enrollment (ages 5-17)`) as free_rate FROM schools AS S INNER JOIN frpm AS F ON S.cdscode = F.cdscode WHERE S.admfname1 = 'Kacey' AND S.admlname1 = 'Gibson'",
    "gold_sql": "SELECT CAST(T2.`Free Meal Count (Ages 5-17)` AS REAL) / T2.`Enrollment (Ages 5-17)` FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.AdmFName1 = 'Kacey' AND T1.AdmLName1 = 'Gibson'",
    "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 35,
    "db_id": "california_schools",
    "question": "What is the administrator's email address of the chartered school with the fewest students enrolled in grades 1 through 12?",
    "predicted_sql": "SELECT T2.admemail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`charter school (y/n)` = 1 ORDER BY T1.`enrollment (k-12)` ASC LIMIT 1",
    "gold_sql": "SELECT T2.AdmEmail1 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter School (Y/N)` = 1 ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 1",
    "evidence": "Charted school means `Charter School (Y/N)` = 1 in the table frpm; Students enrolled in grades 1 through 12 refers to `Enrollment (K-12)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 36,
    "db_id": "california_schools",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "predicted_sql": "SELECT T1.admfname1, T1.admlname1 FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.school = T2.sname ORDER BY T2.numge1500 DESC LIMIT 1",
    "gold_sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
    "difficulty": "challenging"
  },
  {
    "question_id": 37,
    "db_id": "california_schools",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "predicted_sql": "SELECT T2.street, T2.city, T2.state, T2.zip FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode ORDER BY T1.numge1500/T1.numtsttakr ASC LIMIT 1",
    "gold_sql": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T2 INNER JOIN (SELECT cds, CAST(NumGE1500 AS REAL) / NumTstTakr AS rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) AS T1 ON T2.CDSCode = T1.cds WHERE T1.rate = (SELECT MIN(CAST(NumGE1500 AS REAL) / NumTstTakr) AS min_rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) ORDER BY T2.CDSCode",
    "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, Zip, State",
    "difficulty": "moderate"
  },
  {
    "question_id": 38,
    "db_id": "california_schools",
    "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
    "predicted_sql": "SELECT T2.website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T1.numtsttakr BETWEEN 2000 AND 3000 AND T2.county = 'Los Angeles'",
    "gold_sql": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 39,
    "db_id": "california_schools",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "predicted_sql": "SELECT AVG(T1.numtsttakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T2.opendate BETWEEN '1980-01-01' AND '1980-12-31' AND T2.city = 'Fresno'",
    "gold_sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
    "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980",
    "difficulty": "simple"
  },
  {
    "question_id": 40,
    "db_id": "california_schools",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "predicted_sql": "SELECT T2.phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T1.dname = 'Fresno Unified' ORDER BY T1.avgscrread LIMIT 1",
    "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "evidence": "Fresno Unified is a name of district;",
    "difficulty": "moderate"
  },
  {
    "question_id": 41,
    "db_id": "california_schools",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "predicted_sql": "SELECT s.school, s.avgscrread FROM satscores AS s INNER JOIN schools AS sc ON s.cds = sc.cdscode WHERE sc.virtual = 'F' ORDER BY s.avgscrread DESC LIMIT 5;",
    "gold_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
    "difficulty": "simple"
  },
  {
    "question_id": 42,
    "db_id": "california_schools",
    "question": "What is the type of education offered in the school who scored the highest average in Math?",
    "predicted_sql": "SELECT `educational option type` FROM frpm WHERE cdscode = ( SELECT cds FROM satscores ORDER BY avgscrmath DESC LIMIT 1 )",
    "gold_sql": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 43,
    "db_id": "california_schools",
    "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
    "predicted_sql": "SELECT T1.avgscrmath, T2.county FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE (T1.avgscrmath+T1.avgscrread+T1.avgscrwrite) = ( SELECT MIN(avgscrmath+avgscrread+avgscrwrite) FROM satscores )",
    "gold_sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
    "evidence": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite",
    "difficulty": "moderate"
  },
  {
    "question_id": 44,
    "db_id": "california_schools",
    "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.",
    "predicted_sql": "SELECT T1.avgscrwrite, T2.city FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T1.numge1500 = ( SELECT MAX(numge1500) FROM satscores )",
    "gold_sql": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 45,
    "db_id": "california_schools",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "predicted_sql": "SELECT T1.sname, AVG(T1.avgscrwrite) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T2.admfname1 = 'Ricci' and T2.admlname1 = 'Ulrich' GROUP BY T1.sname",
    "gold_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
    "evidence": "Usually, administrators manage the school stuff.",
    "difficulty": "moderate"
  },
  {
    "question_id": 46,
    "db_id": "california_schools",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "predicted_sql": "SELECT school FROM schools WHERE soctype = 'State Special Schools' ORDER BY gsserved DESC LIMIT 1",
    "gold_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
    "difficulty": "simple"
  },
  {
    "question_id": 47,
    "db_id": "california_schools",
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "predicted_sql": "SELECT COUNT(school) / 12 as 'Monthly Average' FROM schools WHERE county = 'Alameda' AND doctype = 'Elementary School District' AND STRFTIME('%Y', opendate) = '1980'",
    "gold_sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
    "difficulty": "moderate"
  },
  {
    "question_id": 48,
    "db_id": "california_schools",
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "predicted_sql": "SELECT SUM(IIF(doctype = 'Unified School District' AND statustype = 'Merged' AND county = 'Orange', 1, 0)) / SUM(IIF(doctype = 'Elementary School District' AND statustype = 'Merged' AND county = 'Orange', 1, 0)) AS ratio FROM schools",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
    "difficulty": "moderate"
  },
  {
    "question_id": 49,
    "db_id": "california_schools",
    "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
    "predicted_sql": "SELECT county, school, closeddate FROM schools WHERE statustype = 'Closed' GROUP BY county ORDER BY COUNT(school) DESC LIMIT 1",
    "gold_sql": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
    "evidence": "Closure date and closed date are synonyms; 'Closed' was mentioned in schools.StatusType.",
    "difficulty": "moderate"
  },
  {
    "question_id": 50,
    "db_id": "california_schools",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "predicted_sql": "SELECT T2.streetabr, T2.school FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode ORDER BY T1.avgscrmath DESC LIMIT 1 OFFSET 5",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "evidence": "Postal street and mailing street are synonyms.",
    "difficulty": "simple"
  },
  {
    "question_id": 51,
    "db_id": "california_schools",
    "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
    "predicted_sql": "SELECT T2.mailstrabr, T2.school FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode ORDER BY T1.avgscrread ASC LIMIT 1",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 52,
    "db_id": "california_schools",
    "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lakeport?",
    "predicted_sql": "SELECT COUNT(DISTINCT S.school) FROM satscores AS SAT INNER JOIN schools AS S ON SAT.cds = S.cdscode WHERE (SAT.avgscrread + SAT.avgscrmath + SAT.avgscrwrite) >= 1500 AND S.mailcity = 'Lakeport'",
    "gold_sql": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lakeport' AND (T1.AvgScrRead + T1.AvgScrMath + T1.AvgScrWrite) >= 1500",
    "evidence": "Total SAT scores can be computed by AvgScrRead + AvgScrMath + AvgScrWrite",
    "difficulty": "simple"
  },
  {
    "question_id": 53,
    "db_id": "california_schools",
    "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?",
    "predicted_sql": "SELECT SUM(T1.numtsttakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode WHERE T2.mailcity = 'Fresno'",
    "gold_sql": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 54,
    "db_id": "california_schools",
    "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
    "predicted_sql": "SELECT school, mailzip FROM schools WHERE admfname1 = 'Avetik' AND admlname1 = 'Atoian'",
    "gold_sql": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 55,
    "db_id": "california_schools",
    "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN county = 'Colusa' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN county = 'Humboldt' THEN 1 ELSE NULL END) FROM schools WHERE mailstate = 'California'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
    "evidence": "Ratio = count(schools in Colusa) / count(schools in Humboldt)",
    "difficulty": "moderate"
  },
  {
    "question_id": 56,
    "db_id": "california_schools",
    "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin city?",
    "predicted_sql": "SELECT COUNT(s.cdscode) FROM schools s WHERE s.mailstate = 'CA' AND s.county = 'San Joaquin' AND s.statustype = 'Active'",
    "gold_sql": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 57,
    "db_id": "california_schools",
    "question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?",
    "predicted_sql": "SELECT s.phone, s.ext FROM satscores AS sat INNER JOIN schools AS s ON sat.cds = s.cdscode ORDER BY sat.avgscrwrite DESC LIMIT 1 OFFSET 332;",
    "gold_sql": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 58,
    "db_id": "california_schools",
    "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
    "predicted_sql": "SELECT school, phone, ext FROM schools WHERE zip = '95203-3704'",
    "gold_sql": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 59,
    "db_id": "california_schools",
    "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
    "predicted_sql": "SELECT website FROM schools WHERE (admfname1 = 'Mike' AND admlname1 = 'Larson') OR (admfname1 = 'Dante' AND admlname1 = 'Alvarez')",
    "gold_sql": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 60,
    "db_id": "california_schools",
    "question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?",
    "predicted_sql": "SELECT website FROM schools WHERE virtual = 'P' AND charter = 1 AND county = 'San Joaquin'",
    "gold_sql": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1",
    "evidence": "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools",
    "difficulty": "simple"
  },
  {
    "question_id": 61,
    "db_id": "california_schools",
    "question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?",
    "predicted_sql": "SELECT COUNT(school) FROM schools WHERE city = 'Hickman' AND charter = 1 AND doctype = 'Elementary School District'",
    "gold_sql": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'",
    "evidence": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools",
    "difficulty": "simple"
  },
  {
    "question_id": 62,
    "db_id": "california_schools",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "predicted_sql": "SELECT COUNT(*) FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE `county name` = 'Los Angeles' AND `charter school (y/n)` = 0 AND (`free meal count (k-12)` * 100 / `enrollment (k-12)`) < 0.18",
    "gold_sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
    "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
    "difficulty": "challenging"
  },
  {
    "question_id": 63,
    "db_id": "california_schools",
    "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
    "predicted_sql": "SELECT school, city, admfname1, admlname1, admfname2, admlname2, admfname3, admlname3 FROM schools WHERE charter = 1 AND charternum = '00D2'",
    "gold_sql": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
    "evidence": "Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name",
    "difficulty": "simple"
  },
  {
    "question_id": 64,
    "db_id": "california_schools",
    "question": "What is the total number of schools with a mailing city in Hickman belonging to the charter number 00D4?",
    "predicted_sql": "SELECT COUNT(charternum) FROM schools WHERE mailcity = 'Hickman' AND charternum = '00D4'",
    "gold_sql": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND MailCity = 'Hickman'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 65,
    "db_id": "california_schools",
    "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.`charter funding type` = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.`charter funding type`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`county name` = 'Santa Clara'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
    "evidence": "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%",
    "difficulty": "moderate"
  },
  {
    "question_id": 66,
    "db_id": "california_schools",
    "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?",
    "predicted_sql": "SELECT COUNT(*) FROM schools WHERE opendate BETWEEN '2000-01-01' AND '2005-12-31' AND fundingtype = 'Directly Funded' AND county = 'Stanislaus'",
    "gold_sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000' AND '2005' AND County = 'Stanislaus' AND FundingType = 'Directly funded'",
    "evidence": "Directly funded schools refers to FundingType = 'Directly Funded'",
    "difficulty": "simple"
  },
  {
    "question_id": 67,
    "db_id": "california_schools",
    "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
    "predicted_sql": "SELECT COUNT(*) FROM schools WHERE doctype = 'Community College District' AND closeddate LIKE '1989%' AND city = 'San Francisco, CA'",
    "gold_sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 68,
    "db_id": "california_schools",
    "question": "Which county reported the most number of school closure in the 1980s with school wonership code belonging to Youth Authority Facilities (CEA)?",
    "predicted_sql": "SELECT county FROM schools WHERE closeddate BETWEEN '1980-01-01' AND '1989-12-31' AND soc = '11' GROUP BY county ORDER BY COUNT(*) DESC LIMIT 1",
    "gold_sql": "SELECT County FROM (SELECT County, COUNT(School) AS SchoolCount FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County) WHERE SchoolCount = (SELECT MAX(SchoolCount) FROM (SELECT COUNT(School) AS SchoolCount FROM schools WHERE strftime('%Y', ClosedDate) BETWEEN '1980' AND '1989' AND StatusType = 'Closed' AND SOC = 11 GROUP BY County))",
    "evidence": "Youth Authority Facilities (CEA) refers to SOC = 11; 1980s = years between 1980 and 1989",
    "difficulty": "moderate"
  },
  {
    "question_id": 69,
    "db_id": "california_schools",
    "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.",
    "predicted_sql": "SELECT ncesdist FROM schools WHERE soc = '31'",
    "gold_sql": "SELECT NCESDist FROM schools WHERE SOC = 31",
    "evidence": "State Special Schools means that SOC = 31.",
    "difficulty": "simple"
  },
  {
    "question_id": 70,
    "db_id": "california_schools",
    "question": "How many active and closed District Community Day Schools are there in the county of Alpine?",
    "predicted_sql": "SELECT COUNT(DISTINCT s.school) FROM schools AS s INNER JOIN frpm AS f ON s.cdscode = f.cdscode WHERE s.county = 'Alpine' AND f.`school type` = 'District Community Day Schools' AND s.statustype IN ('Active', 'Closed')",
    "gold_sql": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND SOC = 69 AND County = 'Alpine'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 71,
    "db_id": "california_schools",
    "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
    "predicted_sql": "SELECT `district code` FROM frpm WHERE cdscode IN ( SELECT cdscode FROM schools WHERE city = 'Fresno' AND magnet = 0 )",
    "gold_sql": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
    "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.",
    "difficulty": "simple"
  },
  {
    "question_id": 72,
    "db_id": "california_schools",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "predicted_sql": "SELECT T1.`enrollment (ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T2.edopscode = 'SSS' AND T2.city = 'Fremont' AND T1.`academic year` = '2014-2015'",
    "gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "evidence": "State Special School means EdOpsCode = 'SSS'",
    "difficulty": "moderate"
  },
  {
    "question_id": 73,
    "db_id": "california_schools",
    "question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?",
    "predicted_sql": "SELECT `frpm count (ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T2.edopsname = 'Youth Authority School' AND T2.mailstreet = 'PO Box 1040'",
    "gold_sql": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 74,
    "db_id": "california_schools",
    "question": "What is the lowest grade for the District Special Education Consortia School with National Center for Educational Statistics school district identification number of 0613360?",
    "predicted_sql": "SELECT `low grade` FROM frpm JOIN schools ON frpm.cdscode = schools.cdscode WHERE schools.edopscode = 'SPECON' AND schools.ncesdist = '613360'",
    "gold_sql": "SELECT MIN(T1.`Low Grade`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.NCESDist = '0613360' AND T2.EdOpsCode = 'SPECON'",
    "evidence": "District Special Education Consortia School refers to EdOpsCode = 'SPECON'.",
    "difficulty": "moderate"
  },
  {
    "question_id": 75,
    "db_id": "california_schools",
    "question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.",
    "predicted_sql": "SELECT frpm.`school name`, schools.eilname FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.`nslp provision status` = 'Breakfast Provision 2' and frpm.`county code` = '37'",
    "gold_sql": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 76,
    "db_id": "california_schools",
    "question": "What is the city location of the high school level school with Lunch Provision 2 whose lowest grade is 9 and the highest grade is 12 in the county of Merced?",
    "predicted_sql": "SELECT T2.city FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T1.`nslp provision status` = 'Lunch Provision 2' AND T1.`low grade` = '9' AND T1.`high grade` = '12' AND T1.`county name` = 'Merced' AND T2.eilcode = 'HS'",
    "gold_sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Lunch Provision 2' AND T2.County = 'Merced' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12 AND T2.EILCode = 'HS'",
    "evidence": "High school can be represented as EILCode = 'HS'",
    "difficulty": "moderate"
  },
  {
    "question_id": 77,
    "db_id": "california_schools",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "predicted_sql": "SELECT T1.`school name`, (T1.`free meal count (ages 5-17)` / T1.`enrollment (ages 5-17)`) * 100 AS 'Percent (%) Eligible FRPM (Ages 5-17)' FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.cdscode = T2.cdscode WHERE T2.gsserved = 'K-9' AND T1.`county name` = 'Los Angeles'",
    "gold_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "evidence": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 78,
    "db_id": "california_schools",
    "question": "What is the most common type of grade span served in the city of Adelanto?",
    "predicted_sql": "SELECT gsserved FROM schools WHERE city = 'Adelanto' GROUP BY gsserved ORDER BY COUNT(gsserved) DESC LIMIT 1",
    "gold_sql": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 79,
    "db_id": "california_schools",
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "predicted_sql": "SELECT county, COUNT(*) as number_of_schools FROM schools WHERE virtual = 'F' AND county IN ('San Diego', 'Santa Barbara') GROUP BY county ORDER BY number_of_schools DESC LIMIT 1;",
    "gold_sql": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "evidence": "'Does not offer physical building' means Virtual = F in the database.",
    "difficulty": "moderate"
  },
  {
    "question_id": 80,
    "db_id": "california_schools",
    "question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
    "predicted_sql": "SELECT schools.school, schools.latitude, frpm.`school type` FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.latitude = ( SELECT MAX(latitude) FROM schools )",
    "gold_sql": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Latitude = (SELECT MAX(Latitude) FROM schools)",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 81,
    "db_id": "california_schools",
    "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
    "predicted_sql": "SELECT school, mailcity, gsserved AS 'Lowest Grade' FROM schools WHERE state = 'CA' AND latitude > 0 ORDER BY latitude ASC LIMIT 1",
    "gold_sql": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' AND T2.Latitude IS NOT NULL AND T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA' AND Latitude IS NOT NULL)",
    "evidence": "State of California refers to state = 'CA'",
    "difficulty": "moderate"
  },
  {
    "question_id": 82,
    "db_id": "california_schools",
    "question": "What is the grade span offered in the school with the highest longitude?",
    "predicted_sql": "SELECT `low grade`, `high grade` FROM schools JOIN frpm ON schools.cdscode=frpm.cdscode ORDER BY longitude DESC LIMIT 1",
    "gold_sql": "SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools)",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 83,
    "db_id": "california_schools",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "predicted_sql": "SELECT T1.city, COUNT(T1.cdscode) AS SchoolCount, SUM(CASE WHEN T2.`nslp provision status` = 'Multiple Provision Types' THEN 1 ELSE 0 END) AS MagnetProgramCount FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.cdscode = T2.cdscode WHERE T1.magnet = 1 AND T1.gsserved = 'K-8' GROUP BY T1.city",
    "gold_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
    "difficulty": "challenging"
  },
  {
    "question_id": 84,
    "db_id": "california_schools",
    "question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.",
    "predicted_sql": "SELECT admfname1 AS Name, district, COUNT(admfname1) AS Frequency FROM schools GROUP BY admfname1 ORDER BY Frequency DESC LIMIT 2;",
    "gold_sql": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 85,
    "db_id": "california_schools",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "predicted_sql": "SELECT (frpm.`free meal count (k-12)` / frpm.`enrollment (k-12)`)*100 as 'Percent (%) Eligible Free (K-12)', frpm.`district code` FROM schools JOIN frpm ON schools.cdscode = frpm.cdscode WHERE schools.admfname1 = 'Alusine'",
    "gold_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "difficulty": "moderate"
  },
  {
    "question_id": 86,
    "db_id": "california_schools",
    "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
    "predicted_sql": "SELECT s.admlname3, s.district, s.county, s.school FROM schools s INNER JOIN frpm f ON s.district = f.`district name` AND s.charter = f.`charter school (y/n)` AND s.school = f.`school name` AND s.county = f.`county name` WHERE f.`charter school number` = '40'",
    "gold_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 87,
    "db_id": "california_schools",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "predicted_sql": "SELECT admemail1 FROM schools WHERE county = 'San Bernardino' AND district = 'San Bernardino City Unified' AND soctype = 'Intermediate/Middle Schools (Public)' AND opendate BETWEEN '2009-01-01' AND '2010-12-31'",
    "gold_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
    "evidence": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
    "difficulty": "challenging"
  },
  {
    "question_id": 88,
    "db_id": "california_schools",
    "question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.",
    "predicted_sql": "SELECT T2.school, T2.admemail1 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.cdscode ORDER BY T1.numge1500 DESC LIMIT 1",
    "gold_sql": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 89,
    "db_id": "financial",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "predicted_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.a3 = 'east Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
    "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
    "difficulty": "moderate"
  },
  {
    "question_id": 90,
    "db_id": "financial",
    "question": "How many accounts who have region in Prague are eligible for loans?",
    "predicted_sql": "SELECT COUNT(DISTINCT account.account_id) FROM account JOIN district ON account.district_id = district.district_id JOIN loan ON account.account_id = loan.account_id WHERE district.a3 = 'Prague'",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
    "evidence": "A3 contains the data of region",
    "difficulty": "simple"
  },
  {
    "question_id": 91,
    "db_id": "financial",
    "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
    "predicted_sql": "SELECT IIF(AVG(a12) > AVG(a13), '1995', '1996') FROM district",
    "gold_sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
    "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
    "difficulty": "simple"
  },
  {
    "question_id": 92,
    "db_id": "financial",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "predicted_sql": "SELECT COUNT(a11) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T1.a11 > 6000 AND T1.a11 < 10000",
    "gold_sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
    "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 93,
    "db_id": "financial",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.a3 = 'north Bohemia' AND T2.a11 > 8000",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
    "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
    "difficulty": "moderate"
  },
  {
    "question_id": 94,
    "db_id": "financial",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "predicted_sql": "SELECT T1.account_id, MAX(T2.a11) - MIN(T2.a11) AS Salary_Gap FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.gender = 'F' GROUP BY T1.account_id ORDER BY T3.birth_date ASC, T2.a11 DESC LIMIT 1",
    "gold_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
    "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
    "difficulty": "challenging"
  },
  {
    "question_id": 95,
    "db_id": "financial",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "predicted_sql": "SELECT T2.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id ORDER BY T1.birth_date DESC, T4.a11 DESC LIMIT 1",
    "gold_sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
    "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
    "difficulty": "moderate"
  },
  {
    "question_id": 96,
    "db_id": "financial",
    "question": "How many customers who choose statement of weekly issuance are Owner?",
    "predicted_sql": "SELECT COUNT(*) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
    "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
    "difficulty": "simple"
  },
  {
    "question_id": 97,
    "db_id": "financial",
    "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
    "predicted_sql": "SELECT T1.client_id, T1.gender, T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'DISPONENT' AND T3.frequency = 'POPLATEK PO OBRATU'",
    "gold_sql": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
    "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction",
    "difficulty": "simple"
  },
  {
    "question_id": 98,
    "db_id": "financial",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "predicted_sql": "SELECT T1.account_id, T2.amount FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1997' AND T2.status = 'approved' AND T1.frequency = 'POPLATEK TYDNE' ORDER BY T2.amount ASC LIMIT 1",
    "gold_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
    "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
    "difficulty": "moderate"
  },
  {
    "question_id": 99,
    "db_id": "financial",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "predicted_sql": "SELECT T1.account_id, T1.amount, T2.date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND STRFTIME('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1",
    "gold_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "evidence": "Loan validity more than 12 months refers to duration > 12",
    "difficulty": "moderate"
  },
  {
    "question_id": 100,
    "db_id": "financial",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T4.a2 = 'Slokolov'",
    "gold_sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
    "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
    "difficulty": "moderate"
  },
  {
    "question_id": 101,
    "db_id": "financial",
    "question": "List out the accounts who have the earliest trading date in 1995 ?",
    "predicted_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1995' ORDER BY T2.date LIMIT 1",
    "gold_sql": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 102,
    "db_id": "financial",
    "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
    "predicted_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.balance > 3000",
    "gold_sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 103,
    "db_id": "financial",
    "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
    "predicted_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
    "gold_sql": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 104,
    "db_id": "financial",
    "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
    "predicted_sql": "SELECT A.date FROM account AS A INNER JOIN trans AS T ON A.account_id = T.account_id WHERE T.amount = 840 AND T.date = '1998-10-14'",
    "gold_sql": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 105,
    "db_id": "financial",
    "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
    "predicted_sql": "SELECT T2.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1994-08-25'",
    "gold_sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 106,
    "db_id": "financial",
    "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
    "predicted_sql": "SELECT MAX(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1996-10-21'",
    "gold_sql": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 107,
    "db_id": "financial",
    "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
    "predicted_sql": "SELECT T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.a11 = ( SELECT MAX(a11) FROM district ) ORDER BY T1.birth_date ASC LIMIT 1",
    "gold_sql": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1",
    "evidence": "Earlier birthdate refers to older age; A11 refers to average salary",
    "difficulty": "simple"
  },
  {
    "question_id": 108,
    "db_id": "financial",
    "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
    "predicted_sql": "SELECT T4.amount FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id INNER JOIN account AS T3 ON T1.client_id = T3.account_id INNER JOIN trans AS T4 ON T1.client_id = T4.account_id WHERE T2.amount = ( SELECT MAX(amount) FROM loan ) ORDER BY T4.date ASC LIMIT 1",
    "gold_sql": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 109,
    "db_id": "financial",
    "question": "How many clients opened their accounts in Jesenik branch were women?",
    "predicted_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.a2 = 'Jesenik' AND T1.gender = 'F'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
    "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 110,
    "db_id": "financial",
    "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
    "predicted_sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 5100 AND STRFTIME('%Y-%m-%d', T2.date) = '1998-09-02'",
    "gold_sql": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 111,
    "db_id": "financial",
    "question": "How many accounts were opened in Litomerice in 1996?",
    "predicted_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.a2 = 'Litomerice' AND STRFTIME('%Y', T1.date) = '1996'",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
    "evidence": "A2 refers to district name; Litomerice is one of district names.",
    "difficulty": "simple"
  },
  {
    "question_id": 112,
    "db_id": "financial",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "predicted_sql": "SELECT T2.a2 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29' AND T4.client_id = T1.client_id",
    "gold_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "evidence": "Female refers to gender = 'F'; A2 refers to district names",
    "difficulty": "simple"
  },
  {
    "question_id": 113,
    "db_id": "financial",
    "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
    "predicted_sql": "SELECT c.birth_date FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN loan AS l ON d.account_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'",
    "gold_sql": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 114,
    "db_id": "financial",
    "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
    "predicted_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T2.a3 = 'Prague' ORDER BY T1.date LIMIT 1",
    "gold_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
    "evidence": "A3 stands for region names",
    "difficulty": "simple"
  },
  {
    "question_id": 115,
    "db_id": "financial",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "predicted_sql": "SELECT CAST(SUM(IIF(gender = 'M', 1, 0)) AS REAL) * 100 / COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM district WHERE a3 = 'south Bohemia' ORDER BY a4 DESC LIMIT 1)",
    "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
    "difficulty": "challenging"
  },
  {
    "question_id": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "predicted_sql": "SELECT (CAST((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1998-12-27') AS REAL) - CAST((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22') AS REAL)) / CAST((SELECT balance FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) AND date = '1993-03-22') AS REAL) * 100 AS increase_rate FROM trans WHERE account_id = (SELECT account_id FROM loan WHERE date = '1993-07-05' ORDER BY date LIMIT 1) LIMIT 1",
    "gold_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
    "difficulty": "challenging"
  },
  {
    "question_id": 117,
    "db_id": "financial",
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan",
    "gold_sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
    "difficulty": "moderate"
  },
  {
    "question_id": 118,
    "db_id": "financial",
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) / COUNT(account_id) * 100 AS Percentage FROM loan WHERE amount < 100000",
    "gold_sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
    "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
    "difficulty": "moderate"
  },
  {
    "question_id": 119,
    "db_id": "financial",
    "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
    "predicted_sql": "SELECT account.account_id, district.a2 AS district_name, district.a3 AS district_region FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', account.date) = '1993'",
    "gold_sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
    "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "difficulty": "moderate"
  },
  {
    "question_id": 120,
    "db_id": "financial",
    "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "predicted_sql": "SELECT A.account_id, A.frequency, C.client_id FROM account AS A INNER JOIN disp AS D ON A.account_id = D.account_id INNER JOIN client AS C ON D.client_id = C.client_id INNER JOIN district AS B ON A.district_id = B.district_id WHERE B.a3 = 'east Bohemia' AND A.date BETWEEN '1995-01-01' AND '2000-12-31'",
    "gold_sql": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "evidence": "Accounts holder refers to the person who own this account.",
    "difficulty": "moderate"
  },
  {
    "question_id": 121,
    "db_id": "financial",
    "question": "List account ID and account opening date for accounts from 'Prachatice'.",
    "predicted_sql": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.a2 = 'Prachatice'",
    "gold_sql": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
    "evidence": "A2 refers to the names of districts.",
    "difficulty": "simple"
  },
  {
    "question_id": 122,
    "db_id": "financial",
    "question": "State the district and region for loan ID '4990'.",
    "predicted_sql": "SELECT DISTINCT T1.a2 AS district, T1.a3 AS region FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.loan_id = 4990",
    "gold_sql": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
    "evidence": "A2, A3 contains the information about district and region respectively.",
    "difficulty": "simple"
  },
  {
    "question_id": 123,
    "db_id": "financial",
    "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
    "predicted_sql": "SELECT T1.account_id, T2.a2 AS district, T2.a3 AS region FROM loan AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.amount > 300000",
    "gold_sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
    "evidence": "A2 contains district names and A3 contains region names.",
    "difficulty": "simple"
  },
  {
    "question_id": 124,
    "db_id": "financial",
    "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
    "predicted_sql": "SELECT T1.loan_id, T2.a3 AS district, T2.a11 AS average_salary FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.duration = 60",
    "gold_sql": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
    "evidence": "A3 refers to regions; A11 refers to average salary",
    "difficulty": "simple"
  },
  {
    "question_id": 125,
    "db_id": "financial",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "predicted_sql": "SELECT district.district_id, district.a3, 100 * (district.a13 - district.a12) / district.a12 AS Unemployment_Increment_Rate FROM district JOIN account ON district.district_id = account.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.status = 'D' ORDER BY Unemployment_Increment_Rate DESC;",
    "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
    "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
    "difficulty": "challenging"
  },
  {
    "question_id": 126,
    "db_id": "financial",
    "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.a2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) = '1993'",
    "gold_sql": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
    "evidence": "A2 contains the information about district.",
    "difficulty": "simple"
  },
  {
    "question_id": 127,
    "db_id": "financial",
    "question": "List the account IDs with monthly issuance of statements.",
    "predicted_sql": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
    "gold_sql": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
    "evidence": "'POPLATEK MESICNE' stands for monthly issuance",
    "difficulty": "simple"
  },
  {
    "question_id": 128,
    "db_id": "financial",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "predicted_sql": "SELECT T2.a2 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.a2 ORDER BY COUNT(*) DESC LIMIT 10",
    "gold_sql": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
    "evidence": "A2 refers to districts; Female refers to gender = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 129,
    "db_id": "financial",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "predicted_sql": "SELECT T3.a2, T1.amount FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 on T2.district_id = T3.district_id WHERE T1.date LIKE '1996-01%' AND T1.type = 'VYDAJ' ORDER BY T1.amount DESC LIMIT 10",
    "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
    "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
    "difficulty": "moderate"
  },
  {
    "question_id": 130,
    "db_id": "financial",
    "question": "How many of the account holders in South Bohemia still do not own credit cards?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN disp AS T3 ON T1.account_id = T3.account_id LEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T2.a3 = 'south Bohemia' AND T4.card_id IS NULL",
    "gold_sql": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
    "evidence": "A3 contains the region names; South Bohemia is one of region names.",
    "difficulty": "moderate"
  },
  {
    "question_id": 131,
    "db_id": "financial",
    "question": "Which district has highest active loan?",
    "predicted_sql": "SELECT a3 FROM district WHERE district_id = ( SELECT district_id FROM account WHERE account_id = ( SELECT account_id FROM loan WHERE status='C' OR status='D' GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1 ) )",
    "gold_sql": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
    "evidence": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
    "difficulty": "moderate"
  },
  {
    "question_id": 132,
    "db_id": "financial",
    "question": "What is the average loan amount by male borrowers?",
    "predicted_sql": "SELECT AVG(T2.amount) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.client_id WHERE T1.gender = 'M'",
    "gold_sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
    "evidence": "Male refers to gender = 'M'",
    "difficulty": "simple"
  },
  {
    "question_id": 133,
    "db_id": "financial",
    "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
    "predicted_sql": "SELECT a2, a6 FROM district WHERE a13 = (SELECT MAX(a13) FROM district) AND a14 = 1996",
    "gold_sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
    "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
    "difficulty": "simple"
  },
  {
    "question_id": 134,
    "db_id": "financial",
    "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
    "predicted_sql": "SELECT COUNT(account_id) FROM account WHERE district_id = (SELECT district_id FROM district WHERE a16 = (SELECT MAX(a16) FROM district))",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
    "evidence": "A16 stands for no. of committed crimes 1996",
    "difficulty": "simple"
  },
  {
    "question_id": 135,
    "db_id": "financial",
    "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND T2.balance < 0 AND T1.frequency = 'POPLATEK MESICNE'",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
    "evidence": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
    "difficulty": "moderate"
  },
  {
    "question_id": 136,
    "db_id": "financial",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "predicted_sql": "SELECT COUNT(t1.loan_id) FROM loan AS t1 INNER JOIN account AS t2 ON t1.account_id = t2.account_id WHERE t1.amount >= 250000 AND t2.frequency = 'POPLATEK MESICNE' AND t1.date BETWEEN '1995-01-01' AND '1997-12-31'",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
    "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
    "difficulty": "moderate"
  },
  {
    "question_id": 137,
    "db_id": "financial",
    "question": "How many accounts have running contracts in Branch location 1?",
    "predicted_sql": "SELECT COUNT(DISTINCT loan.account_id) FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE (loan.status = 'C' OR loan.status = 'D') AND district.district_id = 1",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
    "difficulty": "moderate"
  },
  {
    "question_id": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "predicted_sql": "SELECT COUNT(T4.gender) FROM district AS T1 INNER JOIN client AS T4 ON T1.district_id = T4.district_id WHERE T1.a15 = (SELECT MAX(a15) FROM district WHERE a15 <> (SELECT MAX(a15) FROM district)) AND T4.gender = 'M'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
    "difficulty": "moderate"
  },
  {
    "question_id": 139,
    "db_id": "financial",
    "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT'",
    "gold_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
    "evidence": "High-level credit cards refers to the cards with the gold type.",
    "difficulty": "simple"
  },
  {
    "question_id": 140,
    "db_id": "financial",
    "question": "How many accounts are there in the district of \"Pisek\"?",
    "predicted_sql": "SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE a2 = 'Pisek' )",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
    "evidence": "A2 refers to district name",
    "difficulty": "simple"
  },
  {
    "question_id": 141,
    "db_id": "financial",
    "question": "Which districts have transactions greater than USS$10,000 in 1997?",
    "predicted_sql": "SELECT DISTINCT T4.a2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T4 ON T2.district_id = T4.district_id WHERE T1.amount > 10000 AND STRFTIME('%Y', T1.date) = '1997'",
    "gold_sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 142,
    "db_id": "financial",
    "question": "Which accounts placed orders for household payment in Pisek?",
    "predicted_sql": "SELECT account_id FROM order JOIN account ON order.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE k_symbol = 'SIPO' AND a2 = 'Pisek'",
    "gold_sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
    "evidence": "k_symbol = 'SIPO' refers to household payment",
    "difficulty": "simple"
  },
  {
    "question_id": 143,
    "db_id": "financial",
    "question": "What are the accounts that have gold credit cards?",
    "predicted_sql": "SELECT T1.account_id FROM card AS T1 GROUP BY T1.account_id HAVING COUNT(DISTINCT T1.type) = 2",
    "gold_sql": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 144,
    "db_id": "financial",
    "question": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
    "predicted_sql": "SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '2021'",
    "gold_sql": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'",
    "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawn",
    "difficulty": "moderate"
  },
  {
    "question_id": 145,
    "db_id": "financial",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "predicted_sql": "SELECT T2.disp_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' GROUP BY T2.disp_id HAVING AVG(T1.amount) < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND STRFTIME('%Y', date) = '1998')",
    "gold_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
    "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
    "difficulty": "moderate"
  },
  {
    "question_id": 146,
    "db_id": "financial",
    "question": "Who are the female account holders who own credit cards and also have loans?",
    "predicted_sql": "SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T1.gender = 'F' AND T3.type = 'credit'",
    "gold_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
    "evidence": "Female refers to gender = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 147,
    "db_id": "financial",
    "question": "How many female clients' accounts are in the region of South Bohemia?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T1.district_id = T4.district_id WHERE T3.gender = 'F' AND T4.a3 = 'south Bohemia'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
    "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
    "difficulty": "simple"
  },
  {
    "question_id": 148,
    "db_id": "financial",
    "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
    "predicted_sql": "SELECT DISTINCT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T1.a2 = 'Tabor' AND T3.type = 'OWNER'",
    "gold_sql": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
    "evidence": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
    "difficulty": "moderate"
  },
  {
    "question_id": 149,
    "db_id": "financial",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "predicted_sql": "SELECT DISTINCT type, a11 FROM disp INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE disp.account_id NOT IN (SELECT account_id FROM loan) AND district.a11 > 8000 AND district.a11 <= 9000",
    "gold_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
    "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
    "difficulty": "challenging"
  },
  {
    "question_id": 150,
    "db_id": "financial",
    "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.a3 = 'north Bohemia' AND T3.bank = 'AB'",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
    "evidence": "A3 contains the region names; North Bohemia is a region.",
    "difficulty": "moderate"
  },
  {
    "question_id": 151,
    "db_id": "financial",
    "question": "Please list the name of the districts with accounts that made withdrawal transactions.",
    "predicted_sql": "SELECT DISTINCT T1.a2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
    "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
    "evidence": "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions",
    "difficulty": "moderate"
  },
  {
    "question_id": 152,
    "db_id": "financial",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "predicted_sql": "SELECT A3, AVG(A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE A15 > 4000 AND DATE(T2.date) > = '1997-01-01' GROUP BY A3 HAVING AVG(A15) > 4000",
    "gold_sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
    "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
    "difficulty": "moderate"
  },
  {
    "question_id": 153,
    "db_id": "financial",
    "question": "How many 'classic' cards are eligible for loan?",
    "predicted_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
    "gold_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
    "evidence": "when the account type = 'OWNER', it's eligible for loan",
    "difficulty": "simple"
  },
  {
    "question_id": 154,
    "db_id": "financial",
    "question": "How many male clients in 'Hl.m. Praha' district?",
    "predicted_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.a2 = 'Hl.m. Praha'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
    "evidence": "District data appears in the A2; Male means that gender = 'M'",
    "difficulty": "simple"
  },
  {
    "question_id": 155,
    "db_id": "financial",
    "question": "How many percent of 'Gold' cards were issued prior to 1998?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card;",
    "gold_sql": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
    "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%",
    "difficulty": "simple"
  },
  {
    "question_id": 156,
    "db_id": "financial",
    "question": "Who is the owner of the account with the largest loan amount?",
    "predicted_sql": "SELECT T3.client_id FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T2.type = 'OWNER' ORDER BY T1.amount DESC LIMIT 1",
    "gold_sql": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 157,
    "db_id": "financial",
    "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
    "predicted_sql": "SELECT a15 FROM district WHERE district_id = ( SELECT district_id FROM account WHERE account_id = 532 )",
    "gold_sql": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
    "evidence": "A15 contains information about number of committed crimes in 1995",
    "difficulty": "simple"
  },
  {
    "question_id": 158,
    "db_id": "financial",
    "question": "What is the district Id of the account that placed the order with the id 33333?",
    "predicted_sql": "SELECT T2.district_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333",
    "gold_sql": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 159,
    "db_id": "financial",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "predicted_sql": "SELECT T1.amount, T1.date FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'",
    "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
    "evidence": "operation = 'VYBER' refers to withdrawal in cash",
    "difficulty": "simple"
  },
  {
    "question_id": 160,
    "db_id": "financial",
    "question": "Among the weekly issuance accounts, how many have a loan of under 200000?",
    "predicted_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
    "evidence": "frequency = 'POPLATEK TYDNE' stands for weekly issuance",
    "difficulty": "simple"
  },
  {
    "question_id": 161,
    "db_id": "financial",
    "question": "What type of credit card does the client with the id 13539 own?",
    "predicted_sql": "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539",
    "gold_sql": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 162,
    "db_id": "financial",
    "question": "What is the region of the client with the id 3541 from?",
    "predicted_sql": "SELECT T2.a3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
    "gold_sql": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
    "evidence": "A3 refers to region",
    "difficulty": "simple"
  },
  {
    "question_id": 163,
    "db_id": "financial",
    "question": "Which district has the most accounts with loan contracts finished with no problems?",
    "predicted_sql": "SELECT T.a2 FROM ( SELECT T2.a2, COUNT(T1.account_id) AS num FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.status = 'A' GROUP BY T2.a2 ) AS T ORDER BY T.num DESC LIMIT 1",
    "gold_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
    "evidence": "status = 'A' refers to loan contracts finished with no problems",
    "difficulty": "moderate"
  },
  {
    "question_id": 164,
    "db_id": "financial",
    "question": "Who placed the order with the id 32423?",
    "predicted_sql": "SELECT T1.client_id FROM disp AS T1 INNER JOIN order AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 32423",
    "gold_sql": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 165,
    "db_id": "financial",
    "question": "Please list all the transactions made by accounts from district 5.",
    "predicted_sql": "SELECT * FROM trans WHERE account_id IN ( SELECT account_id FROM account WHERE district_id = 5 )",
    "gold_sql": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 166,
    "db_id": "financial",
    "question": "How many of the accounts are from Jesenik district?",
    "predicted_sql": "SELECT COUNT(account_id) FROM account WHERE district_id = ( SELECT district_id FROM district WHERE a2 = 'Jesenik' )",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 167,
    "db_id": "financial",
    "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "predicted_sql": "SELECT DISTINCT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued >= '1997-01-01' AND T1.type = 'junior'",
    "gold_sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
    "evidence": "After 1996 means date > = '1997-01-01",
    "difficulty": "simple"
  },
  {
    "question_id": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "predicted_sql": "SELECT CAST(SUM(IIF(T1.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.a11 > 10000",
    "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
    "difficulty": "moderate"
  },
  {
    "question_id": 169,
    "db_id": "financial",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "predicted_sql": "SELECT ( CAST(( SELECT SUM(T2.amount) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND strftime('%Y', T2.date) = '1997' ) - ( SELECT SUM(T2.amount) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND strftime('%Y', T2.date) = '1996' ) AS REAL) / ( SELECT SUM(T2.amount) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M' AND strftime('%Y', T2.date) = '1996' ) ) * 100 AS \"Growth Rate\" FROM client",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
    "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
    "difficulty": "challenging"
  },
  {
    "question_id": 170,
    "db_id": "financial",
    "question": "How many credit card withdrawals were recorded after 1995?",
    "predicted_sql": "SELECT COUNT(operation) FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) > '1995'",
    "gold_sql": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
    "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals",
    "difficulty": "simple"
  },
  {
    "question_id": 171,
    "db_id": "financial",
    "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
    "predicted_sql": "SELECT (SUM(CASE WHEN district.a3 = 'north Bohemia' THEN district.a16 ELSE 0 END) - SUM(CASE WHEN district.a3 = 'east Bohemia' THEN district.a16 ELSE 0 END)) AS CrimeDifference FROM district",
    "gold_sql": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
    "evidence": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16",
    "difficulty": "moderate"
  },
  {
    "question_id": 172,
    "db_id": "financial",
    "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
    "predicted_sql": "SELECT type, COUNT(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10 GROUP BY type",
    "gold_sql": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 173,
    "db_id": "financial",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "predicted_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539",
    "gold_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "evidence": "k_symbol refers to the purpose of payments",
    "difficulty": "challenging"
  },
  {
    "question_id": 174,
    "db_id": "financial",
    "question": "What year was account owner number 130 born?",
    "predicted_sql": "SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130 AND T2.type = 'OWNER'",
    "gold_sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 175,
    "db_id": "financial",
    "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'OWNER'",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
    "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "difficulty": "moderate"
  },
  {
    "question_id": 176,
    "db_id": "financial",
    "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "predicted_sql": "SELECT T1.amount, T1.payments FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 992",
    "gold_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 177,
    "db_id": "financial",
    "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
    "predicted_sql": "SELECT T1.gender, T4.balance FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
    "gold_sql": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 178,
    "db_id": "financial",
    "question": "Which kind of credit card does client number 9 possess?",
    "predicted_sql": "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9",
    "gold_sql": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 179,
    "db_id": "financial",
    "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
    "predicted_sql": "SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.client_id = 617 AND STRFTIME('%Y', T1.date) = '1998'",
    "gold_sql": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 180,
    "db_id": "financial",
    "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
    "predicted_sql": "SELECT client.client_id, client.birth_date FROM client INNER JOIN disp ON disp.client_id = client.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND district.a3 = 'east Bohemia';",
    "gold_sql": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
    "evidence": "",
    "difficulty": "moderate"
  },
  {
    "question_id": 181,
    "db_id": "financial",
    "question": "Please provide the IDs of the 3 female clients with the largest loans.",
    "predicted_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3;",
    "gold_sql": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
    "evidence": "Female refers to gender = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 182,
    "db_id": "financial",
    "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
    "predicted_sql": "SELECT COUNT(DISTINCT(D.client_id)) FROM disp AS D JOIN client AS C ON D.client_id = C.client_id JOIN trans AS T ON D.account_id = T.account_id WHERE C.gender = 'M' AND C.birth_date BETWEEN '1974-01-01' AND '1976-12-31' AND T.k_symbol = 'SIPO' AND T.amount > 4000",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
    "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
    "difficulty": "moderate"
  },
  {
    "question_id": 183,
    "db_id": "financial",
    "question": "How many accounts in Beroun were opened after 1996?",
    "predicted_sql": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.a2 = 'Beroun' AND STRFTIME('%Y', T1.date) > '1996'",
    "gold_sql": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 184,
    "db_id": "financial",
    "question": "How many female customers have a junior credit card?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
    "evidence": "Female refers to gender = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 185,
    "db_id": "financial",
    "question": "What proportion of customers who have accounts at the Prague branch are female?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.a3 = 'Prague'",
    "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
    "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
    "difficulty": "moderate"
  },
  {
    "question_id": 186,
    "db_id": "financial",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(c.client_id) FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN account AS a ON d.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE'",
    "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
    "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
    "difficulty": "moderate"
  },
  {
    "question_id": 187,
    "db_id": "financial",
    "question": "How many clients who choose statement of weekly issuance are Owner?",
    "predicted_sql": "SELECT COUNT(DISTINCT client.client_id) FROM client JOIN disp ON client.client_id = disp.client_id JOIN account ON disp.account_id = account.account_id WHERE disp.type = 'USER' AND account.frequency = 'POPLATEK TYDNE'",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
    "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance",
    "difficulty": "simple"
  },
  {
    "question_id": 188,
    "db_id": "financial",
    "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
    "predicted_sql": "SELECT T1.account_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration > 24 AND T1.date < '1997-01-01' ORDER BY T2.amount ASC LIMIT 1",
    "gold_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
    "evidence": "",
    "difficulty": "moderate"
  },
  {
    "question_id": 189,
    "db_id": "financial",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "predicted_sql": "SELECT T4.account AS 'account_number' FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id INNER JOIN district AS T5 ON T1.district_id = T5.district_id WHERE T1.gender = 'F' GROUP BY T1.client_id ORDER BY T1.birth_date DESC, T5.a11 ASC LIMIT 1;",
    "gold_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND T2.A11 = (SELECT MIN(T2.A11) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F'))",
    "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
    "difficulty": "moderate"
  },
  {
    "question_id": 190,
    "db_id": "financial",
    "question": "How many clients who were born in 1920 stay in east Bohemia?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.a3 = 'east Bohemia'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
    "evidence": "East Bohemia appears in the column A3, which refers to the region.",
    "difficulty": "simple"
  },
  {
    "question_id": 191,
    "db_id": "financial",
    "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
    "predicted_sql": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
    "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
    "difficulty": "simple"
  },
  {
    "question_id": 192,
    "db_id": "financial",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "predicted_sql": "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE (T1.status = 'C' OR T1.status = 'D') AND T2.frequency = 'POPLATEK PO OBRATU'",
    "gold_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
    "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "difficulty": "moderate"
  },
  {
    "question_id": 193,
    "db_id": "financial",
    "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
    "predicted_sql": "SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'",
    "gold_sql": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
    "evidence": "Only the owner accounts have the right to issue permanent orders or apply for loans",
    "difficulty": "moderate"
  },
  {
    "question_id": 194,
    "db_id": "financial",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "predicted_sql": "SELECT T1.client_id, (CURRENT_DATE - T1.birth_date) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4 ON T2.account_id = T4.account_id WHERE T3.type = 'gold' AND T4.status IN ('A', 'B')",
    "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
    "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
    "difficulty": "moderate"
  },
  {
    "question_id": 195,
    "db_id": "toxicology",
    "question": "What is the most common bond type?",
    "predicted_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "evidence": "most common bond type refers MAX(COUNT(bond_type))",
    "difficulty": "simple"
  },
  {
    "question_id": 196,
    "db_id": "toxicology",
    "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' AND T2.element = 'cl'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
    "evidence": "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'",
    "difficulty": "simple"
  },
  {
    "question_id": 197,
    "db_id": "toxicology",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "predicted_sql": "SELECT AVG(CASE WHEN atom.element = 'o' THEN 1 ELSE 0 END) AS avg_oxygen_atoms FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '-'",
    "gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
    "difficulty": "moderate"
  },
  {
    "question_id": 198,
    "db_id": "toxicology",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "gold_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
    "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
    "difficulty": "challenging"
  },
  {
    "question_id": 199,
    "db_id": "toxicology",
    "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
    "evidence": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'",
    "difficulty": "simple"
  },
  {
    "question_id": 200,
    "db_id": "toxicology",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "predicted_sql": "SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN ( SELECT molecule_id FROM bond WHERE bond_type = '#' )",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
    "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
    "difficulty": "simple"
  },
  {
    "question_id": 201,
    "db_id": "toxicology",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T3.bond_type = 'double'",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
    "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
    "difficulty": "moderate"
  },
  {
    "question_id": 202,
    "db_id": "toxicology",
    "question": "How many triple type bonds are there?",
    "predicted_sql": "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '#'",
    "gold_sql": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
    "evidence": "triple type bonds refers to bond_type = '#'",
    "difficulty": "simple"
  },
  {
    "question_id": 203,
    "db_id": "toxicology",
    "question": "In how many atoms is there no bromine?",
    "predicted_sql": "SELECT COUNT(atom_id) FROM atom WHERE element != 'br'",
    "gold_sql": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
    "evidence": "atoms with no bromine refers to element ! = 'br'",
    "difficulty": "simple"
  },
  {
    "question_id": 204,
    "db_id": "toxicology",
    "question": "Of the first 100 molecules in number order, how many are carcinogenic?",
    "predicted_sql": "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+' AND molecule_id BETWEEN 'TR000' AND 'TR099'",
    "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'",
    "evidence": "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 205,
    "db_id": "toxicology",
    "question": "Identify by their ID the molecules in which there is carbon.",
    "predicted_sql": "SELECT molecule_id FROM atom WHERE element = 'si'",
    "gold_sql": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'c'",
    "evidence": "carbon refers to element = 'c';",
    "difficulty": "simple"
  },
  {
    "question_id": 206,
    "db_id": "toxicology",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
    "difficulty": "challenging"
  },
  {
    "question_id": 207,
    "db_id": "toxicology",
    "question": "What elements are in a double type bond?",
    "predicted_sql": "SELECT DISTINCT T2.element FROM bond AS T1 INNER JOIN connected AS T3 ON T1.bond_id = T3.bond_id INNER JOIN atom AS T2 ON T3.atom_id = T2.atom_id WHERE T1.bond_type = '='",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "evidence": "double type bond refers to bond_type = '=';",
    "difficulty": "challenging"
  },
  {
    "question_id": 208,
    "db_id": "toxicology",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "predicted_sql": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
    "gold_sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
    "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
    "difficulty": "moderate"
  },
  {
    "question_id": 209,
    "db_id": "toxicology",
    "question": "Chlorine is in what type of bond?",
    "predicted_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'Te'",
    "gold_sql": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'cl'",
    "evidence": "type of bond refers to bond_type; chlorine refers to element = 'cl'",
    "difficulty": "simple"
  },
  {
    "question_id": 210,
    "db_id": "toxicology",
    "question": "What atoms are connected in single type bonds?",
    "predicted_sql": "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '-'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
    "evidence": "single type bond refers to bond_type = '-';",
    "difficulty": "simple"
  },
  {
    "question_id": 211,
    "db_id": "toxicology",
    "question": "Indicate which atoms are connected in non-carcinogenic type molecules.",
    "predicted_sql": "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id INNER JOIN molecule AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.label = '-'",
    "gold_sql": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 212,
    "db_id": "toxicology",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(T1.element) ASC LIMIT 1",
    "gold_sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
    "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));",
    "difficulty": "challenging"
  },
  {
    "question_id": 213,
    "db_id": "toxicology",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "predicted_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id=T2.bond_id WHERE (T2.atom_id ='TR004_8' AND T2.atom_id2 = 'TR004_20') OR (T2.atom_id ='TR004_20' AND T2.atom_id2 = 'TR004_8')",
    "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
    "difficulty": "moderate"
  },
  {
    "question_id": 214,
    "db_id": "toxicology",
    "question": "What type of label is not on molecules with atoms with tin?",
    "predicted_sql": "SELECT label FROM molecule WHERE molecule_id NOT IN ( SELECT molecule_id FROM atom WHERE element = 'sn')",
    "gold_sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
    "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 215,
    "db_id": "toxicology",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "predicted_sql": "SELECT COUNT(A.atom_id) FROM atom AS A INNER JOIN connected AS C ON A.atom_id = C.atom_id INNER JOIN bond AS B ON C.bond_id = B.bond_id WHERE (A.element = 'i' OR A.element = 's') AND B.bond_type = '-'",
    "gold_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
    "difficulty": "challenging"
  },
  {
    "question_id": 216,
    "db_id": "toxicology",
    "question": "Identify all connected atoms with a triple bond.",
    "predicted_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "evidence": "triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 217,
    "db_id": "toxicology",
    "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.",
    "predicted_sql": "SELECT DISTINCT A1.atom_id FROM atom AS A1 INNER JOIN connected AS C ON A1.atom_id = C.atom_id INNER JOIN atom AS A2 ON C.atom_id2 = A2.atom_id INNER JOIN molecule AS M ON A2.molecule_id = M.molecule_id WHERE M.molecule_id = 'TR181'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'",
    "evidence": "TR181 molecule refers to molecule_id = 'TR181'",
    "difficulty": "simple"
  },
  {
    "question_id": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.element != 'f' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
    "difficulty": "challenging"
  },
  {
    "question_id": 219,
    "db_id": "toxicology",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
    "difficulty": "challenging"
  },
  {
    "question_id": 220,
    "db_id": "toxicology",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "predicted_sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element ASC LIMIT 3",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "evidence": "TR000 is the molecule id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 221,
    "db_id": "toxicology",
    "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?",
    "predicted_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.molecule_id = 'TR001' AND T1.bond_id = 'TR001_2_6'",
    "gold_sql": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'",
    "evidence": "TR001 is the molecule id; TR001_2_6 is the bond id",
    "difficulty": "simple"
  },
  {
    "question_id": 222,
    "db_id": "toxicology",
    "question": "What is the difference between the number of molecules that are carcinogenic and those that are not?",
    "predicted_sql": "SELECT SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) - SUM(CASE WHEN label = '-' THEN 1 ELSE 0 END) AS diff FROM molecule",
    "gold_sql": "SELECT COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) - COUNT(CASE WHEN T.label = '-' THEN T.molecule_id ELSE NULL END) AS diff_car_notcar FROM molecule t",
    "evidence": "label = '+' means molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; difference = SUBTRACT(SUM(label = '+'), SUM(label = '-'))",
    "difficulty": "moderate"
  },
  {
    "question_id": 223,
    "db_id": "toxicology",
    "question": "What are the atom IDs of the bond TR000_2_5?",
    "predicted_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR_000_2_5'",
    "gold_sql": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
    "evidence": "TR000_2_5 is the bond id",
    "difficulty": "simple"
  },
  {
    "question_id": 224,
    "db_id": "toxicology",
    "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
    "predicted_sql": "SELECT bond_id FROM connected WHERE atom_id2 = 'TR000_2'",
    "gold_sql": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
    "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2",
    "difficulty": "simple"
  },
  {
    "question_id": 225,
    "db_id": "toxicology",
    "question": "Please list top five molecules that have double bonds in alphabetical order.",
    "predicted_sql": "SELECT m.label FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id INNER JOIN connected AS c ON a.atom_id = c.atom_id INNER JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.bond_type = ' = ' GROUP BY m.molecule_id ORDER BY m.label ASC LIMIT 5",
    "gold_sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' ORDER BY T.molecule_id LIMIT 5",
    "evidence": "double bond refers to bond_type = ' = ';",
    "difficulty": "simple"
  },
  {
    "question_id": 226,
    "db_id": "toxicology",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.bond_id) FROM bond AS T1 WHERE T1.molecule_id = 'TR008'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
    "difficulty": "moderate"
  },
  {
    "question_id": 227,
    "db_id": "toxicology",
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(molecule_id) FROM molecule",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
    "difficulty": "simple"
  },
  {
    "question_id": 228,
    "db_id": "toxicology",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom.atom_id) FROM atom WHERE atom.molecule_id = 'TR206'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
    "difficulty": "moderate"
  },
  {
    "question_id": 229,
    "db_id": "toxicology",
    "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
    "predicted_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR000'",
    "gold_sql": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
    "evidence": "type of bond refers to bond_type; TR000 is the molecule id",
    "difficulty": "simple"
  },
  {
    "question_id": 230,
    "db_id": "toxicology",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "predicted_sql": "SELECT m.label, a.element FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id WHERE m.molecule_id = 'TR060'",
    "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "evidence": "TR060 is the molecule id; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 231,
    "db_id": "toxicology",
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "predicted_sql": "SELECT T2.bond_type, T1.label AS Carcinogenic FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR018' GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_type) DESC LIMIT 1",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
    "difficulty": "challenging"
  },
  {
    "question_id": 232,
    "db_id": "toxicology",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "predicted_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id INNER JOIN atom AS T5 ON T3.atom_id2 = T5.atom_id WHERE T1.label != 'carcinogenic' AND T2.bond_type = 'single' GROUP BY T1.label HAVING COUNT(T2.bond_type) > 1 ORDER BY T1.label ASC LIMIT 3",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
    "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
    "difficulty": "moderate"
  },
  {
    "question_id": 233,
    "db_id": "toxicology",
    "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
    "predicted_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR006' ORDER BY T1.bond_id ASC LIMIT 2",
    "gold_sql": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
    "evidence": "TR006 is the molecule id",
    "difficulty": "simple"
  },
  {
    "question_id": 234,
    "db_id": "toxicology",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "predicted_sql": "SELECT COUNT(bond_id) FROM connected WHERE (bond_id LIKE 'TR009_%') AND (atom_id = 'TR009_12' OR atom_id2 = 'TR009_12')",
    "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
    "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
    "difficulty": "moderate"
  },
  {
    "question_id": 235,
    "db_id": "toxicology",
    "question": "How many molecules are carcinogenic and have the bromine element?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'br'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'",
    "evidence": "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'",
    "difficulty": "simple"
  },
  {
    "question_id": 236,
    "db_id": "toxicology",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "predicted_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'",
    "gold_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "evidence": "atoms refer to atom_id or atom_id2",
    "difficulty": "moderate"
  },
  {
    "question_id": 237,
    "db_id": "toxicology",
    "question": "Which molecule does the atom TR001_10 belong to? Please state whether this molecule is carcinogenic or not.",
    "predicted_sql": "SELECT T1.molecule_id, CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS is_carcinogenic FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_10';",
    "gold_sql": "SELECT T2.molecule_id , IIF(T2.label = '+', 'YES', 'NO') AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_10'",
    "evidence": "TR001_10 is the atom id; label = '+' mean molecules are carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 238,
    "db_id": "toxicology",
    "question": "How many molecules have a triple bond type?",
    "predicted_sql": "SELECT COUNT(DISTINCT molecule.molecule_id) FROM molecule INNER JOIN bond ON molecule.molecule_id = bond.molecule_id WHERE bond.bond_type = '#'",
    "gold_sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
    "evidence": "triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 239,
    "db_id": "toxicology",
    "question": "How many connections does the atom 19 have?",
    "predicted_sql": "SELECT COUNT(bond_id) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19'",
    "gold_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
    "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';",
    "difficulty": "simple"
  },
  {
    "question_id": 240,
    "db_id": "toxicology",
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "predicted_sql": "SELECT element FROM atom WHERE molecule_id = 'TR004'",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
    "evidence": "TR004 is the molecule id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 241,
    "db_id": "toxicology",
    "question": "How many of the molecules are not carcinogenic?",
    "predicted_sql": "SELECT COUNT(molecule_id) FROM molecule WHERE label = '-'",
    "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 242,
    "db_id": "toxicology",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "predicted_sql": "SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN (SELECT molecule_id FROM atom WHERE SUBSTRING(atom_id, 7, 2) >= 21 AND SUBSTRING(atom_id, 7, 2) <= 25)",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
    "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 243,
    "db_id": "toxicology",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "predicted_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element IN ('P', 'N') GROUP BY T1.bond_id HAVING COUNT(DISTINCT T3.element) = 2",
    "gold_sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
    "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
    "difficulty": "moderate"
  },
  {
    "question_id": 244,
    "db_id": "toxicology",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "predicted_sql": "SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS Is_Carcinogenic FROM molecule AS T1 INNER JOIN ( SELECT molecule_id FROM bond WHERE bond_type = ' = ' GROUP BY molecule_id ORDER BY COUNT(*) DESC LIMIT 1 ) AS T2 ON T1.molecule_id = T2.molecule_id",
    "gold_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) AS bond_count FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT molecule_id, COUNT(bond_type) AS bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id) AS subquery) ORDER BY bond_count DESC) AS T2 ON T1.molecule_id = T2.molecule_id",
    "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 245,
    "db_id": "toxicology",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "predicted_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'I'",
    "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
    "difficulty": "moderate"
  },
  {
    "question_id": 246,
    "db_id": "toxicology",
    "question": "List the bond type and the bond ID of the atom 45.",
    "predicted_sql": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) + 0 = 45 OR SUBSTR(T2.atom_id2, 7, 2) + 0 = 45",
    "gold_sql": "SELECT T1.bond_type, T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE SUBSTR(T2.atom_id, 7, 2) = '45'",
    "evidence": "bond ID of atom 45 refers to SUBSTR(atom_id, 7, 2) + 0 = 45; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "difficulty": "moderate"
  },
  {
    "question_id": 247,
    "db_id": "toxicology",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "predicted_sql": "SELECT element FROM atom WHERE atom_id NOT IN ( SELECT atom_id FROM connected )",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
    "evidence": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
    "difficulty": "challenging"
  },
  {
    "question_id": 248,
    "db_id": "toxicology",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "predicted_sql": "SELECT T3.atom_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id OR T2.atom_id2 = T3.atom_id WHERE T1.molecule_id = 'TR447' AND T1.bond_type = '#'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "evidence": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 249,
    "db_id": "toxicology",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR144_8_19'",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "evidence": "TR144_8_19 is the bond id; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 250,
    "db_id": "toxicology",
    "question": "Of all the carcinogenic molecules, which one has the most double bonds?",
    "predicted_sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' and T1.bond_type = ' = ' GROUP BY T2.label ORDER BY COUNT(T1.bond_type) DESC LIMIT 1",
    "gold_sql": "SELECT T.molecule_id FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id) AS subquery) ORDER BY bond_count DESC) AS T",
    "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
    "difficulty": "moderate"
  },
  {
    "question_id": 251,
    "db_id": "toxicology",
    "question": "What is the least common element of all carcinogenic molecules?",
    "predicted_sql": "SELECT element FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+') GROUP BY element ORDER BY COUNT(*) ASC LIMIT 1",
    "gold_sql": "SELECT T.element FROM ( SELECT T2.element, COUNT(DISTINCT T2.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' GROUP BY T2.element ORDER BY COUNT(DISTINCT T2.molecule_id) LIMIT 1 ) t",
    "evidence": "label = '+' mean molecules are carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 252,
    "db_id": "toxicology",
    "question": "What are the atoms that can bond with the atom that has the element lead?",
    "predicted_sql": "SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
    "evidence": "atom that has the element lead refers to atom_id where element = 'pb'",
    "difficulty": "simple"
  },
  {
    "question_id": 253,
    "db_id": "toxicology",
    "question": "List the elements of all the triple bonds.",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#'",
    "gold_sql": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
    "evidence": "triple bond refers to bond_type = '#';",
    "difficulty": "challenging"
  },
  {
    "question_id": 254,
    "db_id": "toxicology",
    "question": "What percentage of bonds have the most common combination of atoms' elements?",
    "predicted_sql": "SELECT CAST(COUNT(T2.bond_id) AS FLOAT) * 100 / (SELECT COUNT(*) FROM bond) AS \"percentage\" FROM bond AS T1 INNER JOIN connected AS T2 ON T2.bond_id = T1.bond_id INNER JOIN atom AS T3 ON T3.atom_id = T2.atom_id GROUP BY T3.element ORDER BY COUNT(T2.bond_id) DESC LIMIT 1",
    "gold_sql": "SELECT CAST((SELECT COUNT(T1.atom_id) FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id GROUP BY T2.bond_type ORDER BY COUNT(T2.bond_id) DESC LIMIT 1 ) AS REAL) * 100 / ( SELECT COUNT(atom_id) FROM connected )",
    "evidence": "DIVIDE(COUNT(bond_id), COUNT(atom_id where MAX(COUNT(atom_id)) ))",
    "difficulty": "moderate"
  },
  {
    "question_id": 255,
    "db_id": "toxicology",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) / COUNT(T2.bond_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
    "evidence": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'",
    "difficulty": "moderate"
  },
  {
    "question_id": 256,
    "db_id": "toxicology",
    "question": "Calculate the total atoms consisting of the element carbon and hydrogen.",
    "predicted_sql": "SELECT COUNT(atom_id) FROM atom WHERE element IN ('c', 'h')",
    "gold_sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'",
    "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')",
    "difficulty": "simple"
  },
  {
    "question_id": 257,
    "db_id": "toxicology",
    "question": "List down atom id2 for atoms with element sulfur.",
    "predicted_sql": "SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
    "gold_sql": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
    "evidence": "element sulfur refers to element = 's'",
    "difficulty": "simple"
  },
  {
    "question_id": 258,
    "db_id": "toxicology",
    "question": "What are the bond type for atoms with element Tin?",
    "predicted_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id INNER JOIN bond AS T2 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'",
    "gold_sql": "SELECT DISTINCT T3.bond_type FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T3.bond_id = T2.bond_id WHERE T1.element = 'sn'",
    "evidence": "element Tin refers to element = 'sn'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#'",
    "difficulty": "moderate"
  },
  {
    "question_id": 259,
    "db_id": "toxicology",
    "question": "How many elements are there for single bond molecules?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "gold_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "evidence": "single bond refers to bond_type = '-';",
    "difficulty": "simple"
  },
  {
    "question_id": 260,
    "db_id": "toxicology",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "predicted_sql": "SELECT COUNT(DISTINCT atom.atom_id) FROM atom JOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2 JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')",
    "gold_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
    "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
    "difficulty": "moderate"
  },
  {
    "question_id": 261,
    "db_id": "toxicology",
    "question": "Write down bond id for molecules that are carcinogenic.",
    "predicted_sql": "SELECT T2.bond_id FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "gold_sql": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 262,
    "db_id": "toxicology",
    "question": "Among the single bond molecule id, which molecules are not carcinogenic?",
    "predicted_sql": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-'",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';",
    "difficulty": "simple"
  },
  {
    "question_id": 263,
    "db_id": "toxicology",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN A.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(A.atom_id) AS \"percentage\" FROM atom A INNER JOIN connected C ON A.atom_id = C.atom_id INNER JOIN bond B ON C.bond_id = B.bond_id WHERE B.bond_type = '-';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
    "difficulty": "challenging"
  },
  {
    "question_id": 264,
    "db_id": "toxicology",
    "question": "What are the labels for TR000, TR001 and TR002?",
    "predicted_sql": "SELECT molecule_id, label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002');",
    "gold_sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
    "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 265,
    "db_id": "toxicology",
    "question": "List down the molecule id for non carcinogenic molecules.",
    "predicted_sql": "SELECT molecule_id FROM molecule WHERE label = '-'",
    "gold_sql": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 266,
    "db_id": "toxicology",
    "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.",
    "predicted_sql": "SELECT COUNT(molecule_id) FROM molecule WHERE molecule_id BETWEEN 'TR000' AND 'TR030' AND label = '+'",
    "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 267,
    "db_id": "toxicology",
    "question": "List down the bond type for molecules from molecule id TR000 to TR050.",
    "predicted_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id BETWEEN 'TR000' AND 'TR050'",
    "gold_sql": "SELECT T2.molecule_id, T2.bond_type FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id BETWEEN 'TR000' AND 'TR050'",
    "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "difficulty": "moderate"
  },
  {
    "question_id": 268,
    "db_id": "toxicology",
    "question": "What are the elements for bond id TR001_10_11?",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_10_11'",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
    "evidence": "TR001_10_11 is the bond id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 269,
    "db_id": "toxicology",
    "question": "How many bond id have element iodine?",
    "predicted_sql": "SELECT COUNT(DISTINCT b.bond_id) FROM bond b JOIN connected c ON b.bond_id = c.bond_id JOIN atom a ON c.atom_id = a.atom_id WHERE a.element = 'iodine'",
    "gold_sql": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'",
    "evidence": "iodine refers to element = 'i'",
    "difficulty": "simple"
  },
  {
    "question_id": 270,
    "db_id": "toxicology",
    "question": "Among the molecules with element Calcium, are they mostly carcinogenic or non carcinogenic?",
    "predicted_sql": "SELECT CASE WHEN COUNT(CASE WHEN T1.label = '+' THEN 1 ELSE NULL END) > COUNT(CASE WHEN T1.label = '-' THEN 1 ELSE NULL END) THEN 'Carcinogenic' ELSE 'Non-Carcinogenic' END AS 'Is_Carcinogenic' FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'Ca'",
    "gold_sql": "SELECT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca' GROUP BY T2.label ORDER BY COUNT(T2.label) DESC LIMIT 1",
    "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; MAX(label)",
    "difficulty": "moderate"
  },
  {
    "question_id": 271,
    "db_id": "toxicology",
    "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
    "predicted_sql": "SELECT CASE WHEN COUNT(DISTINCT element) = 2 THEN 'yes' ELSE 'no' END AS yn FROM atom WHERE (element = 'c' OR element = 'cl') AND atom_id IN (SELECT atom_id FROM connected WHERE bond_id = 'TR001_1_8')",
    "gold_sql": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
    "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'",
    "difficulty": "simple"
  },
  {
    "question_id": 272,
    "db_id": "toxicology",
    "question": "List down two molecule id of triple bond non carcinogenic molecules with element carbon.",
    "predicted_sql": "SELECT DISTINCT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T2.element = 'C' AND T3.bond_type = '#' AND T1.label = '-' LIMIT 2",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element = 'c' AND T2.label = '-'",
    "evidence": "carbon refers to element = 'c'; triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 273,
    "db_id": "toxicology",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
    "difficulty": "moderate"
  },
  {
    "question_id": 274,
    "db_id": "toxicology",
    "question": "List the toxicology elements associated with molecule TR001.",
    "predicted_sql": "SELECT T2.element FROM atom AS T2 INNER JOIN molecule AS T1 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR001'",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'",
    "evidence": "TR001 is the molecule id",
    "difficulty": "simple"
  },
  {
    "question_id": 275,
    "db_id": "toxicology",
    "question": "Give me the molecule ID of the double bond type.",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_type = ' = '",
    "gold_sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
    "evidence": "double bond refers to bond_type = ' = ';",
    "difficulty": "simple"
  },
  {
    "question_id": 276,
    "db_id": "toxicology",
    "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.",
    "predicted_sql": "SELECT T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_type = '#'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'",
    "evidence": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 277,
    "db_id": "toxicology",
    "question": "What are the toxicology elements associated with bond ID TR000_1_2?",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR005_16_26'",
    "gold_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_1_2'",
    "evidence": "TR000_1_2 is the bond id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 278,
    "db_id": "toxicology",
    "question": "How many of the single bond type molecules are non-carcinogenic?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.label = '-'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';",
    "difficulty": "simple"
  },
  {
    "question_id": 279,
    "db_id": "toxicology",
    "question": "What is the label for bond ID TR001_10_11?",
    "predicted_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_10_11'",
    "gold_sql": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'",
    "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 280,
    "db_id": "toxicology",
    "question": "Enumerate the bond ID of triple bond type molecules and tell me if they are carcinogenic or not.",
    "predicted_sql": "SELECT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE bond_type = '#'",
    "gold_sql": "SELECT DISTINCT T1.bond_id, T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "evidence": "triple bond refers to bond_type = '#'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 281,
    "db_id": "toxicology",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "predicted_sql": "SELECT T1.element AS Toxicology_Element, COUNT(*) AS Tally FROM molecule AS T2 INNER JOIN atom AS T1 ON T2.molecule_id = T1.molecule_id WHERE T2.label = '+' AND substr(T1.atom_id, 7, 1) = '4' AND T1.element IN ('cl', 'c', 'h', 'o', 's', 'n', 'p', 'na', 'br', 'f', 'i', 'sn', 'pb', 'te', 'ca') GROUP BY T1.element ORDER BY COUNT(*) DESC",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
    "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 282,
    "db_id": "toxicology",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.element = 'h' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.element), T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006'",
    "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
    "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "challenging"
  },
  {
    "question_id": 283,
    "db_id": "toxicology",
    "question": "Identify whether the chemical compound that contains Calcium is carcinogenic.",
    "predicted_sql": "SELECT m.label as Molecule_Label FROM molecule AS m INNER JOIN atom AS a ON m.molecule_id = a.molecule_id INNER JOIN bond AS b ON a.molecule_id = b.molecule_id WHERE a.element = 'ca'",
    "gold_sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'ca'",
    "evidence": "calcium refers to element = 'ca'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic;",
    "difficulty": "moderate"
  },
  {
    "question_id": 284,
    "db_id": "toxicology",
    "question": "Determine the bond type that is formed in the chemical compound containing element Carbon.",
    "predicted_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.bond_id = T3.bond_id WHERE T1.element = 'Te'",
    "gold_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
    "evidence": "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "difficulty": "moderate"
  },
  {
    "question_id": 285,
    "db_id": "toxicology",
    "question": "Name chemical elements that form a bond TR001_10_11.",
    "predicted_sql": "SELECT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id OR connected.atom_id2 = atom.atom_id WHERE connected.bond_id = 'TR001_10_11'",
    "gold_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_id = 'TR001_10_11'",
    "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium; TR001_10_11 is the bond id; molecule id refers to SUBSTR(bond_id, 1, 5); atom 1 refers to SUBSTR(bond_id, 7, 2); atom 2 refers to SUBSTR(bond_id, 10, 2)",
    "difficulty": "challenging"
  },
  {
    "question_id": 286,
    "db_id": "toxicology",
    "question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.bond_type = '#' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.label) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T",
    "evidence": "triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 287,
    "db_id": "toxicology",
    "question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN bond_type = ' = ' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(bond_id) FROM bond WHERE molecule_id = 'TR047'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
    "evidence": "TR047 is the molecule id; double bond refers to bond_type = ' = '; percentage = DIVIDE(SUM(bond_type = ' = '), COUNT(all bond_id)) as percent where molecule_id = 'TR047'",
    "difficulty": "moderate"
  },
  {
    "question_id": 288,
    "db_id": "toxicology",
    "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
    "predicted_sql": "SELECT CASE WHEN T1.label = '+' THEN 'Yes' ELSE 'No' END AS result FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR001_1'",
    "gold_sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 289,
    "db_id": "toxicology",
    "question": "Is molecule TR151 carcinogenic?",
    "predicted_sql": "SELECT CASE WHEN label = '+' THEN 'YES' ELSE 'NO' END FROM molecule WHERE molecule_id = 'TR151'",
    "gold_sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 290,
    "db_id": "toxicology",
    "question": "Which toxic element can be found in the molecule TR151?",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR151' AND T1.element IN ('cl', 'br', 'f', 'i', 'sn', 'pb', 'te')",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
    "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 291,
    "db_id": "toxicology",
    "question": "How many chemical compounds in the database are identified as carcinogenic.",
    "predicted_sql": "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'",
    "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 292,
    "db_id": "toxicology",
    "question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.",
    "predicted_sql": "SELECT atom_id FROM atom WHERE element = 'c' AND substr(molecule_id, 3, 3) BETWEEN 10 AND 50",
    "gold_sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'",
    "evidence": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>=10 AND substr(molecule_id, 3, 3) <= 50",
    "difficulty": "simple"
  },
  {
    "question_id": 293,
    "db_id": "toxicology",
    "question": "How many atoms belong to the molecule labeled with carcinogenic compounds?",
    "predicted_sql": "SELECT COUNT(atom_id) FROM atom WHERE molecule_id IN ( SELECT molecule_id FROM molecule WHERE label = '+' )",
    "gold_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 294,
    "db_id": "toxicology",
    "question": "Which bond ids are double-bond with carcinogenic compound?",
    "predicted_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='",
    "gold_sql": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='",
    "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
    "difficulty": "simple"
  },
  {
    "question_id": 295,
    "db_id": "toxicology",
    "question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'H' AND T1.label = '+'",
    "gold_sql": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'",
    "evidence": "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'",
    "difficulty": "simple"
  },
  {
    "question_id": 296,
    "db_id": "toxicology",
    "question": "Indicate the molecule id is belonging to the TR000_1_2 bond that has the first atom named TR000_1.",
    "predicted_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_id = 'TR00_1_2' AND T3.atom_id = 'TR00_1'",
    "gold_sql": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 297,
    "db_id": "toxicology",
    "question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?",
    "predicted_sql": "SELECT atom_id FROM atom WHERE element = 'C' AND molecule_id NOT IN ( SELECT molecule_id FROM molecule WHERE label = '-' )",
    "gold_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'",
    "difficulty": "simple"
  },
  {
    "question_id": 298,
    "db_id": "toxicology",
    "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN M.label = '+' AND A.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT M.molecule_id) FROM molecule AS M INNER JOIN atom AS A ON M.molecule_id = A.molecule_id",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0",
    "difficulty": "moderate"
  },
  {
    "question_id": 299,
    "db_id": "toxicology",
    "question": "Is molecule TR124 carcinogenic?",
    "predicted_sql": "SELECT CASE WHEN label = '+' THEN 'YES' ELSE 'NO' END FROM molecule WHERE molecule_id = 'TR124'",
    "gold_sql": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 300,
    "db_id": "toxicology",
    "question": "What atoms comprise TR186?",
    "predicted_sql": "SELECT T2.atom_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR186'",
    "gold_sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
    "evidence": "TR186 is a molecule id",
    "difficulty": "simple"
  },
  {
    "question_id": 301,
    "db_id": "toxicology",
    "question": "What is the bond type of TR007_4_19?",
    "predicted_sql": "SELECT bond_type FROM bond WHERE bond_id = 'TR007_4_19'",
    "gold_sql": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'",
    "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 302,
    "db_id": "toxicology",
    "question": "Name the elements that comprise the atoms of bond TR001_2_4.",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
    "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 303,
    "db_id": "toxicology",
    "question": "How many double bonds does TR006 have and is it carcinogenic?",
    "predicted_sql": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 LEFT JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = ' = ' AND T2.molecule_id = 'TR006'",
    "gold_sql": "SELECT COUNT(T1.bond_id), T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.molecule_id = 'TR006' GROUP BY T2.label",
    "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic; double bond refers to bond_type = ' = ';",
    "difficulty": "moderate"
  },
  {
    "question_id": 304,
    "db_id": "toxicology",
    "question": "List all carcinogenic molecules and their elements.",
    "predicted_sql": "SELECT T1.label AS 'Molecular Label', T2.element AS 'Element' FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "gold_sql": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 305,
    "db_id": "toxicology",
    "question": "Name all bonds with single bond types and what atoms are connected to the molecules.",
    "predicted_sql": "SELECT T1.bond_id, T1.molecule_id, T3.atom_id, T3.element, T4.atom_id AS connected_atom_id, T4.element AS connected_element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id INNER JOIN atom AS T4 ON T2.atom_id2 = T4.atom_id WHERE T1.bond_type = '-'",
    "gold_sql": "SELECT T1.bond_id, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'",
    "evidence": "single bond refers to bond_type = '-';",
    "difficulty": "simple"
  },
  {
    "question_id": 306,
    "db_id": "toxicology",
    "question": "Which molecules have triple bonds and list all the elements they contain.",
    "predicted_sql": "SELECT T3.label, T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id OR T1.atom_id = T2.atom_id2 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id INNER JOIN bond AS T4 ON T2.bond_id = T4.bond_id WHERE T4.bond_type = '#' GROUP BY T3.molecule_id",
    "gold_sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "evidence": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 307,
    "db_id": "toxicology",
    "question": "Name the atoms' elements that form bond TR000_2_3.",
    "predicted_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR000_2_3'",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR000_2_3'",
    "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 308,
    "db_id": "toxicology",
    "question": "How many bonds are created by bonding atoms with chlorine element?",
    "predicted_sql": "SELECT COUNT(bond_id) FROM bond WHERE bond_id IN ( SELECT bond_id FROM connected WHERE atom_id IN ( SELECT atom_id FROM atom WHERE element = 'cl' ) )",
    "gold_sql": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'",
    "evidence": "chlorine refers to element = 'cl'",
    "difficulty": "simple"
  },
  {
    "question_id": 309,
    "db_id": "toxicology",
    "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
    "predicted_sql": "SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) FROM atom INNER JOIN bond ON atom.molecule_id=bond.molecule_id WHERE atom.molecule_id='TR346' GROUP BY atom.atom_id",
    "gold_sql": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 310,
    "db_id": "toxicology",
    "question": "How many molecules have a double bond type and among these molecule, how many are labeled as carcinogenic compound?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id), COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '=' AND T2.label = '+'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.molecule_id), SUM(CASE WHEN T2.label = '+' THEN 1 ELSE 0 END) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '='",
    "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic;",
    "difficulty": "moderate"
  },
  {
    "question_id": 311,
    "db_id": "toxicology",
    "question": "How many molecules without sulphur element is not having double bond?",
    "predicted_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m LEFT JOIN atom a ON m.molecule_id = a.molecule_id LEFT JOIN connected c ON a.atom_id = c.atom_id LEFT JOIN bond b ON c.bond_id = b.bond_id WHERE NOT EXISTS ( SELECT 1 FROM atom a2 WHERE a2.molecule_id = m.molecule_id AND a2.element = 's' ) AND NOT EXISTS ( SELECT 1 FROM connected c2 INNER JOIN bond b2 ON c2.bond_id = b2.bond_id WHERE c2.atom_id = a.atom_id AND b2.bond_type = ' = ' )",
    "gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='",
    "evidence": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'",
    "difficulty": "simple"
  },
  {
    "question_id": 312,
    "db_id": "toxicology",
    "question": "What is the carcinogenic label for bond TR001_2_4?",
    "predicted_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_id = 'TR001_2_4' AND T1.label = '+'",
    "gold_sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'",
    "evidence": "label = '+' mean molecules are carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 313,
    "db_id": "toxicology",
    "question": "How many atoms belong to molecule id TR001?",
    "predicted_sql": "SELECT COUNT(atom_id) FROM atom WHERE molecule_id = 'TR005'",
    "gold_sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR001'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 314,
    "db_id": "toxicology",
    "question": "How many single bonds are there in the list?",
    "predicted_sql": "SELECT COUNT(bond_id) FROM bond WHERE bond_type = '-'",
    "gold_sql": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'",
    "evidence": "single bond refers to bond_type = '-';",
    "difficulty": "simple"
  },
  {
    "question_id": 315,
    "db_id": "toxicology",
    "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?",
    "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '+'",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 316,
    "db_id": "toxicology",
    "question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?",
    "predicted_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'C' AND T1.label = '-'",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 317,
    "db_id": "toxicology",
    "question": "Calculate the percentage of carcinogenic molecules which contain the Chlorine element.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'cl' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id",
    "gold_sql": "SELECT COUNT(CASE WHEN T2.label = '+' AND T1.element = 'cl' THEN T2.molecule_id ELSE NULL END) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'cl'), COUNT(molecule_id)) as percentage",
    "difficulty": "moderate"
  },
  {
    "question_id": 318,
    "db_id": "toxicology",
    "question": "What is the molecule id of bond id TR001_1_7?",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 319,
    "db_id": "toxicology",
    "question": "How many elements are contained in bond_id TR001_3_4?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.element) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_3_4'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.element) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_3_4'",
    "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 320,
    "db_id": "toxicology",
    "question": "What is the type of the bond which is presenting the connection between two atoms TR000_1 and TR000_2?",
    "predicted_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
    "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_1' AND T2.atom_id2 = 'TR000_2'",
    "evidence": "type of bond refers to bond_type; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "difficulty": "moderate"
  },
  {
    "question_id": 321,
    "db_id": "toxicology",
    "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
    "predicted_sql": "SELECT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
    "gold_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 322,
    "db_id": "toxicology",
    "question": "What is the element of toxicology for the atom with the ID of TR000_1?",
    "predicted_sql": "SELECT element FROM atom WHERE atom_id = 'TR000_1'",
    "gold_sql": "SELECT T.element FROM atom AS T WHERE T.atom_id = 'TR000_1'",
    "evidence": "atom with ID refers to atom_id; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 323,
    "db_id": "toxicology",
    "question": "Is molecule TR000 is carcinogenic or not?",
    "predicted_sql": "SELECT CASE WHEN label = '+' THEN 'Yes' ELSE 'No' END FROM molecule WHERE molecule_id = 'TR000'",
    "gold_sql": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'",
    "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 324,
    "db_id": "toxicology",
    "question": "Find the percentage of atoms with single bond.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(connected.bond_id) FROM connected INNER JOIN bond ON bond.bond_id = connected.bond_id",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t",
    "evidence": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage",
    "difficulty": "simple"
  },
  {
    "question_id": 325,
    "db_id": "toxicology",
    "question": "How many carcinogenic molecules that consisted of Nitrogen?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'n'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'",
    "evidence": "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 326,
    "db_id": "toxicology",
    "question": "Which molecule consisted of Sulphur atom with double bond?",
    "predicted_sql": "SELECT T4.label FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id INNER JOIN molecule AS T4 ON T1.molecule_id = T4.molecule_id WHERE T1.element = 's' AND T3.bond_type = ' = '",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='",
    "evidence": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';",
    "difficulty": "simple"
  },
  {
    "question_id": 327,
    "db_id": "toxicology",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5",
    "gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
    "difficulty": "moderate"
  },
  {
    "question_id": 328,
    "db_id": "toxicology",
    "question": "List all the elements with double bond, consisted in molecule TR024.",
    "predicted_sql": "SELECT DISTINCT T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T3.bond_id = T1.bond_id and (T3.atom_id = T2.atom_id or T3.atom_id2 = T2.atom_id) WHERE T1.bond_type = '=' AND T1.molecule_id = 'TR024'",
    "gold_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR024' AND T2.bond_type = '='",
    "evidence": "double bond refers to bond_type = '='; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 329,
    "db_id": "toxicology",
    "question": "Which carcinogenic molecule have the highest number of atoms consisted in it?",
    "predicted_sql": "SELECT molecule.label FROM molecule INNER JOIN atom ON molecule.molecule_id = atom.molecule_id WHERE molecule.label = '+' GROUP BY molecule.molecule_id ORDER BY COUNT(atom.atom_id) DESC LIMIT 1",
    "gold_sql": "SELECT T.molecule_id FROM ( SELECT T2.molecule_id, COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' GROUP BY T2.molecule_id ORDER BY COUNT(T1.atom_id) DESC LIMIT 1 ) t",
    "evidence": "label = '+' mean molecules are carcinogenic; molecule that have the highest number of atoms consisted in in refers to MAX(COUNT(atom.molecule_id))",
    "difficulty": "moderate"
  },
  {
    "question_id": 330,
    "db_id": "toxicology",
    "question": "Calculate the percentage of carcinogenic molecules with triple bonded Hidrogen atoms.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T2.atom_id = T3.atom_id INNER JOIN bond AS T4 ON T3.bond_id = T4.bond_id WHERE T2.element = 'h' AND T4.bond_type = '#'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T2.element = 'h'",
    "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) * 100.0 where element = 'h' AND bond_type = '#';",
    "difficulty": "challenging"
  },
  {
    "question_id": 331,
    "db_id": "toxicology",
    "question": "How many of the molecules are carcinogenic?",
    "predicted_sql": "SELECT COUNT(molecule_id) FROM molecule WHERE label = '+'",
    "gold_sql": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic;",
    "difficulty": "simple"
  },
  {
    "question_id": 332,
    "db_id": "toxicology",
    "question": "Among the molecules between TR004 to TR010, how many of them has single bonds?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '-' AND T1.molecule_id BETWEEN 'TR004' AND 'TR010'",
    "gold_sql": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'",
    "evidence": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';",
    "difficulty": "simple"
  },
  {
    "question_id": 333,
    "db_id": "toxicology",
    "question": "In the molecule TR008, how many carbons are present?",
    "predicted_sql": "SELECT COUNT(atom_id) FROM atom WHERE element = 'c' AND molecule_id = 'TR008'",
    "gold_sql": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'",
    "evidence": "carbon refers to element = 'c'",
    "difficulty": "simple"
  },
  {
    "question_id": 334,
    "db_id": "toxicology",
    "question": "What is the element with the atom ID of TR004_7 in molecule that is not carcinogenic?",
    "predicted_sql": "SELECT T2.element FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.atom_id = 'TR004_7' AND T1.label = '-'",
    "gold_sql": "SELECT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR004_7' AND T2.label = '-'",
    "evidence": "label = '-' means molecules are non-carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "difficulty": "challenging"
  },
  {
    "question_id": 335,
    "db_id": "toxicology",
    "question": "What is the total number of molecules with double bonded oxygen?",
    "predicted_sql": "SELECT COUNT(DISTINCT m.molecule_id) FROM molecule m JOIN atom a ON m.molecule_id = a.molecule_id JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'O' AND b.bond_type = '='",
    "gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'",
    "evidence": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';",
    "difficulty": "simple"
  },
  {
    "question_id": 336,
    "db_id": "toxicology",
    "question": "in molecules with triple bonds, how many of them are not carcinogenic?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'",
    "evidence": "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic",
    "difficulty": "simple"
  },
  {
    "question_id": 337,
    "db_id": "toxicology",
    "question": "List the element and bond type included in the molecule with molecule ID of TR002.",
    "predicted_sql": "SELECT a.element, b.bond_type FROM atom AS a JOIN connected AS c ON a.atom_id = c.atom_id JOIN bond AS b ON c.bond_id = b.bond_id WHERE a.molecule_id = 'TR016'",
    "gold_sql": "SELECT DISTINCT T1.element, T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR002'",
    "evidence": "TR002 is the molecule id",
    "difficulty": "challenging"
  },
  {
    "question_id": 338,
    "db_id": "toxicology",
    "question": "What is the atom ID of double bonded carbon in TR012 molecule?",
    "predicted_sql": "SELECT T3.atom_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = 'double' AND T3.element = 'carbon' AND T3.molecule_id = 'TR012'",
    "gold_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T2.molecule_id = 'TR012' AND T3.bond_type = '=' AND T1.element = 'c'",
    "evidence": "carbon refers to element = 'c'; double bond refers to bond_type = ' = ';",
    "difficulty": "moderate"
  },
  {
    "question_id": 339,
    "db_id": "toxicology",
    "question": "List the atom ID of the carcinogenic molecule that contains oxygen?",
    "predicted_sql": "SELECT T2.atom_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+' AND T2.element = 'o'",
    "gold_sql": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'",
    "difficulty": "simple"
  },
  {
    "question_id": 340,
    "db_id": "card_games",
    "question": "Which are the cards that have incredibly powerful foils.",
    "predicted_sql": "SELECT name FROM cards WHERE cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL",
    "gold_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
    "evidence": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 341,
    "db_id": "card_games",
    "question": "What are the borderless cards available without powerful foils?",
    "predicted_sql": "SELECT cards.name FROM cards WHERE cards.bordercolor = 'borderless' AND cards.cardkingdomfoilid IS NULL AND cards.cardkingdomid IS NOT NULL",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
    "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 342,
    "db_id": "card_games",
    "question": "List the card names with value that cost more converted mana for the face.",
    "predicted_sql": "SELECT name FROM cards WHERE faceconvertedmanacost = ( SELECT MAX(faceconvertedmanacost) FROM cards )",
    "gold_sql": "SELECT name FROM cards WHERE faceConvertedManaCost IS NOT NULL AND faceConvertedManaCost = (SELECT MAX(faceConvertedManaCost)  FROM cards  WHERE faceConvertedManaCost IS NOT NULL)",
    "evidence": "more converted mana for the face refers to Max(faceConvertedManaCost);",
    "difficulty": "simple"
  },
  {
    "question_id": 343,
    "db_id": "card_games",
    "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.",
    "predicted_sql": "SELECT name FROM cards WHERE frameversion = '2015' AND edhrecrank < 100",
    "gold_sql": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015",
    "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;",
    "difficulty": "simple"
  },
  {
    "question_id": 344,
    "db_id": "card_games",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'",
    "gold_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "difficulty": "moderate"
  },
  {
    "question_id": 345,
    "db_id": "card_games",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "predicted_sql": "SELECT T1.name, T4.status FROM cards AS T1 INNER JOIN legalities AS T4 ON T1.uuid = T4.uuid WHERE T1.types = 'Artifact' AND T1.side IS NULL AND T4.format = 'vintage'",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "difficulty": "moderate"
  },
  {
    "question_id": 346,
    "db_id": "card_games",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "predicted_sql": "SELECT T2.id, T2.artist FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE (T2.power = '*' OR T2.power IS NULL) AND T1.format = 'commander' AND T1.status = 'Legal'",
    "gold_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
    "evidence": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'",
    "difficulty": "moderate"
  },
  {
    "question_id": 347,
    "db_id": "card_games",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "predicted_sql": "SELECT T1.text, T1.hascontentwarning, T2.text AS ruling_text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "gold_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id",
    "difficulty": "moderate"
  },
  {
    "question_id": 348,
    "db_id": "card_games",
    "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
    "predicted_sql": "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Sublime Epiphany' AND T2.number = '74s'",
    "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
    "evidence": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;",
    "difficulty": "simple"
  },
  {
    "question_id": 349,
    "db_id": "card_games",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "predicted_sql": "SELECT T2.name, T2.artist, T2.ispromo FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T1.uuid ORDER BY COUNT(T1.uuid) DESC LIMIT 1",
    "gold_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
    "evidence": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
    "difficulty": "moderate"
  },
  {
    "question_id": 350,
    "db_id": "card_games",
    "question": "State the alternative languages available for card named Annul numbered 29.",
    "predicted_sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = '29'",
    "gold_sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
    "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';",
    "difficulty": "simple"
  },
  {
    "question_id": 351,
    "db_id": "card_games",
    "question": "Name all the cards which have alternative language in Japanese.",
    "predicted_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Japanese'",
    "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
    "evidence": "Japanese' is the language;",
    "difficulty": "simple"
  },
  {
    "question_id": 352,
    "db_id": "card_games",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
    "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
    "difficulty": "moderate"
  },
  {
    "question_id": 353,
    "db_id": "card_games",
    "question": "List all the sets available in Italian translation. State the total number of cards per set.",
    "predicted_sql": "SELECT T2.name, T2.totalSetSize FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T1.language = 'Italian'",
    "gold_sql": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
    "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;",
    "difficulty": "simple"
  },
  {
    "question_id": 354,
    "db_id": "card_games",
    "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
    "predicted_sql": "SELECT COUNT(DISTINCT types) FROM cards WHERE artist = 'Aaron Boyd'",
    "gold_sql": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
    "evidence": "Aaron Boyd' is artist;",
    "difficulty": "simple"
  },
  {
    "question_id": 355,
    "db_id": "card_games",
    "question": "What is the keyword found on card 'Angel of Mercy'?",
    "predicted_sql": "SELECT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "gold_sql": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
    "evidence": "Angel of Mercy' is the name of card;",
    "difficulty": "simple"
  },
  {
    "question_id": 356,
    "db_id": "card_games",
    "question": "How many cards have infinite power?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE power = '*'",
    "gold_sql": "SELECT COUNT(*) FROM cards WHERE power = '*'",
    "evidence": "infinite power refers to power = '*';",
    "difficulty": "simple"
  },
  {
    "question_id": 357,
    "db_id": "card_games",
    "question": "What type of promotion is of card 'Duress'?",
    "predicted_sql": "SELECT promotypes FROM cards WHERE name = 'Duress'",
    "gold_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "difficulty": "simple"
  },
  {
    "question_id": 358,
    "db_id": "card_games",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT bordercolor FROM cards WHERE name = 'Ancestor\\'s Chosen'",
    "gold_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "evidence": "name of card  = 'Ancestor''s Chosen' ;",
    "difficulty": "simple"
  },
  {
    "question_id": 359,
    "db_id": "card_games",
    "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "predicted_sql": "SELECT originaltype FROM cards WHERE name = 'Ancestor's Chosen'",
    "gold_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
    "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
    "difficulty": "simple"
  },
  {
    "question_id": 360,
    "db_id": "card_games",
    "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
    "predicted_sql": "SELECT T4.language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code INNER JOIN set_translations AS T4 ON T2.code = T4.setcode WHERE T1.name = 'Angel of Mercy' GROUP BY T4.language",
    "gold_sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
    "evidence": "Angel of Mercy' is the name of card;",
    "difficulty": "moderate"
  },
  {
    "question_id": 361,
    "db_id": "card_games",
    "question": "How many cards of legalities whose status is restricted have text boxes?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'restricted' AND T1.istextless = 0",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0",
    "evidence": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;",
    "difficulty": "simple"
  },
  {
    "question_id": 362,
    "db_id": "card_games",
    "question": "What is the description about the ruling of card \"Condemn\"?",
    "predicted_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'",
    "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;",
    "difficulty": "simple"
  },
  {
    "question_id": 363,
    "db_id": "card_games",
    "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
    "predicted_sql": "SELECT COUNT(cards.uuid) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Restricted' AND cards.isstarter = 1",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
    "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 364,
    "db_id": "card_games",
    "question": "What is the status of card \"Cloudchaser Eagle\"?",
    "predicted_sql": "SELECT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "difficulty": "simple"
  },
  {
    "question_id": 365,
    "db_id": "card_games",
    "question": "What is the type of card \"Benalish Knight\"?",
    "predicted_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight'",
    "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "evidence": "Benalish Knight' is the name of card;",
    "difficulty": "simple"
  },
  {
    "question_id": 366,
    "db_id": "card_games",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "predicted_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "gold_sql": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "difficulty": "simple"
  },
  {
    "question_id": 367,
    "db_id": "card_games",
    "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "predicted_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "difficulty": "simple"
  },
  {
    "question_id": 368,
    "db_id": "card_games",
    "question": "What is the percentage of borderless cards?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN bordercolor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100",
    "difficulty": "simple"
  },
  {
    "question_id": 369,
    "db_id": "card_games",
    "question": "How many cards that illusrtated in German have been reprinted?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.uuid) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.isreprint = 1",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1",
    "evidence": "German' is the language; reprinted refers to isReprint = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 370,
    "db_id": "card_games",
    "question": "How many borderless cards are illustrated in Russian?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.bordercolor = 'borderless' AND T2.language = 'Russian'",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'",
    "evidence": "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;",
    "difficulty": "simple"
  },
  {
    "question_id": 371,
    "db_id": "card_games",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN f.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data AS f INNER JOIN cards AS c ON f.uuid = c.uuid WHERE c.isstoryspotlight = 1",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
    "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 372,
    "db_id": "card_games",
    "question": "How many cards are there with toughness of 99?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE toughness = '99'",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE toughness = 99",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 373,
    "db_id": "card_games",
    "question": "Name the cards that were illustrated by Aaron Boyd.",
    "predicted_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd'",
    "gold_sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "evidence": "Aaron Boyd' is artist;",
    "difficulty": "simple"
  },
  {
    "question_id": 374,
    "db_id": "card_games",
    "question": "How many black border cards are only available on mtgo?",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE bordercolor = 'black' AND availability = 'mtgo'",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'",
    "evidence": "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'",
    "difficulty": "simple"
  },
  {
    "question_id": 375,
    "db_id": "card_games",
    "question": "List down all the card IDs with converted mana cost of 0.",
    "predicted_sql": "SELECT id FROM cards WHERE convertedmanacost = 0",
    "gold_sql": "SELECT id FROM cards WHERE convertedManaCost = 0",
    "evidence": "converted mana cost of 0 refers to covertedManaCost = 0;",
    "difficulty": "simple"
  },
  {
    "question_id": 376,
    "db_id": "card_games",
    "question": "What are the card layout of cards with keyword of flying?",
    "predicted_sql": "SELECT layout FROM cards WHERE keywords LIKE '%Flying%'",
    "gold_sql": "SELECT layout FROM cards WHERE keywords = 'Flying'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 377,
    "db_id": "card_games",
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE originaltype = 'Summon - Angel' AND subtypes != 'Angel'",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
    "evidence": "subtype other than Angel refers to subtypes is not 'Angel';",
    "difficulty": "simple"
  },
  {
    "question_id": 378,
    "db_id": "card_games",
    "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.",
    "predicted_sql": "SELECT id FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL",
    "gold_sql": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "evidence": "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;",
    "difficulty": "simple"
  },
  {
    "question_id": 379,
    "db_id": "card_games",
    "question": "What are the cards belong to duel deck a? List the ID.",
    "predicted_sql": "SELECT id FROM cards WHERE dueldeck = 'a'",
    "gold_sql": "SELECT id FROM cards WHERE duelDeck = 'a'",
    "evidence": "duel deck a refers to duelDeck = a;",
    "difficulty": "simple"
  },
  {
    "question_id": 380,
    "db_id": "card_games",
    "question": "List the edhrecRank for cards with frame version 2015.",
    "predicted_sql": "SELECT edhrecrank FROM cards WHERE frameversion = '2015'",
    "gold_sql": "SELECT edhrecRank FROM cards WHERE frameVersion = 2015",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 381,
    "db_id": "card_games",
    "question": "List down the name of artists for cards in Chinese Simplified.",
    "predicted_sql": "SELECT cards.artist FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Chinese Simplified'",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
    "evidence": "Chinese Simplified' is the language;",
    "difficulty": "simple"
  },
  {
    "question_id": 382,
    "db_id": "card_games",
    "question": "What are the cards that only available in paper and Japanese language?",
    "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
    "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;",
    "difficulty": "simple"
  },
  {
    "question_id": 383,
    "db_id": "card_games",
    "question": "How many of the banned cards are white border?",
    "predicted_sql": "SELECT COUNT(T1.uuid) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.bordercolor = 'white' AND T1.status = 'Banned'",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
    "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
    "difficulty": "simple"
  },
  {
    "question_id": 384,
    "db_id": "card_games",
    "question": "List down the uuid for legacy cards and the foreign language of these cards.",
    "predicted_sql": "SELECT T1.uuid, T2.language FROM legalities AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'legacy'",
    "gold_sql": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'",
    "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data",
    "difficulty": "simple"
  },
  {
    "question_id": 385,
    "db_id": "card_games",
    "question": "Write down the ruling of Beacon of Immortality.",
    "predicted_sql": "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Beacon of Immortality'",
    "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'",
    "evidence": "Beacon of Immortality' is the name of card;",
    "difficulty": "simple"
  },
  {
    "question_id": 386,
    "db_id": "card_games",
    "question": "How many cards are having future frame version and what are the legality status of these cards?",
    "predicted_sql": "SELECT COUNT(T2.uuid) AS Cards, T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.frameversion = 'future' AND T1.status = 'legal'",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
    "evidence": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';",
    "difficulty": "simple"
  },
  {
    "question_id": 387,
    "db_id": "card_games",
    "question": "What are the cards for set OGW? State the colour for these cards.",
    "predicted_sql": "SELECT cards.name, cards.colors FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE sets.code = 'OGW'",
    "gold_sql": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
    "evidence": "set OGW refers to setCode = 'OGW';",
    "difficulty": "simple"
  },
  {
    "question_id": 388,
    "db_id": "card_games",
    "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
    "predicted_sql": "SELECT T1.name as CardName, T3.translation as Translation, T3.language as Language FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code LEFT JOIN set_translations T3 ON T3.setcode = T2.code WHERE T1.convertedmanacost = 5 AND T2.code = '10E'",
    "gold_sql": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
    "evidence": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;",
    "difficulty": "simple"
  },
  {
    "question_id": 389,
    "db_id": "card_games",
    "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "predicted_sql": "SELECT T1.name, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originaltype = 'Creature - Elf'",
    "gold_sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "evidence": "Creature - Elf is the originalType;",
    "difficulty": "simple"
  },
  {
    "question_id": 390,
    "db_id": "card_games",
    "question": "What are the colors of cards from ID 1-20? What are the format of these cards?",
    "predicted_sql": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
    "gold_sql": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
    "evidence": "ID 1-20 refers to id BETWEEN 1 and 20;",
    "difficulty": "simple"
  },
  {
    "question_id": 391,
    "db_id": "card_games",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "predicted_sql": "SELECT cards.name, foreign_data.language FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originaltype = 'Artifact' AND cards.colors = 'B'",
    "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "difficulty": "moderate"
  },
  {
    "question_id": 392,
    "db_id": "card_games",
    "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "predicted_sql": "SELECT T2.name FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.rarity = 'uncommon' ORDER BY T1.date ASC LIMIT 3;",
    "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "evidence": "uncommon refers to rarity = 'uncommon';",
    "difficulty": "simple"
  },
  {
    "question_id": 393,
    "db_id": "card_games",
    "question": "On how many cards designed by John Avon is its foil non-powerful?",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE artist ='John Avon' AND cardkingdomid IS NOT NULL AND cardkingdomfoilid IS NOT NULL AND power IS NULL",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE (cardKingdomId IS NULL OR cardKingdomFoilId IS NULL) AND artist = 'John Avon'",
    "evidence": "John Avon refer to artist; foil poweful foils refers to cardKingdomId and cardKingdomFoildId is NOT NULL \n",
    "difficulty": "simple"
  },
  {
    "question_id": 394,
    "db_id": "card_games",
    "question": "How many white bordered cards are powerful?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE bordercolor = 'white' AND cardkingdomfoilid = cardKingdomId AND cardKingdomId IS NOT NULL",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)",
    "difficulty": "simple"
  },
  {
    "question_id": 395,
    "db_id": "card_games",
    "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE artist LIKE 'UDON' AND availability LIKE 'mtgo' AND hand = -1",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'mtgo' ",
    "evidence": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1",
    "difficulty": "simple"
  },
  {
    "question_id": 396,
    "db_id": "card_games",
    "question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE frameversion = '1993' AND availability = 'paper' AND hascontentwarning = 1",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1",
    "evidence": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion",
    "difficulty": "simple"
  },
  {
    "question_id": 397,
    "db_id": "card_games",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "predicted_sql": "SELECT name, manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND (availability = 'paper' OR availability = 'mtgo')",
    "gold_sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "evidence": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'",
    "difficulty": "moderate"
  },
  {
    "question_id": 398,
    "db_id": "card_games",
    "question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "predicted_sql": "SELECT SUM(convertedmanacost) FROM cards WHERE artist = 'Rob Alexander'",
    "gold_sql": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "difficulty": "simple"
  },
  {
    "question_id": 399,
    "db_id": "card_games",
    "question": "Lists all types of cards available in arena.",
    "predicted_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena'",
    "gold_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'",
    "difficulty": "simple"
  },
  {
    "question_id": 400,
    "db_id": "card_games",
    "question": "Lists the set code of all cards translated into Spanish.",
    "predicted_sql": "SELECT setcode FROM set_translations WHERE language = 'Spanish'",
    "gold_sql": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "evidence": "Spanish refer to language; set code refers to setCode",
    "difficulty": "simple"
  },
  {
    "question_id": 401,
    "db_id": "card_games",
    "question": "What percentage of legendary frame effect cards that are only available in online game variations?",
    "predicted_sql": "SELECT CAST(COUNT(*) AS REAL) / (SELECT COUNT(*) FROM cards WHERE frameeffects = 'legendary') * 100 AS percentage FROM cards WHERE hand = '+3' AND frameeffects = 'legendary'",
    "gold_sql": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
    "evidence": "only available in online game variationsrefer to isOnlineOnly =1 ; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'",
    "difficulty": "moderate"
  },
  {
    "question_id": 402,
    "db_id": "card_games",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN istextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(istextless) AS \"Percentage\", id FROM cards WHERE isstoryspotlight = 1 GROUP BY id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "evidence": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 403,
    "db_id": "card_games",
    "question": "Calculate the percentage of cards in Spanish. List them by name.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name",
    "gold_sql": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ), name FROM foreign_data WHERE language = 'Spanish'",
    "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100",
    "difficulty": "simple"
  },
  {
    "question_id": 404,
    "db_id": "card_games",
    "question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.",
    "predicted_sql": "SELECT DISTINCT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T1.basesetsize = 309",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309",
    "evidence": "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n",
    "difficulty": "simple"
  },
  {
    "question_id": 405,
    "db_id": "card_games",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.setcode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T1.language = 'Portuguese (Brasil)' AND T2.block = 'Commander'",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "evidence": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
    "difficulty": "moderate"
  },
  {
    "question_id": 406,
    "db_id": "card_games",
    "question": "Lists by ID all Creature-type cards with legal status.",
    "predicted_sql": "SELECT T2.id FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.status = 'Legal' AND T2.types = 'Creature'",
    "gold_sql": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
    "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature';",
    "difficulty": "simple"
  },
  {
    "question_id": 407,
    "db_id": "card_games",
    "question": "Lists all types of cards in German.",
    "predicted_sql": "SELECT DISTINCT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "gold_sql": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "difficulty": "moderate"
  },
  {
    "question_id": 408,
    "db_id": "card_games",
    "question": "How many unknown power cards contain info about the triggered ability",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND id IN (SELECT id FROM rulings WHERE text LIKE '%triggered ability%')",
    "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
    "evidence": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
    "difficulty": "moderate"
  },
  {
    "question_id": 409,
    "db_id": "card_games",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "predicted_sql": "SELECT COUNT(T1.uuid) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.text = 'This is a triggered mana ability' AND T3.format = 'pre-modern' AND T1.side IS NULL",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
    "evidence": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL",
    "difficulty": "moderate"
  },
  {
    "question_id": 410,
    "db_id": "card_games",
    "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
    "predicted_sql": "SELECT id FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND uuid IN ( SELECT uuid FROM legalities WHERE format = 'pauper' )",
    "gold_sql": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
    "evidence": "available in paper refers to availability = 'paper'",
    "difficulty": "simple"
  },
  {
    "question_id": 411,
    "db_id": "card_games",
    "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
    "predicted_sql": "SELECT artist FROM cards WHERE uuid IN (SELECT uuid FROM foreign_data WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation')",
    "gold_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 412,
    "db_id": "card_games",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "predicted_sql": "SELECT T2.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.bordercolor = 'black' AND T1.artist = 'Matthew D. Wilson' AND T1.layout = 'normal' and T1.type = 'Creature' AND T2.language = 'French'",
    "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
    "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
    "difficulty": "moderate"
  },
  {
    "question_id": 413,
    "db_id": "card_games",
    "question": "How many cards with print rarity have ruling text printed on 01/02/2007?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2007-02-01'",
    "evidence": "with print rarity refers to rarity = 'rare'; on 01/02/2007 refers to date = '2007-02-01'",
    "difficulty": "simple"
  },
  {
    "question_id": 414,
    "db_id": "card_games",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "predicted_sql": "SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.basesetsize = 180 AND T2.block = 'Ravnica'",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
    "evidence": "set of 180 cards refers to baseSetSize = 180",
    "difficulty": "simple"
  },
  {
    "question_id": 415,
    "db_id": "card_games",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "predicted_sql": "SELECT CAST((SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'commander' AND T1.status = 'Legal' AND T2.hascontentwarning = 0) AS REAL) * 100 / (SELECT COUNT(*) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'commander' AND T1.status = 'Legal') AS Percentage",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
    "difficulty": "challenging"
  },
  {
    "question_id": 416,
    "db_id": "card_games",
    "question": "What percentage of cards without power are in French?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.power IS NULL OR T2.power = '*'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
    "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 417,
    "db_id": "card_games",
    "question": "What percentage of Japanese translated sets are expansion sets?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.language = 'Japanese' AND T2.type = 'expansion' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.language) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.type = 'expansion'",
    "evidence": "Japanese translated refers to language = 'Japanese'; expansion sets refers to type = 'expansion'; percentage = DIVIDE(COUNT(language = 'Japanese'),COUNT(language))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 418,
    "db_id": "card_games",
    "question": "What kind of printing is on the card that Daren Bader created?",
    "predicted_sql": "SELECT availability FROM cards WHERE artist = 'Daren Bader'",
    "gold_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "difficulty": "simple"
  },
  {
    "question_id": 419,
    "db_id": "card_games",
    "question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE bordercolor = 'borderless' AND edhrecrank > 12000",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'",
    "evidence": "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000",
    "difficulty": "simple"
  },
  {
    "question_id": 420,
    "db_id": "card_games",
    "question": "How many cards are oversized, reprinted, and printed for promotions?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1",
    "evidence": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1",
    "difficulty": "simple"
  },
  {
    "question_id": 421,
    "db_id": "card_games",
    "question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
    "predicted_sql": "SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promotypes = 'arenaleague' ORDER BY name ASC LIMIT 3",
    "gold_sql": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
    "evidence": "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'",
    "difficulty": "simple"
  },
  {
    "question_id": 422,
    "db_id": "card_games",
    "question": "What is the language of the card with the multiverse number 149934?",
    "predicted_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "gold_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "evidence": "multiverse number 149934 refers to multiverseid = 149934;",
    "difficulty": "simple"
  },
  {
    "question_id": 423,
    "db_id": "card_games",
    "question": "Please provide the ids of top three powerful pairs of Kingdom Foil and Kingdom Cards sorted by Kingdom Foil id in alphabetical order.",
    "predicted_sql": "SELECT cardkingdomfoilid, cardkingdomid FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL ORDER BY cardkingdomfoilid LIMIT 3",
    "gold_sql": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL ORDER BY cardKingdomFoilId LIMIT 3",
    "evidence": "poweful refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 424,
    "db_id": "card_games",
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(isTextless) FROM cards",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100",
    "difficulty": "simple"
  },
  {
    "question_id": 425,
    "db_id": "card_games",
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
    "predicted_sql": "SELECT number FROM cards WHERE subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%' AND side IS NULL",
    "gold_sql": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
    "evidence": "don't have multiple faces on a single card side is null",
    "difficulty": "simple"
  },
  {
    "question_id": 426,
    "db_id": "card_games",
    "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
    "predicted_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL OR mtgoCode = '' ORDER BY name ASC LIMIT 3",
    "gold_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
    "evidence": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''",
    "difficulty": "simple"
  },
  {
    "question_id": 427,
    "db_id": "card_games",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "predicted_sql": "SELECT language FROM set_translations WHERE setcode = 'ARC' AND setcode IN ( SELECT code FROM sets WHERE mcmname = 'Archenemy' )",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
    "difficulty": "moderate"
  },
  {
    "question_id": 428,
    "db_id": "card_games",
    "question": "What is the name of set number 5 and its translation?",
    "predicted_sql": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T1.id = 5",
    "gold_sql": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
    "evidence": "set number 5 refers to id = 5",
    "difficulty": "simple"
  },
  {
    "question_id": 429,
    "db_id": "card_games",
    "question": "What is the language and expansion type of set number 206?",
    "predicted_sql": "SELECT T1.language, T3.type FROM foreign_data AS T1 INNER JOIN set_translations AS T2 ON T1.uuid = T2.id INNER JOIN sets AS T3 ON T2.setcode = T3.code WHERE T3.id = 206",
    "gold_sql": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
    "evidence": "set number 206 refers to id = 206",
    "difficulty": "simple"
  },
  {
    "question_id": 430,
    "db_id": "card_games",
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "predicted_sql": "SELECT sets.id, sets.name FROM sets INNER JOIN cards ON sets.code = cards.setcode INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC LIMIT 2",
    "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 431,
    "db_id": "card_games",
    "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "predicted_sql": "SELECT T1.id FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setcode INNER JOIN foreign_data AS T3 ON T2.uuid = T3.uuid WHERE T1.isforeignonly = 1 AND T1.isfoilonly = 1 AND T3.language = 'Japanese'",
    "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
    "evidence": "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'",
    "difficulty": "challenging"
  },
  {
    "question_id": 432,
    "db_id": "card_games",
    "question": "Which Russian set of cards contains the most cards overall?",
    "predicted_sql": "SELECT T1.setCode FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.language = 'Russian' ORDER BY T2.baseSetSize DESC LIMIT 1",
    "gold_sql": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize HAVING COUNT(T1.id) = (SELECT MAX(card_count) FROM (SELECT COUNT(T1.id) AS card_count FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Russian' GROUP BY T1.baseSetSize) AS subquery)",
    "evidence": "Russian refers to language = 'Russian'; contains the most cards overall refers to MAX(baseSetSize)",
    "difficulty": "moderate"
  },
  {
    "question_id": 433,
    "db_id": "card_games",
    "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN foreign_data.language = 'Chinese Simplified' AND cards.isonlineonly = 1 THEN foreign_data.id ELSE NULL END) AS REAL) * 100 / COUNT(cards.isonlineonly) FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
    "evidence": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 434,
    "db_id": "card_games",
    "question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.setcode) FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T1.language = 'Japanese' AND (T2.mtgocode IS NULL OR T2.mtgocode = '')",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
    "evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''",
    "difficulty": "moderate"
  },
  {
    "question_id": 435,
    "db_id": "card_games",
    "question": "How many card border with black color ? List out the card id.",
    "predicted_sql": "SELECT id FROM cards WHERE bordercolor = 'black'",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id",
    "evidence": "border with black color refers to borderColor = 'black'",
    "difficulty": "simple"
  },
  {
    "question_id": 436,
    "db_id": "card_games",
    "question": "How many cards have frame effect as extendedart? List out the id of those cards.",
    "predicted_sql": "SELECT id FROM cards WHERE frameeffects = 'extendedart'",
    "gold_sql": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id",
    "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n",
    "difficulty": "simple"
  },
  {
    "question_id": 437,
    "db_id": "card_games",
    "question": "Among black card borders, which card has full artwork?",
    "predicted_sql": "SELECT name FROM cards WHERE bordercolor = 'black' AND isfullart = 1",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "evidence": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1",
    "difficulty": "simple"
  },
  {
    "question_id": 438,
    "db_id": "card_games",
    "question": "Point out the language of set id \"174\"?",
    "predicted_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T1.id = 174",
    "gold_sql": "SELECT language FROM set_translations WHERE id = 174",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 439,
    "db_id": "card_games",
    "question": "List out the set name of the set code \"ALL\".",
    "predicted_sql": "SELECT name FROM sets WHERE code = 'ALL'",
    "gold_sql": "SELECT name FROM sets WHERE code = 'ALL'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 440,
    "db_id": "card_games",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "predicted_sql": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "gold_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "difficulty": "simple"
  },
  {
    "question_id": 441,
    "db_id": "card_games",
    "question": "State the set code of the set with release date of 07/13/2007?",
    "predicted_sql": "SELECT setcode FROM sets WHERE releasedate = '2007-07-13'",
    "gold_sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 442,
    "db_id": "card_games",
    "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
    "predicted_sql": "SELECT basesetsize, code FROM sets WHERE block IN ('Masques', 'Mirage')",
    "gold_sql": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 443,
    "db_id": "card_games",
    "question": "Give the code of sets have expansion type of 'expansion'?",
    "predicted_sql": "SELECT code FROM sets WHERE type = 'expansion'",
    "gold_sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
    "evidence": "code of sets refers to setCode",
    "difficulty": "simple"
  },
  {
    "question_id": 444,
    "db_id": "card_games",
    "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
    "predicted_sql": "SELECT T1.name, T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'boros'",
    "gold_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 445,
    "db_id": "card_games",
    "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
    "predicted_sql": "SELECT T2.language, T2.flavortext, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.watermark = 'colorpie'",
    "gold_sql": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 446,
    "db_id": "card_games",
    "question": "What is percentage of the cards with a converted Mana Cost of 10 in set of Abyssal Horror?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedmanacost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedmanacost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'Abyssal Horror'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 10 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id), T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Abyssal Horror'",
    "evidence": "set of Abyssal Horror refers to name = 'Abyssal Horror'; percentage refers to DIVIDE(COUNT(convertedManaCost = 16),COUNT(convertedManaCost))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 447,
    "db_id": "card_games",
    "question": "Give the code of sets have expansion commander type?",
    "predicted_sql": "SELECT code FROM sets WHERE type = 'commander' OR type = 'expansion'",
    "gold_sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "evidence": "code of sets refers to setCode",
    "difficulty": "simple"
  },
  {
    "question_id": 448,
    "db_id": "card_games",
    "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
    "predicted_sql": "SELECT T1.name, T2.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.watermark = 'abzan'",
    "gold_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 449,
    "db_id": "card_games",
    "question": "What is the language of the card that has azorius watermark? List out the type of this card.",
    "predicted_sql": "SELECT foreign_data.language, cards.type FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'azorius'",
    "gold_sql": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 450,
    "db_id": "card_games",
    "question": "Of all the cards that are designed by Aaron Miller, how many of them are incredibly powerful?",
    "predicted_sql": "SELECT COUNT(uuid) FROM cards WHERE artist = 'Aaron Miller' AND cardkingdomfoilid = cardkingdomid AND cardkingdomid IS NOT NULL",
    "gold_sql": "SELECT SUM(CASE WHEN artist = 'Aaron Miller' AND cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) FROM cards",
    "evidence": "designed by Aaron Miller refers to artist = 'Aaron Miller'; are icredibily powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
    "difficulty": "moderate"
  },
  {
    "question_id": 451,
    "db_id": "card_games",
    "question": "How many cards available in paper have a positive starting maximum hand size?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE availability LIKE '%paper%' AND hand LIKE '+%'",
    "gold_sql": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards",
    "evidence": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'",
    "difficulty": "simple"
  },
  {
    "question_id": 452,
    "db_id": "card_games",
    "question": "Please list the names of the cards that have a text box.",
    "predicted_sql": "SELECT name FROM cards WHERE istextless = 0",
    "gold_sql": "SELECT DISTINCT name FROM cards WHERE isTextless = 0",
    "evidence": "have a text box refers to isTextless = 0",
    "difficulty": "simple"
  },
  {
    "question_id": 453,
    "db_id": "card_games",
    "question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT manacost FROM cards WHERE name = 'Ancestor`s Chosen'",
    "gold_sql": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
    "evidence": "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'",
    "difficulty": "simple"
  },
  {
    "question_id": 454,
    "db_id": "card_games",
    "question": "Among the cards with a white border color, how many of them have unknown power?",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE bordercolor = 'white' AND (power = '*' OR power IS NULL)",
    "gold_sql": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'",
    "evidence": "unknown power refers to power = '*' or power is null",
    "difficulty": "simple"
  },
  {
    "question_id": 455,
    "db_id": "card_games",
    "question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.",
    "predicted_sql": "SELECT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
    "gold_sql": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL",
    "evidence": "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null",
    "difficulty": "simple"
  },
  {
    "question_id": 456,
    "db_id": "card_games",
    "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "predicted_sql": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "gold_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "difficulty": "simple"
  },
  {
    "question_id": 457,
    "db_id": "card_games",
    "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".",
    "predicted_sql": "SELECT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "gold_sql": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'",
    "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls",
    "difficulty": "simple"
  },
  {
    "question_id": 458,
    "db_id": "card_games",
    "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?",
    "predicted_sql": "SELECT COUNT(DISTINCT artist) FROM cards WHERE bordercolor = 'black' AND availability LIKE '%arena,mtgo%'",
    "gold_sql": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' AND borderColor = 'black' THEN 1 ELSE NULL END) FROM cards",
    "evidence": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'",
    "difficulty": "simple"
  },
  {
    "question_id": 459,
    "db_id": "card_games",
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "predicted_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedmanacost DESC LIMIT 1",
    "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
    "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater",
    "difficulty": "moderate"
  },
  {
    "question_id": 460,
    "db_id": "card_games",
    "question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?",
    "predicted_sql": "SELECT artist FROM cards WHERE flavorname = 'Battra, Dark Destroyer'",
    "gold_sql": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'",
    "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'",
    "difficulty": "simple"
  },
  {
    "question_id": 461,
    "db_id": "card_games",
    "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.",
    "predicted_sql": "SELECT name FROM cards WHERE frameversion = '2003' ORDER BY convertedmanacost DESC LIMIT 3",
    "gold_sql": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3",
    "evidence": "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'",
    "difficulty": "simple"
  },
  {
    "question_id": 462,
    "db_id": "card_games",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "predicted_sql": "SELECT T3.translation FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setcode WHERE T1.name = 'Ancestor''s Chosen' AND T3.language = 'Italian'",
    "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
    "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'",
    "difficulty": "moderate"
  },
  {
    "question_id": 463,
    "db_id": "card_games",
    "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?",
    "predicted_sql": "SELECT COUNT(T3.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code INNER JOIN set_translations AS T3 ON T2.code = T3.setcode WHERE T1.name = 'Angel of Mercy'",
    "gold_sql": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL",
    "evidence": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'",
    "difficulty": "simple"
  },
  {
    "question_id": 464,
    "db_id": "card_games",
    "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".",
    "predicted_sql": "SELECT T2.name FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setcode = T2.setcode WHERE T1.translation = 'Hauptset Zehnte Edition'",
    "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'",
    "difficulty": "simple"
  },
  {
    "question_id": 465,
    "db_id": "card_games",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "predicted_sql": "SELECT CASE WHEN EXISTS (SELECT 1 FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Korean') THEN 'Yes' ELSE 'No' END AS HasKoreanVersion",
    "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
    "difficulty": "moderate"
  },
  {
    "question_id": 466,
    "db_id": "card_games",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.id) FROM set_translations AS T1 INNER JOIN cards AS T2 ON T1.setcode = T2.setcode WHERE T1.translation = 'Hauptset Zehnte Edition' AND T2.artist = 'Adam Rex'",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
    "difficulty": "moderate"
  },
  {
    "question_id": 467,
    "db_id": "card_games",
    "question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?",
    "predicted_sql": "SELECT baseSetSize FROM sets WHERE code = ( SELECT setcode FROM set_translations WHERE translation = 'Hauptset Zehnte Edition' )",
    "gold_sql": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize",
    "difficulty": "simple"
  },
  {
    "question_id": 468,
    "db_id": "card_games",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "predicted_sql": "SELECT translation FROM set_translations WHERE language = 'Simplified Chinese' AND setcode = ( SELECT code FROM sets WHERE name = 'Eighth Edition' )",
    "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
    "evidence": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation",
    "difficulty": "moderate"
  },
  {
    "question_id": 469,
    "db_id": "card_games",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "predicted_sql": "SELECT T2.mtgocode FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T1.name = 'Angel of Mercy' AND T2.mtgocode IS NOT NULL",
    "gold_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "difficulty": "moderate"
  },
  {
    "question_id": 470,
    "db_id": "card_games",
    "question": "When was the set of cards with \"Ancestor's Chosen\" released?",
    "predicted_sql": "SELECT T2.releasedate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T1.name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "evidence": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate",
    "difficulty": "simple"
  },
  {
    "question_id": 471,
    "db_id": "card_games",
    "question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?",
    "predicted_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "gold_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type",
    "difficulty": "simple"
  },
  {
    "question_id": 472,
    "db_id": "card_games",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.name) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T1.block = 'Ice Age' AND T2.language = 'Italian'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
    "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null",
    "difficulty": "moderate"
  },
  {
    "question_id": 473,
    "db_id": "card_games",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "predicted_sql": "SELECT S.isforeignonly FROM sets AS S INNER JOIN cards AS C ON S.code = C.setcode WHERE C.name = 'Adarkar Valkyrie'",
    "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
    "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
    "difficulty": "moderate"
  },
  {
    "question_id": 474,
    "db_id": "card_games",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.code) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T2.language = 'Italian' AND T2.translation IS NOT NULL AND T1.basesetsize < 10",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
    "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10",
    "difficulty": "moderate"
  },
  {
    "question_id": 475,
    "db_id": "card_games",
    "question": "How many cards in the set Coldsnap have a black border color?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE bordercolor = 'black' AND setcode = ( SELECT code FROM sets WHERE name = 'Coldsnap' )",
    "gold_sql": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'",
    "difficulty": "simple"
  },
  {
    "question_id": 476,
    "db_id": "card_games",
    "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.",
    "predicted_sql": "SELECT name FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap') AND convertedmanacost = (SELECT MAX(convertedmanacost) FROM cards WHERE setcode = (SELECT code FROM sets WHERE name = 'Coldsnap'))",
    "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost = (SELECT MAX(convertedManaCost)  FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap')",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'",
    "difficulty": "simple"
  },
  {
    "question_id": 477,
    "db_id": "card_games",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "predicted_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy') AND T2.name = 'Coldsnap'",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "difficulty": "challenging"
  },
  {
    "question_id": 478,
    "db_id": "card_games",
    "question": "What is card number 4 in the set Coldsnap?",
    "predicted_sql": "SELECT T1.number, T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'Coldsnap' AND T1.number = '4'",
    "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4",
    "difficulty": "simple"
  },
  {
    "question_id": 479,
    "db_id": "card_games",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "predicted_sql": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.uuid = T2.code WHERE T2.name = 'Coldsnap' AND T1.convertedmanacost > 5 AND (T1.power IS NULL OR T1.power = '*')",
    "gold_sql": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null",
    "difficulty": "moderate"
  },
  {
    "question_id": 480,
    "db_id": "card_games",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT T2.flavortext FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "gold_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
    "difficulty": "moderate"
  },
  {
    "question_id": 481,
    "db_id": "card_games",
    "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.",
    "predicted_sql": "SELECT T1.language FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Ancestor''s Chosen' AND T1.flavortext IS NOT NULL",
    "gold_sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL",
    "evidence": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 482,
    "db_id": "card_games",
    "question": "What's the German type of the card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT T1.type FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'German' AND T2.name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'",
    "evidence": "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'",
    "difficulty": "simple"
  },
  {
    "question_id": 483,
    "db_id": "card_games",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "predicted_sql": "SELECT T4.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setcode = T3.code INNER JOIN foreign_data AS T4 ON T2.uuid = T4.uuid WHERE T4.language = 'Italian' AND T3.name = 'Coldsnap'",
    "gold_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "difficulty": "moderate"
  },
  {
    "question_id": 484,
    "db_id": "card_games",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "predicted_sql": "SELECT T1.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid INNER JOIN sets AS T3 ON T2.setcode = T3.code WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedmanacost DESC",
    "gold_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.convertedManaCost = (SELECT MAX(convertedManaCost) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian')",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "difficulty": "moderate"
  },
  {
    "question_id": 485,
    "db_id": "card_games",
    "question": "When was the ruling for the card 'Reminisce' created?",
    "predicted_sql": "SELECT T1.date FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.name = 'Reminisce'",
    "gold_sql": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'",
    "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date",
    "difficulty": "simple"
  },
  {
    "question_id": 486,
    "db_id": "card_games",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedmanacost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.convertedmanacost) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'Coldsnap'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 487,
    "db_id": "card_games",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.cardkingdomfoilid = T1.cardkingdomid AND T1.cardkingdomid IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'Coldsnap'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 488,
    "db_id": "card_games",
    "question": "What's the code for the set which was released on 2017/7/14?",
    "predicted_sql": "SELECT code FROM sets WHERE releasedate = '2017-07-14'",
    "gold_sql": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code",
    "evidence": "released on 2017/7/14 refers to releaseDate = '2017-07-14'",
    "difficulty": "simple"
  },
  {
    "question_id": 489,
    "db_id": "card_games",
    "question": "List the keyrune code for the set whose code is 'PKHC'.",
    "predicted_sql": "SELECT keyrunecode FROM sets WHERE code = 'PKHC'",
    "gold_sql": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'",
    "evidence": "keyrune code refers to keyruneCode",
    "difficulty": "simple"
  },
  {
    "question_id": 490,
    "db_id": "card_games",
    "question": "For the set which had 'SS2' as the code, what is its magic card market id?",
    "predicted_sql": "SELECT mcmid FROM sets WHERE code = 'SS2'",
    "gold_sql": "SELECT mcmId FROM sets WHERE code = 'SS2'",
    "evidence": "magic card market id refers to mcmId",
    "difficulty": "simple"
  },
  {
    "question_id": 491,
    "db_id": "card_games",
    "question": "What's the magic card market name for the set which was released on 2017/6/9?",
    "predicted_sql": "SELECT mcmName FROM sets WHERE releasedate = '2017-06-09'",
    "gold_sql": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'",
    "evidence": "magic card market name refers to mcmName",
    "difficulty": "simple"
  },
  {
    "question_id": 492,
    "db_id": "card_games",
    "question": "For the set \"From the Vault: Lore\", what is its expansion type?",
    "predicted_sql": "SELECT type FROM sets WHERE name LIKE 'From the Vault: Lore'",
    "gold_sql": "SELECT type FROM sets WHERE name LIKE '%FROM the Vault: Lore%'",
    "evidence": "set \"From the Vault refers to name which contains 'From the Vault: Lore'; expansion type refers to type",
    "difficulty": "simple"
  },
  {
    "question_id": 493,
    "db_id": "card_games",
    "question": "For the set \"Commander 2014 Oversized\" , give its parent code.",
    "predicted_sql": "SELECT parentcode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "gold_sql": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'",
    "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';",
    "difficulty": "simple"
  },
  {
    "question_id": 494,
    "db_id": "card_games",
    "question": "For all cards illustrated by Jim Pavelec. and describe the text of the ruling of these cards. Do these cards have missing or degraded properties and values.",
    "predicted_sql": "SELECT T1.text, T2.hascontentwarning FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Jim Pavelec'",
    "gold_sql": "SELECT T2.text , CASE WHEN T1.hasContentWarning = 1 THEN 'YES' ELSE 'NO' END FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Jim Pavelec'",
    "evidence": "all cards illustrated by Jim Pavelec refers to artist = 'Jim Pavelec'; the text of the ruling refers to text; cards have missing or degraded properties and values if hasContentWarning = 1 else it doesn't have;",
    "difficulty": "challenging"
  },
  {
    "question_id": 495,
    "db_id": "card_games",
    "question": "What was the release date for the set which card \"Evacuation\" in it?",
    "predicted_sql": "SELECT sets.releasedate FROM cards INNER JOIN sets ON cards.setcode = sets.code WHERE cards.name = 'Evacuation'",
    "gold_sql": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'",
    "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate",
    "difficulty": "simple"
  },
  {
    "question_id": 496,
    "db_id": "card_games",
    "question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?",
    "predicted_sql": "SELECT T1.basesetsize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T2.translation = 'Rinascita di Alara'",
    "gold_sql": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'",
    "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'",
    "difficulty": "simple"
  },
  {
    "question_id": 497,
    "db_id": "card_games",
    "question": "List the expansion type of the set \"Huitième édition\".",
    "predicted_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T2.translation = 'Huiti��me ��dition'",
    "gold_sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huitième édition' )",
    "evidence": "the set \"Huitième édition\" refers to translation = 'Huitième édition'; expansion type refers to type",
    "difficulty": "simple"
  },
  {
    "question_id": 498,
    "db_id": "card_games",
    "question": "What's the French name of the set of cards with \"Tendo Ice Bridge\" is in?",
    "predicted_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setcode = T2.setcode INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T3.language = 'French' AND T3.name = 'Tendo Ice Bridge'",
    "gold_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Tendo Ice Bridge' AND T2.language = 'French' AND T2.translation IS NOT NULL",
    "evidence": "French refers to language = 'French'; \"Tendo Ice Bridge\" is a translated name of a card; translated name refers to translation",
    "difficulty": "moderate"
  },
  {
    "question_id": 499,
    "db_id": "card_games",
    "question": "How many translations of the name of the set \"Tenth Edition\"?",
    "predicted_sql": "SELECT COUNT(T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T1.name = 'Salvat 2011' AND T2.translation IS NOT NULL",
    "gold_sql": "SELECT COUNT(DISTINCT T2.translation) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Tenth Edition' AND T2.translation IS NOT NULL",
    "evidence": "translations of the name refers to translation; translation is not NULL; set \"Salvat 2011\" refers to name = 'Tenth Edition'",
    "difficulty": "moderate"
  },
  {
    "question_id": 500,
    "db_id": "card_games",
    "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "predicted_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T1.setcode = T2.setcode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese'",
    "gold_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "difficulty": "moderate"
  },
  {
    "question_id": 501,
    "db_id": "card_games",
    "question": "Which card name in the set 'Journey into Nyx Hero's Path' has the highest converted mana cost.",
    "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedmanacost DESC LIMIT 1",
    "gold_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Journey into Nyx Hero''s Path' ORDER BY T1.convertedManaCost DESC LIMIT 1",
    "evidence": "set 'Journey into Nyx Hero's Path' refers to name = 'Journey into Nyx Hero''s Path'",
    "difficulty": "moderate"
  },
  {
    "question_id": 502,
    "db_id": "card_games",
    "question": "What is the release date for the set \"Ola de frío\"?",
    "predicted_sql": "SELECT T1.releasedate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T2.translation = 'Ola de fr��o'",
    "gold_sql": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de frío'",
    "evidence": "release date is the date of card set being released; set \"Ola de frío\" refers to translation = 'Ola de frío'",
    "difficulty": "simple"
  },
  {
    "question_id": 503,
    "db_id": "card_games",
    "question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?",
    "predicted_sql": "SELECT T1.type FROM sets AS T1 INNER JOIN cards AS T2 ON T1.code = T2.setcode WHERE T2.name = 'Samite Pilgrim'",
    "gold_sql": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )",
    "evidence": "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'",
    "difficulty": "simple"
  },
  {
    "question_id": 504,
    "db_id": "card_games",
    "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
    "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'World Championship Decks 2004' AND T1.convertedmanacost = 3",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
    "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'",
    "difficulty": "simple"
  },
  {
    "question_id": 505,
    "db_id": "card_games",
    "question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
    "predicted_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'",
    "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'",
    "evidence": "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'",
    "difficulty": "moderate"
  },
  {
    "question_id": 506,
    "db_id": "card_games",
    "question": "For all the set of cards that has Japanese translation, what is the percentage of them are only available in non-foil?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T3.isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.language) FROM foreign_data AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id INNER JOIN sets AS T3 ON T3.code = T2.setcode WHERE T1.language = 'Japanese'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isNonFoilOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Japanese' )",
    "evidence": "Japanese translation refers to language = 'Japanese'; in non-foil refers to isNonFoilOnly = 1; percentage of Japanese non foil in Japanese cards refers to DIVIDE(SUM(isNonFoilOnly = 1), SUM(language = 'Japanese'))*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 507,
    "db_id": "card_games",
    "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN cards.isonlineonly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid INNER JOIN set_translations ON cards.setcode = set_translations.setcode WHERE foreign_data.language = 'Portuguese (Brazil)'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
    "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 508,
    "db_id": "card_games",
    "question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?",
    "predicted_sql": "SELECT availability FROM cards WHERE artist = 'Aleksi Briclot' AND istextless = 1",
    "gold_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
    "evidence": "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability",
    "difficulty": "moderate"
  },
  {
    "question_id": 509,
    "db_id": "card_games",
    "question": "What is the unique id of the set that has the highest number of cards?",
    "predicted_sql": "SELECT id FROM sets ORDER BY basesetsize DESC LIMIT 1",
    "gold_sql": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1",
    "evidence": "the highest number of cards refers to MAX(baseSetSize); unique id refers to id",
    "difficulty": "simple"
  },
  {
    "question_id": 510,
    "db_id": "card_games",
    "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?",
    "predicted_sql": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedmanacost DESC LIMIT 1",
    "gold_sql": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1",
    "evidence": "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist",
    "difficulty": "simple"
  },
  {
    "question_id": 511,
    "db_id": "card_games",
    "question": "What is the most common visual frame effects among the incredibly powerful foils?",
    "predicted_sql": "SELECT frameeffects FROM cards WHERE cardkingdomfoilid IS NOT NULL AND cardkingdomid IS NOT NULL GROUP BY frameeffects ORDER BY COUNT(*) DESC LIMIT 1",
    "gold_sql": "SELECT frameEffects FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL GROUP BY frameEffects ORDER BY COUNT(frameEffects) DESC LIMIT 1",
    "evidence": "when both cardKingdomFoilId and cardKingdomId are not null, this foil is incredibly powerful; most common visual frame effects refers to MAX(frameEffects)",
    "difficulty": "moderate"
  },
  {
    "question_id": 512,
    "db_id": "card_games",
    "question": "How many cards with unknown power that can't be found in foil is in duel deck A?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE power IS NULL OR power = '*' AND hasFoil = 0 AND dueldeck = 'a'",
    "gold_sql": "SELECT SUM(CASE WHEN power = '*' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'",
    "evidence": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'",
    "difficulty": "simple"
  },
  {
    "question_id": 513,
    "db_id": "card_games",
    "question": "Among the sets whose expansion type is Commander, which set has the highest total number of cards including promotional and related supplemental products but excluding Alchemy modifications? Indicate the id of the set.",
    "predicted_sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalsetsize DESC LIMIT 1",
    "gold_sql": "SELECT id FROM sets WHERE type = 'commander' ORDER BY totalSetSize DESC LIMIT 1",
    "evidence": "expansion type refers to type where type = 'commander'; totalSetSize: The total number of cards in the set, including promotional and related supplemental products but excluding Alchemy modifications; highest total number of cards refers to MAX(totalSetSize)",
    "difficulty": "challenging"
  },
  {
    "question_id": 514,
    "db_id": "card_games",
    "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?",
    "predicted_sql": "SELECT T2.name FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'duel' ORDER BY T2.convertedmanacost DESC LIMIT 10",
    "gold_sql": "SELECT DISTINCT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 10",
    "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)",
    "difficulty": "simple"
  },
  {
    "question_id": 515,
    "db_id": "card_games",
    "question": "When was the oldest mythic card released and what are its legal play formats?",
    "predicted_sql": "SELECT T1.originalreleasedate, T3.format FROM cards AS T1 INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T1.rarity = 'mythic' AND T3.status = 'legal' ORDER BY T1.originalreleasedate ASC LIMIT 1",
    "gold_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' AND T1.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal')",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "difficulty": "moderate"
  },
  {
    "question_id": 516,
    "db_id": "card_games",
    "question": "How many cards did Volkan BaÇµa illustrated whose foreign language is in French?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baga' AND T2.language = 'French'",
    "gold_sql": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3",
    "evidence": "Volkan BaÇµa refers to artist = 'Volkan Baǵa'; foreign language is in French refers to language = 'French'",
    "difficulty": "moderate"
  },
  {
    "question_id": 517,
    "db_id": "card_games",
    "question": "How many rare enchantment Abundance cards are there whose play format status are all legal?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.id) FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.rarity = 'rare' AND T2.Types = 'Enchantment' AND T2.name = 'Abundance' AND T1.status = 'Legal'",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.rarity = 'rare' AND T1.types = 'Enchantment' AND T1.name = 'Abundance' AND T2.status = 'Legal'",
    "evidence": "rare refers to rarity = 'rare'; enchantment card refers to types = 'Enchantment'; Abundance cards refers to name = 'Abundance'; format status are all legal refers to status = 'Legal'",
    "difficulty": "moderate"
  },
  {
    "question_id": 518,
    "db_id": "card_games",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "predicted_sql": "SELECT T1.format, T3.name FROM legalities AS T1 INNER JOIN cards AS T3 ON T1.uuid = T3.uuid WHERE T1.status = 'Banned' GROUP BY T1.format ORDER BY COUNT(T1.status) DESC LIMIT 1",
    "gold_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
    "difficulty": "moderate"
  },
  {
    "question_id": 519,
    "db_id": "card_games",
    "question": "What is the language of the \"Battlebond\" set?",
    "predicted_sql": "SELECT T1.language FROM set_translations AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code WHERE T2.name = 'Battlebond'",
    "gold_sql": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )",
    "evidence": "\"Battlebond\" set refers to name = 'Battlebond'",
    "difficulty": "simple"
  },
  {
    "question_id": 520,
    "db_id": "card_games",
    "question": "Who is the illustrator that illustrated the least amount of cards? List the format of play of the cards that he/she illustrated.",
    "predicted_sql": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid GROUP BY T1.artist HAVING COUNT(T1.artist) = ( SELECT COUNT(artist) FROM cards GROUP BY artist ORDER BY COUNT(artist) ASC LIMIT 1)",
    "gold_sql": "SELECT T1.artist, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid GROUP BY T1.artist ORDER BY COUNT(T1.id) ASC LIMIT 1",
    "evidence": "format of the cards refers to format; illustrator refers to artist; the least amount of cards refers to MIN(artist)",
    "difficulty": "moderate"
  },
  {
    "question_id": 521,
    "db_id": "card_games",
    "question": "Among the cards whose version of frame style is 1997, what is the status of the card illustrated by D. Alexander Gregory in legacy play format that has sensitive content or Wizards of the Coast?",
    "predicted_sql": "SELECT T1.status FROM legalities AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.format = 'legacy' AND T2.hasContentWarning = 1 AND T2.artist = 'D. Alexander Gregory' AND T2.frameVersion = '1997'",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.frameVersion = 1997 AND T1.hasContentWarning = 1 AND T1.artist = 'D. Alexander Gregory' AND T2.format = 'legacy'",
    "evidence": "version of frame style is 1997 refers to frameVersion = '1997'; illustrated by D. Alexander Gregory refers to artist = 'D. Alexander Gregory'; sensitive content refers to hasContentWarning = 1; legacy play format refers to format = 'legacy'; status of the card refers to status",
    "difficulty": "challenging"
  },
  {
    "question_id": 522,
    "db_id": "card_games",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "predicted_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecrank = 1 AND T2.status = 'banned'",
    "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "difficulty": "moderate"
  },
  {
    "question_id": 523,
    "db_id": "card_games",
    "question": "What is the annual average number of sets that were released between 1/1/2012 to 12/31/2015? Indicate the common langugage of the card.",
    "predicted_sql": "SELECT CAST(COUNT(setcode) AS REAL) / 4, language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setcode WHERE releasedate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY language ORDER BY COUNT(setcode) DESC LIMIT 1",
    "gold_sql": "SELECT (CAST(SUM(T1.id) AS REAL) / COUNT(T1.id)) / 4, T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.id = T2.id WHERE T1.releaseDate BETWEEN '2012-01-01' AND '2015-12-31' GROUP BY T1.releaseDate ORDER BY COUNT(T2.language) DESC LIMIT 1",
    "evidence": "AVG(id); releaseDate BETWEEN 1/1/2012 AND 12/31/2015; the common language refers to MAX(COUNT(language))",
    "difficulty": "challenging"
  },
  {
    "question_id": 524,
    "db_id": "card_games",
    "question": "List the artists who illustrated cards with black borders which are available only in arena.",
    "predicted_sql": "SELECT artist FROM cards WHERE bordercolor = 'black' AND availability = 'arena'",
    "gold_sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
    "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
    "difficulty": "simple"
  },
  {
    "question_id": 525,
    "db_id": "card_games",
    "question": "Find the uuid of cards in which the old school format is restricted or banned.",
    "predicted_sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'banned' OR status = 'restricted')",
    "gold_sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
    "evidence": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'",
    "difficulty": "simple"
  },
  {
    "question_id": 526,
    "db_id": "card_games",
    "question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
    "evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'",
    "difficulty": "simple"
  },
  {
    "question_id": 527,
    "db_id": "card_games",
    "question": "What are the rulings for the card named and designed by Kev Walker? List them in descending order of dates.",
    "predicted_sql": "SELECT T1.text FROM rulings AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T2.artist = 'Kev Walker' ORDER BY T1.date DESC",
    "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Kev Walker' ORDER BY T2.date DESC",
    "evidence": "rulings refers to text; card named and designed by Kev Walker refers to artist = 'Kev Walker'; descending order of dates refers to MAX(date);",
    "difficulty": "moderate"
  },
  {
    "question_id": 528,
    "db_id": "card_games",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "predicted_sql": "SELECT T1.name, T3.format FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setcode = T2.code INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T2.name = 'Hour of Devastation' AND T3.status = 'Legal'",
    "gold_sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
    "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format",
    "difficulty": "challenging"
  },
  {
    "question_id": 529,
    "db_id": "card_games",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "predicted_sql": "SELECT T1.name FROM sets AS T1 LEFT JOIN set_translations AS T2 ON T1.code = T2.setcode WHERE T2.language = 'Korean' AND NOT EXISTS ( SELECT 1 FROM set_translations AS T3 WHERE T3.setcode = T1.code AND T3.language = 'Japanese')",
    "gold_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
    "difficulty": "moderate"
  },
  {
    "question_id": 530,
    "db_id": "card_games",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "predicted_sql": "SELECT T1.frameversion, T1.name, T2.status FROM cards AS T1 LEFT JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams' AND T2.status = 'banned'",
    "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "difficulty": "moderate"
  },
  {
    "question_id": 531,
    "db_id": "codebase_community",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "predicted_sql": "SELECT displayname FROM users WHERE displayname IN ('Harlan', 'Jarrod Dixon') ORDER BY reputation DESC LIMIT 1",
    "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
    "difficulty": "simple"
  },
  {
    "question_id": 532,
    "db_id": "codebase_community",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "predicted_sql": "SELECT displayname FROM users WHERE STRFTIME('%Y',creationdate) = '2014'",
    "gold_sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
    "evidence": "account created in the year 2011 refers to year(CreationDate) = 2011",
    "difficulty": "simple"
  },
  {
    "question_id": 533,
    "db_id": "codebase_community",
    "question": "How many users last accessed the website after 2014/9/1?",
    "predicted_sql": "SELECT COUNT(id) FROM users WHERE lastaccessdate > '2014-09-01 00:00:00'",
    "gold_sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
    "difficulty": "simple"
  },
  {
    "question_id": 534,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who has the most number of views?",
    "predicted_sql": "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
    "gold_sql": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "evidence": "user who has the most number of view refers to Max(Views)",
    "difficulty": "simple"
  },
  {
    "question_id": 535,
    "db_id": "codebase_community",
    "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?",
    "predicted_sql": "SELECT COUNT(id) FROM users WHERE upvotes > 100 AND downvotes > 1;",
    "gold_sql": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1",
    "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1",
    "difficulty": "simple"
  },
  {
    "question_id": 536,
    "db_id": "codebase_community",
    "question": "How many users with more than 10 views created their account after the year 2013?",
    "predicted_sql": "SELECT COUNT(*) FROM users WHERE views > 10 AND strftime('%Y', creationdate) > '2013'",
    "gold_sql": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10",
    "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013",
    "difficulty": "simple"
  },
  {
    "question_id": 537,
    "db_id": "codebase_community",
    "question": "How many posts does the user csgillespie own?",
    "predicted_sql": "SELECT COUNT(id) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
    "gold_sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "difficulty": "simple"
  },
  {
    "question_id": 538,
    "db_id": "codebase_community",
    "question": "Please list the titles of the posts owned by the user csgillespie?",
    "predicted_sql": "SELECT title FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
    "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "difficulty": "simple"
  },
  {
    "question_id": 539,
    "db_id": "codebase_community",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "predicted_sql": "SELECT T2.displayname FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T1.title = 'Eliciting priors from experts'",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "difficulty": "simple"
  },
  {
    "question_id": 540,
    "db_id": "codebase_community",
    "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?",
    "predicted_sql": "SELECT T1.title FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T2.displayname = 'csgillespie' ORDER BY T1.viewcount DESC LIMIT 1",
    "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1",
    "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)",
    "difficulty": "simple"
  },
  {
    "question_id": 541,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who is the owner of the most valuable post?",
    "predicted_sql": "SELECT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid ORDER BY posts.favoritecount DESC LIMIT 1",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1",
    "evidence": "most valuable post refers to Max(FavoriteCount)",
    "difficulty": "simple"
  },
  {
    "question_id": 542,
    "db_id": "codebase_community",
    "question": "What is the total number of comments of all the posts owned by csgillespie?",
    "predicted_sql": "SELECT SUM(T2.CommentCount) FROM Users AS T1 INNER JOIN Posts AS T2 ON T1.id = T2.owneruserid WHERE T1.DisplayName = 'csgillespie'",
    "gold_sql": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)",
    "difficulty": "simple"
  },
  {
    "question_id": 543,
    "db_id": "codebase_community",
    "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?",
    "predicted_sql": "SELECT T1.answercount FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T2.displayname = 'csgillespie' ORDER BY T1.answercount DESC LIMIT 1",
    "gold_sql": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)",
    "difficulty": "simple"
  },
  {
    "question_id": 544,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "predicted_sql": "SELECT T2.displayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.lasteditoruserid = T2.id WHERE T1.title = 'Examples for teaching: Correlation does not mean causation'",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "difficulty": "moderate"
  },
  {
    "question_id": 545,
    "db_id": "codebase_community",
    "question": "Among the posts owned by csgillespie, how many of them are root posts?",
    "predicted_sql": "SELECT COUNT(*) FROM posts WHERE owneruserid in (SELECT id FROM users WHERE displayname = 'csgillespie') AND parentid IS NULL",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL",
    "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null",
    "difficulty": "simple"
  },
  {
    "question_id": 546,
    "db_id": "codebase_community",
    "question": "Please list the display names of all the users who owns a post that is well-finished.",
    "predicted_sql": "SELECT DISTINCT T1.displayname FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.closeddate IS NOT NULL",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
    "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null",
    "difficulty": "simple"
  },
  {
    "question_id": 547,
    "db_id": "codebase_community",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T2.age > 65 AND T1.score >= 20",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20",
    "difficulty": "simple"
  },
  {
    "question_id": 548,
    "db_id": "codebase_community",
    "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?",
    "predicted_sql": "SELECT U.location FROM users U INNER JOIN posts P ON U.id = P.owneruserid WHERE P.title = 'Eliciting priors from experts'",
    "gold_sql": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post",
    "difficulty": "simple"
  },
  {
    "question_id": 549,
    "db_id": "codebase_community",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "predicted_sql": "SELECT T2.body FROM tags AS T1 INNER JOIN posts AS T2 ON T1.excerptpostid = T2.id WHERE T1.tagname = 'bayesian'",
    "gold_sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "difficulty": "simple"
  },
  {
    "question_id": 550,
    "db_id": "codebase_community",
    "question": "From which post is the most popular tag excerpted from? Please give the body of the post.",
    "predicted_sql": "SELECT P1.body FROM tags AS T1 INNER JOIN posts AS P1 ON T1.excerptpostid = P1.id ORDER BY T1.count DESC LIMIT 1",
    "gold_sql": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )",
    "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId",
    "difficulty": "simple"
  },
  {
    "question_id": 551,
    "db_id": "codebase_community",
    "question": "How many badges has the user csgillespie obtained?",
    "predicted_sql": "SELECT COUNT(id) FROM badges WHERE userid = ( SELECT id FROM users WHERE displayname = 'csgillespie' )",
    "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "difficulty": "simple"
  },
  {
    "question_id": 552,
    "db_id": "codebase_community",
    "question": "Please list the names of the badges obtained by csgillespie.",
    "predicted_sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T1.displayname = 'csgillespie'",
    "gold_sql": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "difficulty": "simple"
  },
  {
    "question_id": 553,
    "db_id": "codebase_community",
    "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?",
    "predicted_sql": "SELECT COUNT(*) FROM badges WHERE userid IN (SELECT id FROM users WHERE displayname = 'csgillespie') AND STRFTIME('%Y', date) = '2011'",
    "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011",
    "difficulty": "simple"
  },
  {
    "question_id": 554,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who has obtained the most number of badges?",
    "predicted_sql": "SELECT T1.displayname FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid GROUP BY T1.displayname ORDER BY COUNT(T2.id) DESC LIMIT 1",
    "gold_sql": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))",
    "difficulty": "simple"
  },
  {
    "question_id": 555,
    "db_id": "codebase_community",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "predicted_sql": "SELECT AVG(T2.score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T1.displayname = 'csgillespie'",
    "gold_sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
    "difficulty": "simple"
  },
  {
    "question_id": 556,
    "db_id": "codebase_community",
    "question": "What is the average number of badges obtained by a user with over 200 views?",
    "predicted_sql": "SELECT CAST(COUNT(T2.id) AS REAL) / COUNT(DISTINCT T1.displayname) FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T1.views > 200",
    "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200",
    "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))",
    "difficulty": "simple"
  },
  {
    "question_id": 557,
    "db_id": "codebase_community",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.age > 65 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.score > 20",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 558,
    "db_id": "codebase_community",
    "question": "How many votes did the user No.58 take on 2010/7/19?",
    "predicted_sql": "SELECT COUNT(id) FROM votes WHERE userid = 58 AND creationdate = '2010-07-19'",
    "gold_sql": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'",
    "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'",
    "difficulty": "simple"
  },
  {
    "question_id": 559,
    "db_id": "codebase_community",
    "question": "Indicate the creation date of the maximum number of votes.",
    "predicted_sql": "SELECT creationdate FROM votes GROUP BY creationdate ORDER BY COUNT(id) DESC LIMIT 1",
    "gold_sql": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1",
    "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))",
    "difficulty": "simple"
  },
  {
    "question_id": 560,
    "db_id": "codebase_community",
    "question": "Give the number of \"Revival\" badges.",
    "predicted_sql": "SELECT COUNT(id) FROM badges WHERE name = 'Revival';",
    "gold_sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'",
    "evidence": "number refers to Id; 'Revival' is the Name of badge",
    "difficulty": "simple"
  },
  {
    "question_id": 561,
    "db_id": "codebase_community",
    "question": "What is the title for the post which got the highest score comment?",
    "predicted_sql": "SELECT T2.title FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id ORDER BY T1.score DESC LIMIT 1",
    "gold_sql": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )",
    "evidence": "highest score comment refers to Max(comments.Score)",
    "difficulty": "simple"
  },
  {
    "question_id": 562,
    "db_id": "codebase_community",
    "question": "For the post which got 1910 view counts, how many comments does it get?",
    "predicted_sql": "SELECT COUNT(comments.id) FROM posts INNER JOIN comments ON posts.id = comments.postid WHERE posts.viewcount = 1910",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 563,
    "db_id": "codebase_community",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "predicted_sql": "SELECT T1.favoritecount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.id = T2.postid WHERE T2.userid = 3025 AND T2.creationdate = '2014-04-23 20:29:39'",
    "gold_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
    "difficulty": "moderate"
  },
  {
    "question_id": 564,
    "db_id": "codebase_community",
    "question": "Give the only one comment text of the post with parent id 107829.",
    "predicted_sql": "SELECT T1.text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T2.parentid = 107829 AND T2.commentcount = 1",
    "gold_sql": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1",
    "evidence": "one comment refers to CommentCount = '1'",
    "difficulty": "simple"
  },
  {
    "question_id": 565,
    "db_id": "codebase_community",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "predicted_sql": "SELECT CASE WHEN T2.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS 'Is Well Finished' FROM Comments AS T1 INNER JOIN Posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = '23853' AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "gold_sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
    "difficulty": "moderate"
  },
  {
    "question_id": 566,
    "db_id": "codebase_community",
    "question": "For the owner user of post No. 65041, what is his/her reputation points?",
    "predicted_sql": "SELECT T1.reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.id = 65041",
    "gold_sql": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
    "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation",
    "difficulty": "simple"
  },
  {
    "question_id": 567,
    "db_id": "codebase_community",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "predicted_sql": "SELECT COUNT(T2.id) FROM users AS T1 INNER JOIN posts AS T2 ON T2.owneruserid = T1.id WHERE T1.displayname = 'Tiago Pasqualini'",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "evidence": "\"Tiago Pasqualini\" is the DisplayName;",
    "difficulty": "simple"
  },
  {
    "question_id": 568,
    "db_id": "codebase_community",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "predicted_sql": "SELECT T1.displayname FROM users AS T1 INNER JOIN votes AS T2 ON T1.id = T2.userid WHERE T2.id = 6347",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "evidence": "vote no. 6347 refers to Id = '6347'",
    "difficulty": "simple"
  },
  {
    "question_id": 569,
    "db_id": "codebase_community",
    "question": "Give the number of votes for the post about data visualization.",
    "predicted_sql": "SELECT COUNT(*) FROM votes WHERE postid IN (SELECT id FROM posts WHERE title LIKE '%data visualization%')",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'",
    "evidence": "About data visualization is the Title that contains 'data visualization';",
    "difficulty": "simple"
  },
  {
    "question_id": 570,
    "db_id": "codebase_community",
    "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "predicted_sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T1.displayname = 'DatEpicCoderGuyWhoPrograms'",
    "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "difficulty": "simple"
  },
  {
    "question_id": 571,
    "db_id": "codebase_community",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "predicted_sql": "SELECT (CAST(COUNT(T1.id) AS REAL) / COUNT(T2.id)) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.owneruserid = T2.userid WHERE T1.owneruserid = 24 AND T2.userid = 24",
    "gold_sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
    "difficulty": "moderate"
  },
  {
    "question_id": 572,
    "db_id": "codebase_community",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "predicted_sql": "SELECT viewcount FROM posts WHERE title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "gold_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "difficulty": "moderate"
  },
  {
    "question_id": 573,
    "db_id": "codebase_community",
    "question": "Write the contents of comments with a score of 17.",
    "predicted_sql": "SELECT text FROM comments WHERE score = 17;",
    "gold_sql": "SELECT Text FROM comments WHERE Score = 17",
    "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text",
    "difficulty": "simple"
  },
  {
    "question_id": 574,
    "db_id": "codebase_community",
    "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
    "predicted_sql": "SELECT DisplayName FROM users WHERE websiteurl = 'http://stackoverflow.com'",
    "gold_sql": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
    "evidence": "\"http://stackoverflow.com\" is the WebsiteUrl; user refers to DisplayName",
    "difficulty": "simple"
  },
  {
    "question_id": 575,
    "db_id": "codebase_community",
    "question": "What is the badge name that user 'SilentGhost' obtained?",
    "predicted_sql": "SELECT T1.name FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.displayname = 'SilentGhost'",
    "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'",
    "evidence": "\"SilentGhost\" is the DisplayName of user;",
    "difficulty": "simple"
  },
  {
    "question_id": 576,
    "db_id": "codebase_community",
    "question": "Name the user that commented 'thank you user93!'",
    "predicted_sql": "SELECT T2.displayname FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.text = 'thank you user93!'",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
    "difficulty": "simple"
  },
  {
    "question_id": 577,
    "db_id": "codebase_community",
    "question": "Write all comments made by user 'A Lion.'",
    "predicted_sql": "SELECT T1.text FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.displayname = 'A Lion'",
    "gold_sql": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'",
    "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text",
    "difficulty": "simple"
  },
  {
    "question_id": 578,
    "db_id": "codebase_community",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "predicted_sql": "SELECT T1.displayname, T1.reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.title = 'Understanding what Dassault iSight is doing?'",
    "gold_sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
    "difficulty": "moderate"
  },
  {
    "question_id": 579,
    "db_id": "codebase_community",
    "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'",
    "predicted_sql": "SELECT T2.text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.id = T2.postid WHERE T1.title = 'How does gentle boosting differ from AdaBoost?'",
    "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ from AdaBoost?'",
    "evidence": "\"How does gentle boosting differ from AdaBoost?\" is the Title of post; comments refers to Text",
    "difficulty": "simple"
  },
  {
    "question_id": 580,
    "db_id": "codebase_community",
    "question": "Name 10 users with the badge name 'Necromancer.'",
    "predicted_sql": "SELECT T2.displayname FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.name = 'Necromancer' LIMIT 10",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
    "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
    "difficulty": "simple"
  },
  {
    "question_id": 581,
    "db_id": "codebase_community",
    "question": "Who is the editor of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "predicted_sql": "SELECT T2.displayname FROM posts AS T1 INNER JOIN users AS T2 ON T1.lasteditoruserid = T2.id WHERE T1.title = 'Open source tools for visualizing multi-dimensional data?'",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; editor refers to DisplayName;",
    "difficulty": "moderate"
  },
  {
    "question_id": 582,
    "db_id": "codebase_community",
    "question": "List the title of posts which were edited by Vebjorn Ljosa.",
    "predicted_sql": "SELECT T1.title FROM posts AS T1 INNER JOIN users AS T2 ON T1.lasteditoruserid = T2.id WHERE T2.displayname = 'Vebjorn Ljosa'",
    "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'",
    "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId",
    "difficulty": "simple"
  },
  {
    "question_id": 583,
    "db_id": "codebase_community",
    "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.",
    "predicted_sql": "SELECT SUM(T1.score), T2.websiteurl FROM posts AS T1 INNER JOIN users AS T2 ON T1.lasteditoruserid = T2.id WHERE T2.displayname = 'Yevgeny'",
    "gold_sql": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl",
    "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId",
    "difficulty": "simple"
  },
  {
    "question_id": 584,
    "db_id": "codebase_community",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "predicted_sql": "SELECT T2.text FROM posthistory AS T1 INNER JOIN comments AS T2 ON T1.userid = T2.userid INNER JOIN posts AS T3 ON T3.id = T2.postid WHERE T3.title = 'Why square the difference instead of taking the absolute value in standard deviation?' AND T1.comment = 'edited'",
    "gold_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
    "difficulty": "moderate"
  },
  {
    "question_id": 585,
    "db_id": "codebase_community",
    "question": "How much is the total bounty amount of the post titled about 'data'",
    "predicted_sql": "SELECT SUM(T1.bountyamount) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T2.title LIKE '%data%'",
    "gold_sql": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'",
    "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)",
    "difficulty": "simple"
  },
  {
    "question_id": 586,
    "db_id": "codebase_community",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "predicted_sql": "SELECT T3.DisplayName FROM votes AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id INNER JOIN users AS T3 ON T1.userid = T3.id WHERE T1.bountyamount = 50 AND T2.title LIKE '%variance%'",
    "gold_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
    "difficulty": "challenging"
  },
  {
    "question_id": 587,
    "db_id": "codebase_community",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "predicted_sql": "SELECT AVG(p.viewcount), p.title, c.text, p.score FROM posts AS p INNER JOIN tags AS t ON p.id = t.excerptpostid INNER JOIN comments AS c ON p.id = c.postid WHERE t.tagname = 'humor'",
    "gold_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
    "evidence": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
    "difficulty": "moderate"
  },
  {
    "question_id": 588,
    "db_id": "codebase_community",
    "question": "Give the total number of comments posted by user ID 13.",
    "predicted_sql": "SELECT COUNT(*) FROM comments WHERE userid = 13",
    "gold_sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 589,
    "db_id": "codebase_community",
    "question": "Which user ID has the highest reputation?",
    "predicted_sql": "SELECT id FROM users ORDER BY reputation DESC LIMIT 1",
    "gold_sql": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "evidence": "highest reputation refers to Max(Reputation)",
    "difficulty": "simple"
  },
  {
    "question_id": 590,
    "db_id": "codebase_community",
    "question": "Which user ID has the lowest view?",
    "predicted_sql": "SELECT id FROM users ORDER BY views ASC LIMIT 1",
    "gold_sql": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )",
    "evidence": "lowest views refers to Min(Views)",
    "difficulty": "simple"
  },
  {
    "question_id": 591,
    "db_id": "codebase_community",
    "question": "How many users are awarded with supporter badge during year 2011?",
    "predicted_sql": "SELECT COUNT(userid) FROM badges WHERE name = 'Supporter' AND strftime('%Y', date) = '2011'",
    "gold_sql": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
    "difficulty": "simple"
  },
  {
    "question_id": 592,
    "db_id": "codebase_community",
    "question": "How many users are awarded with more than 5 badges?",
    "predicted_sql": "SELECT UserId FROM badges GROUP BY UserId HAVING COUNT(Name) > 5",
    "gold_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 593,
    "db_id": "codebase_community",
    "question": "How many users from New York have a teacher and supporter badge?",
    "predicted_sql": "SELECT COUNT(DISTINCT badges.userid) FROM badges INNER JOIN users ON users.id = badges.userid WHERE users.location = 'New York' AND badges.name IN ('Supporter', 'Teacher')",
    "gold_sql": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teacher') AND T2.Location = 'New York'",
    "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 594,
    "db_id": "codebase_community",
    "question": "Which user created post ID 1 and what is the reputation of this user?",
    "predicted_sql": "SELECT T1.displayname, T1.reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.id = 1",
    "gold_sql": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 595,
    "db_id": "codebase_community",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "predicted_sql": "SELECT T1.userid FROM posthistory AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.views >= 1000 GROUP BY T1.postid HAVING COUNT(*) = 1",
    "gold_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
    "difficulty": "moderate"
  },
  {
    "question_id": 596,
    "db_id": "codebase_community",
    "question": "Which users have posted the most comments. List out the user's badge?",
    "predicted_sql": "SELECT T1.name FROM badges as T1 INNER JOIN (SELECT T3.userid from comments as T3 group by T3.userid order by count(T3.id) desc limit 1) AS T2 ON T1.userid = T2.userid",
    "gold_sql": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1",
    "evidence": "user with the most comments refers to UserId where Max(Count(Id)",
    "difficulty": "simple"
  },
  {
    "question_id": 597,
    "db_id": "codebase_community",
    "question": "How many users from India have the teacher badges?",
    "predicted_sql": "SELECT COUNT(T1.userid) FROM badges AS T1 INNER JOIN users AS T2 ON T2.id = T1.userid WHERE T2.location = 'India' AND T1.name = 'Teacher'",
    "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
    "difficulty": "simple"
  },
  {
    "question_id": 598,
    "db_id": "codebase_community",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "predicted_sql": "SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', date) = '2010' AND name = 'Student' THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM badges)) - 100.0 * (SUM(CASE WHEN strftime('%Y', date) = '2011' AND name = 'Student' THEN 1 ELSE 0 END) / (SELECT COUNT(*) FROM badges)) AS percentage_difference FROM badges",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
    "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 599,
    "db_id": "codebase_community",
    "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "predicted_sql": "SELECT T1.posthistorytypeid, COUNT(DISTINCT T2.userid) FROM posthistory AS T1 INNER JOIN comments AS T2 ON T1.postid = T2.postid WHERE T1.postid = 3720",
    "gold_sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 600,
    "db_id": "codebase_community",
    "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?",
    "predicted_sql": "SELECT T1.id, T1.viewcount FROM posts AS T1 INNER JOIN postlinks AS T2 ON T1.id = T2.relatedpostid WHERE T2.postid = 61217",
    "gold_sql": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217",
    "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount",
    "difficulty": "simple"
  },
  {
    "question_id": 601,
    "db_id": "codebase_community",
    "question": "What is the score and the link type ID for post ID 395?",
    "predicted_sql": "SELECT T1.score, T2.linktypeid FROM posts AS T1 INNER JOIN postlinks AS T2 ON T1.id = T2.postid WHERE T1.id = 395",
    "gold_sql": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 602,
    "db_id": "codebase_community",
    "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.",
    "predicted_sql": "SELECT T1.id AS postID, T2.id AS userID FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T1.score > 60",
    "gold_sql": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )",
    "evidence": "score more than 60 refers to Score > 60",
    "difficulty": "simple"
  },
  {
    "question_id": 603,
    "db_id": "codebase_community",
    "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
    "predicted_sql": "SELECT SUM(favoritecount) FROM posts WHERE owneruserid = 686 AND YEAR(creationdate) = 2011",
    "gold_sql": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
    "evidence": "in 2011 refers to year (CreatinDate) = 2011",
    "difficulty": "simple"
  },
  {
    "question_id": 604,
    "db_id": "codebase_community",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "predicted_sql": "SELECT AVG(T1.upvotes), AVG(T1.age) FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid GROUP BY T1.id HAVING COUNT(T2.id) > 10",
    "gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "evidence": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
    "difficulty": "moderate"
  },
  {
    "question_id": 605,
    "db_id": "codebase_community",
    "question": "How many users obtained the \"Announcer\" badge?",
    "predicted_sql": "SELECT COUNT(DISTINCT userid) FROM badges WHERE name = 'Announcer'",
    "gold_sql": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
    "evidence": "\"Announcer\" is the Name of badge; user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 606,
    "db_id": "codebase_community",
    "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "predicted_sql": "SELECT name FROM badges WHERE `date` = '2010-07-19 19:39:08'",
    "gold_sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 607,
    "db_id": "codebase_community",
    "question": "How many positive comments are there on the list?",
    "predicted_sql": "SELECT COUNT(*) FROM comments WHERE score > 60;",
    "gold_sql": "SELECT COUNT(id) FROM comments WHERE score > 60",
    "evidence": "Positive comment refers to score > 60",
    "difficulty": "simple"
  },
  {
    "question_id": 608,
    "db_id": "codebase_community",
    "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.",
    "predicted_sql": "SELECT text FROM comments WHERE creationdate = '2010-07-19 19:25:47'",
    "gold_sql": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:16:14.0'",
    "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:16:14 PM refers to CreationDate = '2010-07-19 19:16:14.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 609,
    "db_id": "codebase_community",
    "question": "How many posts have a score of 10 on the list?",
    "predicted_sql": "SELECT COUNT(id) FROM posts WHERE score = 10",
    "gold_sql": "SELECT COUNT(id) FROM posts WHERE Score = 10",
    "evidence": "score of 10 refers to Score = 10; post refers to Id",
    "difficulty": "simple"
  },
  {
    "question_id": 610,
    "db_id": "codebase_community",
    "question": "What are the names of badges that users who have the highest reputation obtained?",
    "predicted_sql": "SELECT name FROM badges WHERE userid IN ( SELECT id FROM users WHERE reputation = ( SELECT MAX(reputation) FROM users ) )",
    "gold_sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MAX(Reputation) FROM users)",
    "evidence": "highest reputation refers to Max(Reputation); user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 611,
    "db_id": "codebase_community",
    "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.",
    "predicted_sql": "SELECT T2.reputation FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.date = '2010-07-19 19:39:08.0'",
    "gold_sql": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 612,
    "db_id": "codebase_community",
    "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?",
    "predicted_sql": "SELECT T1.name FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.displayname = 'Pierre'",
    "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 613,
    "db_id": "codebase_community",
    "question": "List out the dates that users who are located in Rochester, NY obtained their badges?",
    "predicted_sql": "SELECT T2.date FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T1.location = 'Rochester, NY'",
    "gold_sql": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'",
    "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 614,
    "db_id": "codebase_community",
    "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users",
    "predicted_sql": "SELECT CAST(COUNT(T2.id) AS REAL) * 100 / COUNT(T1.id) FROM users AS T1 LEFT JOIN badges AS T2 ON T1.id = T2.userid WHERE T2.name = 'Teacher'",
    "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM users) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Teacher'",
    "evidence": "\"Teacher\" is the Name of badge;  percentage = Divide (Count(UserId where it's \"Teacher\"), Count(UserId)) * 100",
    "difficulty": "simple"
  },
  {
    "question_id": 615,
    "db_id": "codebase_community",
    "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN users.age BETWEEN 13 AND 19 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(users.id) FROM users INNER JOIN badges ON users.id = badges.userid WHERE badges.name = 'Organizer'",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
    "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100",
    "difficulty": "moderate"
  },
  {
    "question_id": 616,
    "db_id": "codebase_community",
    "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:19:56 PM",
    "predicted_sql": "SELECT T1.score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T2.creaiondate = '2010-07-19 19:19:56.0'",
    "gold_sql": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:19:56.0'",
    "evidence": "created on 7/19/2010 7:19:56 PM refers to CreationDate = '2010-07-19 19:19:56.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 617,
    "db_id": "codebase_community",
    "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?",
    "predicted_sql": "SELECT T1.text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T2.creaiondate = '2010-07-19 19:37:33.0'",
    "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33.0'",
    "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 618,
    "db_id": "codebase_community",
    "question": "List out the age of users who located in Vienna, Austria obtained the badge?",
    "predicted_sql": "SELECT T1.age FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T1.location = 'Vienna, Austria'",
    "gold_sql": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'",
    "evidence": "\"Vienna, Austria\" is the Location",
    "difficulty": "simple"
  },
  {
    "question_id": 619,
    "db_id": "codebase_community",
    "question": "How many adults who obtained the badge Supporter?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.userid) FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.name = 'Supporter' AND T2.age BETWEEN 19 AND 65",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
    "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
    "difficulty": "simple"
  },
  {
    "question_id": 620,
    "db_id": "codebase_community",
    "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.",
    "predicted_sql": "SELECT SUM(T2.views) FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.date = '2010-07-19 19:39:08.0'",
    "gold_sql": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08.0'",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 621,
    "db_id": "codebase_community",
    "question": "What are the name of badges that users who have the lowest reputation obtained?",
    "predicted_sql": "SELECT T2.name FROM badges AS T2 INNER JOIN users AS T1 ON T2.userid = T1.id WHERE T1.reputation = ( SELECT reputation FROM users ORDER BY reputation ASC LIMIT 1 )",
    "gold_sql": "SELECT T2.Name, T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
    "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 622,
    "db_id": "codebase_community",
    "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.",
    "predicted_sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T1.displayname = \"Sharpie\"",
    "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'",
    "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 623,
    "db_id": "codebase_community",
    "question": "How many elders obtained the \"Supporter\" badge?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.userid) FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.age > 65 AND T1.name = 'Supporter'",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'",
    "evidence": "\"Supporter\" is the Name of badge;  elders refers to Age > 65",
    "difficulty": "simple"
  },
  {
    "question_id": 624,
    "db_id": "codebase_community",
    "question": "What is the name of user with the ID of 30?",
    "predicted_sql": "SELECT displayname FROM users WHERE id = 30",
    "gold_sql": "SELECT DisplayName FROM users WHERE Id = 30",
    "evidence": "name of user refers to DisplayName;",
    "difficulty": "simple"
  },
  {
    "question_id": 625,
    "db_id": "codebase_community",
    "question": "How many users were from New York?",
    "predicted_sql": "SELECT COUNT(*) FROM users WHERE location = 'New York'",
    "gold_sql": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'",
    "evidence": "New York refers to Location;",
    "difficulty": "simple"
  },
  {
    "question_id": 626,
    "db_id": "codebase_community",
    "question": "How many votes were made in 2010?",
    "predicted_sql": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', creationdate) = '2010'",
    "gold_sql": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'",
    "evidence": "YEAR(CreationDate) = 2010;",
    "difficulty": "simple"
  },
  {
    "question_id": 627,
    "db_id": "codebase_community",
    "question": "How many users were adult?",
    "predicted_sql": "SELECT COUNT(id) FROM users WHERE age BETWEEN 19 AND 65",
    "gold_sql": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65",
    "evidence": "adult refers to user where Age BETWEEN 19 and 65;",
    "difficulty": "simple"
  },
  {
    "question_id": 628,
    "db_id": "codebase_community",
    "question": "Which users have the highest number of views?",
    "predicted_sql": "SELECT displayname FROM users ORDER BY views DESC LIMIT 1",
    "gold_sql": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);",
    "difficulty": "simple"
  },
  {
    "question_id": 629,
    "db_id": "codebase_community",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN STRFTIME('%Y', creationdate) = '2010' THEN 1 ELSE NULL END) AS REAL) / COUNT(CASE WHEN STRFTIME('%Y', creationdate) = '2011' THEN 1 ELSE NULL END) FROM votes",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;",
    "difficulty": "simple"
  },
  {
    "question_id": 630,
    "db_id": "codebase_community",
    "question": "What is the name of tags used by John Salvatier's?",
    "predicted_sql": "SELECT T1.tagname FROM tags AS T1 INNER JOIN posts AS T2 ON T1.id = T2.id INNER JOIN users AS T3 ON T2.owneruserid = T3.id WHERE T3.displayname = 'John Stauffer'",
    "gold_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Salvatier'",
    "evidence": "DisplayName = 'John Salvatier';",
    "difficulty": "simple"
  },
  {
    "question_id": 631,
    "db_id": "codebase_community",
    "question": "How many posts were created by Daniel Vassallo?",
    "predicted_sql": "SELECT COUNT(id) FROM posts WHERE owneruserid = (SELECT id FROM users WHERE displayname = 'Daniel Vassallo')",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'",
    "evidence": "DisplayName = 'Daniel Vassallo';",
    "difficulty": "simple"
  },
  {
    "question_id": 632,
    "db_id": "codebase_community",
    "question": "How many votes were made by Harlan?",
    "predicted_sql": "SELECT COUNT(T2.votetypeid) FROM users AS T1 INNER JOIN votes AS T2 ON T1.id = T2.userid WHERE T1.displayname = 'Harlan'",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'",
    "evidence": "DisplayName = 'Harlan';",
    "difficulty": "simple"
  },
  {
    "question_id": 633,
    "db_id": "codebase_community",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "predicted_sql": "SELECT T1.id FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T2.displayname = 'slashnick' ORDER BY T1.answercount DESC LIMIT 1",
    "gold_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "difficulty": "moderate"
  },
  {
    "question_id": 634,
    "db_id": "codebase_community",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "predicted_sql": "SELECT T1.ownerdisplayname, T1.title, SUM(T1.viewcount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE T2.displayname IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.ownerdisplayname, T1.title ORDER BY SUM(T1.viewcount) DESC LIMIT 1",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "difficulty": "challenging"
  },
  {
    "question_id": 635,
    "db_id": "codebase_community",
    "question": "How many posts by Matt Parker have more than 4 votes?",
    "predicted_sql": "SELECT COUNT(*) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.id = T2.postid WHERE T1.ownerdisplayname = 'Matt Parker' GROUP BY T2.postid HAVING COUNT(T2.postid) > 4",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
    "evidence": "more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker';",
    "difficulty": "moderate"
  },
  {
    "question_id": 636,
    "db_id": "codebase_community",
    "question": "How many negative comments did Neil McGuigan get in his posts?",
    "predicted_sql": "SELECT COUNT(T2.score) FROM users AS T1 INNER JOIN comments AS T2 ON T1.id = T2.userid WHERE T1.displayname = 'Neil McGuigan' AND T2.score < 60",
    "gold_sql": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
    "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';",
    "difficulty": "simple"
  },
  {
    "question_id": 637,
    "db_id": "codebase_community",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "predicted_sql": "SELECT T1.tagname FROM tags AS T1 INNER JOIN posts AS T2 ON T1.id = T2.id LEFT JOIN comments AS T3 ON T2.id = T3.postid INNER JOIN users AS T4 ON T2.owneruserid = T4.id WHERE T4.displayname = 'Mark Meckes' AND T3.id IS NULL",
    "gold_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "evidence": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 638,
    "db_id": "codebase_community",
    "question": "List all the name of users that obtained the Organizer Badges.",
    "predicted_sql": "SELECT T1.displayname FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE T2.name = 'Organizer'",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "difficulty": "simple"
  },
  {
    "question_id": 639,
    "db_id": "codebase_community",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.tagname = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM tags AS T1 INNER JOIN posts AS T2 ON T1.id = T2.id INNER JOIN users AS T3 ON T2.owneruserid = T3.id WHERE T3.displayname = 'Community'",
    "gold_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
    "difficulty": "challenging"
  },
  {
    "question_id": 640,
    "db_id": "codebase_community",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "predicted_sql": "SELECT (SELECT SUM(p.viewcount) FROM posts p INNER JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Mornington') - (SELECT SUM(p.viewcount) FROM posts p INNER JOIN users u ON p.owneruserid = u.id WHERE u.displayname = 'Amos') AS views_difference",
    "gold_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
    "difficulty": "moderate"
  },
  {
    "question_id": 641,
    "db_id": "codebase_community",
    "question": "How many users received commentator badges in 2014?",
    "predicted_sql": "SELECT COUNT(userid) FROM badges WHERE name = 'Commentator' AND YEAR(date) = 2014",
    "gold_sql": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'",
    "evidence": "Commentator is the name of the badge; year(Date) = 2014;",
    "difficulty": "simple"
  },
  {
    "question_id": 642,
    "db_id": "codebase_community",
    "question": "How many posts were created on 21st July, 2010?",
    "predicted_sql": "SELECT COUNT(id) FROM posts WHERE creaiondate BETWEEN '2010-07-21 00:00:00' AND '2010-07-21 23:59:59'",
    "gold_sql": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'",
    "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';",
    "difficulty": "simple"
  },
  {
    "question_id": 643,
    "db_id": "codebase_community",
    "question": "What are the display names and ages of user who got the highest in views?",
    "predicted_sql": "SELECT displayname, age FROM users WHERE views = ( SELECT MAX(views) FROM users )",
    "gold_sql": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
    "evidence": "the highest in views refers to MAX(Views);",
    "difficulty": "simple"
  },
  {
    "question_id": 644,
    "db_id": "codebase_community",
    "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".",
    "predicted_sql": "SELECT lasteditdate, lasteditoruserid FROM posts WHERE title = 'Detecting a given face in a database of facial images'",
    "gold_sql": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'",
    "evidence": "Title = 'Detecting a given face in a database of facial images';",
    "difficulty": "simple"
  },
  {
    "question_id": 645,
    "db_id": "codebase_community",
    "question": "How many negative comments were given by user ID 13?",
    "predicted_sql": "SELECT COUNT(id) FROM comments WHERE userid = 13 AND score < 60",
    "gold_sql": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60",
    "evidence": "negative comments refer to Score < 60;",
    "difficulty": "simple"
  },
  {
    "question_id": 646,
    "db_id": "codebase_community",
    "question": "Describe the post title which got positive comments and display names of the users who posted those comments.",
    "predicted_sql": "SELECT T2.title, T1.userdisplayname FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T1.score > 60",
    "gold_sql": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
    "evidence": "positive comments refer to Score > 60;",
    "difficulty": "simple"
  },
  {
    "question_id": 647,
    "db_id": "codebase_community",
    "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.",
    "predicted_sql": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.id = T2.userid WHERE STRFTIME('%Y', T2.date) = '2011' AND T1.location = 'North Pole'",
    "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'",
    "evidence": "received in 2011 refers to year(Date) = 2011;",
    "difficulty": "simple"
  },
  {
    "question_id": 648,
    "db_id": "codebase_community",
    "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.",
    "predicted_sql": "SELECT T1.displayname, T1.websiteurl FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.favoritecount > 150",
    "gold_sql": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150",
    "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;",
    "difficulty": "simple"
  },
  {
    "question_id": 649,
    "db_id": "codebase_community",
    "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
    "predicted_sql": "SELECT COUNT(T2.postid), MAX(T2.creationdate) FROM posts AS T1 INNER JOIN posthistory AS T2 ON T1.id = T2.postid WHERE T1.title = 'What is the best introductory Bayesian statistics textbook?'",
    "gold_sql": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 650,
    "db_id": "codebase_community",
    "question": "Describe the last accessed date and location of the users who received the outliers badge.",
    "predicted_sql": "SELECT T2.lastaccessdate, T2.location FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.name = 'outliers'",
    "gold_sql": "SELECT T1.LastAccessDate, T1.Location FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'outliers'",
    "evidence": "Outliers is the name of the badge;",
    "difficulty": "simple"
  },
  {
    "question_id": 651,
    "db_id": "codebase_community",
    "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".",
    "predicted_sql": "SELECT T2.title FROM posts AS T1 INNER JOIN posts AS T2 ON T1.id = T2.parentid WHERE T1.title = 'How to tell if something happened in a data set which monitors a value over time'",
    "gold_sql": "SELECT T3.Title FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN posts AS T3 ON T1.RelatedPostId = T3.Id WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 652,
    "db_id": "codebase_community",
    "question": "List the post IDs and badge names of the user Samuel in 2013.",
    "predicted_sql": "SELECT T2.id AS Post_Id, T1.name AS Badge_Name FROM badges AS T1 INNER JOIN posts AS T2 ON T1.userid = T2.owneruserid INNER JOIN users AS T3 ON T3.id = T1.userid WHERE T3.displayname = 'Samuel' AND YEAR(T1.date) = 2013 AND YEAR(T2.creaiondate) = 2013",
    "gold_sql": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
    "evidence": "Samuel refers to UserDisplayName; YEAR(CreationDate) = 2013 relates to PostId; YEAR(Date) = 2013 relates to the badge;",
    "difficulty": "moderate"
  },
  {
    "question_id": 653,
    "db_id": "codebase_community",
    "question": "What is the owner's display name of the most popular post?",
    "predicted_sql": "SELECT users.displayname FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY posts.viewcount DESC LIMIT 1",
    "gold_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )",
    "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 654,
    "db_id": "codebase_community",
    "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
    "predicted_sql": "SELECT T2.displayname, T2.location FROM tags AS T1 INNER JOIN users AS T2 ON T1.excerptpostid = T2.id WHERE T1.tagname = 'hypothesis-testing'",
    "gold_sql": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
    "evidence": "user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing';",
    "difficulty": "moderate"
  },
  {
    "question_id": 655,
    "db_id": "codebase_community",
    "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".",
    "predicted_sql": "SELECT T2.title, T1.linktypeid FROM postlinks AS T1 INNER JOIN posts AS T2 ON T1.relatedpostid = T2.id WHERE T1.postid = (SELECT id FROM posts WHERE title = 'What are principal component scores?')",
    "gold_sql": "SELECT T3.Title, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId INNER JOIN posts AS T3 ON T2.RelatedPostId = T3.Id WHERE T1.Title = 'What are principal component scores?'",
    "evidence": "Title = 'What are principal component scores?';",
    "difficulty": "simple"
  },
  {
    "question_id": 656,
    "db_id": "codebase_community",
    "question": "Describe the display name of the parent ID for child post with the highest score.",
    "predicted_sql": "SELECT T1.displayname FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.parentid IS NOT NULL ORDER BY T2.score DESC LIMIT 1",
    "gold_sql": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )",
    "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);",
    "difficulty": "simple"
  },
  {
    "question_id": 657,
    "db_id": "codebase_community",
    "question": "Under the vote type of 8, provide the display names and websites URLs of the user who got the highest bounty amount.",
    "predicted_sql": "SELECT T2.displayname, T2.websiteurl FROM votes AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.votetypeid = 8 ORDER BY T1.bountyamount DESC LIMIT 1",
    "gold_sql": "SELECT DisplayName, WebsiteUrl FROM users WHERE Id = ( SELECT UserId FROM votes WHERE VoteTypeId = 8 ORDER BY BountyAmount DESC LIMIT 1 )",
    "evidence": "vote type of 8 refers to VoteTypeId = 8; the highest bounty amount refers to MAX(BountyAmount);",
    "difficulty": "moderate"
  },
  {
    "question_id": 658,
    "db_id": "codebase_community",
    "question": "What are the titles of the top 5 posts with the highest popularity?",
    "predicted_sql": "SELECT title FROM posts ORDER BY viewcount DESC LIMIT 5",
    "gold_sql": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5",
    "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 659,
    "db_id": "codebase_community",
    "question": "How many tags have post count between 5,000 to 7,000?",
    "predicted_sql": "SELECT COUNT(id) FROM tags WHERE count BETWEEN 5000 AND 7000",
    "gold_sql": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
    "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;",
    "difficulty": "simple"
  },
  {
    "question_id": 660,
    "db_id": "codebase_community",
    "question": "What is the owner user id of the most valuable post?",
    "predicted_sql": "SELECT owneruserid FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
    "gold_sql": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )",
    "evidence": "the most valuable post refers to MAX(FavoriteCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 661,
    "db_id": "codebase_community",
    "question": "How old is the most influential user?",
    "predicted_sql": "SELECT age FROM users ORDER BY reputation DESC LIMIT 1",
    "gold_sql": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);",
    "difficulty": "simple"
  },
  {
    "question_id": 662,
    "db_id": "codebase_community",
    "question": "How many posts with votes that were created in 2011 have a bounty of 50?",
    "predicted_sql": "SELECT COUNT(DISTINCT postid) FROM votes INNER JOIN posts ON posts.id = votes.postid WHERE YEAR(posts.creaiondate) = 2011 AND votes.bountyamount = 50",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T2.BountyAmount = 50 AND STRFTIME('%Y', T2.CreationDate) = '2011'",
    "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;",
    "difficulty": "simple"
  },
  {
    "question_id": 663,
    "db_id": "codebase_community",
    "question": "What is the id of the youngest user?",
    "predicted_sql": "SELECT id FROM users ORDER BY age ASC LIMIT 1",
    "gold_sql": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )",
    "evidence": "the youngest user refers to MIN(Age);",
    "difficulty": "simple"
  },
  {
    "question_id": 664,
    "db_id": "codebase_community",
    "question": "What is the sum of score of the post on 2010-07-19?",
    "predicted_sql": "SELECT T2.score FROM tags AS T1 INNER JOIN posts AS T2 ON T1.excerptpostid = T2.id WHERE T1.count = ( SELECT MAX(count) FROM tags )",
    "gold_sql": "SELECT SUM(Score) FROM posts WHERE LasActivityDate LIKE '2010-07-19%'",
    "evidence": "on 2010-07-19 refers to LasActivityDate LIKE '2010-07-19%';",
    "difficulty": "simple"
  },
  {
    "question_id": 665,
    "db_id": "codebase_community",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "predicted_sql": "SELECT CAST(COUNT(T1.id) AS REAL) / 12 FROM postlinks AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T2.answercount <= 2 AND STRFTIME('%Y', T1.creationdate) = '2010'",
    "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
    "difficulty": "moderate"
  },
  {
    "question_id": 666,
    "db_id": "codebase_community",
    "question": "Among the posts that were voted by user 1465, what is the id of the most valuable post?",
    "predicted_sql": "SELECT T1.id FROM posts AS T1 INNER JOIN votes AS T2 ON T1.id = T2.postid WHERE T2.userid = 1465 ORDER BY T1.favoritecount DESC LIMIT 1",
    "gold_sql": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 1465 ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "evidence": "user 1465 refers to UserId = 1465; the most valuable post refers to MAX(FavoriteCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 667,
    "db_id": "codebase_community",
    "question": "What is the title of the post with the oldest post link?",
    "predicted_sql": "SELECT T1.title FROM posts AS T1 INNER JOIN postlinks AS T2 ON T1.id = T2.postid ORDER BY T2.creationdate ASC LIMIT 1",
    "gold_sql": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1",
    "evidence": "the oldest post link refers to MIN(CreaionDate);",
    "difficulty": "simple"
  },
  {
    "question_id": 668,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who acquired the highest amount of badges?",
    "predicted_sql": "SELECT T1.displayname FROM users AS T1 INNER JOIN badges as T2 ON T1.id = T2.userid GROUP BY T1.displayname ORDER BY COUNT(T2.name) DESC LIMIT 1",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "evidence": "highest amount of badges refers to MAX(COUNT(Name));",
    "difficulty": "simple"
  },
  {
    "question_id": 669,
    "db_id": "codebase_community",
    "question": "When did 'chl' cast its first vote in a post?",
    "predicted_sql": "SELECT MIN(T2.creationdate) FROM users AS T1 INNER JOIN votes AS T2 ON T1.id = T2.userid WHERE T1.displayname = 'chl'",
    "gold_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
    "difficulty": "simple"
  },
  {
    "question_id": 670,
    "db_id": "codebase_community",
    "question": "What is the date when the youngest user made his or her first post?",
    "predicted_sql": "SELECT MIN(posts.creaiondate) FROM posts INNER JOIN users ON posts.owneruserid = users.id ORDER BY users.age LIMIT 1",
    "gold_sql": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
    "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);",
    "difficulty": "simple"
  },
  {
    "question_id": 671,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "predicted_sql": "SELECT T2.displayname FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.name = 'Autobiographer' ORDER BY T1.date ASC LIMIT 1",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "difficulty": "simple"
  },
  {
    "question_id": 672,
    "db_id": "codebase_community",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM Users AS T1 INNER JOIN Posts AS T2 ON T1.id = T2.owneruserid WHERE T1.location = 'United Kingdom' AND (SELECT SUM(FavoriteCount) FROM Posts WHERE OwnerUserID = T1.id) >= 4",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
    "difficulty": "moderate"
  },
  {
    "question_id": 673,
    "db_id": "codebase_community",
    "question": "What is the average number of posts voted by the oldest users?",
    "predicted_sql": "SELECT AVG(T1.postid) FROM votes AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.age = ( SELECT MAX(age) FROM users )",
    "gold_sql": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
    "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
    "difficulty": "simple"
  },
  {
    "question_id": 674,
    "db_id": "codebase_community",
    "question": "Who has the highest reputation? Please give the display name.",
    "predicted_sql": "SELECT displayname FROM users ORDER BY reputation DESC LIMIT 1",
    "gold_sql": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )",
    "evidence": "the highest reputation refers to MAX(Reputation);",
    "difficulty": "simple"
  },
  {
    "question_id": 675,
    "db_id": "codebase_community",
    "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?",
    "predicted_sql": "SELECT COUNT(id) FROM users WHERE reputation > 2000 AND views > 1000;",
    "gold_sql": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000",
    "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;",
    "difficulty": "simple"
  },
  {
    "question_id": 676,
    "db_id": "codebase_community",
    "question": "Please list all display names of users who are adults.",
    "predicted_sql": "SELECT displayname FROM users WHERE age BETWEEN 19 AND 65",
    "gold_sql": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65",
    "evidence": "adults refer to users where Age BETWEEN 19 and 65;",
    "difficulty": "simple"
  },
  {
    "question_id": 677,
    "db_id": "codebase_community",
    "question": "How many posts did Jay Stevens have in 2010?",
    "predicted_sql": "SELECT COUNT(T2.id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T1.displayname = 'Jay Stevens' AND YEAR(T2.creationdate) = 2010",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2010' AND T1.DisplayName = 'Jay Stevens'",
    "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;",
    "difficulty": "simple"
  },
  {
    "question_id": 678,
    "db_id": "codebase_community",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "predicted_sql": "SELECT T2.id, T2.title FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T1.displayname = 'Harvey Motulsky' ORDER BY T2.viewcount DESC LIMIT 1",
    "gold_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 679,
    "db_id": "codebase_community",
    "question": "Which post has the highest score? Please give its id and title's name.",
    "predicted_sql": "SELECT T1.id, T1.title FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id ORDER BY T1.score DESC LIMIT 1",
    "gold_sql": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1",
    "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;",
    "difficulty": "simple"
  },
  {
    "question_id": 680,
    "db_id": "codebase_community",
    "question": "What is the average score of Stephen Turner's posts?",
    "predicted_sql": "SELECT AVG(score) FROM posts WHERE owneruserid = ( SELECT id FROM users WHERE displayname = 'Stephen Turner')",
    "gold_sql": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'",
    "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);",
    "difficulty": "simple"
  },
  {
    "question_id": 681,
    "db_id": "codebase_community",
    "question": "Please list the users' display names whose posts had over 20000 views in 2011.",
    "predicted_sql": "SELECT DISTINCT T1.displayname FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T2.viewcount > 20000 AND strftime('%Y', T2.creaiondate) = '2011'",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000",
    "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;",
    "difficulty": "simple"
  },
  {
    "question_id": 682,
    "db_id": "codebase_community",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "predicted_sql": "SELECT T1.id, T2.displayname FROM posts AS T1 INNER JOIN users AS T2 ON T1.owneruserid = T2.id WHERE STRFTIME('%Y', T1.creaiondate) = '2010' ORDER BY T1.favoritecount DESC LIMIT 1",
    "gold_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "evidence": "the most valuable post in 2015 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
    "difficulty": "moderate"
  },
  {
    "question_id": 683,
    "db_id": "codebase_community",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN users.reputation > 1000 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(posts.id) AS percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE strftime('%Y', posts.creaiondate) = '2011'",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
    "difficulty": "moderate"
  },
  {
    "question_id": 684,
    "db_id": "codebase_community",
    "question": "Identify the percentage of teenage users.",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN age BETWEEN 13 AND 19 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM users",
    "gold_sql": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users",
    "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;",
    "difficulty": "simple"
  },
  {
    "question_id": 685,
    "db_id": "codebase_community",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "predicted_sql": "SELECT T1.viewcount, T2.displayname FROM posts AS T1 INNER JOIN users AS T2 ON T1.lasteditoruserid = T2.id WHERE T1.title = 'Computer Game Datasets'",
    "gold_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "difficulty": "moderate"
  },
  {
    "question_id": 686,
    "db_id": "codebase_community",
    "question": "Identify the total number of posts with views above average.",
    "predicted_sql": "SELECT COUNT(*) FROM posts WHERE viewcount > (SELECT AVG(viewcount) FROM posts)",
    "gold_sql": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )",
    "evidence": "views above average refer to ViewCount > AVG(ViewCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 687,
    "db_id": "codebase_community",
    "question": "How many comments were added to the post with the highest score?",
    "predicted_sql": "SELECT COUNT(id) FROM comments WHERE postid = ( SELECT id FROM posts ORDER BY score DESC LIMIT 1 )",
    "gold_sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "evidence": "the highest score refers to MAX(Score);",
    "difficulty": "simple"
  },
  {
    "question_id": 688,
    "db_id": "codebase_community",
    "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.",
    "predicted_sql": "SELECT COUNT(id) as NumberOfPosts FROM posts WHERE viewcount > 35000 AND commentcount = 0",
    "gold_sql": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0",
    "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;",
    "difficulty": "simple"
  },
  {
    "question_id": 689,
    "db_id": "codebase_community",
    "question": "Identify the display name and location of the user, who was the last to edit the post with ID 183.",
    "predicted_sql": "SELECT users.displayname, users.location FROM users INNER JOIN posts ON users.id = posts.lasteditoruserid WHERE posts.id = 183 ORDER BY posts.lasteditdate DESC LIMIT 1",
    "gold_sql": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 183 ORDER BY T1.LastEditDate DESC LIMIT 1",
    "evidence": "last to edit refers to MAX(LastEditDate);",
    "difficulty": "simple"
  },
  {
    "question_id": 690,
    "db_id": "codebase_community",
    "question": "Identify the latest badge awarded to the user with the display name Emmett.",
    "predicted_sql": "SELECT T1.name FROM badges AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.displayname = 'Emmett' ORDER BY T1.date DESC LIMIT 1",
    "gold_sql": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1",
    "evidence": "the latest badge refers to Name FROM badges where MAX(Date);",
    "difficulty": "simple"
  },
  {
    "question_id": 691,
    "db_id": "codebase_community",
    "question": "Identify the number of adult users who have cast over 5000 upvotes.",
    "predicted_sql": "SELECT COUNT(id) FROM users WHERE age BETWEEN 19 AND 65 AND upvotes > 5000",
    "gold_sql": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
    "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
    "difficulty": "simple"
  },
  {
    "question_id": 692,
    "db_id": "codebase_community",
    "question": "How long did it take the user, known by his or her display name 'Zolomon' to get the badge? Count from the date the user's account was created.",
    "predicted_sql": "SELECT strftime('%J', badges.date) - strftime('%J', users.creationdate) AS days_diff FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'Zolomon'",
    "gold_sql": "SELECT T1.Date - T2.CreationDate FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Zolomon'",
    "evidence": "SUBTRACT(Date from stats_badges, CreationDate) where DisplayName = 'Zolomon';",
    "difficulty": "moderate"
  },
  {
    "question_id": 693,
    "db_id": "codebase_community",
    "question": "Identify the number of posts and comments left by the user, who has the latest created user account.",
    "predicted_sql": "SELECT (SELECT COUNT(*) FROM posts WHERE owneruserid = (SELECT id FROM users ORDER BY creationdate DESC LIMIT 1)) AS NumberOfPosts, (SELECT COUNT(*) FROM comments WHERE userid = (SELECT id FROM users ORDER BY creationdate DESC LIMIT 1)) AS NumberOfComments",
    "gold_sql": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1",
    "evidence": "the latest created user account refers to MAX(CreationDate);",
    "difficulty": "simple"
  },
  {
    "question_id": 694,
    "db_id": "codebase_community",
    "question": "Provide the text of the latest comment to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "predicted_sql": "SELECT T1.text, T3.displayname FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id INNER JOIN users AS T3 ON T1.userid = T3.id WHERE T2.title = 'Analysing wind data with R' ORDER BY T1.creationdate DESC LIMIT 1",
    "gold_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' AND T3.CreationDate = (SELECT MAX(T4.CreationDate) FROM users AS T5 INNER JOIN posts AS T6 ON T5.Id = T6.OwnerUserId INNER JOIN comments AS T4 ON T6.Id = T4.PostId WHERE T6.Title = 'Analysing wind data with R')",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "difficulty": "moderate"
  },
  {
    "question_id": 695,
    "db_id": "codebase_community",
    "question": "How many users were awarded with 'Citizen Patrol' badge?",
    "predicted_sql": "SELECT COUNT(DISTINCT userid) FROM badges WHERE name = 'Citizen Patrol'",
    "gold_sql": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'",
    "evidence": "Citizen Patrol' is the name of the badge;",
    "difficulty": "simple"
  },
  {
    "question_id": 696,
    "db_id": "codebase_community",
    "question": "Count the number of posts with a tag specified as 'careers'.",
    "predicted_sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN tags AS T2 ON T1.id = T2.excerptpostid WHERE T2.tagname = 'careers'",
    "gold_sql": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'",
    "evidence": "tag specified as 'careers' refers to TagName = 'careers';",
    "difficulty": "simple"
  },
  {
    "question_id": 697,
    "db_id": "codebase_community",
    "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?",
    "predicted_sql": "SELECT reputation, views FROM users WHERE displayname = 'Jarrod Dixon'",
    "gold_sql": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 698,
    "db_id": "codebase_community",
    "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?",
    "predicted_sql": "SELECT (SELECT COUNT(*) FROM comments WHERE postid = (SELECT id FROM posts WHERE title = 'Clustering 1D data')) AS comment_count, (SELECT COUNT(*) FROM posts WHERE parentid = (SELECT id FROM posts WHERE title = 'Clustering 1D data')) AS answer_count",
    "gold_sql": "SELECT CommentCount, AnswerCount FROM posts WHERE Title = 'Clustering 1D data'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 699,
    "db_id": "codebase_community",
    "question": "When did the user known as 'IrishStat' create his or her account?",
    "predicted_sql": "SELECT creationdate FROM users WHERE displayname = 'IrishStat'",
    "gold_sql": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'",
    "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;",
    "difficulty": "simple"
  },
  {
    "question_id": 700,
    "db_id": "codebase_community",
    "question": "Identify the number of posts that offer a bounty amount over 30.",
    "predicted_sql": "SELECT COUNT(postid) FROM votes WHERE bountyamount >= 30",
    "gold_sql": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30",
    "evidence": "bounty amount over 30 refers to BountyAmount > = 30;",
    "difficulty": "simple"
  },
  {
    "question_id": 701,
    "db_id": "codebase_community",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.score >= 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.id = T2.owneruserid WHERE T1.id = (SELECT id FROM users ORDER BY reputation DESC LIMIT 1)",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
    "evidence": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));",
    "difficulty": "challenging"
  },
  {
    "question_id": 702,
    "db_id": "codebase_community",
    "question": "How many posts have a score less than 20?",
    "predicted_sql": "SELECT COUNT(ID) FROM posts WHERE score < 20",
    "gold_sql": "SELECT COUNT(id) FROM posts WHERE Score < 20",
    "evidence": "score less than 20 refers to Score < 20;",
    "difficulty": "simple"
  },
  {
    "question_id": 703,
    "db_id": "codebase_community",
    "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?",
    "predicted_sql": "SELECT COUNT(Id) FROM tags WHERE Id < 15 AND Count <= 20",
    "gold_sql": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15",
    "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;",
    "difficulty": "simple"
  },
  {
    "question_id": 704,
    "db_id": "codebase_community",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "predicted_sql": "SELECT excerptpostid, wikipostid FROM tags WHERE tagname = 'sample'",
    "gold_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "difficulty": "simple"
  },
  {
    "question_id": 705,
    "db_id": "codebase_community",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "predicted_sql": "SELECT T2.reputation, T2.upvotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.text = 'fine, you win :)'",
    "gold_sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "evidence": "Text = 'fine, you win :)';",
    "difficulty": "simple"
  },
  {
    "question_id": 706,
    "db_id": "codebase_community",
    "question": "Give the texts commented on the post about linear regression.",
    "predicted_sql": "SELECT T1.text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T2.title = 'Linear regression in R'",
    "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title LIKE '%linear regression%'",
    "evidence": "about linear regression refers to Title contains 'linear regression'",
    "difficulty": "simple"
  },
  {
    "question_id": 707,
    "db_id": "codebase_community",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "predicted_sql": "SELECT T2.text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.id = T2.postid WHERE T1.viewcount BETWEEN 100 AND 150 ORDER BY T2.score DESC LIMIT 1",
    "gold_sql": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
    "difficulty": "moderate"
  },
  {
    "question_id": 708,
    "db_id": "codebase_community",
    "question": "List the creation date and age of the user that commented with webiste.",
    "predicted_sql": "SELECT T1.creationdate, T1.age FROM users AS T1 INNER JOIN comments AS T2 ON T1.id = T2.userid WHERE T2.text LIKE '%http://%'",
    "gold_sql": "SELECT T2.CreationDate, T2.Age FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.text LIKE '%http://%'",
    "evidence": "commented with webiste refers to the value contains 'http://'",
    "difficulty": "moderate"
  },
  {
    "question_id": 709,
    "db_id": "codebase_community",
    "question": "In comments with 0 score, how many of the posts have view count lower than 5?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.postid) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.postid = T2.id WHERE T1.score = 0 AND T2.viewcount < 5",
    "gold_sql": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0",
    "evidence": "view count lower than 5 refers to ViewCount < 5;",
    "difficulty": "simple"
  },
  {
    "question_id": 710,
    "db_id": "codebase_community",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "predicted_sql": "SELECT COUNT(T2.score) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.id = T2.postid WHERE T1.commentcount = 1 AND T2.score = 0",
    "gold_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "evidence": "in posts with 1 comment refers to CommentCount = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 711,
    "db_id": "codebase_community",
    "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.score = 0 AND T2.age = 40",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 712,
    "db_id": "codebase_community",
    "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?",
    "predicted_sql": "SELECT T1.id AS post_id, T3.text AS comment_text FROM posts AS T1 INNER JOIN comments AS T3 ON T1.id = T3.postid WHERE T1.title = 'Group differences on a five point Likert item'",
    "gold_sql": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'",
    "evidence": "Title = 'Group differences on a five point Likert item';",
    "difficulty": "simple"
  },
  {
    "question_id": 713,
    "db_id": "codebase_community",
    "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?",
    "predicted_sql": "SELECT T2.upvotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.text = \"R is also lazy evaluated.\"",
    "gold_sql": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'",
    "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;",
    "difficulty": "simple"
  },
  {
    "question_id": 714,
    "db_id": "codebase_community",
    "question": "List the comments commented by the user with a username of Harvey Motulsky.",
    "predicted_sql": "SELECT T1.text FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T2.displayname = 'Harvey Motulsky'",
    "gold_sql": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Harvey Motulsky'",
    "evidence": "comments refer to Text; username of Harvey Motulsky refers to DisplayName = 'Harvey Motulsky';",
    "difficulty": "simple"
  },
  {
    "question_id": 715,
    "db_id": "codebase_community",
    "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
    "predicted_sql": "SELECT T2.displayname FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.score BETWEEN 1 AND 5 AND T2.downvotes = 0",
    "gold_sql": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
    "evidence": "DownVotes = 0; Score BETWEEN 1 and 5",
    "difficulty": "simple"
  },
  {
    "question_id": 716,
    "db_id": "codebase_community",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.upvotes = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.upvotes) FROM comments AS T1 INNER JOIN users AS T2 ON T1.userid = T2.id WHERE T1.score BETWEEN 5 AND 10",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "evidence": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));",
    "difficulty": "moderate"
  },
  {
    "question_id": 717,
    "db_id": "superhero",
    "question": "Please list all the superpowers of 3-D Man.",
    "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "difficulty": "simple"
  },
  {
    "question_id": 718,
    "db_id": "superhero",
    "question": "How many superheroes have the super power of \"Super Strength\"?",
    "predicted_sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength'",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
    "difficulty": "simple"
  },
  {
    "question_id": 719,
    "db_id": "superhero",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.hero_id) FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T1.power_name = 'Super Strength' AND T3.height_cm > 200",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
    "difficulty": "moderate"
  },
  {
    "question_id": 720,
    "db_id": "superhero",
    "question": "Please list the full names of all the superheroes with over 15 super powers.",
    "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
    "gold_sql": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
    "evidence": "15 super powers refers to COUNT(full_name) > 15",
    "difficulty": "simple"
  },
  {
    "question_id": 721,
    "db_id": "superhero",
    "question": "How many superheroes have blue eyes?",
    "predicted_sql": "SELECT COUNT(superhero.id) FROM superhero JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 722,
    "db_id": "superhero",
    "question": "What is the colour of Apocalypse's skin?",
    "predicted_sql": "SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.skin_colour_id WHERE T2.superhero_name = 'Apocalypse'",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'",
    "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id",
    "difficulty": "simple"
  },
  {
    "question_id": 723,
    "db_id": "superhero",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "predicted_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id INNER JOIN colour AS T4 ON T3.eye_colour_id = T4.id WHERE T2.power_name = 'Agility' AND T4.colour = 'Blue'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "difficulty": "moderate"
  },
  {
    "question_id": 724,
    "db_id": "superhero",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "predicted_sql": "SELECT superhero.superhero_name FROM superhero JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "difficulty": "challenging"
  },
  {
    "question_id": 725,
    "db_id": "superhero",
    "question": "How many superheroes are published by Marvel Comics?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "difficulty": "simple"
  },
  {
    "question_id": 726,
    "db_id": "superhero",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics' ORDER BY T1.height_cm DESC LIMIT 1",
    "gold_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "difficulty": "moderate"
  },
  {
    "question_id": 727,
    "db_id": "superhero",
    "question": "Who is the publisher of Sauron?",
    "predicted_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'",
    "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'",
    "difficulty": "simple"
  },
  {
    "question_id": 728,
    "db_id": "superhero",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'Marvel Comics' AND T2.colour = 'Blue'",
    "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "difficulty": "moderate"
  },
  {
    "question_id": 729,
    "db_id": "superhero",
    "question": "What is the average height of the superheroes from Marvel Comics?",
    "predicted_sql": "SELECT AVG(superhero.height_cm) FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'",
    "evidence": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)",
    "difficulty": "simple"
  },
  {
    "question_id": 730,
    "db_id": "superhero",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "difficulty": "challenging"
  },
  {
    "question_id": 731,
    "db_id": "superhero",
    "question": "How many superheroes did DC Comics publish?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'",
    "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'",
    "difficulty": "simple"
  },
  {
    "question_id": 732,
    "db_id": "superhero",
    "question": "Which publisher published the slowest superhero?",
    "predicted_sql": "SELECT T2.publisher_name FROM publisher AS T2 INNER JOIN superhero AS T1 ON T2.id = T1.publisher_id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value ASC LIMIT 1",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
    "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name",
    "difficulty": "moderate"
  },
  {
    "question_id": 733,
    "db_id": "superhero",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "predicted_sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.colour = 'Gold' AND T3.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
    "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'",
    "difficulty": "moderate"
  },
  {
    "question_id": 734,
    "db_id": "superhero",
    "question": "What is the publisher's name of Blue Beetle II?",
    "predicted_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'",
    "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'",
    "difficulty": "simple"
  },
  {
    "question_id": 735,
    "db_id": "superhero",
    "question": "How many superheroes with blonde hair are there?",
    "predicted_sql": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'",
    "evidence": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id",
    "difficulty": "simple"
  },
  {
    "question_id": 736,
    "db_id": "superhero",
    "question": "Who is the dumbest superhero?",
    "predicted_sql": "SELECT T3.superhero_name FROM attribute AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.attribute_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T1.attribute_name = 'Intelligence' ORDER BY T2.attribute_value ASC LIMIT 1",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Intelligence')",
    "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
    "difficulty": "moderate"
  },
  {
    "question_id": 737,
    "db_id": "superhero",
    "question": "What is Copycat's race?",
    "predicted_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "gold_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "evidence": "Copycat is the superhero_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 738,
    "db_id": "superhero",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "difficulty": "simple"
  },
  {
    "question_id": 739,
    "db_id": "superhero",
    "question": "What are the names of the superheroes with the power of death touch?",
    "predicted_sql": "SELECT T3.superhero_name FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T3 ON T2.hero_id = T3.id WHERE T1.power_name = 'Death Touch'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "difficulty": "moderate"
  },
  {
    "question_id": 740,
    "db_id": "superhero",
    "question": "How many female superheroes have a strength value of 100?",
    "predicted_sql": "SELECT COUNT(DISTINCT h.id) FROM superhero AS h JOIN gender AS g ON h.gender_id = g.id JOIN hero_attribute AS a ON h.id = a.hero_id JOIN attribute AS attr ON a.attribute_id = attr.id WHERE g.gender = 'Female' AND attr.attribute_name = 'Strength' AND a.attribute_value = 100",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
    "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 741,
    "db_id": "superhero",
    "question": "What is the name of the superhero that has the most powers?",
    "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.power_id) DESC LIMIT 1",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1",
    "evidence": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))",
    "difficulty": "simple"
  },
  {
    "question_id": 742,
    "db_id": "superhero",
    "question": "How many vampire superheroes are there?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "gold_sql": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "evidence": "vampire superheroes refers to race = 'Vampire'",
    "difficulty": "simple"
  },
  {
    "question_id": 743,
    "db_id": "superhero",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T1.alignment = 'Bad' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id), COUNT(CASE WHEN T1.alignment = 'Bad' AND T3.publisher_name = 'Marvel Comics' THEN T2.id END) AS \"number\" FROM alignment AS T1 INNER JOIN superhero AS T2 ON T2.alignment_id = T1.id INNER JOIN publisher AS T3 ON T3.id = T2.publisher_id",
    "gold_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
    "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 744,
    "db_id": "superhero",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "predicted_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) AS Difference FROM superhero",
    "gold_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))",
    "difficulty": "challenging"
  },
  {
    "question_id": 745,
    "db_id": "superhero",
    "question": "Give the publisher ID of Star Trek.",
    "predicted_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "gold_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "evidence": "Star Trek is the publisher_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 746,
    "db_id": "superhero",
    "question": "Calculate the average attribute value of all superheroes.",
    "predicted_sql": "SELECT AVG(attribute_value) FROM hero_attribute;",
    "gold_sql": "SELECT AVG(attribute_value) FROM hero_attribute",
    "evidence": "average attribute value of all superheroes refers to AVG(attribute_value)",
    "difficulty": "simple"
  },
  {
    "question_id": 747,
    "db_id": "superhero",
    "question": "What is the total number of superheroes without full name?",
    "predicted_sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "gold_sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "evidence": "superheroes without full name refers to full_name IS NULL",
    "difficulty": "simple"
  },
  {
    "question_id": 748,
    "db_id": "superhero",
    "question": "What is the eye colour of superhero with superhero ID 75?",
    "predicted_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75",
    "evidence": "eye colour refers to colour where eye_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 749,
    "db_id": "superhero",
    "question": "Provide the superpowers of the superhero called Deathlok.",
    "predicted_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
    "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'",
    "difficulty": "simple"
  },
  {
    "question_id": 750,
    "db_id": "superhero",
    "question": "What is the average weight of all female superheroes?",
    "predicted_sql": "SELECT AVG(weight_kg) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Female'",
    "gold_sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
    "evidence": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)",
    "difficulty": "simple"
  },
  {
    "question_id": 751,
    "db_id": "superhero",
    "question": "List down at least five superpowers of male superheroes.",
    "predicted_sql": "SELECT power_name FROM superpower AS sp INNER JOIN hero_power AS hp ON sp.id = hp.power_id INNER JOIN superhero AS sh ON hp.hero_id = sh.id INNER JOIN gender AS g ON sh.gender_id = g.id WHERE g.gender = 'Male' LIMIT 5",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 752,
    "db_id": "superhero",
    "question": "Give the name of the alien superheroes.",
    "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 753,
    "db_id": "superhero",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "predicted_sql": "SELECT superhero_name FROM superhero WHERE height_cm BETWEEN 170 AND 190 AND eye_colour_id = 1",
    "gold_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
    "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
    "difficulty": "moderate"
  },
  {
    "question_id": 754,
    "db_id": "superhero",
    "question": "What is the superpower of hero ID 56?",
    "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
    "gold_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56",
    "evidence": "superpower refers to hero_power",
    "difficulty": "simple"
  },
  {
    "question_id": 755,
    "db_id": "superhero",
    "question": "List down at least five full name of Demi-God superheroes.",
    "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God' LIMIT 5",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'",
    "evidence": "Demi-God superheroes refers to race = 'Demi-God'",
    "difficulty": "simple"
  },
  {
    "question_id": 756,
    "db_id": "superhero",
    "question": "How many bad superheroes are there?",
    "predicted_sql": "SELECT COUNT(id) FROM superhero WHERE alignment_id = ( SELECT id FROM alignment WHERE alignment = 'Bad' )",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
    "evidence": "bad superheroes refers to alignment_id = Bad",
    "difficulty": "simple"
  },
  {
    "question_id": 757,
    "db_id": "superhero",
    "question": "Identify the race of the superhero who weighed 169 kg.",
    "predicted_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
    "gold_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169",
    "evidence": "weighed 169 kg refers to weight_kg = 169",
    "difficulty": "simple"
  },
  {
    "question_id": 758,
    "db_id": "superhero",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "predicted_sql": "SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.hair_colour_id INNER JOIN race AS T3 ON T2.race_id = T3.id WHERE T2.height_cm = 185 AND T3.race = 'Human'",
    "gold_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "difficulty": "moderate"
  },
  {
    "question_id": 759,
    "db_id": "superhero",
    "question": "What is the eye clolour of the heaviest superhero?",
    "predicted_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1",
    "evidence": "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 760,
    "db_id": "superhero",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.publisher_name) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 761,
    "db_id": "superhero",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "predicted_sql": "SELECT DISTINCT superhero.full_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > ( SELECT AVG(weight_kg) * 0.79 FROM superhero )",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
    "difficulty": "moderate"
  },
  {
    "question_id": 762,
    "db_id": "superhero",
    "question": "Which power do superheroes have the most of?",
    "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
    "gold_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
    "evidence": "power that superheroes have the most refers to MAX(COUNT(power_name))",
    "difficulty": "simple"
  },
  {
    "question_id": 763,
    "db_id": "superhero",
    "question": "Indicate the attribute value of superhero Abomination.",
    "predicted_sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "gold_sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'",
    "evidence": "Abomination refers to superhero_name = 'Abomination';",
    "difficulty": "simple"
  },
  {
    "question_id": 764,
    "db_id": "superhero",
    "question": "What are the superpowers of heroes with ID 1?",
    "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "gold_sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 765,
    "db_id": "superhero",
    "question": "How many heroes have stealth power?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.hero_id) FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id WHERE T1.power_name = 'Stealth'",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
    "evidence": "stealth power refers to power_name = 'stealth';",
    "difficulty": "simple"
  },
  {
    "question_id": 766,
    "db_id": "superhero",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "difficulty": "moderate"
  },
  {
    "question_id": 767,
    "db_id": "superhero",
    "question": "What is the average of superheroes with no skin colour?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T1.skin_colour_id = T1.id AND T2.colour = 'None' THEN T1.id ELSE NULL END) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
    "gold_sql": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id",
    "evidence": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 768,
    "db_id": "superhero",
    "question": "How many superheroes were published by Dark Horse Comics?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'",
    "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "difficulty": "simple"
  },
  {
    "question_id": 769,
    "db_id": "superhero",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "predicted_sql": "SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id INNER JOIN publisher AS T4 ON T2.publisher_id = T4.id WHERE T3.attribute_name = 'Durability' AND T4.publisher_name = 'Dark Horse Comics' ORDER BY T1.attribute_value DESC LIMIT 1",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T2.attribute_value = (SELECT MAX(T5.attribute_value) FROM superhero AS T6 INNER JOIN hero_attribute AS T5 ON T6.id = T5.hero_id INNER JOIN publisher AS T7 ON T7.id = T6.publisher_id WHERE T7.publisher_name = 'Dark Horse Comics')",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "difficulty": "challenging"
  },
  {
    "question_id": 770,
    "db_id": "superhero",
    "question": "What is the eyes colour of Abraham Sapien?",
    "predicted_sql": "SELECT colour.colour FROM colour INNER JOIN superhero ON colour.id = superhero.eye_colour_id WHERE superhero.full_name = 'Abraham Sapien'",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;",
    "difficulty": "simple"
  },
  {
    "question_id": 771,
    "db_id": "superhero",
    "question": "List the name of superheroes with flight power.",
    "predicted_sql": "SELECT T3.superhero_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.power_name = 'Flight'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
    "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';",
    "difficulty": "simple"
  },
  {
    "question_id": 772,
    "db_id": "superhero",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "predicted_sql": "SELECT T3.colour AS eyes, T4.colour AS hair, T5.colour AS skin FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id INNER JOIN colour AS T4 ON T1.hair_colour_id = T4.id INNER JOIN colour AS T5 ON T1.skin_colour_id = T5.id INNER JOIN publisher AS T6 ON T1.publisher_id = T6.id WHERE T2.gender = 'Female' AND T6.publisher_name = 'Dark Horse Comics'",
    "gold_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "difficulty": "challenging"
  },
  {
    "question_id": 773,
    "db_id": "superhero",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "predicted_sql": "SELECT T1.superhero_name, T4.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T1.hair_colour_id = T1.skin_colour_id AND T1.hair_colour_id = T1.eye_colour_id",
    "gold_sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
    "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;",
    "difficulty": "challenging"
  },
  {
    "question_id": 774,
    "db_id": "superhero",
    "question": "Which group does superhero A-Bomb belong to?",
    "predicted_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "gold_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'",
    "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';",
    "difficulty": "simple"
  },
  {
    "question_id": 775,
    "db_id": "superhero",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN c1.colour = 'Blue' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(g1.gender) FROM superhero AS s INNER JOIN colour AS c1 ON s.skin_colour_id = c1.id INNER JOIN gender AS g1 ON s.gender_id = g1.id WHERE g1.gender = 'Female'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
    "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
    "difficulty": "challenging"
  },
  {
    "question_id": 776,
    "db_id": "superhero",
    "question": "Provide the hero name and race of Charles Chandler.",
    "predicted_sql": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "gold_sql": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'",
    "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;",
    "difficulty": "simple"
  },
  {
    "question_id": 777,
    "db_id": "superhero",
    "question": "What is the gender of Agent 13 hero?",
    "predicted_sql": "SELECT T1.gender FROM gender AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.gender_id WHERE T2.superhero_name = 'Agent 13'",
    "gold_sql": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'",
    "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';",
    "difficulty": "simple"
  },
  {
    "question_id": 778,
    "db_id": "superhero",
    "question": "Provide superheroes' names who have the adaptation power.",
    "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
    "evidence": "adaptation power refers to power_name = 'Adaptation';",
    "difficulty": "simple"
  },
  {
    "question_id": 779,
    "db_id": "superhero",
    "question": "How many powers does Amazo hero have?",
    "predicted_sql": "SELECT COUNT(power_id) FROM hero_power WHERE hero_id = ( SELECT id FROM superhero WHERE superhero_name = 'Amazo' )",
    "gold_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
    "evidence": "Amazo hero refers to superhero_name = 'Amazo';",
    "difficulty": "simple"
  },
  {
    "question_id": 780,
    "db_id": "superhero",
    "question": "List the powers of Hunter Zolomon.",
    "predicted_sql": "SELECT T3.power_name FROM hero_power as T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T2.full_name = 'Hunter Zolomon'",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'",
    "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 781,
    "db_id": "superhero",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "predicted_sql": "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber'",
    "gold_sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 782,
    "db_id": "superhero",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "predicted_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS T1 ON superhero.eye_colour_id = T1.id INNER JOIN colour AS T2 ON superhero.hair_colour_id = T2.id WHERE T1.colour = 'Black' AND T2.colour = 'Black'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
    "difficulty": "moderate"
  },
  {
    "question_id": 783,
    "db_id": "superhero",
    "question": "Provide the eye colours of the heroes whose skin colours are gold.",
    "predicted_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T3.colour = 'Gold'",
    "evidence": "skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 784,
    "db_id": "superhero",
    "question": "Provide the full names of vampire heroes.",
    "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "evidence": "vampire heroes refers to race = 'Vampire';",
    "difficulty": "simple"
  },
  {
    "question_id": 785,
    "db_id": "superhero",
    "question": "Describe the names of neutral alignment superheroes.",
    "predicted_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
    "difficulty": "simple"
  },
  {
    "question_id": 786,
    "db_id": "superhero",
    "question": "How many heroes have the highest attribute value in strength?",
    "predicted_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = T2.id )",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';",
    "difficulty": "moderate"
  },
  {
    "question_id": 787,
    "db_id": "superhero",
    "question": "What are the race and alignment of Cameron Hicks?",
    "predicted_sql": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "gold_sql": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'",
    "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';",
    "difficulty": "simple"
  },
  {
    "question_id": 788,
    "db_id": "superhero",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "predicted_sql": "SELECT CAST( COUNT(CASE WHEN G.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(S.id) FROM superhero AS S INNER JOIN publisher AS P ON S.publisher_id = P.id INNER JOIN gender AS G ON S.gender_id = G.id WHERE P.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
    "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
    "difficulty": "challenging"
  },
  {
    "question_id": 789,
    "db_id": "superhero",
    "question": "Find the average weight of the heroes who are aliens.",
    "predicted_sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien';",
    "gold_sql": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'",
    "evidence": "average = AVG(weight_kg); aliens refers to race = 'Alien';",
    "difficulty": "simple"
  },
  {
    "question_id": 790,
    "db_id": "superhero",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "predicted_sql": "SELECT (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') - (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference FROM superhero",
    "gold_sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
    "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;",
    "difficulty": "moderate"
  },
  {
    "question_id": 791,
    "db_id": "superhero",
    "question": "Calculate the average height for each superhero.",
    "predicted_sql": "SELECT AVG(height_cm) FROM superhero;",
    "gold_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
    "evidence": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
    "difficulty": "simple"
  },
  {
    "question_id": 792,
    "db_id": "superhero",
    "question": "What is Abomination's superpower?",
    "predicted_sql": "SELECT T2.power_name FROM superpower AS T2 INNER JOIN hero_power AS T3 ON T2.id = T3.power_id INNER JOIN superhero AS T1 ON T3.hero_id = T1.id WHERE T1.superhero_name = 'Abomination'",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 793,
    "db_id": "superhero",
    "question": "Among the superheroes with the race of god/eternal, how many of them are male",
    "predicted_sql": "SELECT COUNT(*) FROM superhero JOIN race ON superhero.race_id = race.id JOIN gender ON superhero.gender_id = gender.id WHERE race.race = 'god/eternal' AND gender.gender = 'Male'",
    "gold_sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1",
    "evidence": "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1",
    "difficulty": "simple"
  },
  {
    "question_id": 794,
    "db_id": "superhero",
    "question": "Which hero was the fastest?",
    "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
    "difficulty": "moderate"
  },
  {
    "question_id": 795,
    "db_id": "superhero",
    "question": "How many superheroes have a neutral alignment?",
    "predicted_sql": "SELECT COUNT(*) FROM superhero WHERE alignment_id = 3",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "evidence": "neutral alignment refers to alignment_id = 3;",
    "difficulty": "simple"
  },
  {
    "question_id": 796,
    "db_id": "superhero",
    "question": "State all of 3-D Man's attributes along with their values.",
    "predicted_sql": "SELECT T2.attribute_name, T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = '3-D Man'",
    "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "difficulty": "moderate"
  },
  {
    "question_id": 797,
    "db_id": "superhero",
    "question": "Which superheroes have blue eyes with brown hair?",
    "predicted_sql": "SELECT superhero_name FROM superhero WHERE eye_colour_id = 7 AND hair_colour_id = 9",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "difficulty": "moderate"
  },
  {
    "question_id": 798,
    "db_id": "superhero",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "predicted_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';",
    "difficulty": "moderate"
  },
  {
    "question_id": 799,
    "db_id": "superhero",
    "question": "How many superheroes didn't have any publisher?",
    "predicted_sql": "SELECT COUNT(id) FROM superhero WHERE publisher_id = 1",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1",
    "evidence": "didn't have any publisher refers to publisher.id = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 800,
    "db_id": "superhero",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN eye_colour_id = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(superhero_name) FROM superhero",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
    "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;",
    "difficulty": "moderate"
  },
  {
    "question_id": 801,
    "db_id": "superhero",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) FROM superhero",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
    "difficulty": "moderate"
  },
  {
    "question_id": 802,
    "db_id": "superhero",
    "question": "Who is the tallest superhero?",
    "predicted_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "gold_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)",
    "evidence": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);",
    "difficulty": "simple"
  },
  {
    "question_id": 803,
    "db_id": "superhero",
    "question": "What is the power ID of cryokinesis?",
    "predicted_sql": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "gold_sql": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'",
    "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';",
    "difficulty": "simple"
  },
  {
    "question_id": 804,
    "db_id": "superhero",
    "question": "Provide the name of superhero with superhero ID 294.",
    "predicted_sql": "SELECT superhero_name FROM superhero WHERE id = 294",
    "gold_sql": "SELECT superhero_name FROM superhero WHERE id = 294",
    "evidence": "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;",
    "difficulty": "simple"
  },
  {
    "question_id": 805,
    "db_id": "superhero",
    "question": "List the full names of superheroes with missing weight.",
    "predicted_sql": "SELECT full_name FROM superhero WHERE weight_kg = 0 OR weight_kg IS NULL",
    "gold_sql": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)",
    "evidence": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;",
    "difficulty": "simple"
  },
  {
    "question_id": 806,
    "db_id": "superhero",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "predicted_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "difficulty": "simple"
  },
  {
    "question_id": 807,
    "db_id": "superhero",
    "question": "What is the superpowers of the superhero has Helen Parr as their full name?",
    "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.full_name = 'Helen Parr'",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'",
    "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;",
    "difficulty": "simple"
  },
  {
    "question_id": 808,
    "db_id": "superhero",
    "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "predicted_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
    "gold_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
    "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;",
    "difficulty": "simple"
  },
  {
    "question_id": 809,
    "db_id": "superhero",
    "question": "What is the publisher name of the superhero ID 38?",
    "predicted_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
    "evidence": "superhero ID 38 refers to superhero.id = 38;",
    "difficulty": "simple"
  },
  {
    "question_id": 810,
    "db_id": "superhero",
    "question": "What is the race of the superhero with maximum attribute value?",
    "predicted_sql": "SELECT T1.race FROM race AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.race_id INNER JOIN hero_attribute AS T3 ON T2.id = T3.hero_id WHERE T3.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "gold_sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4)",
    "evidence": "maximum attribute value refers to MAX(attribute_value);",
    "difficulty": "simple"
  },
  {
    "question_id": 811,
    "db_id": "superhero",
    "question": "Give the alignment and superpowers of the superhero named Atom IV.",
    "predicted_sql": "SELECT T1.alignment, T4.power_name FROM alignment AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.alignment_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T2.superhero_name = 'Atom IV'",
    "gold_sql": "SELECT T4.alignment, T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN alignment AS T4 ON T1.alignment_id = T4.id WHERE T1.superhero_name = 'Atom IV'",
    "evidence": "superpowers refers to power_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 812,
    "db_id": "superhero",
    "question": "List down at least five full names of superheroes with blue eyes.",
    "predicted_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour as T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5",
    "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id; Name of superheroes refers to superhero_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 813,
    "db_id": "superhero",
    "question": "Calculate the average attribute value of all neutral superheroes.",
    "predicted_sql": "SELECT AVG(T2.attribute_value) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.alignment_id = 3",
    "gold_sql": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'",
    "evidence": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;",
    "difficulty": "simple"
  },
  {
    "question_id": 814,
    "db_id": "superhero",
    "question": "List the skin colour of the superheroes with 100 attribute value.",
    "predicted_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = 100",
    "gold_sql": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
    "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;",
    "difficulty": "moderate"
  },
  {
    "question_id": 815,
    "db_id": "superhero",
    "question": "Count the good female superheroes.",
    "predicted_sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'",
    "evidence": "good refers to alignment.id = 1; female refers to gender.id = 2;",
    "difficulty": "simple"
  },
  {
    "question_id": 816,
    "db_id": "superhero",
    "question": "Provide the names of superheroes with attribute value between 75 to 80.",
    "predicted_sql": "SELECT DISTINCT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T1.attribute_value BETWEEN 75 AND 80",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80",
    "evidence": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;",
    "difficulty": "simple"
  },
  {
    "question_id": 817,
    "db_id": "superhero",
    "question": "Give the race of the blue-haired male superhero.",
    "predicted_sql": "SELECT race.race FROM race INNER JOIN superhero ON race.id = superhero.race_id INNER JOIN colour ON superhero.hair_colour_id = colour.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE colour.colour = 'blue' AND gender.gender = 'male'",
    "gold_sql": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
    "evidence": "blue-haired refers to colour.colour = 'blue' WHERE hair_colour_id = colour.id; male refers to gender = 'male';",
    "difficulty": "moderate"
  },
  {
    "question_id": 818,
    "db_id": "superhero",
    "question": "Among the bad superheroes, what is the percentage of female superheroes?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender_id = 2 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'",
    "evidence": "bad superheroes refers to alignment.id = 2; percentage = MULTIPLY(DIVIDE(SUM(gender.id = 2 WHERE alignment.id = 2), COUNT(alignment.id = 2)), 100.0); female refers to gender.id = 2;",
    "difficulty": "challenging"
  },
  {
    "question_id": 819,
    "db_id": "superhero",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "predicted_sql": "SELECT SUM(CASE WHEN T1.eye_colour_id = (SELECT id FROM colour WHERE colour = 'Blue') THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.eye_colour_id = (SELECT id FROM colour WHERE colour IS null) THEN 1 ELSE 0 END) AS Diff FROM superhero AS T1 WHERE T1.weight_kg = 0 OR T1.weight_kg IS NULL",
    "gold_sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
    "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
    "difficulty": "challenging"
  },
  {
    "question_id": 820,
    "db_id": "superhero",
    "question": "How strong is the Hulk?",
    "predicted_sql": "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Strength' AND T3.superhero_name = 'Hulk'",
    "gold_sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Hulk' AND T3.attribute_name = 'Strength'",
    "evidence": "how strong refers to attribute_value WHERE attribute_name = 'Strength'; the Hulk refers to superhero_name = 'Hulk';",
    "difficulty": "moderate"
  },
  {
    "question_id": 821,
    "db_id": "superhero",
    "question": "List down Ajax's superpowers.",
    "predicted_sql": "SELECT T2.power_name FROM superpower AS T2 INNER JOIN hero_power AS T1 ON T2.id = T1.power_id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Ajax'",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'",
    "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 822,
    "db_id": "superhero",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "predicted_sql": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.colour = 'Green' AND T3.alignment = 'Bad'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
    "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';",
    "difficulty": "moderate"
  },
  {
    "question_id": 823,
    "db_id": "superhero",
    "question": "How many female superheroes are in Marvel Comics?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.gender = 'Female'",
    "evidence": "female refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
    "difficulty": "moderate"
  },
  {
    "question_id": 824,
    "db_id": "superhero",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "predicted_sql": "SELECT T2.superhero_name FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN superpower AS T3 ON T1.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T2.superhero_name ASC",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
    "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';",
    "difficulty": "moderate"
  },
  {
    "question_id": 825,
    "db_id": "superhero",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "predicted_sql": "SELECT T3.gender FROM superpower AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.power_id INNER JOIN superhero AS T4 ON T2.hero_id = T4.id INNER JOIN gender AS T3 ON T4.gender_id = T3.id WHERE T1.power_name = 'Phoenix Force'",
    "gold_sql": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "difficulty": "moderate"
  },
  {
    "question_id": 826,
    "db_id": "superhero",
    "question": "Identify the heaviest superhero in DC Comics.",
    "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1",
    "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 827,
    "db_id": "superhero",
    "question": "What is the average height of a non-human superhero in Dark Horse Comics?",
    "predicted_sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T2.race <> 'Human' AND T3.publisher_name = 'Dark Horse Comics'",
    "gold_sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.race != 'Human'",
    "evidence": "average = AVG(height_cm); non-human superhero refers to race <> 'Human'; Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "difficulty": "moderate"
  },
  {
    "question_id": 828,
    "db_id": "superhero",
    "question": "Count the fastest superheroes.",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = 100",
    "gold_sql": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' AND T1.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Speed')",
    "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';",
    "difficulty": "simple"
  },
  {
    "question_id": 829,
    "db_id": "superhero",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "predicted_sql": "SELECT (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'DC Comics')) - (SELECT COUNT(*) FROM superhero WHERE publisher_id IN (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics')) AS difference",
    "gold_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
    "difficulty": "challenging"
  },
  {
    "question_id": 830,
    "db_id": "superhero",
    "question": "Identify the weakest attribute of the Black Panther.",
    "predicted_sql": "SELECT T2.attribute_name FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.superhero_name = 'Black Panther' ORDER BY T1.attribute_value LIMIT 1",
    "gold_sql": "SELECT T3.attribute_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = 'Black Panther' ORDER BY T2.attribute_value ASC LIMIT 1",
    "evidence": "weakest attribute refers to attribute_name WHERE MIN(attribute_value); Black Panther refers to superhero_name = 'Black Panther';",
    "difficulty": "moderate"
  },
  {
    "question_id": 831,
    "db_id": "superhero",
    "question": "What is Abomination's eye colour?",
    "predicted_sql": "SELECT T1.colour FROM colour AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.eye_colour_id WHERE T2.superhero_name = 'Abomination'",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 832,
    "db_id": "superhero",
    "question": "Name the tallest superhero.",
    "predicted_sql": "SELECT full_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "gold_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)",
    "evidence": "tallest superhero refers to MAX(height_cm);",
    "difficulty": "simple"
  },
  {
    "question_id": 833,
    "db_id": "superhero",
    "question": "Name the superhero, otherwise known as Charles Chandler.",
    "predicted_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "gold_sql": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'",
    "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;",
    "difficulty": "simple"
  },
  {
    "question_id": 834,
    "db_id": "superhero",
    "question": "Among all superheroes created by George Lucas, identify the percentage of female superheroes.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T3.gender = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.gender) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.publisher_name = 'George Lucas'",
    "evidence": "created by George Lucas refers to publisher_name = 'George Lucas'; percentage = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'George Lucas'), COUNT(publisher_name = 'George Lucas')), 100.0); female refers to gender = 'Female';",
    "difficulty": "challenging"
  },
  {
    "question_id": 835,
    "db_id": "superhero",
    "question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id WHERE T3.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
    "evidence": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';",
    "difficulty": "challenging"
  },
  {
    "question_id": 836,
    "db_id": "superhero",
    "question": "What is the total number of superheroes that have John as their first name?",
    "predicted_sql": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
    "gold_sql": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'",
    "evidence": "have John as their first name refers to full_name LIKE 'John%';",
    "difficulty": "simple"
  },
  {
    "question_id": 837,
    "db_id": "superhero",
    "question": "Give the hero ID of superhero with the lowest attribute value.",
    "predicted_sql": "SELECT hero_id FROM hero_attribute ORDER BY attribute_value ASC LIMIT 1",
    "gold_sql": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )",
    "evidence": "lowest attribute value refers to MIN(attribute_value);",
    "difficulty": "simple"
  },
  {
    "question_id": 838,
    "db_id": "superhero",
    "question": "Provide the full name of the superhero named Alien.",
    "predicted_sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "gold_sql": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 839,
    "db_id": "superhero",
    "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.",
    "predicted_sql": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'",
    "evidence": "weight less than 100 refers to weight_kg < 100",
    "difficulty": "simple"
  },
  {
    "question_id": 840,
    "db_id": "superhero",
    "question": "List the attribute value of the superhero named Aquababy.",
    "predicted_sql": "SELECT T1.attribute_value FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Aquababy'",
    "gold_sql": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 841,
    "db_id": "superhero",
    "question": "Provide the weight and race of the superhero with superhero ID 40.",
    "predicted_sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
    "gold_sql": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40",
    "evidence": "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;",
    "difficulty": "simple"
  },
  {
    "question_id": 842,
    "db_id": "superhero",
    "question": "Calculate the average height of all neutral superheroes.",
    "predicted_sql": "SELECT AVG(height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "gold_sql": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 843,
    "db_id": "superhero",
    "question": "List the hero ID of superheroes have intellegence as their power.",
    "predicted_sql": "SELECT hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
    "gold_sql": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'",
    "evidence": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';",
    "difficulty": "simple"
  },
  {
    "question_id": 844,
    "db_id": "superhero",
    "question": "Give the eye colour of Blackwulf.",
    "predicted_sql": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.superhero_name = 'Blackwulf';",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';",
    "difficulty": "simple"
  },
  {
    "question_id": 845,
    "db_id": "superhero",
    "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
    "predicted_sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T3.height_cm > ( SELECT AVG(height_cm) * 0.8 FROM superhero )",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
    "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);",
    "difficulty": "moderate"
  },
  {
    "question_id": 846,
    "db_id": "formula_1",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "predicted_sql": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.q1 IS NOT NULL AND T2.raceId = 18 ORDER BY T2.q1 DESC LIMIT 5",
    "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
    "difficulty": "moderate"
  },
  {
    "question_id": 847,
    "db_id": "formula_1",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second period?",
    "predicted_sql": "SELECT D.surname FROM drivers AS D INNER JOIN qualifying AS Q ON D.driverid = Q.driverid WHERE Q.raceid = 19 ORDER BY Q.q2 ASC LIMIT 1",
    "gold_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL AND T1.q2 = (SELECT MIN(q2) AS min_q2 FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)",
    "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
    "difficulty": "simple"
  },
  {
    "question_id": 848,
    "db_id": "formula_1",
    "question": "Please list the year during which the race is held on circuits in Shanghai.",
    "predicted_sql": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T1.location = 'Shanghai'",
    "gold_sql": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
    "evidence": "Shanghai is a name of location;",
    "difficulty": "simple"
  },
  {
    "question_id": 849,
    "db_id": "formula_1",
    "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "predicted_sql": "SELECT url FROM races WHERE circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Circuit de Barcelona-Catalunya' )",
    "gold_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "difficulty": "simple"
  },
  {
    "question_id": 850,
    "db_id": "formula_1",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "predicted_sql": "SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T1.country = 'Germany'",
    "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "evidence": "Germany is a name of country;",
    "difficulty": "simple"
  },
  {
    "question_id": 851,
    "db_id": "formula_1",
    "question": "Please list the positions of the circuits built by the constructor Renault.",
    "predicted_sql": "SELECT T2.name, T2.location, T2.country FROM constructors AS T1 INNER JOIN circuits AS T2 ON T1.constructorid = T2.circuitid WHERE T1.name = 'Renault'",
    "gold_sql": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
    "evidence": "Renault is a name of constructor;",
    "difficulty": "simple"
  },
  {
    "question_id": 852,
    "db_id": "formula_1",
    "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
    "predicted_sql": "SELECT COUNT(T1.raceid) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year = 2010 AND T2.location NOT IN ('Asia', 'Europe')",
    "gold_sql": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
    "evidence": "",
    "difficulty": "moderate"
  },
  {
    "question_id": 853,
    "db_id": "formula_1",
    "question": "Please give the names of the races held on the circuits in Spain.",
    "predicted_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T1.country = 'Spain'",
    "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "evidence": "Spain is a name of country;",
    "difficulty": "simple"
  },
  {
    "question_id": 854,
    "db_id": "formula_1",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "predicted_sql": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Australian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
    "difficulty": "simple"
  },
  {
    "question_id": 855,
    "db_id": "formula_1",
    "question": "Where can I find the information about the races held on Sepang International Circuit?",
    "predicted_sql": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Sepang International Circuit'",
    "gold_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "evidence": "information about races refers to url;",
    "difficulty": "simple"
  },
  {
    "question_id": 856,
    "db_id": "formula_1",
    "question": "Please list the time of the races held on Sepang International Circuit.",
    "predicted_sql": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Sepang International Circuit'",
    "gold_sql": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 857,
    "db_id": "formula_1",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "predicted_sql": "SELECT c.lng, c.lat FROM circuits c JOIN races r ON c.circuitid = r.circuitid WHERE r.name = 'Abu Dhabi Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
    "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'",
    "difficulty": "simple"
  },
  {
    "question_id": 858,
    "db_id": "formula_1",
    "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
    "predicted_sql": "SELECT T2.country FROM constructorresults AS T1 INNER JOIN constructors AS T3 ON T1.constructorid = T3.constructorid INNER JOIN circuits AS T2 ON T2.circuitid = T3.constructorid WHERE T1.points = 1 AND T1.raceid = 24",
    "gold_sql": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
    "evidence": "race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 859,
    "db_id": "formula_1",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "predicted_sql": "SELECT q1 FROM qualifying WHERE driverid = ( SELECT driverid FROM drivers WHERE forename = 'Bruno' AND surname = 'Senna' ) AND raceid = 354",
    "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "simple"
  },
  {
    "question_id": 860,
    "db_id": "formula_1",
    "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "predicted_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.q2 = '0:01:40' AND T2.raceid = 355",
    "gold_sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
    "evidence": "race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 861,
    "db_id": "formula_1",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "predicted_sql": "SELECT number FROM drivers WHERE driverid = ( SELECT driverid FROM qualifying WHERE q3 = '0:01:54' AND raceid = 903 )",
    "gold_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
    "difficulty": "simple"
  },
  {
    "question_id": 862,
    "db_id": "formula_1",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "predicted_sql": "SELECT COUNT(T2.driverid) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.name = 'Bahrain Grand Prix' AND T1.year = 2007 AND T2.time IS NULL",
    "gold_sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
    "difficulty": "simple"
  },
  {
    "question_id": 863,
    "db_id": "formula_1",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "predicted_sql": "SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceid = 901",
    "gold_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "evidence": "race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 864,
    "db_id": "formula_1",
    "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.driverid) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "gold_sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
    "evidence": "game and race are synonyms; drivers who finished the race should have record in time;",
    "difficulty": "simple"
  },
  {
    "question_id": 865,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "predicted_sql": "SELECT T1.dob, T1.surname, T1.forename FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "moderate"
  },
  {
    "question_id": 866,
    "db_id": "formula_1",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "predicted_sql": "SELECT T1.url FROM drivers AS T1 INNER JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.time='0:01:27' AND T2.raceid=161",
    "gold_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
    "difficulty": "moderate"
  },
  {
    "question_id": 867,
    "db_id": "formula_1",
    "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
    "predicted_sql": "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T1.raceid = 933 ORDER BY T1.fastestlapspeed DESC LIMIT 1",
    "gold_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "fastest lap speed refers to MAX(fastestLapSpeed);",
    "difficulty": "simple"
  },
  {
    "question_id": 868,
    "db_id": "formula_1",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "predicted_sql": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.name = 'Malaysian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
    "difficulty": "simple"
  },
  {
    "question_id": 869,
    "db_id": "formula_1",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "predicted_sql": "SELECT T2.url FROM constructorresults AS T1 INNER JOIN constructors AS T2 ON T1.constructorid = T2.constructorid WHERE T1.raceid = 9 ORDER BY T1.points DESC LIMIT 1",
    "gold_sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
    "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
    "difficulty": "moderate"
  },
  {
    "question_id": 870,
    "db_id": "formula_1",
    "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
    "predicted_sql": "SELECT q1 FROM qualifying WHERE raceid = 345 AND driverid = (SELECT driverid FROM drivers WHERE forename = 'Lucas' AND surname = 'di Grassi')",
    "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
    "evidence": "race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 871,
    "db_id": "formula_1",
    "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
    "predicted_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.q2 = '0:01:15' AND T2.raceid = 347",
    "gold_sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'",
    "evidence": "race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 872,
    "db_id": "formula_1",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "predicted_sql": "SELECT T1.code FROM drivers as T1 INNER JOIN qualifying as T2 ON T1.driverid = T2.driverid WHERE T2.q3 = '0:01:33' AND T2.raceid = 45",
    "gold_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
    "difficulty": "simple"
  },
  {
    "question_id": 873,
    "db_id": "formula_1",
    "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
    "predicted_sql": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.forename = 'Bruce' AND T1.surname = 'McLaren' AND T2.raceid = 743",
    "gold_sql": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
    "evidence": "race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 874,
    "db_id": "formula_1",
    "question": "Who finished second in the San Marino Grand Prix in 2006?",
    "predicted_sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE T3.year = 2006 AND T3.name = 'San Marino Grand Prix' AND T1.position = 2",
    "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
    "evidence": "finished second refers to position = 2;",
    "difficulty": "simple"
  },
  {
    "question_id": 875,
    "db_id": "formula_1",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "predicted_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceid = 901",
    "gold_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "evidence": "the season page refers to url; race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 876,
    "db_id": "formula_1",
    "question": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
    "predicted_sql": "SELECT COUNT(T2.driverid) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN status AS T3 ON T2.statusid = T3.statusid WHERE T1.date = '2015-11-29' AND T3.status = 'Finished'",
    "gold_sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL",
    "evidence": "game and race are synonyms; drivers who didn't finish the race should have record in time;",
    "difficulty": "simple"
  },
  {
    "question_id": 877,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "predicted_sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T1.raceid = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
    "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
    "difficulty": "moderate"
  },
  {
    "question_id": 878,
    "db_id": "formula_1",
    "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
    "predicted_sql": "SELECT T2.forename, T2.surname FROM laptimes AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T1.raceid = 348 ORDER BY T1.time LIMIT 1",
    "gold_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
    "evidence": "race number refers to raceId; the best lap time refers to MIN(time)",
    "difficulty": "simple"
  },
  {
    "question_id": 879,
    "db_id": "formula_1",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "predicted_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.fastestlapspeed = ( SELECT MAX(fastestlapspeed) FROM results WHERE raceid = 348 )",
    "gold_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;",
    "difficulty": "moderate"
  },
  {
    "question_id": 880,
    "db_id": "formula_1",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "predicted_sql": "SELECT (CAST(T1.fastestlapspeed AS REAL) - CAST(T2.fastestlapspeed AS REAL)) / CAST(T1.fastestlapspeed AS REAL) * 100 FROM results AS T1 INNER JOIN drivers ON T1.driverid = drivers.driverid INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE drivers.driverref = 'resta' AND T1.raceid = 853 AND T2.raceid = 854",
    "gold_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
    "difficulty": "challenging"
  },
  {
    "question_id": 881,
    "db_id": "formula_1",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN 1 END) AS REAL) * 100 / COUNT(T2.driverid) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.date = '1983-07-16'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
    "difficulty": "moderate"
  },
  {
    "question_id": 882,
    "db_id": "formula_1",
    "question": "Which year was the first Singapore Grand Prix?",
    "predicted_sql": "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'",
    "gold_sql": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
    "evidence": "the first race refers to race happened in min(year);",
    "difficulty": "simple"
  },
  {
    "question_id": 883,
    "db_id": "formula_1",
    "question": "How many races were there in 2005? Name all the races in descending order.",
    "predicted_sql": "SELECT COUNT(raceid), name FROM races WHERE year = 2005 ORDER BY name DESC",
    "gold_sql": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 884,
    "db_id": "formula_1",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "predicted_sql": "SELECT T2.name FROM races AS T1 INNER JOIN races as T2 ON T1.raceid = T2.raceid WHERE strftime('%Y', T1.date) = strftime('%Y', (SELECT MIN(date) FROM races)) AND strftime('%m', T1.date) = strftime('%m', (SELECT MIN(date) FROM races))",
    "gold_sql": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "evidence": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));",
    "difficulty": "moderate"
  },
  {
    "question_id": 885,
    "db_id": "formula_1",
    "question": "State the name and date of the last round of race in year 1999.",
    "predicted_sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1;",
    "gold_sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
    "evidence": "the last round refers to max(round);",
    "difficulty": "simple"
  },
  {
    "question_id": 886,
    "db_id": "formula_1",
    "question": "Which year has the most number of races?",
    "predicted_sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "gold_sql": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
    "evidence": "the most number of races refers to max(round);",
    "difficulty": "simple"
  },
  {
    "question_id": 887,
    "db_id": "formula_1",
    "question": "Name the races in year 2017 that are not hosted in year 2000.",
    "predicted_sql": "SELECT name FROM races WHERE year = 2017 AND circuitid NOT IN ( SELECT circuitid FROM races WHERE year = 2000 )",
    "gold_sql": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
    "evidence": "not hosted means not in;",
    "difficulty": "simple"
  },
  {
    "question_id": 888,
    "db_id": "formula_1",
    "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
    "predicted_sql": "SELECT T1.country, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
    "gold_sql": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
    "evidence": "the first refers to min(year);",
    "difficulty": "simple"
  },
  {
    "question_id": 889,
    "db_id": "formula_1",
    "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
    "predicted_sql": "SELECT MAX(year) FROM races WHERE name = 'British Grand Prix' AND circuitid IN (SELECT circuitid FROM circuits WHERE name = 'Brands Hatch')",
    "gold_sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
    "evidence": "the last refers to max(year);",
    "difficulty": "simple"
  },
  {
    "question_id": 890,
    "db_id": "formula_1",
    "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.year) FROM races AS T1 INNER JOIN circuits as T2 ON T1.circuitid = T2.circuitid WHERE T1.name = 'British Grand Prix' AND T2.name = 'Silverstone Circuit'",
    "gold_sql": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
    "evidence": "British Grand Prix is the name of race; British refers to the United Kindom",
    "difficulty": "simple"
  },
  {
    "question_id": 891,
    "db_id": "formula_1",
    "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
    "predicted_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN driverstandings ON drivers.driverid = driverstandings.driverid INNER JOIN races ON driverstandings.raceid = races.raceid WHERE races.year = 2010 AND races.name = 'Singapore Grand Prix' ORDER BY driverstandings.position",
    "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 892,
    "db_id": "formula_1",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "predicted_sql": "SELECT d.forename, d.surname, max(ds.points) AS 'MaxPoints' FROM drivers d JOIN driverstandings ds ON d.driverid = ds.driverid GROUP BY d.driverid ORDER BY MaxPoints DESC LIMIT 1;",
    "gold_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
    "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "moderate"
  },
  {
    "question_id": 893,
    "db_id": "formula_1",
    "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
    "predicted_sql": "SELECT drivers.forename, drivers.surname, results.points FROM drivers INNER JOIN results ON results.driverid = drivers.driverid INNER JOIN races ON races.raceid = results.raceid WHERE races.name = \"Chinese Grand Prix\" AND races.year = 2017 ORDER BY results.points DESC LIMIT 3",
    "gold_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 894,
    "db_id": "formula_1",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "predicted_sql": "SELECT T1.driverid, T2.raceid, MIN(T1.time) AS BestLapTime FROM laptimes AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid GROUP BY T1.driverid, T2.raceid ORDER BY BestLapTime ASC LIMIT 1;",
    "gold_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
    "difficulty": "moderate"
  },
  {
    "question_id": 895,
    "db_id": "formula_1",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "predicted_sql": "SELECT AVG(T2.time) FROM drivers AS T1 INNER JOIN laptimes AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T1.surname = 'Vettel' AND T3.name = 'Chinese Grand Prix' AND T3.year = 2009",
    "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
    "difficulty": "moderate"
  },
  {
    "question_id": 896,
    "db_id": "formula_1",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS r JOIN races AS ra ON r.raceid = ra.raceid JOIN drivers AS d ON r.driverid = d.driverid WHERE d.surname = 'Hamilton' AND ra.year >= 2010",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
    "difficulty": "challenging"
  },
  {
    "question_id": 897,
    "db_id": "formula_1",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "predicted_sql": "SELECT T1.surname, T1.forename, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverstandings AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
    "difficulty": "moderate"
  },
  {
    "question_id": 898,
    "db_id": "formula_1",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "predicted_sql": "SELECT forename, surname, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob) as Age FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "difficulty": "simple"
  },
  {
    "question_id": 899,
    "db_id": "formula_1",
    "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "predicted_sql": "SELECT c.name, COUNT(r.raceid) AS num_races FROM circuits AS c INNER JOIN races AS r ON c.circuitid = r.circuitid WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.circuitid HAVING num_races = 4",
    "gold_sql": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
    "evidence": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;",
    "difficulty": "moderate"
  },
  {
    "question_id": 900,
    "db_id": "formula_1",
    "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
    "predicted_sql": "SELECT T2.name AS circuit_name, T2.location AS circuit_location, T1.name AS race_name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year = 2006 AND T2.country = 'USA'",
    "gold_sql": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 901,
    "db_id": "formula_1",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "predicted_sql": "SELECT r.name AS race_name, c.name AS circuit_name, c.location AS circuit_location FROM races r INNER JOIN circuits c ON r.circuitid = c.circuitid WHERE strftime('%Y', r.date) = '2005' AND strftime('%m', r.date) = '09';",
    "gold_sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
    "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
    "difficulty": "simple"
  },
  {
    "question_id": 902,
    "db_id": "formula_1",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "predicted_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
    "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
    "difficulty": "simple"
  },
  {
    "question_id": 903,
    "db_id": "formula_1",
    "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
    "predicted_sql": "SELECT COUNT(driverstandings.wins) FROM driverstandings INNER JOIN drivers ON driverstandings.driverid = drivers.driverid INNER JOIN races ON driverstandings.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE drivers.surname = 'Schumacher' AND drivers.forename = 'Michael' AND circuits.name = 'Sepang International Circuit' AND driverstandings.wins > 0;",
    "gold_sql": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
    "evidence": "win from races refers to max(points)",
    "difficulty": "moderate"
  },
  {
    "question_id": 904,
    "db_id": "formula_1",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "predicted_sql": "SELECT races.name, races.year FROM results INNER JOIN races ON results.raceid = races.raceid INNER JOIN drivers ON results.driverid = drivers.driverid WHERE drivers.surname = 'Schumacher' AND drivers.forename = 'Michael' ORDER BY results.fastestlaptime LIMIT 1",
    "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
    "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "moderate"
  },
  {
    "question_id": 905,
    "db_id": "formula_1",
    "question": "What is Eddie Irvine's average points scored in year 2000?",
    "predicted_sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T1.surname = 'Irvine' AND T1.forename = 'Eddie' AND T3.year = 2000",
    "gold_sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
    "evidence": "average points = AVG(points where year = 2000)",
    "difficulty": "simple"
  },
  {
    "question_id": 906,
    "db_id": "formula_1",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "predicted_sql": "SELECT races.name, results.points FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE drivers.surname = 'Hamilton' ORDER BY races.year LIMIT 1;",
    "gold_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = (SELECT MIN(T4.year) FROM races AS T4 INNER JOIN driverStandings AS T5 ON T5.raceId = T4.raceId INNER JOIN drivers AS T6 ON T6.driverId = T5.driverId WHERE T6.forename = 'Lewis' AND T6.surname = 'Hamilton')",
    "evidence": "first race refers to min(Year)",
    "difficulty": "moderate"
  },
  {
    "question_id": 907,
    "db_id": "formula_1",
    "question": "List all races in 2017 and the hosting country order by date of the event.",
    "predicted_sql": "SELECT r.name AS race_name, c.country AS hosting_country FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE r.year = 2017 ORDER BY r.date;",
    "gold_sql": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 908,
    "db_id": "formula_1",
    "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
    "predicted_sql": "SELECT r.name, r.year, c.location FROM races r JOIN circuits c ON r.circuitid = c.circuitid WHERE r.raceid = ( SELECT rr.raceid FROM results rr GROUP BY rr.raceid ORDER BY SUM(rr.laps) DESC LIMIT 1)",
    "gold_sql": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId WHERE T3.lap = (SELECT MAX(T4.lap) FROM lapTimes AS T4)",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 909,
    "db_id": "formula_1",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.name) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'European Grand Prix'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 910,
    "db_id": "formula_1",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "predicted_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "gold_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "difficulty": "simple"
  },
  {
    "question_id": 911,
    "db_id": "formula_1",
    "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
    "predicted_sql": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
    "gold_sql": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
    "evidence": "higher latitude refers to max(lat)",
    "difficulty": "simple"
  },
  {
    "question_id": 912,
    "db_id": "formula_1",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "predicted_sql": "SELECT circuitref FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "gold_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "difficulty": "simple"
  },
  {
    "question_id": 913,
    "db_id": "formula_1",
    "question": "In which country can I find the circuit with the highest altitude?",
    "predicted_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "gold_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "evidence": "highest altitude refers to max(alt)",
    "difficulty": "simple"
  },
  {
    "question_id": 914,
    "db_id": "formula_1",
    "question": "How many drivers don't have a code?",
    "predicted_sql": "SELECT COUNT(driverid) FROM drivers WHERE code IS NULL",
    "gold_sql": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
    "evidence": "don't have a code refers to code is null",
    "difficulty": "simple"
  },
  {
    "question_id": 915,
    "db_id": "formula_1",
    "question": "Which country is the oldest driver from?",
    "predicted_sql": "SELECT T1.nationality FROM drivers AS T1 ORDER BY T1.dob LIMIT 1",
    "gold_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "simple"
  },
  {
    "question_id": 916,
    "db_id": "formula_1",
    "question": "Please list the surnames of all the Italian drivers.",
    "predicted_sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "gold_sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "evidence": "Italian refers to nationality = 'italian'",
    "difficulty": "simple"
  },
  {
    "question_id": 917,
    "db_id": "formula_1",
    "question": "Which website should I go to if I want to know more about Anthony Davidson?",
    "predicted_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
    "gold_sql": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
    "evidence": "website refers to url",
    "difficulty": "simple"
  },
  {
    "question_id": 918,
    "db_id": "formula_1",
    "question": "What's Lewis Hamilton's reference name?",
    "predicted_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
    "gold_sql": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
    "evidence": "reference name refers to driverRef",
    "difficulty": "simple"
  },
  {
    "question_id": 919,
    "db_id": "formula_1",
    "question": "Which circuit did the 2009 Spanish Grand Prix use?",
    "predicted_sql": "SELECT circuits.name FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix'",
    "gold_sql": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 920,
    "db_id": "formula_1",
    "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
    "predicted_sql": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Silverstone Circuit'",
    "gold_sql": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 921,
    "db_id": "formula_1",
    "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
    "predicted_sql": "SELECT races.url, races.raceid, races.year, races.name, races.date, races.round, races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Silverstone Circuit'",
    "gold_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
    "evidence": "more information refers to url",
    "difficulty": "simple"
  },
  {
    "question_id": 922,
    "db_id": "formula_1",
    "question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
    "predicted_sql": "SELECT races.time FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.location = 'Abu Dhabi' AND races.year = 2010;",
    "gold_sql": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 923,
    "db_id": "formula_1",
    "question": "How many Formula_1 races took place on the circuits in Italy?",
    "predicted_sql": "SELECT COUNT(raceid) FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.country = 'Italy'",
    "gold_sql": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 924,
    "db_id": "formula_1",
    "question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
    "predicted_sql": "SELECT date FROM races WHERE circuitid = ( SELECT circuitid FROM circuits WHERE name = 'Barcelona-Catalunya' )",
    "gold_sql": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 925,
    "db_id": "formula_1",
    "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
    "predicted_sql": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
    "gold_sql": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "evidence": "link of the website refers to url",
    "difficulty": "simple"
  },
  {
    "question_id": 926,
    "db_id": "formula_1",
    "question": "What's the fastest lap time ever in a race for Lewis Hamilton?",
    "predicted_sql": "SELECT MIN(T1.fastestlaptime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T2.driverref = 'hamilton'",
    "gold_sql": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "evidence": "fastest lap time ever refers to min(fastestLapTime)",
    "difficulty": "simple"
  },
  {
    "question_id": 927,
    "db_id": "formula_1",
    "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "predicted_sql": "SELECT D.forename, D.surname FROM drivers AS D INNER JOIN results AS R ON D.driverid = R.driverid ORDER BY R.fastestlapspeed DESC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 928,
    "db_id": "formula_1",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "predicted_sql": "SELECT T3.driverref FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.rank = 1",
    "gold_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
    "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
    "difficulty": "moderate"
  },
  {
    "question_id": 929,
    "db_id": "formula_1",
    "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
    "predicted_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.surname = 'Hamilton' AND T3.forename = 'Lewis'",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 930,
    "db_id": "formula_1",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "predicted_sql": "SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.surname = 'Hamilton' ORDER BY T1.rank ASC LIMIT 1",
    "gold_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
    "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "simple"
  },
  {
    "question_id": 931,
    "db_id": "formula_1",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "predicted_sql": "SELECT MAX(T1.fastestlapspeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "gold_sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
    "difficulty": "moderate"
  },
  {
    "question_id": 932,
    "db_id": "formula_1",
    "question": "In which years did Lewis Hamilton participate in a Formula_1 race?",
    "predicted_sql": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.surname = 'Hamilton' AND T3.forename = 'Lewis'",
    "gold_sql": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 933,
    "db_id": "formula_1",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "predicted_sql": "SELECT T2.positionOrder FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008",
    "gold_sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
    "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
    "difficulty": "moderate"
  },
  {
    "question_id": 934,
    "db_id": "formula_1",
    "question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
    "predicted_sql": "SELECT D.surname, D.forename FROM drivers AS D INNER JOIN results AS R ON D.driverid = R.driverid INNER JOIN races AS RA ON RA.raceid = R.raceid WHERE RA.name = 'Australian Grand Prix' AND RA.year = 2008 AND R.grid = 4",
    "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
    "evidence": "the no. 4 grid formation refers to grid = 4",
    "difficulty": "moderate"
  },
  {
    "question_id": 935,
    "db_id": "formula_1",
    "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
    "predicted_sql": "SELECT COUNT(T1.driverid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL",
    "gold_sql": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
    "evidence": "managed to finish the race refers to time is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 936,
    "db_id": "formula_1",
    "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
    "predicted_sql": "SELECT MIN(T1.time) FROM laptimes AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE T2.surname = 'Hamilton' AND T2.forename = 'Lewis' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008",
    "gold_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 937,
    "db_id": "formula_1",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "predicted_sql": "SELECT T2.time FROM results AS T2 INNER JOIN races AS T1 ON T2.raceid = T1.raceid WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.position = 2",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
    "evidence": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
    "difficulty": "simple"
  },
  {
    "question_id": 938,
    "db_id": "formula_1",
    "question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
    "predicted_sql": "SELECT T3.forename, T3.surname, T3.url FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time LIKE '%:%:%.%'",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url",
    "difficulty": "moderate"
  },
  {
    "question_id": 939,
    "db_id": "formula_1",
    "question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.driverid) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T1.nationality = 'American' AND T3.name = 'Australian Grand Prix' AND T3.year = 2008",
    "gold_sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
    "evidence": "from the UN refers to nationality = 'British'",
    "difficulty": "moderate"
  },
  {
    "question_id": 940,
    "db_id": "formula_1",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.driverid) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND EXISTS (SELECT 1 FROM results AS R WHERE R.driverid = T1.driverid AND R.time IS NOT NULL)",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
    "difficulty": "moderate"
  },
  {
    "question_id": 941,
    "db_id": "formula_1",
    "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
    "predicted_sql": "SELECT SUM(points) FROM results WHERE driverid=(SELECT driverid FROM drivers WHERE forename='Lewis' AND surname='Hamilton')",
    "gold_sql": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 942,
    "db_id": "formula_1",
    "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "predicted_sql": "SELECT AVG(STRFTIME('%M', T1.fastestlaptime) * 60 + STRFTIME('%S', T1.fastestlaptime)) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T2.driverref = 'lewis_hamilton'",
    "gold_sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
    "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
    "difficulty": "moderate"
  },
  {
    "question_id": 943,
    "db_id": "formula_1",
    "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN time IS NOT NULL THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(raceid) FROM results WHERE raceid = (SELECT raceid from races WHERE name = 'Australian Grand Prix' AND year = 2008)",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
    "evidence": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))",
    "difficulty": "moderate"
  },
  {
    "question_id": 944,
    "db_id": "formula_1",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "predicted_sql": "SELECT (CAST((MAX(T1.milliseconds) - MIN(T1.milliseconds)) AS REAL) / MAX(T1.milliseconds)) * 100 AS percentage FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN driverstandings AS T3 ON T1.driverid = T3.driverid AND T2.raceid = T3.raceid WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T3.position = 1",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
    "difficulty": "challenging"
  },
  {
    "question_id": 945,
    "db_id": "formula_1",
    "question": "How many circuits are there in Adelaide, Australia?",
    "predicted_sql": "SELECT COUNT(circuitid) FROM circuits WHERE country = 'Australia' AND location = 'Melbourne'",
    "gold_sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
    "evidence": "Australia is the country; Melbourne is the location of circuit;",
    "difficulty": "simple"
  },
  {
    "question_id": 946,
    "db_id": "formula_1",
    "question": "Please list the location coordinates of the US circuits.",
    "predicted_sql": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
    "gold_sql": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
    "evidence": "location coordinates refers to (lat, lng); the US refers to country = 'USA';",
    "difficulty": "simple"
  },
  {
    "question_id": 947,
    "db_id": "formula_1",
    "question": "How many British drivers were born after 1980?",
    "predicted_sql": "SELECT COUNT(driverid) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
    "gold_sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
    "evidence": "born after 1980 refers to year (dob) >1980;",
    "difficulty": "simple"
  },
  {
    "question_id": 948,
    "db_id": "formula_1",
    "question": "What are the maximum points of British constructors?",
    "predicted_sql": "SELECT AVG(points) FROM constructorresults WHERE constructorid IN ( SELECT constructorid FROM constructors WHERE nationality = 'British' )",
    "gold_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "evidence": "maximum points = MAX(points); British is a nationality",
    "difficulty": "simple"
  },
  {
    "question_id": 949,
    "db_id": "formula_1",
    "question": "Which constructor has the highest point?",
    "predicted_sql": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid ORDER BY T2.points DESC LIMIT 1",
    "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 950,
    "db_id": "formula_1",
    "question": "Please list the constructor names with 0 points at race 291.",
    "predicted_sql": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorresults AS T2 ON T1.constructorid = T2.constructorid WHERE T2.raceid = 291 AND T2.points = 0",
    "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "evidence": "race at 291 refers to raceID = 291;",
    "difficulty": "simple"
  },
  {
    "question_id": 951,
    "db_id": "formula_1",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "predicted_sql": "SELECT COUNT(T1.constructorid) FROM constructors AS T1 INNER JOIN constructorresults AS T2 ON T1.constructorid = T2.constructorid WHERE T2.points = 0 AND T1.nationality = 'Japanese' GROUP BY T1.constructorid HAVING COUNT(T2.raceid) = 2",
    "gold_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
    "difficulty": "simple"
  },
  {
    "question_id": 952,
    "db_id": "formula_1",
    "question": "Which constructors have been ranked 1?",
    "predicted_sql": "SELECT name FROM constructors WHERE constructorid IN ( SELECT constructorid FROM results WHERE rank = 1 )",
    "gold_sql": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 953,
    "db_id": "formula_1",
    "question": "How many French constructors have a lap number of over 50?",
    "predicted_sql": "SELECT COUNT(DISTINCT c.constructorid) FROM constructors AS c INNER JOIN results AS r ON c.constructorid = r.constructorid WHERE c.nationality = 'French' AND r.laps > 50",
    "gold_sql": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
    "evidence": "lap numbers of over 50 refers to laps > 50;",
    "difficulty": "simple"
  },
  {
    "question_id": 954,
    "db_id": "formula_1",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN not R.time is NULL THEN 1 ELSE null END) AS REAL) * 100 / COUNT(R.driverid) FROM (races AS C JOIN results AS R ON C.raceid = R.raceid) JOIN drivers AS D ON D.driverid = R.driverid WHERE D.nationality = 'Japanese' AND C.year BETWEEN 2007 AND 2009",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "predicted_sql": "SELECT T4.year, AVG(T1.milliseconds) / 1000 FROM results AS T1 INNER JOIN status AS T2 ON T1.statusid = T2.statusid INNER JOIN driverstandings AS T3 ON T1.driverid = T3.driverid AND T1.raceid = T3.raceid INNER JOIN races AS T4 ON T1.raceid = T4.raceid WHERE T2.status = 'Finished' AND T3.position = 1 AND T1.time IS NOT NULL GROUP BY T4.year",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
    "difficulty": "challenging"
  },
  {
    "question_id": 956,
    "db_id": "formula_1",
    "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE STRFTIME('%Y', T1.dob) > '1975' AND T2.rank = 2",
    "gold_sql": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
    "evidence": "born after 1975 refers to year(dob) >1975;",
    "difficulty": "simple"
  },
  {
    "question_id": 957,
    "db_id": "formula_1",
    "question": "How many Italian drivers haven't finished the race?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.driverid) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.nationality = 'Italian' AND T2.time IS NULL",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
    "evidence": "haven't finished the race refers to time is null;",
    "difficulty": "simple"
  },
  {
    "question_id": 958,
    "db_id": "formula_1",
    "question": "Which driver has the fastest lap time? Please give their forenames and surnames.",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid ORDER BY T2.fastestlaptime ASC LIMIT 1",
    "gold_sql": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
    "evidence": "",
    "difficulty": "moderate"
  },
  {
    "question_id": 959,
    "db_id": "formula_1",
    "question": "What is the fastest lap number of the champion in 2009?",
    "predicted_sql": "SELECT T1.lap, T4.forename, T4.surname FROM laptimes AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid AND T1.raceid = T2.raceid INNER JOIN driverstandings AS T3 ON T2.driverid = T3.driverid AND T2.raceid = T3.raceid INNER JOIN drivers AS T4 ON T3.driverid = T4.driverid INNER JOIN seasons AS T5 ON T5.year = 2009 WHERE T3.position = 1 ORDER BY T2.fastestlaptime ASC LIMIT 1",
    "gold_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
    "difficulty": "simple"
  },
  {
    "question_id": 960,
    "db_id": "formula_1",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "predicted_sql": "SELECT AVG(results.fastestlapspeed) FROM results JOIN races ON races.raceid = results.raceid WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009",
    "gold_sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
    "difficulty": "moderate"
  },
  {
    "question_id": 961,
    "db_id": "formula_1",
    "question": "Which race has the shortest actual finishing time? Please give the name and year.",
    "predicted_sql": "SELECT T2.name, T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1",
    "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1",
    "evidence": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;",
    "difficulty": "simple"
  },
  {
    "question_id": 962,
    "db_id": "formula_1",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN drivers.dob < '1985-01-01' AND results.laps > 50 THEN 1 END) AS REAL) * 100 / COUNT(drivers.driverid) FROM drivers INNER JOIN results ON drivers.driverid = results.driverid INNER JOIN races ON results.raceid = races.raceid WHERE races.year BETWEEN 2000 AND 2005;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
    "difficulty": "challenging"
  },
  {
    "question_id": 963,
    "db_id": "formula_1",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.driverid) FROM drivers AS T1 INNER JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T1.nationality = 'French' AND T2.milliseconds < 120000",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
    "evidence": "lap time less than 02:00.00 refers to seconds < 120;",
    "difficulty": "moderate"
  },
  {
    "question_id": 964,
    "db_id": "formula_1",
    "question": "List out the code for drivers who have nationality in America.",
    "predicted_sql": "SELECT code FROM drivers WHERE nationality = 'America'",
    "gold_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "evidence": "nationality = 'America'",
    "difficulty": "simple"
  },
  {
    "question_id": 965,
    "db_id": "formula_1",
    "question": "List out the Id number of races which were hold in 2009.",
    "predicted_sql": "SELECT raceid FROM races WHERE year = 2009",
    "gold_sql": "SELECT raceId FROM races WHERE year = 2009",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 966,
    "db_id": "formula_1",
    "question": "How many driver participated in race ID number 18?",
    "predicted_sql": "SELECT COUNT(driverid) FROM results WHERE raceid = 18",
    "gold_sql": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 967,
    "db_id": "formula_1",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "predicted_sql": "SELECT code FROM drivers WHERE nationality = 'Dutch' ORDER BY dob DESC LIMIT 3",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
    "difficulty": "simple"
  },
  {
    "question_id": 968,
    "db_id": "formula_1",
    "question": "What is reference name of Robert Kubica?",
    "predicted_sql": "SELECT driverref FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
    "gold_sql": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
    "evidence": "reference name refers to driverRef;",
    "difficulty": "simple"
  },
  {
    "question_id": 969,
    "db_id": "formula_1",
    "question": "How many British drivers who were born in 1980?",
    "predicted_sql": "SELECT COUNT(driverid) FROM drivers WHERE strftime('%Y', dob) = '1980' AND nationality = 'Australian'",
    "gold_sql": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
    "evidence": "born in 1980 refers to year(dob) = 1980;",
    "difficulty": "simple"
  },
  {
    "question_id": 970,
    "db_id": "formula_1",
    "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "predicted_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE drivers.nationality = 'German' AND STRFTIME('%Y', drivers.dob) BETWEEN '1980' AND '1990' ORDER BY laptimes.time LIMIT 3",
    "gold_sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
    "difficulty": "moderate"
  },
  {
    "question_id": 971,
    "db_id": "formula_1",
    "question": "Please state the reference name of the oldest German driver.",
    "predicted_sql": "SELECT driverref FROM drivers WHERE nationality = 'German' ORDER BY dob ASC LIMIT 1;",
    "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "difficulty": "simple"
  },
  {
    "question_id": 972,
    "db_id": "formula_1",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "predicted_sql": "SELECT drivers.driverid, drivers.code FROM drivers INNER JOIN results ON drivers.driverid = results.driverid WHERE STRFTIME('%Y', drivers.dob) = '1971' AND results.fastestlaptime IS NOT NULL ORDER BY results.fastestlaptime ASC",
    "gold_sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
    "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
    "difficulty": "moderate"
  },
  {
    "question_id": 973,
    "db_id": "formula_1",
    "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
    "predicted_sql": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN laptimes ON drivers.driverid = laptimes.driverid WHERE STRFTIME('%Y', drivers.dob) < '1982' AND drivers.nationality = \"Spanish\" ORDER BY laptimes.time DESC LIMIT 10",
    "gold_sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
    "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
    "difficulty": "moderate"
  },
  {
    "question_id": 974,
    "db_id": "formula_1",
    "question": "State the racing year which has the fastest lap time?",
    "predicted_sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T1.fastestlaptime IS NOT NULL ORDER BY T1.fastestlaptime ASC LIMIT 1",
    "gold_sql": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
    "evidence": "'has the fastest lap time?' refers to fastestLapTime has values",
    "difficulty": "simple"
  },
  {
    "question_id": 975,
    "db_id": "formula_1",
    "question": "Which year has the lowest speed of lap time?",
    "predicted_sql": "SELECT T1.year FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year INNER JOIN laptimes AS T3 ON T2.raceid = T3.raceid ORDER BY T3.time ASC LIMIT 1",
    "gold_sql": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
    "evidence": "lowest speed of lap time refers to Max(time);",
    "difficulty": "simple"
  },
  {
    "question_id": 976,
    "db_id": "formula_1",
    "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
    "predicted_sql": "SELECT driverid FROM laptimes WHERE lap = 1 ORDER BY time ASC LIMIT 5;",
    "gold_sql": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
    "evidence": "fastest time refers to Min(time);",
    "difficulty": "simple"
  },
  {
    "question_id": 977,
    "db_id": "formula_1",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "predicted_sql": "SELECT COUNT(*) FROM results WHERE statusid = 2 AND time IS NOT NULL AND raceid BETWEEN 50 AND 100",
    "gold_sql": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
    "difficulty": "simple"
  },
  {
    "question_id": 978,
    "db_id": "formula_1",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "predicted_sql": "SELECT location, lat, lng, COUNT(circuitid) FROM circuits WHERE country = 'Austria' GROUP BY location, lat, lng",
    "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "difficulty": "simple"
  },
  {
    "question_id": 979,
    "db_id": "formula_1",
    "question": "What race number has the most finishers?",
    "predicted_sql": "SELECT raceid FROM results WHERE time IS NOT NULL GROUP BY raceid ORDER BY COUNT(*) DESC LIMIT 1;",
    "gold_sql": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
    "evidence": "finisher refers to time is not null;",
    "difficulty": "simple"
  },
  {
    "question_id": 980,
    "db_id": "formula_1",
    "question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
    "predicted_sql": "SELECT T1.driverref, T1.nationality, T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.q2 IS NOT NULL AND T2.raceid = 23",
    "gold_sql": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
    "evidence": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;",
    "difficulty": "moderate"
  },
  {
    "question_id": 981,
    "db_id": "formula_1",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "predicted_sql": "SELECT races.year, races.date, races.time, races.name FROM drivers JOIN qualifying ON drivers.driverid = qualifying.driverid JOIN races ON qualifying.raceid = races.raceid WHERE drivers.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY races.date ASC LIMIT 1",
    "gold_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
    "difficulty": "moderate"
  },
  {
    "question_id": 982,
    "db_id": "formula_1",
    "question": "How many American drivers have puncture status.",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.driverid) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.nationality = 'American' AND T2.statusid = 2",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'",
    "evidence": "puncture status refers to status = Puncture;",
    "difficulty": "simple"
  },
  {
    "question_id": 983,
    "db_id": "formula_1",
    "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
    "predicted_sql": "SELECT T1.name, T1.url FROM constructors AS T1 INNER JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "gold_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
    "evidence": "introduction website refers to url; Italian is a nationality",
    "difficulty": "simple"
  },
  {
    "question_id": 984,
    "db_id": "formula_1",
    "question": "What is the website of the constructor who tallied the most total wins.",
    "predicted_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid GROUP BY T1.url ORDER BY SUM(T2.wins) DESC LIMIT 1",
    "gold_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
    "evidence": "introduction website refers to url;",
    "difficulty": "simple"
  },
  {
    "question_id": 985,
    "db_id": "formula_1",
    "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
    "predicted_sql": "SELECT T3.forename, T3.surname FROM laptimes AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
    "gold_sql": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
    "evidence": "slowest time refers to Max(time);",
    "difficulty": "simple"
  },
  {
    "question_id": 986,
    "db_id": "formula_1",
    "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
    "predicted_sql": "SELECT T2.name, T1.milliseconds FROM laptimes AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T1.lap = 1 ORDER BY T1.milliseconds ASC LIMIT 1",
    "gold_sql": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
    "evidence": "fastest refers to Min(time);",
    "difficulty": "simple"
  },
  {
    "question_id": 987,
    "db_id": "formula_1",
    "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
    "predicted_sql": "SELECT AVG(T1.fastestlaptime) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid= T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank < 11",
    "gold_sql": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'",
    "evidence": "top 10 refers to rank <11; AVG(fastestLapTime);",
    "difficulty": "simple"
  },
  {
    "question_id": 988,
    "db_id": "formula_1",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "predicted_sql": "SELECT drivers.driverid, drivers.surname, drivers.forename, AVG(pitstops.milliseconds) AS 'Average_Pit_Stop_Duration' FROM drivers JOIN pitstops ON drivers.driverid = pitstops.driverid WHERE drivers.nationality = 'German' AND drivers.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY drivers.driverid ORDER BY Average_Pit_Stop_Duration ASC LIMIT 5",
    "gold_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
    "difficulty": "challenging"
  },
  {
    "question_id": 989,
    "db_id": "formula_1",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "predicted_sql": "SELECT T3.forename, T3.surname, T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.rank = 1",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
    "difficulty": "moderate"
  },
  {
    "question_id": 990,
    "db_id": "formula_1",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "predicted_sql": "SELECT T1.constructorref, T1.url FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorid = T2.constructorid INNER JOIN races as T3 ON T2.raceid = T3.raceid WHERE T3.name = 'Singapore Grand Prix' AND T3.year=2009 ORDER BY T2.time ASC LIMIT 1",
    "gold_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
    "difficulty": "challenging"
  },
  {
    "question_id": 991,
    "db_id": "formula_1",
    "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
    "predicted_sql": "SELECT forename, surname, dob FROM drivers WHERE STRFTIME('%Y', dob) BETWEEN '1981' AND '1991' AND nationality = 'Austrian'",
    "gold_sql": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
    "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
    "difficulty": "simple"
  },
  {
    "question_id": 992,
    "db_id": "formula_1",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "predicted_sql": "SELECT forename || ' ' || surname AS full_name, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC;",
    "gold_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "difficulty": "moderate"
  },
  {
    "question_id": 993,
    "db_id": "formula_1",
    "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
    "predicted_sql": "SELECT location, country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "gold_sql": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
    "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
    "difficulty": "simple"
  },
  {
    "question_id": 994,
    "db_id": "formula_1",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "predicted_sql": "SELECT MAX(T2.points), T3.name, T3.nationality FROM races AS T1 INNER JOIN constructorresults AS T2 ON T1.raceid = T2.raceid INNER JOIN constructors AS T3 ON T3.constructorid = T2.constructorid WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010 ORDER BY T2.points DESC LIMIT 1",
    "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
    "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
    "difficulty": "challenging"
  },
  {
    "question_id": 995,
    "db_id": "formula_1",
    "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
    "predicted_sql": "SELECT AVG(T3.points) FROM drivers AS T1 INNER JOIN results AS T3 ON T1.driverid = T3.driverid INNER JOIN races AS T2 ON T3.raceid = T2.raceid WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.name = 'Turkish Grand Prix'",
    "gold_sql": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
    "evidence": "Average score = AVG(points)",
    "difficulty": "moderate"
  },
  {
    "question_id": 996,
    "db_id": "formula_1",
    "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
    "predicted_sql": "SELECT CAST(COUNT(raceid) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
    "evidence": "races in date between '2000-01-01' and '2010-12-31'",
    "difficulty": "simple"
  },
  {
    "question_id": 997,
    "db_id": "formula_1",
    "question": "Which citizenship do the vast majority of the drivers hold?",
    "predicted_sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverid) DESC LIMIT 1",
    "gold_sql": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
    "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n",
    "difficulty": "simple"
  },
  {
    "question_id": 998,
    "db_id": "formula_1",
    "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
    "predicted_sql": "SELECT wins FROM driverstandings WHERE points = (SELECT points FROM results WHERE rank = 91)",
    "gold_sql": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
    "evidence": "victories refer to wins; 91st refers to points\n\n",
    "difficulty": "simple"
  },
  {
    "question_id": 999,
    "db_id": "formula_1",
    "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "predicted_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid ORDER BY T2.fastestlaptime ASC LIMIT 1",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n",
    "difficulty": "simple"
  },
  {
    "question_id": 1000,
    "db_id": "formula_1",
    "question": "Which racetrack hosted the most recent race? Indicate the full location.",
    "predicted_sql": "SELECT location, country FROM circuits WHERE circuitid = ( SELECT circuitid FROM races ORDER BY date DESC LIMIT 1 )",
    "gold_sql": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
    "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n",
    "difficulty": "simple"
  },
  {
    "question_id": 1001,
    "db_id": "formula_1",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "predicted_sql": "SELECT T3.forename, T3.surname FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid INNER JOIN circuits AS T4 ON T2.circuitid = T4.circuitid WHERE T4.name = 'Marina Bay Street Circuit' AND T2.year = 2008 AND T1.position = 1 AND T2.round = 3 ORDER BY T1.q3 ASC LIMIT 1",
    "gold_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
    "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
    "difficulty": "challenging"
  },
  {
    "question_id": 1002,
    "db_id": "formula_1",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "predicted_sql": "SELECT T1.forename || ' ' || T1.surname AS FullName, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T1.dob = ( SELECT MAX(dob) FROM drivers ) ORDER BY T3.date ASC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
    "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1003,
    "db_id": "formula_1",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "predicted_sql": "SELECT COUNT(results.statusid), drivers.driverid, drivers.surname FROM results INNER JOIN drivers ON results.driverid = drivers.driverid INNER JOIN races ON results.raceid = races.raceid INNER JOIN status ON results.statusid = status.statusid WHERE status.status = 'Accident' AND races.name = 'Canadian Grand Prix' GROUP BY drivers.driverid ORDER BY COUNT(results.statusid) DESC LIMIT 1;",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
    "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
    "difficulty": "moderate"
  },
  {
    "question_id": 1004,
    "db_id": "formula_1",
    "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
    "predicted_sql": "SELECT T1.forename, T1.surname, SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverstandings AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid, T1.forename, T1.surname ORDER BY T1.dob ASC LIMIT 1",
    "gold_sql": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1",
    "evidence": "oldest racer refers to MIN(dob); full name refers to forename, surname.",
    "difficulty": "simple"
  },
  {
    "question_id": 1005,
    "db_id": "formula_1",
    "question": "What was the longest time a driver had ever spent at a pit stop?",
    "predicted_sql": "SELECT MAX(duration) FROM pitstops",
    "gold_sql": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
    "evidence": "longest time spent at pitstop refers to MAX(duration)",
    "difficulty": "simple"
  },
  {
    "question_id": 1006,
    "db_id": "formula_1",
    "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
    "predicted_sql": "SELECT MIN(time) FROM laptimes",
    "gold_sql": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
    "evidence": "",
    "difficulty": "challenging"
  },
  {
    "question_id": 1007,
    "db_id": "formula_1",
    "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
    "predicted_sql": "SELECT MAX(duration) FROM pitstops WHERE driverid = ( SELECT driverid FROM drivers WHERE driverref = 'lewis' )",
    "gold_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
    "evidence": "longest time refes to MAX(duration);",
    "difficulty": "simple"
  },
  {
    "question_id": 1008,
    "db_id": "formula_1",
    "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
    "predicted_sql": "SELECT T1.lap FROM pitstops AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Australian Grand Prix' AND T3.year = 2011",
    "gold_sql": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1009,
    "db_id": "formula_1",
    "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
    "predicted_sql": "SELECT T3.surname, T3.forename, T1.duration FROM pitstops AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2011",
    "gold_sql": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
    "evidence": "time spent at pit stop refers to duration",
    "difficulty": "simple"
  },
  {
    "question_id": 1010,
    "db_id": "formula_1",
    "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
    "predicted_sql": "SELECT MIN(T1.time) FROM laptimes AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T2.surname = 'Hamilton' AND T2.forename = 'Lewis'",
    "gold_sql": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "evidence": "lap recod means the fastest time recorded which refers to time",
    "difficulty": "simple"
  },
  {
    "question_id": 1011,
    "db_id": "formula_1",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "predicted_sql": "SELECT T2.forename, T2.surname FROM laptimes AS T1 INNER JOIN drivers AS T2 ON T1.driverid = T2.driverid ORDER BY T1.time ASC LIMIT 1",
    "gold_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
    "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
    "difficulty": "challenging"
  },
  {
    "question_id": 1012,
    "db_id": "formula_1",
    "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
    "predicted_sql": "SELECT C.name, C.location, C.country, R.fastestlap FROM drivers D INNER JOIN results R ON D.driverid = R.driverid INNER JOIN races RA ON R.raceid = RA.raceid INNER JOIN circuits C ON RA.circuitid = C.circuitid WHERE D.driverref = 'lewis' AND R.fastestlap IS NOT NULL ORDER BY R.fastestlaptime ASC LIMIT 1;",
    "gold_sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
    "evidence": "fastest lap refers to MIN(time)",
    "difficulty": "simple"
  },
  {
    "question_id": 1013,
    "db_id": "formula_1",
    "question": "What is the lap record for the Austrian Grand Prix Circuit?",
    "predicted_sql": "SELECT MIN(T1.time) FROM laptimes AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN circuits AS T3 ON T2.circuitid = T3.circuitid WHERE T3.name = 'Austrian Grand Prix'",
    "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "difficulty": "simple"
  },
  {
    "question_id": 1014,
    "db_id": "formula_1",
    "question": "Please list the lap records for the circuits in Italy.",
    "predicted_sql": "SELECT T1.name AS 'Circuit Name', MIN(T3.time) AS 'Lap Record' FROM circuits T1 INNER JOIN races T2 ON T1.circuitid = T2.circuitid INNER JOIN laptimes T3 ON T2.raceid = T3.raceid WHERE T1.country = 'Italy' GROUP BY T1.name",
    "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "difficulty": "challenging"
  },
  {
    "question_id": 1015,
    "db_id": "formula_1",
    "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
    "predicted_sql": "SELECT races.name FROM laptimes INNER JOIN races ON laptimes.raceid = races.raceid INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Austrian Grand Prix Circuit' ORDER BY laptimes.time ASC LIMIT 1",
    "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "difficulty": "moderate"
  },
  {
    "question_id": 1016,
    "db_id": "formula_1",
    "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
    "predicted_sql": "SELECT P.duration FROM laptimes L INNER JOIN races R on L.raceid = R.raceid INNER JOIN pitstops P on L.driverid = P.driverid AND L.raceid = P.raceid INNER JOIN circuits C on R.circuitid = C.circuitid WHERE C.name = 'Austrian Grand Prix Circuit' ORDER BY L.time ASC LIMIT 1",
    "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
    "evidence": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration",
    "difficulty": "challenging"
  },
  {
    "question_id": 1017,
    "db_id": "formula_1",
    "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
    "predicted_sql": "SELECT C1.lat, C1.lng FROM circuits AS C1 INNER JOIN races AS R1 ON R1.circuitid = C1.circuitid INNER JOIN results AS R2 ON R2.raceid = R1.raceid WHERE R2.fastestlaptime = '1:29.488'",
    "gold_sql": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
    "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1018,
    "db_id": "formula_1",
    "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
    "predicted_sql": "SELECT AVG(milliseconds) FROM pitstops WHERE driverid = ( SELECT driverid FROM drivers WHERE surname = 'Hamilton' AND forename = 'Lewis' )",
    "gold_sql": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
    "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)",
    "difficulty": "simple"
  },
  {
    "question_id": 1019,
    "db_id": "formula_1",
    "question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
    "predicted_sql": "SELECT AVG(T1.milliseconds) FROM laptimes AS T1 INNER JOIN races AS T2 ON T1.raceid = T2.raceid INNER JOIN circuits AS T3 ON T2.circuitid = T3.circuitid WHERE T3.country = 'Italy'",
    "gold_sql": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
    "evidence": "average = AVG(milliseconds)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1020,
    "db_id": "european_football_2",
    "question": "Which player has the highest overall rating? Indicate the player's api id.",
    "predicted_sql": "SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1",
    "gold_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "highest overall rating refers to MAX(overall_rating);",
    "difficulty": "simple"
  },
  {
    "question_id": 1021,
    "db_id": "european_football_2",
    "question": "What is the height of the tallest player? Indicate his name.",
    "predicted_sql": "SELECT player_name, height FROM player ORDER BY height DESC LIMIT 1",
    "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "evidence": "tallest player refers to MAX(height);",
    "difficulty": "simple"
  },
  {
    "question_id": 1022,
    "db_id": "european_football_2",
    "question": "What is the preferred foot when attacking of the player with the lowest potential?",
    "predicted_sql": "SELECT preferred_foot FROM player_attributes ORDER BY potential ASC LIMIT 1;",
    "gold_sql": "SELECT preferred_foot FROM Player_Attributes WHERE penalties AND potential = (SELECT MIN(potential) FROM Player_Attributes)",
    "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);",
    "difficulty": "simple"
  },
  {
    "question_id": 1023,
    "db_id": "european_football_2",
    "question": "Among the players with an overall rating between 60 to 65, how many players whose going to be in all of your attack moves instead of defensing?",
    "predicted_sql": "SELECT COUNT(player_api_id) FROM player_attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
    "gold_sql": "SELECT COUNT(id) FROM Player_Attributes WHERE overall_rating BETWEEN 60 AND 65 AND defensive_work_rate = 'low'",
    "evidence": "overall_rating > = 60 AND overall_rating < 65; players whose going to be in all of your attack moves instead of defensing refers to defensive_work_rate = 'low';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1024,
    "db_id": "european_football_2",
    "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "predicted_sql": "SELECT player_api_id FROM player_attributes ORDER BY crossing DESC LIMIT 5",
    "gold_sql": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
    "evidence": "perform better in crossing actions refers to MAX(crossing)",
    "difficulty": "simple"
  },
  {
    "question_id": 1025,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "predicted_sql": "SELECT T2.name FROM match AS T1 INNER JOIN league AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY SUM(T1.home_team_goal + T1.away_team_goal) DESC LIMIT 1",
    "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1026,
    "db_id": "european_football_2",
    "question": "Which home team had lost the fewest matches in the 2016 season?",
    "predicted_sql": "SELECT T2.team_long_name FROM match AS T1 INNER JOIN team AS T2 ON T1.home_team_api_id = T2.team_api_id WHERE T1.season = '2015/2016' AND T1.home_team_goal < T1.away_team_goal GROUP BY T2.team_long_name ORDER BY COUNT(*) ASC LIMIT 1",
    "gold_sql": "SELECT t3.team_long_name FROM Match AS t1 INNER JOIN Team AS t3 ON t1.home_team_api_id = t3.team_api_id WHERE t1.season = '2015/2016' AND t1.home_team_goal - t1.away_team_goal < 0 GROUP BY t1.home_team_api_id HAVING COUNT(*) = (SELECT MIN(lost_matches_count) FROM (SELECT home_team_api_id, COUNT(*) AS lost_matches_count FROM Match WHERE season = '2015/2016' AND home_team_goal - away_team_goal < 0 GROUP BY home_team_api_id))",
    "evidence": "home team lost the matches refers to SUBTRACT(home_team_goal, away_team_goal) < 0; 2016 season refers to season = '2015/2016';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1027,
    "db_id": "european_football_2",
    "question": "Indicate the full names of the top 10 players with the highest number of penalties.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.penalties DESC LIMIT 10",
    "gold_sql": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10",
    "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);",
    "difficulty": "simple"
  },
  {
    "question_id": 1028,
    "db_id": "european_football_2",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "predicted_sql": "SELECT T1.team_long_name FROM team AS T1 INNER JOIN match AS T2 ON T1.team_api_id = T2.away_team_api_id INNER JOIN league AS T3 ON T2.league_id = T3.id INNER JOIN country AS T4 ON T3.country_id = T4.id WHERE T3.name = 'Scotland Premier League' AND T2.season = '2009/2010' AND T2.away_team_goal > T2.home_team_goal GROUP BY T1.team_long_name ORDER BY COUNT(T2.away_team_goal) DESC LIMIT 1",
    "gold_sql": "SELECT t3.team_long_name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id INNER JOIN Team AS t3 ON t2.away_team_api_id = t3.team_api_id WHERE t1.name = 'Scotland Premier League' AND t2.season = '2009/2010' AND t2.away_team_goal - t2.home_team_goal > 0 GROUP BY t2.away_team_api_id HAVING COUNT(*) = (SELECT MAX(won_matches_count) FROM (SELECT away_team_api_id, COUNT(*) AS won_matches_count FROM Match AS m INNER JOIN League AS l ON m.league_id = l.id WHERE l.name = 'Scotland Premier League' AND m.season = '2009/2010' AND m.away_team_goal - m.home_team_goal > 0 GROUP BY m.away_team_api_id))",
    "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010';",
    "difficulty": "challenging"
  },
  {
    "question_id": 1029,
    "db_id": "european_football_2",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "predicted_sql": "SELECT T1.team_long_name, T2.buildupplayspeed FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id ORDER BY T2.buildupplayspeed DESC LIMIT 4",
    "gold_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
    "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1030,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "predicted_sql": "SELECT T2.name FROM match AS T1 INNER JOIN league AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' AND T1.home_team_goal = T1.away_team_goal GROUP BY T1.league_id ORDER BY COUNT(*) DESC LIMIT 1",
    "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "predicted_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.birthday) AS age, T1.player_name, T2.sprint_speed FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.sprint_speed >= 97 AND STRFTIME('%Y', T2.date) BETWEEN 2013 AND 2015 ORDER BY age DESC;",
    "gold_sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
    "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1032,
    "db_id": "european_football_2",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "predicted_sql": "SELECT L.name, COUNT(M.league_id) as Total_Matches FROM league AS L INNER JOIN match AS M ON L.id = M.league_id GROUP BY M.league_id ORDER BY COUNT(M.league_id) DESC LIMIT 1",
    "gold_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
    "evidence": " league with highest matches of all time refers to MAX(COUNT(league_id));",
    "difficulty": "moderate"
  },
  {
    "question_id": 1033,
    "db_id": "european_football_2",
    "question": "What is the average height of players born between 1990 and 1995?",
    "predicted_sql": "SELECT AVG(height) FROM player WHERE birthday BETWEEN '1990-01-01 00:00:00' AND '1995-12-31 23:59:59'",
    "gold_sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
    "evidence": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
    "difficulty": "simple"
  },
  {
    "question_id": 1034,
    "db_id": "european_football_2",
    "question": "List the players' api id who had the highest above average overall ratings in 2010.",
    "predicted_sql": "SELECT player_api_id FROM player_attributes WHERE substr(date,1,4) = '2010' GROUP BY player_api_id HAVING overall_rating > (SELECT AVG(overall_rating) FROM player_attributes WHERE substr(date,1,4) = '2010') ORDER BY overall_rating DESC LIMIT 1;",
    "gold_sql": "SELECT p.player_api_id FROM Player_Attributes AS p WHERE SUBSTR(p.date, 1, 4) = '2010' AND p.overall_rating = (SELECT MAX(pa.overall_rating) FROM Player_Attributes AS pa WHERE SUBSTR(pa.date, 1, 4) = '2010')",
    "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';",
    "difficulty": "simple"
  },
  {
    "question_id": 1035,
    "db_id": "european_football_2",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "predicted_sql": "SELECT team_fifa_api_id FROM team_attributes WHERE buildupplayspeed BETWEEN 51 AND 59",
    "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1036,
    "db_id": "european_football_2",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "predicted_sql": "SELECT T1.team_long_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplaypassing > (SELECT AVG(buildupplaypassing) FROM team_attributes WHERE buildupplaypassing IS NOT NULL AND strftime('%Y', date) = '2012') AND strftime('%Y', T2.date) = '2012'",
    "gold_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
    "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1037,
    "db_id": "european_football_2",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN preferred_foot = 'left' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_fifa_api_id) FROM player_attributes WHERE player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1987' AND '1992')",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
    "difficulty": "challenging"
  },
  {
    "question_id": 1038,
    "db_id": "european_football_2",
    "question": "List the top 5 leagues in ascending order of the number of goals made in all seasons combined.",
    "predicted_sql": "SELECT league.name FROM league JOIN match ON match.league_id = league.id GROUP BY league.name ORDER BY SUM(match.home_team_goal + match.away_team_goal) ASC LIMIT 5",
    "gold_sql": "SELECT t1.name, SUM(t2.home_team_goal) + SUM(t2.away_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id GROUP BY t1.name ORDER BY SUM(t2.home_team_goal) + SUM(t2.away_team_goal) ASC LIMIT 5",
    "evidence": "number of goals made in all seasons combine = SUM(home_team_goal, away_team_goal);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1039,
    "db_id": "european_football_2",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "predicted_sql": "SELECT AVG(T2.long_shots) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Ahmed Samir Farag'",
    "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
    "difficulty": "simple"
  },
  {
    "question_id": 1040,
    "db_id": "european_football_2",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "predicted_sql": "SELECT player.player_name, AVG(player_attributes.heading_accuracy) FROM player INNER JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.height > 180 GROUP BY player.player_name ORDER BY AVG(player_attributes.heading_accuracy) DESC LIMIT 10;",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
    "evidence": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
    "difficulty": "moderate"
  },
  {
    "question_id": 1041,
    "db_id": "european_football_2",
    "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "predicted_sql": "SELECT T2.team_long_name, T1.chancecreationpassing FROM team_attributes AS T1 INNER JOIN team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.date >= '2014-01-01 00:00:00' AND T1.date <= '2014-12-31 23:59:59' AND T1.buildupplaydribblingclass = 'Normal' AND T1.chancecreationpassing < (SELECT AVG(chancecreationpassing) FROM team_attributes WHERE date >='2014-01-01 00:00:00' AND date <='2014-12-31 23:59:59' AND buildupplaydribblingclass = 'Normal') ORDER BY T1.chancecreationpassing DESC",
    "gold_sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1042,
    "db_id": "european_football_2",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "predicted_sql": "SELECT L.name FROM league L INNER JOIN match M ON L.id = M.league_id WHERE M.season = \"2009/2010\" GROUP BY L.id HAVING AVG(home_team_goal) > AVG(away_team_goal)",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
    "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1043,
    "db_id": "european_football_2",
    "question": "What is the short name of the football team Queens Park Rangers?",
    "predicted_sql": "SELECT team_short_name FROM team WHERE team_long_name = 'Queens Park Rangers'",
    "gold_sql": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'",
    "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';",
    "difficulty": "simple"
  },
  {
    "question_id": 1044,
    "db_id": "european_football_2",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "predicted_sql": "SELECT player_name FROM player WHERE SUBSTR(birthday,1,4) = '1970' AND SUBSTR(birthday,6,2) = '10';",
    "gold_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';",
    "difficulty": "simple"
  },
  {
    "question_id": 1045,
    "db_id": "european_football_2",
    "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
    "predicted_sql": "SELECT attacking_work_rate FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Franco Zennaro')",
    "gold_sql": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1046,
    "db_id": "european_football_2",
    "question": "What is the ADO Den Haag team freedom of movement in the 1st two thirds of the pitch?",
    "predicted_sql": "SELECT buildupplaypositioningclass FROM team_attributes WHERE team_fifa_api_id = ( SELECT team_fifa_api_id FROM team WHERE team_long_name = 'ADO Den Haag' )",
    "gold_sql": "SELECT DISTINCT t2.buildUpPlayPositioningClass FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_fifa_api_id = t2.team_fifa_api_id WHERE t1.team_long_name = 'ADO Den Haag'",
    "evidence": "ADO Den Haag refers to team_long_name = 'ADO Den Haag'; freedom of movement in the 1st two thirds of the pitch refers to buildUpPlayPositioningClass;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1047,
    "db_id": "european_football_2",
    "question": "What is the football player Francois Affolter header's finishing rate on 18/09/2014?",
    "predicted_sql": "SELECT heading_accuracy FROM player_attributes WHERE date = '2014-09-18 00:00:00' AND player_api_id IN ( SELECT player_api_id FROM player WHERE player_name = 'Francois Affolter' )",
    "gold_sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Francois Affolter' AND SUBSTR(t2.`date`, 1, 10) = '2014-09-18'",
    "evidence": "header's finishing rate refers to heading_accuracy; on 18/09/2014 refers to date = '2014-09-18 00:00:00';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1048,
    "db_id": "european_football_2",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "predicted_sql": "SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Gabriel Tamas') AND strftime('%Y', date) = '2011'",
    "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "difficulty": "simple"
  },
  {
    "question_id": 1049,
    "db_id": "european_football_2",
    "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?",
    "predicted_sql": "SELECT COUNT(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE match.season = '2015/2016' AND league.name = 'Scotland Premier League' AND country.name = 'Scotland'",
    "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'Scotland Premier League'",
    "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League';",
    "difficulty": "simple"
  },
  {
    "question_id": 1050,
    "db_id": "european_football_2",
    "question": "What is the preferred foot when attacking of the youngest football player?",
    "predicted_sql": "SELECT T2.preferred_foot FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday DESC LIMIT 1",
    "gold_sql": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
    "evidence": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;",
    "difficulty": "simple"
  },
  {
    "question_id": 1051,
    "db_id": "european_football_2",
    "question": "List all the football player with the highest potential score.",
    "predicted_sql": "SELECT player_name FROM player WHERE player_api_id IN ( SELECT player_api_id FROM player_attributes WHERE potential = ( SELECT MAX(potential) FROM player_attributes ) )",
    "gold_sql": "SELECT DISTINCT(t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = (SELECT MAX(potential) FROM Player_Attributes) ",
    "evidence": "potential score refers to potential; highest potential score refers to MAX(potential);",
    "difficulty": "simple"
  },
  {
    "question_id": 1052,
    "db_id": "european_football_2",
    "question": "Among all the players whose weight is under 130, how many of them preferred foot in attacking is left?",
    "predicted_sql": "SELECT COUNT(T2.id) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.weight < 130 AND T2.preferred_foot = 'left'",
    "gold_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.weight < 130 AND t2.preferred_foot = 'left'",
    "evidence": "weight < 130; preferred foot in attacking refers to preferred_foot; preferred_foot = 'left';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1053,
    "db_id": "european_football_2",
    "question": "List the football teams that has a chance creation passing class of Risky. Inidcate its short name only.",
    "predicted_sql": "SELECT T1.team_short_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chancecreationpassingclass = 'Risky'",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Risky'",
    "evidence": "chance creation passing class refers to chanceCreationPassingClass; chanceCreationPassingClass = 'Risky'; short name refers to team_short_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1054,
    "db_id": "european_football_2",
    "question": "What is the defensive work rate of the football player David Wilson\n?",
    "predicted_sql": "SELECT defensive_work_rate FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'David Wilson' )",
    "gold_sql": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1055,
    "db_id": "european_football_2",
    "question": "When is the birthday of the football player who has the highest overall rating?",
    "predicted_sql": "SELECT T2.birthday FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.overall_rating DESC LIMIT 1",
    "gold_sql": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "evidence": "football player who has the highest overall rating refers to MAX(overall_rating);",
    "difficulty": "simple"
  },
  {
    "question_id": 1056,
    "db_id": "european_football_2",
    "question": "What is the name of the football league in the country of Netherlands?",
    "predicted_sql": "SELECT name FROM league WHERE country_id = ( SELECT id FROM country WHERE name = 'Netherlands' )",
    "gold_sql": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'",
    "evidence": "name of the football league refers to League.name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1057,
    "db_id": "european_football_2",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "predicted_sql": "SELECT AVG(home_team_goal) FROM match AS m INNER JOIN country AS c ON m.country_id = c.id WHERE c.name = 'Poland' AND m.season = '2010/2011'",
    "gold_sql": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1058,
    "db_id": "european_football_2",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "predicted_sql": "SELECT T1.player_name, AVG(T2.finishing) as avg_finishing FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY T1.player_name HAVING T1.height IN (SELECT MAX(height) FROM player UNION SELECT MIN(height) FROM player) ORDER BY avg_finishing DESC LIMIT 1",
    "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
    "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
    "difficulty": "challenging"
  },
  {
    "question_id": 1059,
    "db_id": "european_football_2",
    "question": "Please list player names which are higher than 180.",
    "predicted_sql": "SELECT player_name FROM player WHERE height > 180",
    "gold_sql": "SELECT player_name FROM Player WHERE height > 180",
    "evidence": "height>180;",
    "difficulty": "simple"
  },
  {
    "question_id": 1060,
    "db_id": "european_football_2",
    "question": "How many players were born after 1990?",
    "predicted_sql": "SELECT COUNT(id) FROM player WHERE STRFTIME('%Y', birthday) > '1990'",
    "gold_sql": "SELECT COUNT(id) FROM Player WHERE STRFTIME('%Y', birthday) > '1990'",
    "evidence": "born after 1990 refers to strftime('%Y', birthday) = '1990';",
    "difficulty": "simple"
  },
  {
    "question_id": 1061,
    "db_id": "european_football_2",
    "question": "How many players whose first names are Adam and weigh more than 170?",
    "predicted_sql": "SELECT COUNT(player_name) FROM player WHERE player_name LIKE 'Adam%' AND weight > 170",
    "gold_sql": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'",
    "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
    "difficulty": "simple"
  },
  {
    "question_id": 1062,
    "db_id": "european_football_2",
    "question": "Which players had an overall rating of over 80 from 2008 to 2010? Please list player names.",
    "predicted_sql": "SELECT DISTINCT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.date) BETWEEN '2008' AND '2010' AND T2.overall_rating > 80",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating > 80 AND SUBSTR(t2.`date`, 1, 4) BETWEEN '2008' AND '2010'",
    "evidence": "overall_rating > 80; from 2008 to 2010 refers to strftime('%Y', date) BETWEEN '2008' AND '2010';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1063,
    "db_id": "european_football_2",
    "question": "What is Aaron Doran's potential score?",
    "predicted_sql": "SELECT potential FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Aaron Doran' )",
    "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "evidence": "potential score refers to potential;",
    "difficulty": "simple"
  },
  {
    "question_id": 1064,
    "db_id": "european_football_2",
    "question": "List out of players whose preferred foot is left.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = 'left'",
    "gold_sql": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'",
    "evidence": "preferred_foot = 'left';",
    "difficulty": "simple"
  },
  {
    "question_id": 1065,
    "db_id": "european_football_2",
    "question": "Please list all team names which the speed class is fast.",
    "predicted_sql": "SELECT T1.team_long_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplayspeedclass = 'Fast'",
    "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
    "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
    "difficulty": "simple"
  },
  {
    "question_id": 1066,
    "db_id": "european_football_2",
    "question": "What is the passing class of CLB team?",
    "predicted_sql": "SELECT T2.buildupplaypassingclass FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_short_name = 'CLB'",
    "gold_sql": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'",
    "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';",
    "difficulty": "simple"
  },
  {
    "question_id": 1067,
    "db_id": "european_football_2",
    "question": "Which teams have build up play passing more than 70? Please list their short names.",
    "predicted_sql": "SELECT T1.team_short_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplaypassing > 70",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayPassing > 70",
    "evidence": "build up play passing refers to buildUpPlayPassing; buildUpPlayPassing > 70; short names refers to team_short_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1068,
    "db_id": "european_football_2",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "predicted_sql": "SELECT AVG(T1.overall_rating) FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.height > 170 AND strftime('%Y', T1.date) BETWEEN '2010' AND '2015'",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
    "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1069,
    "db_id": "european_football_2",
    "question": "Which football player has the shortest height?",
    "predicted_sql": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
    "gold_sql": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1",
    "evidence": "shortest height refers to MIN(height);",
    "difficulty": "simple"
  },
  {
    "question_id": 1070,
    "db_id": "european_football_2",
    "question": "Which country is the league Italy Serie A from?",
    "predicted_sql": "SELECT T2.name AS country_name FROM league AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Italy Serie A'",
    "gold_sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'",
    "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';",
    "difficulty": "simple"
  },
  {
    "question_id": 1071,
    "db_id": "european_football_2",
    "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "predicted_sql": "SELECT T1.team_short_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplayspeed = 31 AND T2.buildupplaydribbling = 53 AND T2.buildupplaypassing = 32",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
    "evidence": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1072,
    "db_id": "european_football_2",
    "question": "What is the average overall rating of the football player Aaron Doran?",
    "predicted_sql": "SELECT AVG(overall_rating) FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = \"Aaron Doran\")",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "evidence": "average overall rating = AVG(overall_rating);",
    "difficulty": "simple"
  },
  {
    "question_id": 1073,
    "db_id": "european_football_2",
    "question": "How many matches were held in the league Germany 1. Bundesliga\nfrom August to October 2008?",
    "predicted_sql": "SELECT COUNT(match.id) FROM match INNER JOIN league ON match.league_id = league.id INNER JOIN country ON league.country_id = country.id WHERE country.name = 'Germany' AND league.name = 'Germany 1. Bundesliga' AND STRFTIME('%Y-%m', match.date) BETWEEN '2008-08' AND '2008-10';",
    "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Germany 1. Bundesliga' AND SUBSTR(t2.`date`, 1, 7) BETWEEN '2008-08' AND '2008-10'",
    "evidence": "Germany 1. Bundesliga refers to League.name = 'Germany 1. Bundesliga'; from August to October 2008 refers to strftime('%Y-%m', date) BETWEEN '2008-08' AND '2008-10';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1074,
    "db_id": "european_football_2",
    "question": "List all the short name of the football team that had a home team goal of 10?",
    "predicted_sql": "SELECT team.team_short_name FROM match INNER JOIN team ON match.home_team_api_id = team.team_api_id WHERE match.home_team_goal = 10",
    "gold_sql": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10",
    "evidence": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;",
    "difficulty": "simple"
  },
  {
    "question_id": 1075,
    "db_id": "european_football_2",
    "question": "List all the football player with the highest balance score and potential score of 61.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = 61 ORDER BY T2.balance DESC LIMIT 1",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.potential = '61' ORDER BY t2.balance DESC LIMIT 1",
    "evidence": "balance score refers to balance; highest balance score refers to MAX(balance); potential score refers to potential; potential = 61;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1076,
    "db_id": "european_football_2",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "predicted_sql": "SELECT CAST(SUM(IIF(T1.player_name = 'Abdou Diallo', T2.ball_control, 0)) AS REAL) / COUNT(IIF(T1.player_name = 'Abdou Diallo', 1, NULL)) - CAST(SUM(IIF(T1.player_name = 'Aaron Appindangoye', T2.ball_control, 0)) AS REAL) / COUNT(IIF(T1.player_name = 'Aaron Appindangoye', 1, NULL)) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1077,
    "db_id": "european_football_2",
    "question": "What's the long name for the team GEN?",
    "predicted_sql": "SELECT team_long_name FROM team WHERE team_short_name = 'GEN'",
    "gold_sql": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'",
    "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';",
    "difficulty": "simple"
  },
  {
    "question_id": 1078,
    "db_id": "european_football_2",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "predicted_sql": "SELECT player_name FROM player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "simple"
  },
  {
    "question_id": 1079,
    "db_id": "european_football_2",
    "question": "Which player is the tallest?",
    "predicted_sql": "SELECT player_name FROM player ORDER BY height DESC LIMIT 1",
    "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "evidence": "tallest player refers to MAX(height);",
    "difficulty": "simple"
  },
  {
    "question_id": 1080,
    "db_id": "european_football_2",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "predicted_sql": "SELECT COUNT(player_api_id) FROM player_attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "gold_sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "evidence": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1081,
    "db_id": "european_football_2",
    "question": "Which country is the Belgium Jupiler League from?",
    "predicted_sql": "SELECT T2.name FROM league AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.name = 'Belgium Jupiler League'",
    "gold_sql": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';",
    "difficulty": "simple"
  },
  {
    "question_id": 1082,
    "db_id": "european_football_2",
    "question": "Please list the leagues from Germany.",
    "predicted_sql": "SELECT T1.name FROM league AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Germany'",
    "gold_sql": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'",
    "evidence": "Germany refers to Country.name = 'Germany';",
    "difficulty": "simple"
  },
  {
    "question_id": 1083,
    "db_id": "european_football_2",
    "question": "Which player has the strongest overall strength?",
    "predicted_sql": "SELECT player_name FROM player WHERE player_api_id IN ( SELECT player_api_id FROM player_attributes WHERE overall_rating = ( SELECT MAX(overall_rating) FROM player_attributes ) )",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1",
    "evidence": "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);",
    "difficulty": "simple"
  },
  {
    "question_id": 1084,
    "db_id": "european_football_2",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.player_api_id) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T1.birthday) < '1986' AND T2.defensive_work_rate = 'high'",
    "gold_sql": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
    "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1085,
    "db_id": "european_football_2",
    "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
    "predicted_sql": "SELECT player_name, MAX(crossing) as Max_Crossing FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') GROUP BY player_name ORDER BY Max_Crossing DESC LIMIT 1",
    "gold_sql": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
    "evidence": "player who perform best in crossing actions refers to MAX(crossing);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1086,
    "db_id": "european_football_2",
    "question": "What's the heading accuracy of Ariel Borysiuk?",
    "predicted_sql": "SELECT heading_accuracy FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Ariel Borysiuk' )",
    "gold_sql": "SELECT t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1087,
    "db_id": "european_football_2",
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "predicted_sql": "SELECT COUNT(DISTINCT player.player_api_id) FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player.height > 180 AND player_attributes.volleys > 70;",
    "gold_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "evidence": "height > 180; volley score refers to volleys; volleys > 70;",
    "difficulty": "simple"
  },
  {
    "question_id": 1088,
    "db_id": "european_football_2",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.volleys > 70 AND T2.dribbling > 70",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "evidence": "volley score are over 70 refers to volleys > 70; dribbling score refers to dribbling are over 70 refers to dribbling > 70;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1089,
    "db_id": "european_football_2",
    "question": "How many matches in the 2008/2009 season were held in Belgium?",
    "predicted_sql": "SELECT COUNT(*) FROM match AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'Belgium' AND T1.season = '2008/2009'",
    "gold_sql": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'",
    "evidence": "Belgium refers to Country.name = 'Belgium';",
    "difficulty": "simple"
  },
  {
    "question_id": 1090,
    "db_id": "european_football_2",
    "question": "What is the long passing score of the oldest player?",
    "predicted_sql": "SELECT T2.long_passing FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.birthday LIMIT 1",
    "gold_sql": "SELECT T2.long_passing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = (SELECT MIN(birthday) FROM Player)",
    "evidence": "long passing score refers to long_passing; oldest player refers to oldest birthday;",
    "difficulty": "simple"
  },
  {
    "question_id": 1091,
    "db_id": "european_football_2",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "predicted_sql": "SELECT COUNT(match.id) FROM match INNER JOIN league ON match.league_id = league.id WHERE league.name = 'Belgium Jupiler League' AND STRFTIME('%Y', match.date) = '2009' AND STRFTIME('%m', match.date) = '04'",
    "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1092,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "predicted_sql": "SELECT T2.name FROM match AS T1 INNER JOIN league AS T2 ON T1.league_id = T2.id WHERE T1.season = '2008/2009' GROUP BY T2.name ORDER BY COUNT(T1.league_id) DESC LIMIT 1",
    "gold_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
    "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
    "difficulty": "simple"
  },
  {
    "question_id": 1093,
    "db_id": "european_football_2",
    "question": "What is the average overall rating of the players born before the year 1986?",
    "predicted_sql": "SELECT AVG(T1.overall_rating) FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE strftime('%Y', T2.birthday) < '1986'",
    "gold_sql": "SELECT SUM(t2.overall_rating) / COUNT(t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) < '1986'",
    "evidence": "average overall rating = DIVIDE(SUM(overall_rating), COUNT(id)); born before the year 1986 refers to strftime('%Y', birthday) < '1986';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1094,
    "db_id": "european_football_2",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "predicted_sql": "SELECT CAST((SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Ariel Borysiuk')) - (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel')) AS REAL) * 100 / (SELECT overall_rating FROM player_attributes WHERE player_api_id = (SELECT player_api_id FROM player WHERE player_name = 'Paulin Puel')) AS percentage_difference",
    "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
    "difficulty": "challenging"
  },
  {
    "question_id": 1095,
    "db_id": "european_football_2",
    "question": "How much is the average build up play speed of the Heart of Midlothian team?",
    "predicted_sql": "SELECT AVG(T2.buildupplayspeed) FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Heart of Midlothian'",
    "gold_sql": "SELECT CAST(SUM(t2.buildUpPlaySpeed) AS REAL) / COUNT(t2.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Heart of Midlothian'",
    "evidence": "Heart of Midlothian refers to team_long_name = 'Heart of Midlothian'; average build up play speed refers to  AVG(buildUpPlaySpeed)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1096,
    "db_id": "european_football_2",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "predicted_sql": "SELECT AVG(T2.overall_rating) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Pietro Marino'",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1097,
    "db_id": "european_football_2",
    "question": "What is Aaron Lennox's total crossing score?",
    "predicted_sql": "SELECT SUM(T1.crossing) FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Aaron Lennox'",
    "gold_sql": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'",
    "evidence": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)",
    "difficulty": "simple"
  },
  {
    "question_id": 1098,
    "db_id": "european_football_2",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "predicted_sql": "SELECT T1.chancecreationpassingclass, MAX(T1.chancecreationpassing) AS highest_chance_creation_passing FROM team_attributes AS T1 INNER JOIN team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'Ajax' GROUP BY T1.chancecreationpassingclass ORDER BY MAX(T1.chancecreationpassing) DESC LIMIT 1",
    "gold_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "difficulty": "moderate"
  },
  {
    "question_id": 1099,
    "db_id": "european_football_2",
    "question": "Which foot is preferred by Abdou Diallo?",
    "predicted_sql": "SELECT preferred_foot FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Abdou Diallo' )",
    "gold_sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "difficulty": "simple"
  },
  {
    "question_id": 1100,
    "db_id": "european_football_2",
    "question": "What is the highest overall rating received by Dorlan Pabon?",
    "predicted_sql": "SELECT MAX(T1.overall_rating) FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.player_name = 'Dorlan Pabon'",
    "gold_sql": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'",
    "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)",
    "difficulty": "simple"
  },
  {
    "question_id": 1101,
    "db_id": "european_football_2",
    "question": "What is the average number of goals made by Parma as the away team while playing in Italy?",
    "predicted_sql": "SELECT AVG(match.away_team_goal) FROM match INNER JOIN team ON match.away_team_api_id = team.team_api_id INNER JOIN country ON match.country_id = country.id WHERE team.team_long_name = 'Parma' AND country.name = 'Italy'",
    "gold_sql": "SELECT CAST(SUM(T1.away_team_goal) AS REAL) / COUNT(T1.id) FROM \"Match\" AS T1 INNER JOIN TEAM AS T2 ON T1.away_team_api_id = T2.team_api_id INNER JOIN Country AS T3 ON T1.country_id = T3.id WHERE T2.team_long_name = 'Parma' AND T3.name = 'Italy'",
    "evidence": "Parma refers to team_long_name = 'Parma'; average number of goals refers to AVG(away_team_goal)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1102,
    "db_id": "european_football_2",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating = 77 AND T2.date = '2016-06-23' ORDER BY T1.birthday ASC LIMIT 1",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
    "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1103,
    "db_id": "european_football_2",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "predicted_sql": "SELECT T2.overall_rating FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Aaron Mooy' AND T2.date = '2016-02-04 00:00:00'",
    "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1104,
    "db_id": "european_football_2",
    "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "predicted_sql": "SELECT T2.potential FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Francesco Parravicini' AND T2.date = '2010-08-30 00:00:00'",
    "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1105,
    "db_id": "european_football_2",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "predicted_sql": "SELECT T1.attacking_work_rate FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.player_name = 'Francesco Migliore' AND T1.date = '2015-05-01 00:00:00'",
    "gold_sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "evidence": "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1106,
    "db_id": "european_football_2",
    "question": "Tell the defensive work rate for Kevin Berigaud on 2013/2/22.",
    "predicted_sql": "SELECT defensive_work_rate FROM player_attributes WHERE date = '2013-02-22 00:00:00' AND player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Kevin Berigaud' )",
    "gold_sql": "SELECT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-02-22' AND t1.player_name = 'Kevin Berigaud'",
    "evidence": "Kevin Berigaud refers to player_name = 'Kevin Berigaud'; on 2013/2/22 refers to date = '2013-02-22 00:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1107,
    "db_id": "european_football_2",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "predicted_sql": "SELECT date FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Kevin Constant' ) AND crossing = ( SELECT MAX(crossing) FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Kevin Constant' ) ) ORDER BY date ASC LIMIT 1",
    "gold_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1108,
    "db_id": "european_football_2",
    "question": "What was the build up play speed class for \"Willem II\" on 2011/2/22?",
    "predicted_sql": "SELECT T2.buildupplayspeedclass FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Willem II' AND T2.date = '2011-02-22 00:00:00'",
    "gold_sql": "SELECT t2.buildUpPlaySpeedClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Willem II' AND SUBSTR(t2.`date`, 1, 10) = '2011-02-22'",
    "evidence": "\"Willem II\" refers to team_long_name = 'Willem II'; on 2011/2/22 refers to date = '2012-02-22'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1109,
    "db_id": "european_football_2",
    "question": "How was the build up play dribbling class for \"LEI\" on 2015/9/10?",
    "predicted_sql": "SELECT T1.buildupplaydribblingclass FROM team_attributes AS T1 INNER JOIN team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_short_name = 'LEI' AND T1.date = '2015-09-10 00:00:00'",
    "gold_sql": "SELECT t2.buildUpPlayDribblingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'LEI' AND SUBSTR(t2.`date`, 1, 10) = '2015-09-10'",
    "evidence": "\"LEI\" refers to team_short_name = 'LEI'; on 2015/9/10 refers to  date = '2015-09-10 00:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1110,
    "db_id": "european_football_2",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "predicted_sql": "SELECT T1.buildupplaypassingclass FROM team_attributes AS T1 INNER JOIN team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.team_long_name = 'FC Lorient' AND T1.date = '2010-02-22'",
    "gold_sql": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
    "evidence": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1111,
    "db_id": "european_football_2",
    "question": "State the chance creation passing class for \"PEC Zwolle\" on 2013/9/20.",
    "predicted_sql": "SELECT T2.chancecreationpassingclass FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'PEC Zwolle' AND T2.date = '2013-09-20 00:00:00'",
    "gold_sql": "SELECT t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'PEC Zwolle' AND SUBSTR(t2.`date`, 1, 10) = '2013-09-20'",
    "evidence": "\"PEC Zwolle\" refers to team_long_name = 'PEC Zwolle'; on 2013/9/20 refers to date = '2013-09-20 00:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1112,
    "db_id": "european_football_2",
    "question": "What was the chance creation crossing class for \"Hull City\" on 2010/2/22?",
    "predicted_sql": "SELECT T1.chancecreationcrossingclass FROM team_attributes AS T1 INNER JOIN team AS T2 ON T1.team_fifa_api_id = T2.team_fifa_api_id WHERE T2.team_long_name = 'Hull City' AND T1.date = '2010-02-22 00:00:00'",
    "gold_sql": "SELECT t2.chanceCreationCrossingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hull City' AND SUBSTR(t2.`date`, 1, 10) = '2010-02-22'",
    "evidence": "\"Hull City\" refers to team_long_name = 'Hull City'; on 2010/2/22 refers to date = '2010-02-22 00:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1113,
    "db_id": "european_football_2",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "predicted_sql": "SELECT T2.defenceaggressionclass FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'Hannover 96' AND T2.date = '2015-09-10 00:00:00'",
    "gold_sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
    "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1114,
    "db_id": "european_football_2",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "predicted_sql": "SELECT AVG(T2.overall_rating) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.player_name = 'Marko Arnautovic' AND T2.date BETWEEN '2007-02-22 00:00:00' AND '2016-04-21 00:00:00'",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1115,
    "db_id": "european_football_2",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "predicted_sql": "SELECT (CAST(T1.overall_rating AS REAL) - T2.overall_rating) * 100 / T2.overall_rating AS Percentage FROM player_attributes AS T1 INNER JOIN player AS T3 ON T1.player_api_id = T3.player_api_id AND T1.player_fifa_api_id = T3.player_fifa_api_id INNER JOIN player_attributes AS T2 INNER JOIN player AS T4 ON T2.player_api_id = T4.player_api_id AND T2.player_fifa_api_id = T4.player_fifa_api_id WHERE T3.player_name = 'Landon Donovan' AND T4.player_name = 'Jordan Bowery' AND T1.date = '2013-07-12' AND T2.date = '2013-07-12'",
    "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
    "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 1116,
    "db_id": "european_football_2",
    "question": "List down most tallest players' name.",
    "predicted_sql": "SELECT player_name FROM player ORDER BY height DESC LIMIT 5",
    "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
    "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 ",
    "difficulty": "simple"
  },
  {
    "question_id": 1117,
    "db_id": "european_football_2",
    "question": "What are the player api id of 10 heaviest players?",
    "predicted_sql": "SELECT player_api_id FROM player ORDER BY weight DESC LIMIT 10",
    "gold_sql": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10",
    "evidence": "heaviest refers to MAX(weight)",
    "difficulty": "simple"
  },
  {
    "question_id": 1118,
    "db_id": "european_football_2",
    "question": "List down the name of players who are 35 years old and above.",
    "predicted_sql": "SELECT player_name FROM player WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', birthday) >= 35",
    "gold_sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
    "evidence": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34",
    "difficulty": "simple"
  },
  {
    "question_id": 1119,
    "db_id": "european_football_2",
    "question": "How many home team goal have been scored by Aaron Lennon?",
    "predicted_sql": "SELECT SUM(home_team_goal) FROM player AS T1 INNER JOIN match AS T2 ON T1.player_api_id = T2.home_player_1 WHERE T1.player_name = 'Aaron Lennon'",
    "gold_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'",
    "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'",
    "difficulty": "simple"
  },
  {
    "question_id": 1120,
    "db_id": "european_football_2",
    "question": "Sum up the away team goal scored by both Daan Smith and Filipe Ferreira.",
    "predicted_sql": "SELECT SUM(away_team_goal) FROM match WHERE away_player_1 IN ( SELECT player_api_id FROM player WHERE player_name IN ('Daan Smith', 'Filipe Ferreira') );",
    "gold_sql": "SELECT SUM(t2.away_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_5 WHERE t1.player_name IN ('Daan Smith', 'Filipe Ferreira')",
    "evidence": "Daan Smith refers to player_name = 'Daan Smith'; Filipe Ferreira refers to player_name = 'Filipe Ferreira'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1121,
    "db_id": "european_football_2",
    "question": "Calculate the total home team goal scored by players whose age are 30 years old and below.",
    "predicted_sql": "SELECT SUM(T1.home_team_goal) FROM match AS T1 INNER JOIN player AS T2 ON T1.home_player_1 = T2.player_api_id OR T1.home_player_11 = T2.player_api_id WHERE (STRFTIME('%Y', 'now') - STRFTIME('%Y', T2.birthday)) <= 30",
    "gold_sql": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_1 WHERE datetime(CURRENT_TIMESTAMP, 'localtime') - datetime(T1.birthday) < 31",
    "evidence": "age are 30 years old and below refers to SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'), datetime(birthday) < 31)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T2.overall_rating DESC LIMIT 10",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "strongest players refers to player has MAX(overall_rating)",
    "difficulty": "simple"
  },
  {
    "question_id": 1123,
    "db_id": "european_football_2",
    "question": "What is the name of players with the highest potential?",
    "predicted_sql": "SELECT player_name FROM player WHERE player_api_id = ( SELECT player_api_id FROM player_attributes ORDER BY potential DESC LIMIT 1 )",
    "gold_sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.potential = (SELECT MAX(potential) FROM Player_Attributes)",
    "evidence": "highest potential refers to MAX(potential)",
    "difficulty": "simple"
  },
  {
    "question_id": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.attacking_work_rate = 'high'",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1125,
    "db_id": "european_football_2",
    "question": "Among the players with finishing rate of 1, pick the eldest player and state the player's name.",
    "predicted_sql": "SELECT T1.player_name FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.finishing = 1 ORDER BY T1.birthday LIMIT 1",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.finishing = 1 ORDER BY t1.birthday ASC LIMIT 1",
    "evidence": "eldest player refers to MAX(SUBTRACT(datetime(CURRENT_TIMESTAMP,'localtime'),datetime(birthday))); finishing rate of 1 refers to finishing = 1",
    "difficulty": "moderate"
  },
  {
    "question_id": 1126,
    "db_id": "european_football_2",
    "question": "State the name of players who came from Belgium.",
    "predicted_sql": "SELECT DISTINCT T1.player_name FROM player AS T1 INNER JOIN match AS T2 ON T1.player_api_id = T2.home_player_1 OR T1.player_api_id = T2.home_player_2 OR T1.player_api_id = T2.home_player_3 OR T1.player_api_id = T2.home_player_4 OR T1.player_api_id = T2.home_player_5 OR T1.player_api_id = T2.home_player_10 OR T1.player_api_id = T2.home_player_11 OR T1.player_api_id = T2.away_player_9 INNER JOIN country AS T3 ON T2.country_id = T3.id WHERE T3.name = \"Belgium\"",
    "gold_sql": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "evidence": "name of players refers to player_name; Belgium is name of country",
    "difficulty": "simple"
  },
  {
    "question_id": 1127,
    "db_id": "european_football_2",
    "question": "Locate players with vision scores of 90 and above, state the country of these players.",
    "predicted_sql": "SELECT T3.name, T2.player_name FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id INNER JOIN country AS T3 ON T2.id = T3.id WHERE T1.vision > 89;",
    "gold_sql": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
    "evidence": "vision scores of 90 and above refers to vision > 89",
    "difficulty": "moderate"
  },
  {
    "question_id": 1128,
    "db_id": "european_football_2",
    "question": "Which country's players have the heaviest average weights?",
    "predicted_sql": "SELECT T2.name FROM player AS T1 INNER JOIN country AS T2 ON T1.id = T2.id GROUP BY T2.name ORDER BY AVG(T1.weight) DESC LIMIT 1",
    "gold_sql": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
    "evidence": "heaviest average weights refers to MAX(AVG(weight))",
    "difficulty": "simple"
  },
  {
    "question_id": 1129,
    "db_id": "european_football_2",
    "question": "List down the long name for slow speed class team.",
    "predicted_sql": "SELECT T1.team_long_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildupplayspeedclass = 'Slow'",
    "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
    "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1130,
    "db_id": "european_football_2",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "predicted_sql": "SELECT T1.team_short_name FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chancecreationpassingclass = 'Safe'",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
    "difficulty": "moderate"
  },
  {
    "question_id": 1131,
    "db_id": "european_football_2",
    "question": "What is the average heights of Italy players?",
    "predicted_sql": "SELECT AVG(T1.height) FROM player AS T1 INNER JOIN league AS T2 ON T1.id = T2.country_id INNER JOIN country AS T3 ON T2.country_id = T3.id WHERE T3.name = 'Italy'",
    "gold_sql": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
    "evidence": "average heights refers to Avg(height); Italy is name of country",
    "difficulty": "simple"
  },
  {
    "question_id": 1132,
    "db_id": "european_football_2",
    "question": "Please provide the names of top three football players who are over 180 cm tall in alphabetical order.",
    "predicted_sql": "SELECT player_name FROM player WHERE height > 180 ORDER BY player_name ASC LIMIT 3",
    "gold_sql": "SELECT player_name FROM Player WHERE height > 180 ORDER BY player_name LIMIT 3",
    "evidence": "over 180 cm tall refers to height > 180; name of football player refers to player_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1133,
    "db_id": "european_football_2",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "predicted_sql": "SELECT COUNT(player_name) FROM player WHERE player_name LIKE 'Aaron%' AND birthday > '1990'",
    "gold_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
    "difficulty": "simple"
  },
  {
    "question_id": 1134,
    "db_id": "european_football_2",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "predicted_sql": "SELECT ( SELECT jumping FROM player_attributes WHERE player_api_id = 6 ) - ( SELECT jumping FROM player_attributes WHERE player_api_id = 23 ) AS difference;",
    "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
    "difficulty": "simple"
  },
  {
    "question_id": 1135,
    "db_id": "european_football_2",
    "question": "Please provide top five football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "predicted_sql": "SELECT player_api_id FROM player_attributes WHERE preferred_foot = 'right' ORDER BY potential ASC LIMIT 3",
    "gold_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
    "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1136,
    "db_id": "european_football_2",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "predicted_sql": "SELECT COUNT(player_api_id) FROM player_attributes WHERE crossing = (SELECT MAX(crossing) FROM player_attributes) AND preferred_foot = 'left'",
    "gold_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1137,
    "db_id": "european_football_2",
    "question": "What percentage of players have a strength and stamina score of more than 80?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN stamina > 80 AND strength > 80 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(player_api_id) FROM player_attributes",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t",
    "evidence": "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80",
    "difficulty": "simple"
  },
  {
    "question_id": 1138,
    "db_id": "european_football_2",
    "question": "In what country did the Poland Ekstraklasa take place?",
    "predicted_sql": "SELECT c.name FROM league l INNER JOIN country c ON l.country_id = c.id WHERE l.name = 'Poland Ekstraklasa'",
    "gold_sql": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'Poland Ekstraklasa' )",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1139,
    "db_id": "european_football_2",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "predicted_sql": "SELECT home_team_goal, away_team_goal FROM match WHERE date LIKE '2008-09-24%' AND league_id = ( SELECT id FROM league WHERE name = 'Belgian Jupiler League' )",
    "gold_sql": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
    "evidence": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
    "difficulty": "challenging"
  },
  {
    "question_id": 1140,
    "db_id": "european_football_2",
    "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?",
    "predicted_sql": "SELECT sprint_speed, agility, acceleration FROM player_attributes WHERE player_api_id = ( SELECT player_api_id FROM player WHERE player_name = 'Alexis Blin' )",
    "gold_sql": "SELECT sprint_speed, agility, acceleration FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )",
    "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'",
    "difficulty": "simple"
  },
  {
    "question_id": 1141,
    "db_id": "european_football_2",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "predicted_sql": "SELECT T2.buildupplayspeedclass FROM team AS T1 INNER JOIN team_attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.team_long_name = 'KSV Cercle Brugge'",
    "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "difficulty": "moderate"
  },
  {
    "question_id": 1142,
    "db_id": "european_football_2",
    "question": "In the 2015–2016 season, how many games were played in the Italian Serie A league?",
    "predicted_sql": "SELECT COUNT(id) FROM match WHERE league_id = ( SELECT id FROM league WHERE name = 'Italian Serie A' ) AND season = '2015/2016'",
    "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'",
    "evidence": "In the 2015–2016 season refers to season = '2015/2016'",
    "difficulty": "simple"
  },
  {
    "question_id": 1143,
    "db_id": "european_football_2",
    "question": "What was the highest score of the home team in the Netherlands Eredivisie league?",
    "predicted_sql": "SELECT MAX(home_team_goal) FROM match JOIN league ON match.league_id = league.id WHERE league.name ='Netherlands Eredivisie'",
    "gold_sql": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'",
    "evidence": "highest score of the home team refers to MAX(home_team_goal)",
    "difficulty": "simple"
  },
  {
    "question_id": 1144,
    "db_id": "european_football_2",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "predicted_sql": "SELECT T2.finishing, T2.curve FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY T1.weight DESC LIMIT 1",
    "gold_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "evidence": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
    "difficulty": "simple"
  },
  {
    "question_id": 1145,
    "db_id": "european_football_2",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "predicted_sql": "SELECT T2.name FROM `match` AS T1 INNER JOIN league AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "evidence": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))",
    "difficulty": "simple"
  },
  {
    "question_id": 1146,
    "db_id": "european_football_2",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "predicted_sql": "SELECT T1.team_long_name FROM team AS T1 INNER JOIN match AS T2 ON T1.team_api_id = T2.away_team_api_id ORDER BY T2.away_team_goal DESC LIMIT 1",
    "gold_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
    "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1147,
    "db_id": "european_football_2",
    "question": "Please name one player whose overall strength is the greatest.",
    "predicted_sql": "SELECT player_name FROM player WHERE player_api_id = ( SELECT player_api_id FROM player_attributes ORDER BY overall_rating DESC LIMIT 1 )",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "overall strength is the greatest refers to MAX(overall_rating)",
    "difficulty": "simple"
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN T1.height < 180 AND T2.strength > 70 THEN 1 END) AS REAL) * 100 / COUNT(T2.id) FROM player AS T1 INNER JOIN player_attributes AS T2 ON T1.player_api_id = T2.player_api_id",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1149,
    "db_id": "thrombosis_prediction",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "predicted_sql": "SELECT SUM(CASE WHEN sex = 'M' AND admission = '+' THEN 1 ELSE 0 END) AS InPatient_Male, SUM(CASE WHEN sex = 'M' AND admission = '-' THEN 1 ELSE 0 END) AS OutPatient_Male FROM patient;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
    "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX  = 'M' and Admission = '-')",
    "difficulty": "moderate"
  },
  {
    "question_id": 1150,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient were born after 1930?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN SUBSTR(birthday, 1, 4) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM patient WHERE sex = 'F'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
    "difficulty": "moderate"
  },
  {
    "question_id": 1151,
    "db_id": "thrombosis_prediction",
    "question": "For patient born between Year 1930 to 1940, how many percent of them were inpatient?",
    "predicted_sql": "SELECT (COUNT(DISTINCT CASE WHEN admission = '+' THEN id END) * 100.0 / COUNT(DISTINCT id)) AS 'Percentage' FROM patient WHERE strftime('%Y', birthday) BETWEEN '1930' AND '1940'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE STRFTIME('%Y', Birthday) BETWEEN '1930' AND '1940'",
    "evidence": "patient born between Year 1930 to 1940 refers to year(Birthday) BETWEEN '1930-01-01' AND '1940-12-31'; inpatient refers to Admission = '+'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1152,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) AS ratio FROM patient WHERE diagnosis = 'SLE'",
    "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
    "difficulty": "moderate"
  },
  {
    "question_id": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "predicted_sql": "SELECT T1.diagnosis, T2.date FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.id = '30609'",
    "gold_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "evidence": "'30609' is the Patient ID; disease means Diagnosis",
    "difficulty": "simple"
  },
  {
    "question_id": 1154,
    "db_id": "thrombosis_prediction",
    "question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.",
    "predicted_sql": "SELECT T1.sex, T1.birthday, T2.`examination date`, T2.symptoms FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.id = '163109'",
    "gold_sql": "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109",
    "evidence": "When was the examination taken refers to `Examination Date`",
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "predicted_sql": "SELECT T1.id, T1.sex, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.LDH > 500",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "evidence": "LDH beyond normal range refers to LDH > '500';",
    "difficulty": "simple"
  },
  {
    "question_id": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "predicted_sql": "SELECT T1.id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.birthday) AS age FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.rvvt = '+'",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "predicted_sql": "SELECT T1.id, T1.sex, T1.diagnosis FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.thrombosis = 2",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
    "difficulty": "simple"
  },
  {
    "question_id": 1158,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
    "predicted_sql": "SELECT patient.id, patient.birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE YEAR(patient.birthday) = 1937 AND laboratory.t-cho >= 250",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
    "evidence": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1159,
    "db_id": "thrombosis_prediction",
    "question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.",
    "predicted_sql": "SELECT T1.id, T1.sex, T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.alb < 3.5",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5",
    "evidence": "albumin level lower than 3.5 refers to ALB < 3.5;",
    "difficulty": "simple"
  },
  {
    "question_id": 1160,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient had total protein not within the normal range?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'F' AND (T2.tp < 6.0 OR T2.tp > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "evidence": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1161,
    "db_id": "thrombosis_prediction",
    "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
    "predicted_sql": "SELECT AVG(examination.`acl igg`) FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.admission = '+' AND (strftime('%Y', 'now') - strftime('%Y', patient.birthday)) >= 50",
    "gold_sql": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'",
    "evidence": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1162,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.sex = 'F' AND STRFTIME('%Y', T1.description) = '1997' AND T1.admission = '-'",
    "gold_sql": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
    "evidence": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1163,
    "db_id": "thrombosis_prediction",
    "question": "What was the age of the youngest patient when they initially arrived at the hospital?",
    "predicted_sql": "SELECT MIN(STRFTIME('%Y', `first date`) - STRFTIME('%Y', birthday)) AS 'Age at Arrival' FROM patient",
    "gold_sql": "SELECT MIN(STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday)) FROM Patient",
    "evidence": "age refers to SUBTRACT(YEAR(`First Date`),YEAR(Birthday))",
    "difficulty": "simple"
  },
  {
    "question_id": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE strftime('%Y', T2.`examination date`) = '1997' AND T1.sex = 'F' AND T2.thrombosis = 1",
    "gold_sql": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
    "evidence": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1165,
    "db_id": "thrombosis_prediction",
    "question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
    "predicted_sql": "SELECT MAX(STRFTIME('%Y', patient.birthday)) - MIN(STRFTIME('%Y', patient.birthday)) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200",
    "gold_sql": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200",
    "evidence": "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200",
    "difficulty": "moderate"
  },
  {
    "question_id": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "predicted_sql": "SELECT T2.symptoms, T2.diagnosis FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id ORDER BY T1.birthday DESC LIMIT 1",
    "gold_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
    "difficulty": "simple"
  },
  {
    "question_id": 1167,
    "db_id": "thrombosis_prediction",
    "question": "For the year that concluded on December 31, 1998, how many male patients on average were tested in the lab each month?",
    "predicted_sql": "SELECT CAST(COUNT(DISTINCT T1.id) AS REAL) / 12 FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.date BETWEEN '1998-01-01' AND '1998-12-31'",
    "gold_sql": "SELECT CAST(COUNT(T1.ID) AS REAL) / 12 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.Date) = '1998' AND T1.SEX = 'M'",
    "evidence": "the year that concluded on December 31, 1998 refers to Date BETWEEN '1998-01-01' AND '1998-12-31'; male refers to SEX = 'M'; calculation = DIVIDE(COUNT(ID), 12)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "predicted_sql": "SELECT `first date` - birthday AS age, laboratory.date FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.diagnosis = 'SJS' ORDER BY patient.birthday ASC LIMIT 1",
    "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN p.sex = 'M' AND l.ua <= 8.0 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN p.sex = 'F' AND l.ua <= 6.5 THEN 1 ELSE 0 END) FROM patient p INNER JOIN laboratory l ON p.id = l.id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "evidence": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))",
    "difficulty": "challenging"
  },
  {
    "question_id": 1170,
    "db_id": "thrombosis_prediction",
    "question": "How many patients hadn't undergone a medical examination until at least a year following their initial hospital visit?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient T1 LEFT JOIN examination T2 ON T1.id = T2.id WHERE T2.`examination date` IS NULL OR strftime('%Y', T2.`examination date`) - strftime('%Y', T1.`first date`) >= 1",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '+' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.`First Date`) >= 1",
    "evidence": "hadn't undergone a medical examination until at least a year refers to SUBTRACT(year(`Examination Date`), year(`First Date`)) > = 1",
    "difficulty": "moderate"
  },
  {
    "question_id": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE strftime('%Y', T2.`examination date`) BETWEEN '1990' AND '1993' AND (strftime('%Y', T2.`examination date`) - strftime('%Y', T1.birthday)) < 18",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
    "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1172,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients have elevated total bilirubin count?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.`t-bil` > 2.0",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'",
    "evidence": "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` >= '2.0'",
    "difficulty": "simple"
  },
  {
    "question_id": 1173,
    "db_id": "thrombosis_prediction",
    "question": "What is the most common illness that doctors identified among the patients whose lab work was done between 1/1/1985, and 12/31/1995?",
    "predicted_sql": "SELECT T2.Diagnosis FROM examination AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T1.`examination date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1",
    "gold_sql": "SELECT T2.Diagnosis FROM Examination AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1985-01-01' AND '1995-12-31' GROUP BY T2.Diagnosis ORDER BY COUNT(T2.Diagnosis) DESC LIMIT 1",
    "evidence": "the most common illness refers to MAX(COUNT(Diagnosis)); lab work between 1/1/1985 and 12/31/1995 refers to `Examination Date` between '1985-01-01' and '1995-12-31 '",
    "difficulty": "challenging"
  },
  {
    "question_id": 1174,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of patients as of year 1999 examined in the laboratory for the October of the year 1991?",
    "predicted_sql": "SELECT AVG(strftime('%Y', '1991') - strftime('%Y', birthday)) FROM patient WHERE id IN (SELECT id FROM laboratory WHERE date BETWEEN '1991-10-01' AND '1991-10-31')",
    "gold_sql": "SELECT AVG('1999'  - STRFTIME('%Y', T2.Birthday)) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.Date BETWEEN '1991-10-01' AND '1991-10-30'",
    "evidence": "average age of patients as of year 1999 refers to AVG(SUBTRACT('1999', year(Birthday))); October of 1991 refers to Date BETWEEN '1991-10-01' AND '1991-10-30'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "predicted_sql": "SELECT examination.`examination date` - patient.birthday AS Age, examination.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id INNER JOIN examination ON patient.id = examination.id ORDER BY laboratory.hgb DESC LIMIT 1",
    "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1176,
    "db_id": "thrombosis_prediction",
    "question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?",
    "predicted_sql": "SELECT ana FROM examination WHERE id = 3605340 AND `examination date` = '1996-12-02'",
    "gold_sql": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'",
    "evidence": "anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'",
    "difficulty": "simple"
  },
  {
    "question_id": 1177,
    "db_id": "thrombosis_prediction",
    "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
    "predicted_sql": "SELECT CASE WHEN \"t-cho\" < 250 THEN 'Normal' ELSE 'High' END FROM laboratory WHERE id = 2927464 AND date = '1995-9-4'",
    "gold_sql": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
    "evidence": "total cholesterol normal level refers to N < 250",
    "difficulty": "simple"
  },
  {
    "question_id": 1178,
    "db_id": "thrombosis_prediction",
    "question": "What was the gender of the first AORTITIS diagnosed patient?",
    "predicted_sql": "SELECT sex FROM patient WHERE diagnosis = 'AORTITIS' ORDER BY description LIMIT 1",
    "gold_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
    "difficulty": "simple"
  },
  {
    "question_id": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "predicted_sql": "SELECT T2.`acl igm` FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'SLE' AND T1.description = '1994-02-19' AND T2.`examination date` = '1993-11-12'",
    "gold_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1180,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient a man or a women whose ALT glutamic pylvic transaminase status got 9 on 1992-6-12?",
    "predicted_sql": "SELECT T1.sex FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.gpt = 9 AND T2.date = '1992-06-12'",
    "gold_sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT = 9.0 AND T2.Date = '1992-06-12'",
    "evidence": "man refers to SEX = 'M'; women refers to SEX = 'F'; ALT glutamic pylvic transaminase status got 9 GPT = '9'; 1992/6/12 refers to Date = '1992-06-12'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1181,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who got the laboratory test of uric acid level as 8.4 on 1991-10-21, how old was he/she at that time?",
    "predicted_sql": "SELECT '1991' - STRFTIME('%Y', T2.birthday) FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T1.ua = 8.4 AND STRFTIME('%Y-%m-%d', T1.date) = '1991-10-21'",
    "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UA = 8.4 AND T2.Date = '1991-10-21'",
    "evidence": "how old at that time refers to SUBTRACT(year(test date), year(Birthday)); uric acid level as 8.4 refers to UA = '8.4'; 1991/10/21 refers to Date = '1991-10-21'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1182,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who first came to the hospital on 1991/6/13 who was diagnosed with SJS, what is the total number of his/her Laboratory tests in 1995?",
    "predicted_sql": "SELECT COUNT(*) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.`first date` = '1991-06-13' AND T1.diagnosis = 'SJS' AND strftime('%Y', T2.date) = '1995';",
    "gold_sql": "SELECT COUNT(*) FROM Laboratory WHERE ID = ( SELECT ID FROM Patient WHERE `First Date` = '1991-06-13' AND Diagnosis = 'SJS' ) AND STRFTIME('%Y', Date) = '1995'",
    "evidence": "1991/6/13 refers to `First Date` = '1991-06-13'; 'SJS' refers to Diagnosis; total number of his/her Laboratory tests refers to COUNT(ID); 1995 refers to Date",
    "difficulty": "moderate"
  },
  {
    "question_id": 1183,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed SLE on 1997/1/27, what was his/her original diagnose when he/she came to the hospital for the first time?",
    "predicted_sql": "SELECT T1.diagnosis FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.`examination date` = '1997-01-27' AND T1.`first date` = ( SELECT MIN(`first date`) FROM patient WHERE diagnosis = 'SLE' AND id = T1.id )",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = ( SELECT ID FROM Examination WHERE `Examination Date` = '1997-01-27' AND Diagnosis = 'SLE' ) AND T2.`Examination Date` = T1.`First Date`",
    "evidence": "'SLE' AND original diagnose refers to diagnosis; 1997/1/27 refer to `Examination Date` = '1997-01-27'; first came to the hospital refers to patient.`First Date`",
    "difficulty": "challenging"
  },
  {
    "question_id": 1184,
    "db_id": "thrombosis_prediction",
    "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?",
    "predicted_sql": "SELECT T2.symptoms FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.birthday = '1959-03-01' AND T2.`examination date` = '1993-09-27'",
    "gold_sql": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1185,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "predicted_sql": "SELECT CAST((SUM(CASE WHEN strftime('%Y-%m', T2.date) = '1981-11' THEN T2.`T-Cho` ELSE 0 END) - SUM(CASE WHEN strftime('%Y-%m', T2.date) = '1981-12' THEN T2.`T-Cho` ELSE 0 END)) AS FLOAT) * 100 / SUM(CASE WHEN strftime('%Y-%m', T2.date) = '1981-11' THEN T2.`T-Cho` ELSE 0 END) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.birthday = '1959-02-18'",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))",
    "difficulty": "challenging"
  },
  {
    "question_id": 1186,
    "db_id": "thrombosis_prediction",
    "question": "Lists all patients by ID who were diagnosed with Behcet's and had their exams between 01/01/197 and 12/31/1997.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'Behcet' AND date(T2.`examination date`) BETWEEN '1997-01-01' AND '1997-12-31'",
    "gold_sql": "SELECT ID FROM Examination WHERE `Examination Date` BETWEEN '1997-01-01' AND '1997-12-31' AND Diagnosis = 'Behcet'",
    "evidence": "'Behcet' refers to diagnosis; exam between 01/01/1997 and 12/31/1997 refers to YEAR(Description) > = '1997-1-1' AND YEAR(Description) < '1998-1-1'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1187,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM examination AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.`examination date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.gpt > 30 AND T2.alb < 4",
    "gold_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "evidence": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4",
    "difficulty": "moderate"
  },
  {
    "question_id": 1188,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.",
    "predicted_sql": "SELECT id FROM patient WHERE sex = 'F' AND STRFTIME('%Y', birthday) = '1964' AND admission = '+'",
    "gold_sql": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'",
    "evidence": "female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'",
    "difficulty": "simple"
  },
  {
    "question_id": 1189,
    "db_id": "thrombosis_prediction",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.thrombosis = 2 AND T2.`ana pattern` = 'S' AND T2.`acl igm` > ( SELECT AVG(`acl igm`) * 1.2 FROM examination )",
    "gold_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
    "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1190,
    "db_id": "thrombosis_prediction",
    "question": "What percentage of patients with a proteinuria level within the normal range have a uric acid level below the normal range?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.ua <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T1.`u-pro` > 0 AND T1.`u-pro` < 30",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN UA <= 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Laboratory WHERE `U-PRO` > 0 AND `U-PRO` < 30",
    "evidence": "proteinuria level within the normal range refers to `U-PRO` > 0 AND `U-PRO` < 30; uric acid level below the normal range refers to UA < = 6.5; calculation = MULTIPLY(DIVIDE(UA < = 6.5, `U-PRO` > 0 AND `U-PRO` < 30)，100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1191,
    "db_id": "thrombosis_prediction",
    "question": "What percentage of male patients who first presented to the hospital in 1981 were diagnosed with BEHCET?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM patient WHERE sex = 'M' AND STRFTIME('%Y', `first date`) = '1981'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'BEHCET' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE STRFTIME('%Y', `First Date`) = '1981' AND SEX = 'M'",
    "evidence": "male refers to SEX = 'M'; first presented to the hospital in 1981 refers to YEAR(`FIRST DATE`) = '1981'; BEHCET refers to diagnosis; calculation = DIVIDE(SUM(DIAGNOSIS = 'BEHCET') where YEAR(`FIRST DATE`) = '1981', MULTIPLY(COUNT(YEAR(`FIRST DATE`) = '1981')), 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1192,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE strftime('%Y-%m', T2.date) = '1991-10' AND T2.`t-bil` < 2.0 AND T1.admission = '-'",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
    "evidence": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1193,
    "db_id": "thrombosis_prediction",
    "question": "Excluding all P only ANA Pattern patients, how many of the remainder are women born between 1980 and 1989?",
    "predicted_sql": "SELECT COUNT(T1.SEX) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.`ana pattern` != 'P' AND T1.SEX = 'F' AND DATE(T1.birthday) BETWEEN '1980-01-01' AND '1989-12-31'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.`ANA Pattern` != 'P' AND STRFTIME('%Y', T1.Birthday) BETWEEN '1980' AND '1989' AND T1.SEX = 'F'",
    "evidence": "Excluding all P only ANA Pattern refers to `ANA Pattern`! = 'P'; women refers to SEX = 'F'; born between 1980 and 1989 refers to BIRTHDAY",
    "difficulty": "moderate"
  },
  {
    "question_id": 1194,
    "db_id": "thrombosis_prediction",
    "question": "What sex is the patient who in a medical examination was diagnosed with PSS and in a laboratory examination had a blood level of C-reactive protein de 2+, createnine 1 and LDH 123?",
    "predicted_sql": "SELECT T1.sex FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T2.diagnosis = 'PSS' AND T3.crp = '2+' AND T3.cre = 1 AND T3.ldh = 123",
    "gold_sql": "SELECT T1.SEX FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T3.ID = T2.ID WHERE T2.Diagnosis = 'PSS' AND T3.CRP = '2+' AND T3.CRE = 1.0 AND T3.LDH = 123",
    "evidence": "PSS' refers to diagnosis; blood level of C-reactive protein de 2+refers to CRP > 2; createnine 1 refers to CRE = 1; LDH 123 refers to LDH = 123",
    "difficulty": "challenging"
  },
  {
    "question_id": 1195,
    "db_id": "thrombosis_prediction",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "predicted_sql": "SELECT AVG(T2.alb) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'F' AND T2.plt > 400 AND T1.diagnosis = 'SLE'",
    "gold_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1196,
    "db_id": "thrombosis_prediction",
    "question": "What is the most common sign of patients with SLE disease?",
    "predicted_sql": "SELECT T2.symptoms FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'SLE' GROUP BY T2.symptoms ORDER BY COUNT(T2.symptoms) DESC LIMIT 1",
    "gold_sql": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1",
    "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis",
    "difficulty": "simple"
  },
  {
    "question_id": 1197,
    "db_id": "thrombosis_prediction",
    "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
    "predicted_sql": "SELECT description, diagnosis FROM patient WHERE id = 48473",
    "gold_sql": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
    "evidence": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id",
    "difficulty": "simple"
  },
  {
    "question_id": 1198,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients were given an APS diagnosis?",
    "predicted_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient WHERE patient.sex = 'F' AND patient.diagnosis = 'APS'",
    "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'",
    "difficulty": "simple"
  },
  {
    "question_id": 1199,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE STRFTIME('%Y', T1.date) = '1997' AND (T1.tp < 6 OR T1.tp > 8.5)",
    "gold_sql": "SELECT COUNT(ID) FROM Laboratory WHERE (ALB <= 6.0 OR ALB >= 8.5) AND STRFTIME('%Y', Date) = '1997'",
    "evidence": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5",
    "difficulty": "simple"
  },
  {
    "question_id": 1200,
    "db_id": "thrombosis_prediction",
    "question": "What proportion of patients who had signs of thrombocytopenia had SLE diagnosed?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.diagnosis LIKE '%SLE%' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.symptoms LIKE '%thrombocytopenia%' THEN 1 ELSE 0 END) AS percentage FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN Diagnosis = 'SLE' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Examination WHERE Symptoms = 'thrombocytopenia'",
    "evidence": "thrombocytopenia' refers to symptoms; 'SLE' refers to diagnosis; calculation =  DIVIDE(SUM(DIAGNOSIS LIKE '%ITP%'), SUM(DIAGNOSIS LIKE '%SLE%')) MULTIPLY 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1201,
    "db_id": "thrombosis_prediction",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN sex = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM patient WHERE strftime('%Y', birthday) = '1980' AND diagnosis = 'RA'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
    "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1202,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients who underwent testing between 1995 and 1997 and were subsequently diagnosed with Behcet disease did not stay in the hospital for treatment?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T2.`examination date` BETWEEN '1995' AND '1997' AND T1.diagnosis = 'BEHCET' AND T1.sex = 'M' AND T1.admission = '-'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'Behcet' AND T1.SEX = 'M' AND STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1995' AND '1997' AND T1.Admission = '-'",
    "evidence": "male refers to SEX = 'M'; underwent testing between 1995 and 1997 refers to `Examination Date` between '1995' and '1997'; Behcet refers to diagnosis; did not stay in the hospital refers to Admission = '-'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1203,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were female got white blood cells that were below 3.5?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'F' AND T2.wbc < 3.5",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'",
    "evidence": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5",
    "difficulty": "simple"
  },
  {
    "question_id": 1204,
    "db_id": "thrombosis_prediction",
    "question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
    "predicted_sql": "SELECT (`examination date` - `first date`) AS days FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.id = 821298",
    "gold_sql": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298",
    "evidence": "DATEDIFF(`Examination Date`, `First Date`)",
    "difficulty": "simple"
  },
  {
    "question_id": 1205,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "predicted_sql": "SELECT CASE WHEN T1.sex = 'M' AND T2.ua > 8.0 THEN 'Yes' WHEN T1.sex = 'F' AND T2.ua > 6.5 THEN 'Yes' ELSE 'No' END AS 'Uric Acid Within Normal Range' FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.id = 57266",
    "gold_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "evidence": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1206,
    "db_id": "thrombosis_prediction",
    "question": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.",
    "predicted_sql": "SELECT date FROM laboratory WHERE id = 48473 AND got >= 60",
    "gold_sql": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60",
    "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE",
    "difficulty": "simple"
  },
  {
    "question_id": 1207,
    "db_id": "thrombosis_prediction",
    "question": "List all patients with their sex and date of birthday, whose AST glutamic oxaloacetic transaminase (GOT) index is within normal range for loboratory examination in 1994.",
    "predicted_sql": "SELECT DISTINCT T1.id, T1.sex, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE strftime('%Y', T2.date) = '1994' AND T2.got < 60;",
    "gold_sql": "SELECT DISTINCT T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND STRFTIME('%Y', T2.Date) = '1994'",
    "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is within normal range refers to GOT < 60; examination in 1994 refers to year(Date) = 1994",
    "difficulty": "moderate"
  },
  {
    "question_id": 1208,
    "db_id": "thrombosis_prediction",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.gpt >= 60",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "evidence": "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60",
    "difficulty": "moderate"
  },
  {
    "question_id": 1209,
    "db_id": "thrombosis_prediction",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "predicted_sql": "SELECT T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.gpt > 60 ORDER BY T1.birthday ASC",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1210,
    "db_id": "thrombosis_prediction",
    "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.",
    "predicted_sql": "SELECT AVG(ldh) FROM laboratory WHERE ldh < 500",
    "gold_sql": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500",
    "evidence": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500",
    "difficulty": "simple"
  },
  {
    "question_id": 1211,
    "db_id": "thrombosis_prediction",
    "question": "Provide the ID and age of patient with lactate dehydrogenase (LDH) between 100-300 index above the normal range.",
    "predicted_sql": "SELECT P.id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', P.birthday) AS age FROM patient AS P INNER JOIN laboratory AS L ON P.id = L.id WHERE L.ldh BETWEEN 600 AND 800",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 600 AND T2.LDH < 800",
    "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); lactate dehydrogenase (LDH) between 100-300 index above the normal range refers to LDH between 600 and 800;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1212,
    "db_id": "thrombosis_prediction",
    "question": "For patients with alkaliphophatase (ALP) within normal range, were they treated as inpatient or outpatient?",
    "predicted_sql": "SELECT T1.admission FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.alp < 300",
    "gold_sql": "SELECT T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300",
    "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300; inpatient refers to admission = '+'; outpatient refers to admission = '-'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1213,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID of the patient who is born on the April 1st, 1982. Is his/her alkaliphophatase (ALP) within normal range?",
    "predicted_sql": "SELECT T1.id, CASE WHEN T2.alp < 300 THEN 'Yes' ELSE 'No' END AS ALP_Normal_Range FROM patient AS T1 LEFT JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.birthday = '1982-04-01'",
    "gold_sql": "SELECT T1.ID , CASE WHEN T2.ALP < 300 THEN 'normal' ELSE 'abNormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1982-04-01'",
    "evidence": "alkaliphophatase (ALP) within normal range refers to ALP < 300",
    "difficulty": "moderate"
  },
  {
    "question_id": 1214,
    "db_id": "thrombosis_prediction",
    "question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.",
    "predicted_sql": "SELECT DISTINCT T1.id, T1.sex, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.tp < 6.0",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
    "evidence": "total protein (TP) below the lower range of the normal index refers to TP < 6.0",
    "difficulty": "simple"
  },
  {
    "question_id": 1215,
    "db_id": "thrombosis_prediction",
    "question": "For all female patient with total protein (TP) beyond the normal index, what is the deviation of their TP idex from the normal.",
    "predicted_sql": "SELECT T1.id, T1.TP - 8.5 AS tp_deviation FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T2.sex = 'F' AND T1.TP > 8.5",
    "gold_sql": "SELECT T2.TP - 8.5 FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.TP > 8.5",
    "evidence": "female refers to SEX = 'F'; total protein (TP) beyond the normal index refers to TP > 8.5; deviation of TP index from normal refers to SUBTRACT(TP, 8.5)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1216,
    "db_id": "thrombosis_prediction",
    "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
    "predicted_sql": "SELECT T1.id, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND (T2.alb <= 3.5 OR T2.alb >= 5.5) ORDER BY T1.birthday DESC",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
    "evidence": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5",
    "difficulty": "simple"
  },
  {
    "question_id": 1217,
    "db_id": "thrombosis_prediction",
    "question": "For all patient born in 1982, state if their albumin is within normal range.",
    "predicted_sql": "SELECT T1.id, CASE WHEN T2.alb BETWEEN 3.5 AND 5.5 THEN 'Normal' ELSE 'Abnormal' END AS Albumin_Status FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE strftime('%Y', T1.birthday) = '1982'",
    "gold_sql": "SELECT CASE WHEN T2.ALB >= 3.5 AND T2.ALB <= 5.5 THEN 'normal' ELSE 'abnormal' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1982'",
    "evidence": "Year(Birthday) = '1982'; albumin is within normal range refers to ALB between 3.5 and 5.5",
    "difficulty": "moderate"
  },
  {
    "question_id": 1218,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of the female patient whose uric acid (UA) beyond the normal range?",
    "predicted_sql": "SELECT (COUNT(T2.ua) * 100) / COUNT(T1.id) AS 'Percentage' FROM patient AS T1 INNER JOIN laboratory AS T2 ON T2.id = T1.id WHERE T1.sex = 'F' AND ((T1.sex = 'M' AND T2.ua > 8) OR (T1.sex = 'F' AND T2.ua > 6.5))",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA > 6.5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "evidence": "uric acid (UA) beyond the normal range refers to UA > 8.0 and SEX = 'M' or UA > 6.5 and SEX = 'F'; female refers to Sex = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1219,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
    "predicted_sql": "SELECT AVG(T1.ua) FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE (T1.ua < 8.0 AND T2.sex = 'M') OR (T1.ua < 6.5 AND T2.sex = 'F') GROUP BY T1.id ORDER BY T1.date DESC LIMIT 1",
    "gold_sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
    "evidence": "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1220,
    "db_id": "thrombosis_prediction",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "predicted_sql": "SELECT T1.id, T1.sex, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.un = 29",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
    "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1221,
    "db_id": "thrombosis_prediction",
    "question": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.",
    "predicted_sql": "SELECT T1.id, T1.sex, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'RA' AND T2.UN < 30",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'",
    "evidence": "within the UN normal index refers to UN < 30; Diagnosis = 'RA'",
    "difficulty": "simple"
  },
  {
    "question_id": 1222,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients are are with creatinine index out of the normal range?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.cre >= 1.5",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'",
    "evidence": "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'",
    "difficulty": "simple"
  },
  {
    "question_id": 1223,
    "db_id": "thrombosis_prediction",
    "question": "Are there more male patients with creatinine not within the normal range than female? True or False?",
    "predicted_sql": "SELECT CASE WHEN SUM(CASE WHEN T2.sex = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.sex = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END AS Result FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T1.cre >= 1.5",
    "gold_sql": "SELECT CASE WHEN SUM(CASE WHEN T1.SEX = 'M' THEN 1 ELSE 0 END) > SUM(CASE WHEN T1.SEX = 'F' THEN 1 ELSE 0 END) THEN 'True' ELSE 'False' END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5",
    "evidence": "creatinine (CRE) not within the normal range refers to CRE > = 1.5; male refers to Sex = 'M'; female refers to Sex = 'F'; calculation = (SUM(SEX = 'M') > SUM(SEX = 'F')) where CRE > = 1.5",
    "difficulty": "challenging"
  },
  {
    "question_id": 1224,
    "db_id": "thrombosis_prediction",
    "question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.",
    "predicted_sql": "SELECT T1.id, T1.sex, T1.birthday, T2.`t-bil` FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id ORDER BY T2.`t-bil` DESC LIMIT 1",
    "gold_sql": "SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1",
    "evidence": "the highest total bilirubin refers to MAX(T-BIL)",
    "difficulty": "simple"
  },
  {
    "question_id": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "predicted_sql": "SELECT T1.sex, COUNT(T2.`t-bil`) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.`t-bil` >= 2.0 GROUP BY T1.sex",
    "gold_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "evidence": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
    "difficulty": "moderate"
  },
  {
    "question_id": 1226,
    "db_id": "thrombosis_prediction",
    "question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.",
    "predicted_sql": "SELECT T1.id, T2.`t-cho` FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id ORDER BY T1.birthday ASC, T2.`t-cho` DESC LIMIT 1",
    "gold_sql": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1",
    "evidence": "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);",
    "difficulty": "simple"
  },
  {
    "question_id": 1227,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of the male patient with high cholesterol?",
    "predicted_sql": "SELECT CAST(SUM(strftime('%Y', date('now')) - strftime('%Y', patient.birthday)) AS REAL) / COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.`T-CHO` >= 250",
    "gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
    "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1228,
    "db_id": "thrombosis_prediction",
    "question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?",
    "predicted_sql": "SELECT patient.id, patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg > 300",
    "gold_sql": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300",
    "evidence": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;",
    "difficulty": "simple"
  },
  {
    "question_id": 1229,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "predicted_sql": "SELECT COUNT(patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg >= 200 AND (STRFTIME('%Y', CURRENT_TIMESTAMP)- STRFTIME('%Y', patient.birthday)) > 50",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
    "evidence": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1230,
    "db_id": "thrombosis_prediction",
    "question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.cpk < 250 AND T1.admission = '-'",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'",
    "evidence": "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;",
    "difficulty": "simple"
  },
  {
    "question_id": 1231,
    "db_id": "thrombosis_prediction",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "predicted_sql": "SELECT COUNT(T2.id) FROM laboratory AS T2 INNER JOIN patient AS T1 ON T1.id = T2.id WHERE T1.sex = 'M' AND strftime('%Y', T1.birthday) BETWEEN '1936' AND '1956' AND T2.cpk >= 250",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1232,
    "db_id": "thrombosis_prediction",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "predicted_sql": "SELECT T1.id, T1.sex, strftime('%Y', 'now') - strftime('%Y', T1.birthday) AS age FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.glu >= 180 AND T2.`t-cho` < 250",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
    "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1233,
    "db_id": "thrombosis_prediction",
    "question": "List each patient's ID and blood glucose (GLU) index that were within normal range for patient's whose data was first recorded in 1991.",
    "predicted_sql": "SELECT T1.id, T2.glu FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.glu < 180 AND strftime('%Y', T1.`first date`) = '1991'",
    "gold_sql": "SELECT DISTINCT T1.ID, T2.GLU FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) = '1991' AND T2.GLU < 180",
    "evidence": "blood glucose (GLU) index that were within normal range refers to GLU < 180; data that was first recorded in 1991 refers to year(Description) = 1991;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1234,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday who has abnormal white blood cell count. Group them by sex and list the patient by age in ascending order.",
    "predicted_sql": "SELECT P.id, P.sex, P.birthday FROM patient AS P INNER JOIN laboratory AS L ON P.id = L.id WHERE L.wbc <= 3.5 OR L.wbc >= 9.0 ORDER BY P.sex, P.birthday ASC",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC <= 3.5 OR T2.WBC >= 9.0 GROUP BY T1.SEX,T1.ID ORDER BY T1.Birthday ASC",
    "evidence": "abnormal white blood cell count refers to WBC < = 3.5 or WBC > = 9.0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "predicted_sql": "SELECT T1.diagnosis, T1.id, strftime('%Y', 'now') - strftime('%Y', T1.birthday) AS age FROM patient as T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.rbc < 3.5",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1236,
    "db_id": "thrombosis_prediction",
    "question": "For all the female patient age 50 and above, who has abnormal red blood cell count. State if they were admitted to hospital.",
    "predicted_sql": "SELECT CASE WHEN p.admission = '+' THEN 'Yes' ELSE 'No' END AS 'Admitted to Hospital', p.id, p.sex, p.birthday FROM patient p JOIN laboratory l ON p.id = l.id WHERE p.sex = 'F' AND (strftime('%Y', 'now') - strftime('%Y', p.birthday)) >= 50 AND (l.rbc <= 3.5 OR l.rbc >= 6.0)",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.Admission FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND (T2.RBC <= 3.5 OR T2.RBC >= 6.0) AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50",
    "evidence": "female patient refers to Sex = 'F'; age 50 and above = SUBTRACT(year(current_timestamp), year(Birthday)) > = 50; abnormal red blood cell count refers to RBC < = 3.5 or RBC > = 6.0; Admission = '+' means the patient was admitted to the hospital; Admission = '-' means the patient was not admitted to the hospital;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1237,
    "db_id": "thrombosis_prediction",
    "question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.",
    "predicted_sql": "SELECT T1.id, T1.sex FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.admission = '-' AND T2.hgb < 10",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'",
    "evidence": "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;",
    "difficulty": "simple"
  },
  {
    "question_id": 1238,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "predicted_sql": "SELECT T1.id, T1.sex FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'SLE' AND T2.hgb BETWEEN 10 AND 17 ORDER BY T1.birthday LIMIT 1",
    "gold_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1239,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "predicted_sql": "SELECT T1.id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.birthday) AS age FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.hct >= 52 GROUP BY T1.id HAVING COUNT(T2.id) >= 2",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
    "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1240,
    "db_id": "thrombosis_prediction",
    "question": "From laboratory examinations in 1991, what is the average hematoclit level that is lower than the normal range.",
    "predicted_sql": "SELECT AVG(hct) FROM laboratory WHERE date LIKE '1991%' AND hct < 29",
    "gold_sql": "SELECT AVG(T2.HCT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HCT < 29 AND STRFTIME('%Y', T2.Date) = '1991'",
    "evidence": "laboratory examinations in 1991 refers to Date like '1991%'; average hematoclit level = AVG(HCT); hematoclit level that is lower than the normal range refers to HCT < 29;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "predicted_sql": "SELECT (SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END)) AS TotalLowerThanNormal, (SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END)) AS TotalHigherThanNormal, (SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END)) AS Difference FROM Laboratory WHERE PLT < 100 OR PLT > 400",
    "gold_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1242,
    "db_id": "thrombosis_prediction",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "predicted_sql": "SELECT T1.id, T1.birthday, T1.diagnosis, T1.description, T1.admission, T1.sex, T1.`first date`, T2.plt, T2.date FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE strftime('%Y', T2.date) = '1984' AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.birthday)) < 50 AND T2.plt BETWEEN 100 AND 400",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
    "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1243,
    "db_id": "thrombosis_prediction",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.sex = 'F' AND T2.pt >= 14 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T2.pt >= 14 THEN 1 ELSE 0 END) AS percentage FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE (strftime('%Y', 'now') - strftime('%Y', T1.birthday)) > 55",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
    "evidence": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1244,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
    "predicted_sql": "SELECT T1.id, T1.`first date`, T1.admission, T1.description, T1.diagnosis, T1.sex, T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE STRFTIME('%Y', T1.`first date`) > '1992' AND T2.pt < 14",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14",
    "evidence": "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1245,
    "db_id": "thrombosis_prediction",
    "question": "For the examinations done after 1997/1/1, how many of them have the result of an inactivated partial prothrom bin time?",
    "predicted_sql": "SELECT COUNT(e.id) FROM examination e join laboratory l on e.id = l.id WHERE e.`examination date` > '1997-01-01' AND l.aptt < 45",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.Date > '1997-01-01' AND T2.APTT >= 45",
    "evidence": "examinations done after 1997/1/1 refers to `Examination Date` > '1997-01-01'; normal activated partial prothrom bin time refesr to APTT < 45;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1246,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T1.id = T3.id WHERE T2.aptt > 45 AND T3.thrombosis = 3",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
    "evidence": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1247,
    "db_id": "thrombosis_prediction",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND (T2.wbc BETWEEN 3.5 AND 9.0) AND (T2.fg <= 150 OR T2.fg >= 450)",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
    "difficulty": "challenging"
  },
  {
    "question_id": 1248,
    "db_id": "thrombosis_prediction",
    "question": "How many patients born after 1980/1/1 have an abnormal fibrinogen level?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.birthday > '1980-01-01' AND (T2.fg < 150 OR T2.fg > 450)",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T1.Birthday > '1980-01-01'",
    "evidence": "born after 1980/1/1 refers to Birthday > '1980-01-01'; normal fibrinogen level refers to FG between 150 and 450; Should return the number of distinct patients.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1249,
    "db_id": "thrombosis_prediction",
    "question": "Please list the disease names of the patients that have a proteinuria level higher than normal.",
    "predicted_sql": "SELECT DISTINCT T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.`u-pro` >= 30",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30",
    "evidence": "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;",
    "difficulty": "simple"
  },
  {
    "question_id": 1250,
    "db_id": "thrombosis_prediction",
    "question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
    "predicted_sql": "SELECT P.id FROM patient AS P JOIN examination AS E ON P.id = E.id JOIN laboratory AS L ON P.id = L.id WHERE L.`u-pro` >= 0 AND L.`u-pro` <= 30 AND P.diagnosis = \"SLE\"",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
    "evidence": "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1251,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with an Ig G higher than normal?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T3.igg < 900 AND T2.symptoms = 'Abortion'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "evidence": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
    "difficulty": "simple"
  },
  {
    "question_id": 1252,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.id) FROM laboratory AS T1 INNER JOIN examination AS T2 ON T1.ID = T2.ID WHERE T1.igg BETWEEN 900 AND 2000 AND T2.symptoms IS NOT NULL",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
    "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1253,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
    "predicted_sql": "SELECT T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.iga BETWEEN 80 AND 500 ORDER BY T2.iga DESC LIMIT 1",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)",
    "evidence": "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);",
    "difficulty": "simple"
  },
  {
    "question_id": 1254,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.iga BETWEEN 80 AND 500 AND strftime('%Y', T1.`first date`) >= '1990'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
    "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1255,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "predicted_sql": "SELECT T2.diagnosis FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T1.igm NOT BETWEEN 40 AND 400 GROUP BY T2.diagnosis ORDER BY COUNT(T2.diagnosis) DESC LIMIT 1",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
    "evidence": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
    "difficulty": "moderate"
  },
  {
    "question_id": 1256,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE (T2.crp LIKE '+' OR T2.crp LIKE '-' OR T2.crp < 1.0) AND T1.description IS NULL",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
    "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1257,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "predicted_sql": "SELECT COUNT(DISTINCT P.id) FROM patient AS P INNER JOIN laboratory AS L ON P.id = L.id WHERE L.crp NOT IN ('+-', '-') AND L.crp >= 1.0 AND (YEAR(CURDATE()) - YEAR(P.birthday)) < 18",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
    "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1258,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Rhuematoid Factor has a positive measure of degree of coagulation?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient as T1 INNER JOIN laboratory as T2 ON T1.id = T2.id INNER JOIN examination as T3 on T1.id = T3.id WHERE T2.ra IN('-', '+-') AND T3.kct = '+'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T3.KCT = '+'",
    "evidence": "normal Rhuematoid Factor refers TO RA IN('-', '+-'); positive measure of degree of coagulation refers to KCT = '+'; Should compute the number of distinct ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1259,
    "db_id": "thrombosis_prediction",
    "question": "Please list the diseases of the patients born after 1985-1-1 and have a normal Rhuematoid Factor.",
    "predicted_sql": "SELECT diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE strftime('%Y', T1.birthday) > '1995' AND T2.ra IN('-', '+-')",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RA = '-' OR T2.RA = '+-') AND T1.Birthday > '1985-01-01'",
    "evidence": "diseases refers to Diagnosis; born after 1985/1/1 refers to YEAR(Birthday) > = 1985; normal Rhuematoid Factor refers to RA IN('-', '+-');",
    "difficulty": "moderate"
  },
  {
    "question_id": 1260,
    "db_id": "thrombosis_prediction",
    "question": "Please list the ID of the patient whose RF is normal and who is older than 60.",
    "predicted_sql": "SELECT T2.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.rf < 20 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.birthday) > 60",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', DATE('now')) - STRFTIME('%Y', T1.Birthday) > 60",
    "evidence": "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;",
    "difficulty": "simple"
  },
  {
    "question_id": 1261,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal RF don't have thrombosis?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T1.id = T3.id WHERE T3.thrombosis = 0 AND T2.RF < 20",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0",
    "evidence": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';",
    "difficulty": "simple"
  },
  {
    "question_id": 1262,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal level of complement 3 have a P pattern observed in the sheet of ANA examination?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T1.id = T3.id WHERE T2.c3 > 35 AND T3.`ana pattern` = 'P'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C3 > 35 AND T1.`ANA Pattern` = 'P'",
    "evidence": "normal level of complement 3 refers to C3 > 35; have a P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P'; Should compute the number of distinct ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1263,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose level of Hematoclit isn't normal, which patient has the highest anti-Cardiolipin antibody concentration? Please list his or her ID.",
    "predicted_sql": "SELECT T1.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T2.id = T3.id WHERE NOT (T2.hct BETWEEN 29 AND 52) ORDER BY T3.`acl iga` DESC LIMIT 1",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 on T1.ID = T3.ID WHERE (T3.HCT >= 52 OR T3.HCT <= 29) ORDER BY T2.`aCL IgA` DESC LIMIT 1",
    "evidence": "Hematoclit is normal refers to 29 < N < 52; highest anti-Cardiolipin antibody concentration refers to MAX(`aCL IgA`);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1264,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients have blood clots in veins, how many of them have a normal level of complement 4?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T2.thrombosis = 1 AND T3.c4 > 10",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.C4 > 10 AND T1.Diagnosis = 'APS'",
    "evidence": "APS will result in Blood Clots in veins; normal level of complement 4 refers to C4 > 10; Should compute the number of different ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1265,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.rnp IN ('-', '+-') AND T1.admission = '+';",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "evidence": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1266,
    "db_id": "thrombosis_prediction",
    "question": "Which is the youngest patient with an abnormal anti-ribonuclear protein level? Please list his or her date of birth.",
    "predicted_sql": "SELECT T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.rnp NOT IN('-', '+-') ORDER BY T1.birthday DESC LIMIT 1",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP != '-' OR '+-' ORDER BY T1.Birthday DESC LIMIT 1",
    "evidence": "youngest patient refers to MAX(Birthday); abnormal anti-ribonuclear protein level refers to RNP NOT IN('-', '+-'); date of birth refers to Birthday;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1267,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "predicted_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN examination ON patient.id = examination.id INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.sm IN ('-', '+-') AND examination.thrombosis = 1;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1268,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.",
    "predicted_sql": "SELECT T2.id FROM laboratory AS T1 INNER JOIN patient AS T2 ON T1.id = T2.id WHERE T1.sm NOT IN('-', '+-') ORDER BY T2.birthday DESC LIMIT 3",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM NOT IN ('negative','0') ORDER BY T1.Birthday DESC LIMIT 3",
    "evidence": "abnormal anti-SM refers to SM NOT IN ('negative', '0'); youngest refers to MAX(Birthday);",
    "difficulty": "simple"
  },
  {
    "question_id": 1269,
    "db_id": "thrombosis_prediction",
    "question": "Please list the IDs of the patients who had the examination done after 1997/1/1 and had a normal anti-scl70.",
    "predicted_sql": "SELECT T1.id FROM examination AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.`examination date` >= '1997-01-01' AND T2.sc170 IN('-', '+-')",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SC170 IN ('negative','0') AND T2.Date > 1997-01-01",
    "evidence": "examination done after 1997/1/1 refers to `Examination Date` >  1997-01-01; normal anti-scl70 refers to SC170 IN('negative','0');",
    "difficulty": "moderate"
  },
  {
    "question_id": 1270,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T1.sex = 'M' AND T2.symptoms = 'vertigo' AND T3.sc170 IN('-', '+-')",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1271,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal anti-SSA came to the hospital before 2000?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.ssa IN ('-', '+-') AND strftime('%Y', T1.`first date`) < '1990'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
    "evidence": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1272,
    "db_id": "thrombosis_prediction",
    "question": "Which patient is the first patient with an abnormal anti-SSA to come to the hospital? Please give his or her ID.",
    "predicted_sql": "SELECT laboratory.id FROM laboratory INNER JOIN patient ON laboratory.id = patient.id WHERE ssa NOT IN('-', '+-') ORDER BY patient.`first date` ASC LIMIT 1",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`First Date` IS NOT NULL AND T2.SSA NOT IN ('negative', '0') ORDER BY T1.`First Date` ASC LIMIT 1",
    "evidence": "first patient refers to ID with MIN(`First Date`); abnormal anti-SSA refers to SSA NOT IN('negative', '0');",
    "difficulty": "moderate"
  },
  {
    "question_id": 1273,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T3.ssb IN ('negative', '0') AND T2.diagnosis = 'SLE'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
    "evidence": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1274,
    "db_id": "thrombosis_prediction",
    "question": "For the patients whose anti-SSB are normal, how many of them have other symptoms observed in their examination?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T3.ssb IN('-', '+-') AND T2.symptoms IS NOT NULL",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Symptoms IS NOT NULL",
    "evidence": "anti-SSB are normal refers to SSB IN ('negative', '0'); have other symptoms refers to Symptoms IS NOT NULL; Should compute the number of distinct ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1275,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.centromea IN('-', '+-') AND T2.ssb IN('-', '+-')",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "evidence": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1276,
    "db_id": "thrombosis_prediction",
    "question": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.",
    "predicted_sql": "SELECT T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.dna >= 8",
    "gold_sql": "SELECT DISTINCT(T1.Diagnosis) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8",
    "evidence": "abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;",
    "difficulty": "simple"
  },
  {
    "question_id": 1277,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal anti-DNA level, yet their data are not recorded.",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM laboratory AS T1 LEFT JOIN patient AS T2 ON T1.id = T2.id WHERE T1.dna < 8 AND T2.description IS NULL",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL",
    "evidence": "normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones",
    "difficulty": "moderate"
  },
  {
    "question_id": 1278,
    "db_id": "thrombosis_prediction",
    "question": "Of the patients with an normal level of IGG, how many of them admitted to the hospital?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.`dna-ii` >= 8 AND T1.admission = '+'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGG > 900 AND T2.IGG <2000 AND  T1.Admission = '+'",
    "evidence": "normal level of IGG refers to 900 < IGG < 2000; admitted to the hospital refers to Admission = '+';",
    "difficulty": "simple"
  },
  {
    "question_id": 1279,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of patient who has a abnormal level of glutamic oxaloacetic transaminase level, yet he or she is diagnosed with SLE?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.diagnosis = 'SLE' AND T2.got >= 60 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.got >= 60",
    "gold_sql": "SELECT COUNT(CASE WHEN T1.Diagnosis LIKE '%SLE%' THEN T1.ID ELSE 0 END) / COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`GOT` >= 60",
    "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; percentage = MULTIPLY(DIVIDE(COUNT(ID WHERE GOT > = 60 AND Diagnosis = 'SLE'), COUNT(ID WHERE GOT > = 60)), 1.0);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1280,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.got < 60",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "evidence": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;",
    "difficulty": "simple"
  },
  {
    "question_id": 1281,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "predicted_sql": "SELECT MAX(birthday) FROM patient WHERE id IN ( SELECT id FROM laboratory WHERE got >= 60 )",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
    "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1282,
    "db_id": "thrombosis_prediction",
    "question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.",
    "predicted_sql": "SELECT T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.gpt < 60 ORDER BY T2.gpt DESC LIMIT 3",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3",
    "evidence": "highest glutamic pylvic transaminase in the normal range refers to MAX(GPT < 60);",
    "difficulty": "simple"
  },
  {
    "question_id": 1283,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.gpt < 60 AND T1.sex = 'M'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "evidence": "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';",
    "difficulty": "simple"
  },
  {
    "question_id": 1284,
    "db_id": "thrombosis_prediction",
    "question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
    "predicted_sql": "SELECT \"first date\" FROM patient WHERE id = ( SELECT id FROM laboratory WHERE ldh < 500 ORDER BY ldh DESC LIMIT 1 ) ORDER BY \"first date\" ASC LIMIT 1",
    "gold_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)",
    "evidence": "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1285,
    "db_id": "thrombosis_prediction",
    "question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "predicted_sql": "SELECT MAX(T1.`first date`) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.ldh >= 500",
    "gold_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
    "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1286,
    "db_id": "thrombosis_prediction",
    "question": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.alp >= 300 AND T1.admission = '+'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'",
    "evidence": "abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';",
    "difficulty": "simple"
  },
  {
    "question_id": 1287,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients followed at the outpatient clinic, how many of them have a normal level of alkaliphophatase?",
    "predicted_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient LEFT JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '-' AND laboratory.alp < 300",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP < 300 AND T1.Admission = '-'",
    "evidence": "followed at the outpatient clinic refers to Admission = '-'; normal level of alkaliphophatase refers to ALP < 300;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1288,
    "db_id": "thrombosis_prediction",
    "question": "Please list the diagnosis of the patients whose total protein is lower than normal.",
    "predicted_sql": "SELECT T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.tp < 6.0",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0",
    "evidence": "total protein is lower than normal refers to TP < 6.0;",
    "difficulty": "simple"
  },
  {
    "question_id": 1289,
    "db_id": "thrombosis_prediction",
    "question": "For the patients who are diagnosed with SJS, how many of them have a normal level of total protein?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'SJS' AND T2.tp > 6.0 AND T2.tp < 8.5",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SJS' AND T2.TP > 6.0 AND T2.TP < 8.5",
    "evidence": "diagnosed with SJS refers to Diagnosis = 'SJS'; normal level of total protein refers to TP > 6.0 and TP < 8.5;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1290,
    "db_id": "thrombosis_prediction",
    "question": "What is the examination date of the patient whose albumin is the highest in the normal range?",
    "predicted_sql": "SELECT `examination date` FROM examination WHERE id = ( SELECT id FROM laboratory WHERE alb BETWEEN 3.5 AND 5.5 ORDER BY alb DESC LIMIT 1 ) LIMIT 1",
    "gold_sql": "SELECT Date FROM Laboratory WHERE ALB = (SELECT MAX(ALB) FROM Laboratory WHERE ALB BETWEEN 3.5 AND 5.5)",
    "evidence": "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);",
    "difficulty": "simple"
  },
  {
    "question_id": 1291,
    "db_id": "thrombosis_prediction",
    "question": "How many male patients have a normal level of both albumin and total protein?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.alb > 3.5 AND T2.alb < 5.5 AND T2.tp >= 6.0 AND T2.tp <= 8.5",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M'  AND T2.ALB > 3.5 AND T2.ALB < 5.5 AND T2.TP BETWEEN 6.0 AND 8.5",
    "evidence": "male refers to Sex = 'M'; normal level of both albumin and total protein refers to ALB > 3.5 and ALB < 5.5 AND TP between 6.0 and 8.5;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1292,
    "db_id": "thrombosis_prediction",
    "question": "What is the anti Cardiolipin antibody concentration of the female patient with the highest uric acid level in the normal range?",
    "predicted_sql": "SELECT T2.`acl iga`, T2.`acl igg`, T2.`acl igm` FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T1.sex = 'F' AND T3.ua = ( SELECT MAX(UA) FROM laboratory WHERE UA > 6.50 )",
    "gold_sql": "SELECT T3.`aCL IgG`, T3.`aCL IgM`, T3.`aCL IgA` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T1.SEX = 'F' AND T2.UA > 6.5 ORDER BY T2.UA DESC LIMIT 1",
    "evidence": "anti Cardiolipin antibody concentration refers to `aCL IgG`, `aCL IgM`, `aCL IgA`; female patient refers to Sex = F'; highest uric acid level in the normal range refers to MAX(UA > 6.50);",
    "difficulty": "challenging"
  },
  {
    "question_id": 1293,
    "db_id": "thrombosis_prediction",
    "question": "What is the highest anti-nucleus antibody concentration level of a patient with a normal creatinine level?",
    "predicted_sql": "SELECT MAX(T2.ana) FROM laboratory AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.cre < 1.5",
    "gold_sql": "SELECT T2.ANA FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.CRE < 1.5 ORDER BY T2.ANA DESC LIMIT 1",
    "evidence": "highest anti-nucleus antibody concentration level refers to MAX(ANA); normal creatinine level refers to CRE < 1.5;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1294,
    "db_id": "thrombosis_prediction",
    "question": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.",
    "predicted_sql": "SELECT T1.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T1.id = T3.id WHERE T2.cre < 1.5 ORDER BY T3.`acl iga` DESC LIMIT 1",
    "gold_sql": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
    "evidence": "creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1295,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose total bilirubin is over the normal range, how many of them have a peripheral pattern observed in the sheet of ANA examination?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T1.id = T3.id WHERE T2.`t-bil` >= 2.0 AND T3.`ana pattern` LIKE '%P%'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` >= 2 AND T3.`ANA Pattern` LIKE '%P%'",
    "evidence": "total bilirubin is over the normal range refers to `T-BIL` > = 2.0; peripheral pattern is observed in the sheet of ANA examination refers to that ANA Pattern contains 'P';",
    "difficulty": "challenging"
  },
  {
    "question_id": 1296,
    "db_id": "thrombosis_prediction",
    "question": "What is the anti-nucleus antibody concentration of the patient whose total bilirubin is the highest in the normal range?",
    "predicted_sql": "SELECT E.ana FROM examination AS E INNER JOIN laboratory AS L ON E.id = L.id WHERE L.`t-bil` = ( SELECT MAX(`t-bil`) FROM laboratory WHERE `t-bil` < 2.0 ) LIMIT 1",
    "gold_sql": "SELECT T3.ANA FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-BIL` < 2.0 ORDER BY T2.`T-BIL` DESC LIMIT 1",
    "evidence": "anti-nucleus antibody concentration refers to ANA; total bilirubin is the highest in the normal range refers to MAX(`T-BIL` < 2.0);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1297,
    "db_id": "thrombosis_prediction",
    "question": "For the patients whose total cholesterol is higher than normal, how many of them have a negative measure of degree of coagulation?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM laboratory AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id WHERE T1.t-cho >= 250 AND T2.kct = 'negative'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` >= 250 AND T3.KCT = '-'",
    "evidence": "total cholesterol is higher than normal refers to `T-CHO` > = 250; negative measure of degree of coagulation refers to KCT = '-' ;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1298,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T2.`ana pattern` = 'P' AND T3.`t-cho` < 250",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250",
    "evidence": "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1299,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?",
    "predicted_sql": "SELECT COUNT(DISTINCT P.id) FROM patient AS P INNER JOIN laboratory AS L ON P.id = L.id INNER JOIN examination AS E ON E.id = P.id WHERE L.tg < 200 AND E.symptoms IS NOT NULL",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL",
    "evidence": "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;",
    "difficulty": "simple"
  },
  {
    "question_id": 1300,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease name of the patient who has the highest level of triglyceride within the normal range?",
    "predicted_sql": "SELECT T1.diagnosis FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.tg < 200 ORDER BY T2.tg DESC LIMIT 1",
    "gold_sql": "SELECT T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 ORDER BY T2.TG DESC LIMIT 1",
    "evidence": "disease name referse to Diagnosis; highest level of triglyceride within the normal range refers to MAX(TG < 200);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1301,
    "db_id": "thrombosis_prediction",
    "question": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM patient AS T1 INNER JOIN examination AS T2 ON T1.id = T2.id INNER JOIN laboratory AS T3 ON T1.id = T3.id WHERE T2.thrombosis = 0 AND T3.cpk < 250",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 0 AND T1.CPK < 250",
    "evidence": "no thrombosis refers to Thrombosis = 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;",
    "difficulty": "simple"
  },
  {
    "question_id": 1302,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.id = T2.id INNER JOIN Examination AS T3 ON T1.id = T3.id WHERE T2.cpk < 250 AND (T3.kct = '+' OR T3.rvvt = '+' OR T3.lac = '+')",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1303,
    "db_id": "thrombosis_prediction",
    "question": "When is the birthday of the oldest patient whose blood glucose is abnormal?",
    "predicted_sql": "SELECT T1.birthday FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T2.glu > 180 ORDER BY T1.birthday ASC LIMIT 1",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1",
    "evidence": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;",
    "difficulty": "simple"
  },
  {
    "question_id": 1304,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal blood glucose, how many of them don't have thrombosis?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T1.id = T3.id WHERE T2.glu < 180 AND T3.thrombosis = 0",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.GLU < 180 AND T3.Thrombosis = 0",
    "evidence": "normal blood glucose refers to GLU < 180; don't have thrombosis refers to Thrombosis = 0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1305,
    "db_id": "thrombosis_prediction",
    "question": "How many patients accepted to the hospital have a normal level of white blood cells?",
    "predicted_sql": "SELECT COUNT(DISTINCT patient.id) FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.admission = '+' AND laboratory.wbc BETWEEN 3.5 AND 9.0",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC BETWEEN 3.5 AND 9 AND T1.Admission = '+'",
    "evidence": "accepted to the hospital refers to Admission = '+'; normal level of white blood cells refers to WBC between 3.5 and 9.0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1306,
    "db_id": "thrombosis_prediction",
    "question": "How many patients diagnosed with SLE have a normal white blood cell level?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.diagnosis = 'SLE' AND T2.wbc BETWEEN 3.5 AND 9.0",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;",
    "difficulty": "simple"
  },
  {
    "question_id": 1307,
    "db_id": "thrombosis_prediction",
    "question": "Please list the patient's ID if he or she has an abnormal level of red blood cell and is followed at the outpatient clinic.",
    "predicted_sql": "SELECT DISTINCT T1.id FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE ((T2.rbc <= 3.5 OR T2.rbc >= 6.0) AND T1.admission = '-')",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.RBC <= 3.5 OR T2.RBC >= 6) AND T1.Admission = '-'",
    "evidence": "RBC < = 3.5 or RBC > = 6.0 means the patient has an abnormal level of red blood cell; 3.5 < RBC < 6.0 means the patient has a normal level of red blood cell; followed at the outpatient clinic refers to Admission = '-';",
    "difficulty": "challenging"
  },
  {
    "question_id": 1308,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have a normal platelet level, how many of them have other symptoms observed?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id INNER JOIN examination AS T3 ON T2.id = T3.id WHERE T2.plt > 100 AND T2.plt < 400 AND T3.symptoms IS NOT NULL",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 100 AND T2.PLT < 400 AND T1.Diagnosis IS NOT NULL",
    "evidence": "normal platelet level refers to PLT > 100 and PLT < 400; have other symptoms refers to Diagnosis is not null;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1309,
    "db_id": "thrombosis_prediction",
    "question": "Please list a patient's platelet level if it is within the normal range and if he or she is diagnosed with MCTD.",
    "predicted_sql": "SELECT patient.id, laboratory.plt FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.plt BETWEEN 100 AND 400 AND patient.diagnosis = 'MCTD'",
    "gold_sql": "SELECT T2.PLT FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'MCTD' AND T2.PLT BETWEEN 100 AND 400",
    "evidence": "PLT > 100 and PLT < 400 means platelet level is within the normal range; PLT < 100 and PLT > 400 means platelet level is not within the normal range; diagnosed with MCTD refers to Diagnosis = 'MCTD';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1310,
    "db_id": "thrombosis_prediction",
    "question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?",
    "predicted_sql": "SELECT AVG(T2.pt) FROM patient AS T1 INNER JOIN laboratory AS T2 ON T1.id = T2.id WHERE T1.sex = 'M' AND T2.pt < 14",
    "gold_sql": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'",
    "evidence": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);",
    "difficulty": "simple"
  },
  {
    "question_id": 1311,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with severe thrombosis have a normal prothrombin time?",
    "predicted_sql": "SELECT COUNT(*) FROM patient AS P1 INNER JOIN examination AS E1 ON P1.id = E1.id INNER JOIN laboratory AS L1 ON P1.id = L1.id WHERE E1.thrombosis IN (2,1) AND L1.pt < 14",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.PT < 14 AND T3.Thrombosis < 3 AND T3.Thrombosis > 0",
    "evidence": "severe thrombosis refers to Thrombosis = 2 or 1; normal prothrombin time refers to PT < 14;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1312,
    "db_id": "student_club",
    "question": "What's Angela Sanders's major?",
    "predicted_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "evidence": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name.",
    "difficulty": "simple"
  },
  {
    "question_id": 1313,
    "db_id": "student_club",
    "question": "How many students in the Student_Club are from the College of Engineering?",
    "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = \"College of Engineering\"",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1314,
    "db_id": "student_club",
    "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art and Design Department'",
    "evidence": "full name refers to first_name, last_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1315,
    "db_id": "student_club",
    "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "predicted_sql": "SELECT COUNT(*) FROM attendance WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = \"Women's Soccer\" )",
    "gold_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "evidence": "Women's Soccer is an event name",
    "difficulty": "simple"
  },
  {
    "question_id": 1316,
    "db_id": "student_club",
    "question": "Please list the phone numbers of the students from the Student_Club that has attended the event \"Women's Soccer\".",
    "predicted_sql": "SELECT T1.phone FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = \"Women's Soccer\"",
    "gold_sql": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
    "evidence": "Women's Soccer is an event name; phone numbers refers to phone",
    "difficulty": "moderate"
  },
  {
    "question_id": 1317,
    "db_id": "student_club",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = \"Women's Soccer\" AND T1.t_shirt_size = \"Medium\"",
    "gold_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1318,
    "db_id": "student_club",
    "question": "What is the event that has the highest attendance of the students from the Student_Club?",
    "predicted_sql": "SELECT link_to_event FROM attendance GROUP BY link_to_event ORDER BY COUNT(*) DESC LIMIT 1",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name HAVING COUNT(T2.link_to_event) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS subquery)",
    "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))",
    "difficulty": "simple"
  },
  {
    "question_id": 1319,
    "db_id": "student_club",
    "question": "Which college is the vice president of the Student_Club from?",
    "predicted_sql": "SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.`major_id` = T2.`link_to_major` WHERE T2.position = 'Vice President'",
    "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'",
    "evidence": "Vice President is a position of the Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1320,
    "db_id": "student_club",
    "question": "Please list the event names of all the events attended by Maya Mclean.",
    "predicted_sql": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1321,
    "db_id": "student_club",
    "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
    "predicted_sql": "SELECT COUNT(*) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND STRFTIME('%Y', T1.event_date) = '2019'",
    "gold_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "evidence": "events attended in 2019 refers to YEAR(event_date) = 2019",
    "difficulty": "moderate"
  },
  {
    "question_id": 1322,
    "db_id": "student_club",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "predicted_sql": "SELECT COUNT(*) FROM ( SELECT T1.event_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 10 ) AS T3",
    "gold_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
    "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
    "difficulty": "moderate"
  },
  {
    "question_id": 1323,
    "db_id": "student_club",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "predicted_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_member) > 20",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
    "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1324,
    "db_id": "student_club",
    "question": "What is the average attendance of meetings in 2020?",
    "predicted_sql": "SELECT CAST(COUNT(T1.event_id) AS REAL) / COUNT(DISTINCT T1.event_name) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.type = 'Meeting' AND strftime('%Y', T1.event_date) = '2020'",
    "gold_sql": "SELECT CAST(COUNT(T2.link_to_event) AS REAL) / COUNT(DISTINCT T2.link_to_event) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE SUBSTR(T1.event_date, 1, 4) = '2020' AND T1.type = 'Meeting'",
    "evidence": "meetings in 2020 refers to type = 'Meeting' where YEAR(event_date) = 2020; average = DIVIDE(COUNT(event_id), COUNT(DISTINCT event_name))",
    "difficulty": "moderate"
  },
  {
    "question_id": 1325,
    "db_id": "student_club",
    "question": "What is the most expensive item that was spent in support of club events?",
    "predicted_sql": "SELECT expense_description FROM expense WHERE cost = ( SELECT MAX(cost) FROM expense )",
    "gold_sql": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1",
    "evidence": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)",
    "difficulty": "simple"
  },
  {
    "question_id": 1326,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have majored Environmental Engineering?\n",
    "predicted_sql": "SELECT COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering'",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'",
    "evidence": "'Environmental Engineering' is the major name",
    "difficulty": "simple"
  },
  {
    "question_id": 1327,
    "db_id": "student_club",
    "question": "List the full name of all the members of the Student_Club who attended the \"Laugh Out Loud\" event.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
    "evidence": "full name of members refers to first_name, last_name; 'Laugh Out Loud' is an event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1328,
    "db_id": "student_club",
    "question": "List the last name of all the students who majored Law and Constitutional Studies. \n",
    "predicted_sql": "SELECT last_name FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Law and Constitutional Studies' )",
    "gold_sql": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law and Constitutional Studies'",
    "evidence": "'Law and Constitutional Studies' is the major name",
    "difficulty": "simple"
  },
  {
    "question_id": 1329,
    "db_id": "student_club",
    "question": "What county did Sherri Ramsey grew up?",
    "predicted_sql": "SELECT county FROM zip_code WHERE zip_code = ( SELECT zip FROM member WHERE first_name = 'Sherri' AND last_name = 'Ramsey' )",
    "gold_sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherri' AND T1.last_name = 'Ramsey'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1330,
    "db_id": "student_club",
    "question": "What college offers the major that Tyler Hewitt took?",
    "predicted_sql": "SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Tyler' AND T2.last_name = 'Hewitt'",
    "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1331,
    "db_id": "student_club",
    "question": "What is the amount of the funds that the Vice President received?",
    "predicted_sql": "SELECT SUM(T2.amount) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "gold_sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "difficulty": "simple"
  },
  {
    "question_id": 1332,
    "db_id": "student_club",
    "question": "How much did the Student_Club members spend on food in September Meeting?",
    "predicted_sql": "SELECT B.spent FROM budget AS B INNER JOIN event AS E ON B.link_to_event = E.event_id WHERE B.category = 'Food' AND E.event_name = 'September Meeting'",
    "gold_sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Food' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Food' where event_name = 'September Meeting'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1333,
    "db_id": "student_club",
    "question": "What city and state did the President of the Student_Club grow up?",
    "predicted_sql": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "gold_sql": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'",
    "evidence": "'President' is a position of Student Club;",
    "difficulty": "simple"
  },
  {
    "question_id": 1334,
    "db_id": "student_club",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "predicted_sql": "SELECT M.first_name, M.last_name FROM member AS M INNER JOIN zip_code AS Z ON M.zip = Z.zip_code WHERE Z.state = 'Illinois'",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "evidence": "full name of member refers to first_name, last_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1335,
    "db_id": "student_club",
    "question": "How much did the Student_Club members spend on advertisement in September Meeting?",
    "predicted_sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Advertisement' AND T1.event_name = 'September Meeting'",
    "gold_sql": "SELECT T2.spent FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'September Meeting' AND T2.category = 'Advertisement' AND SUBSTR(T1.event_date, 6, 2) = '09'",
    "evidence": "amount spent refers to spent; spend on food in September Meeting refers to category = 'Advertisement' where event_name = 'September Meeting'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1336,
    "db_id": "student_club",
    "question": "What department offers the major that Pierce and Guidi took?",
    "predicted_sql": "SELECT T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.last_name IN ('Pierce','Guidi')",
    "gold_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1337,
    "db_id": "student_club",
    "question": "What is the total budgeted amount for all category in \"October Speaker\" event?",
    "predicted_sql": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
    "gold_sql": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'",
    "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'",
    "difficulty": "simple"
  },
  {
    "question_id": 1338,
    "db_id": "student_club",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "predicted_sql": "SELECT T2.approved FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Meeting' AND T1.event_date = '2019-10-08'",
    "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
    "difficulty": "moderate"
  },
  {
    "question_id": 1339,
    "db_id": "student_club",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "predicted_sql": "SELECT AVG(cost) FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE first_name = 'Elijah' AND last_name = 'Allen' AND (STRFTIME('%m', expense_date) = '09' OR STRFTIME('%m', expense_date) = '10')",
    "gold_sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
    "difficulty": "challenging"
  },
  {
    "question_id": 1340,
    "db_id": "student_club",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "predicted_sql": "SELECT (SELECT SUM(spent) FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id AND STRFTIME('%Y', T2.event_date) = '2019') - (SELECT SUM(spent) FROM budget AS T1 JOIN event AS T2 ON T1.link_to_event = T2.event_id AND STRFTIME('%Y', T2.event_date) = '2020') AS difference",
    "gold_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1341,
    "db_id": "student_club",
    "question": "Give the location for \"Spring Budget Review\".",
    "predicted_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "gold_sql": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'",
    "evidence": "'Spring Budget Review' is an event name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1342,
    "db_id": "student_club",
    "question": "What was the cost for the \"Posters\" on 2019/9/4?",
    "predicted_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
    "gold_sql": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'",
    "evidence": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'",
    "difficulty": "simple"
  },
  {
    "question_id": 1343,
    "db_id": "student_club",
    "question": "With the biggest budget for the \"Food\", what was the remaining of it?",
    "predicted_sql": "SELECT remaining FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
    "gold_sql": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )",
    "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'",
    "difficulty": "simple"
  },
  {
    "question_id": 1344,
    "db_id": "student_club",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "predicted_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "gold_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'",
    "difficulty": "simple"
  },
  {
    "question_id": 1345,
    "db_id": "student_club",
    "question": "How many majors are there in \"College of Humanities and Social Sciences\"?",
    "predicted_sql": "SELECT COUNT(major_id) FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "gold_sql": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1346,
    "db_id": "student_club",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "predicted_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "gold_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "evidence": "Carlo Jacobs is the full name; full name refers to first_name, last_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1347,
    "db_id": "student_club",
    "question": "Tell the hometown county for \"Adela O'Gallagher\".",
    "predicted_sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = \"O'Gallagher\"",
    "gold_sql": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'",
    "evidence": "hometown county refers to county",
    "difficulty": "simple"
  },
  {
    "question_id": 1348,
    "db_id": "student_club",
    "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?",
    "predicted_sql": "SELECT COUNT(*) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'November Meeting' AND T2.remaining < 0;",
    "gold_sql": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0",
    "evidence": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget",
    "difficulty": "simple"
  },
  {
    "question_id": 1349,
    "db_id": "student_club",
    "question": "Provide the total number of the budget amount for \"September Speaker\" event.",
    "predicted_sql": "SELECT SUM(amount) FROM budget WHERE link_to_event IN ( SELECT event_id FROM event WHERE event_name = 'September Speaker' )",
    "gold_sql": "SELECT SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'",
    "evidence": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)",
    "difficulty": "simple"
  },
  {
    "question_id": 1350,
    "db_id": "student_club",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "predicted_sql": "SELECT T2.status FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T1.expense_description = 'Post Cards, Posters' AND T1.expense_date = '2019-08-20'",
    "gold_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "evidence": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
    "difficulty": "moderate"
  },
  {
    "question_id": 1351,
    "db_id": "student_club",
    "question": "What was Brent Thomason's major?",
    "predicted_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1352,
    "db_id": "student_club",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Human Development and Family Studies' AND T1.t_shirt_size = 'Large'",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1353,
    "db_id": "student_club",
    "question": "What's Christof Nielson's zip code type?",
    "predicted_sql": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
    "gold_sql": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1354,
    "db_id": "student_club",
    "question": "State the major name for the Vice President of the club.",
    "predicted_sql": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'Vice President'",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "evidence": "'Vice President' is a position of Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1355,
    "db_id": "student_club",
    "question": "Where is the hometown state for \"Sacha Harrison\"?",
    "predicted_sql": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "gold_sql": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "evidence": "hometown state refers to state;",
    "difficulty": "simple"
  },
  {
    "question_id": 1356,
    "db_id": "student_club",
    "question": "Which department was the President of the club in?",
    "predicted_sql": "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President'",
    "gold_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "evidence": "'President' is a position of Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1357,
    "db_id": "student_club",
    "question": "State the date Connor Hilton paid his/her dues.",
    "predicted_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';",
    "difficulty": "simple"
  },
  {
    "question_id": 1358,
    "db_id": "student_club",
    "question": "Who was the first one paid his/her dues? Tell the full name.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received ASC LIMIT 1",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1",
    "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'",
    "difficulty": "simple"
  },
  {
    "question_id": 1359,
    "db_id": "student_club",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Advertisement' AND T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.category = 'Advertisement' AND T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) AS TIMES FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
    "difficulty": "challenging"
  },
  {
    "question_id": 1360,
    "db_id": "student_club",
    "question": "What percentage was the budget for Parking to the total budget for the \"November Speaker\"?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.category = 'Parking' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(T1.amount) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Speaker'",
    "evidence": "DIVDE(SUM( amount where category = 'Parking' and event_name = 'November Speaker'), COUNT(event_name = 'November Speaker)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1361,
    "db_id": "student_club",
    "question": "What is the total cost of the pizzas for all the events?",
    "predicted_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
    "difficulty": "simple"
  },
  {
    "question_id": 1362,
    "db_id": "student_club",
    "question": "How many cities are there in Orange County, Virginia?",
    "predicted_sql": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "gold_sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "evidence": "Orange County is the county name, Virginia is the state name",
    "difficulty": "simple"
  },
  {
    "question_id": 1363,
    "db_id": "student_club",
    "question": "List all of the College of Humanities and Social Sciences' departments.",
    "predicted_sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "gold_sql": "SELECT department FROM major WHERE college = 'College of Humanities and Social Sciences'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1364,
    "db_id": "student_club",
    "question": "Where is Amy Firth's hometown?",
    "predicted_sql": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
    "gold_sql": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'",
    "evidence": "hometown refers to city, county, state",
    "difficulty": "simple"
  },
  {
    "question_id": 1365,
    "db_id": "student_club",
    "question": "What are the expenses of the budget with the lowest remaining?",
    "predicted_sql": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining ASC LIMIT 1",
    "gold_sql": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T1.remaining = (SELECT MIN(remaining) FROM budget)",
    "evidence": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)",
    "difficulty": "simple"
  },
  {
    "question_id": 1366,
    "db_id": "student_club",
    "question": "List all the members who attended the event \"October Meeting\".",
    "predicted_sql": "SELECT T2.first_name, T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting'",
    "gold_sql": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "evidence": "'October Meeting' is an event name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1367,
    "db_id": "student_club",
    "question": "Which college do most of the members go to?",
    "predicted_sql": "SELECT T.college FROM ( SELECT T2.college, COUNT(T1.member_id) AS num FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.college ) AS T ORDER BY T.num DESC LIMIT 1",
    "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
    "evidence": "college most members go refers to MAX(COUNT(major.college))",
    "difficulty": "simple"
  },
  {
    "question_id": 1368,
    "db_id": "student_club",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "predicted_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.phone = \"809-555-3360\"",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "evidence": "major in refers to major_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1369,
    "db_id": "student_club",
    "question": "Which event has the highest budget amount?",
    "predicted_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event ORDER BY T2.amount DESC LIMIT 1",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1",
    "evidence": "event refers to event_name; highest budget amount refers to MAX(amount)",
    "difficulty": "simple"
  },
  {
    "question_id": 1370,
    "db_id": "student_club",
    "question": "List all the expenses incurred by the vice president.",
    "predicted_sql": "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.position = 'Vice President'",
    "gold_sql": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1371,
    "db_id": "student_club",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "predicted_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women's Soccer'",
    "gold_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "evidence": "'Women's Soccer' is the event name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1372,
    "db_id": "student_club",
    "question": "When did the member, Casey Mason, received the income?",
    "predicted_sql": "SELECT T1.date_received FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Casey' AND T2.last_name = 'Mason'",
    "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'",
    "evidence": "when the income was received refers to date_received",
    "difficulty": "simple"
  },
  {
    "question_id": 1373,
    "db_id": "student_club",
    "question": "How many of the members' hometowns are from Maryland state?",
    "predicted_sql": "SELECT COUNT(DISTINCT member.member_id) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Maryland'",
    "gold_sql": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1374,
    "db_id": "student_club",
    "question": "How many events did the member with the phone number \"954-555-6240\" attend?",
    "predicted_sql": "SELECT COUNT(link_to_event) FROM attendance WHERE link_to_member = ( SELECT member_id FROM member WHERE phone = '954-555-6240' )",
    "gold_sql": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1375,
    "db_id": "student_club",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "predicted_sql": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.department = 'School of Applied Sciences, Technology and Education'",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1376,
    "db_id": "student_club",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "predicted_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "difficulty": "moderate"
  },
  {
    "question_id": 1377,
    "db_id": "student_club",
    "question": "How many student have the position of president?",
    "predicted_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
    "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'President'",
    "evidence": "'President' is a position of Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1378,
    "db_id": "student_club",
    "question": "What is the highest amount of budget spend for an event?",
    "predicted_sql": "SELECT MAX(spent) AS highest_spent FROM budget",
    "gold_sql": "SELECT MAX(spent) FROM budget",
    "evidence": "highest amount of budget spend refers to MAX(spent)",
    "difficulty": "simple"
  },
  {
    "question_id": 1379,
    "db_id": "student_club",
    "question": "How many meeting events were held in 2020?",
    "predicted_sql": "SELECT COUNT(event_id) FROM event WHERE STRFTIME('%Y', event_date) = '2020' AND type = 'Meeting'",
    "gold_sql": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'",
    "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020",
    "difficulty": "simple"
  },
  {
    "question_id": 1380,
    "db_id": "student_club",
    "question": "What is the total amount of money spent for food?",
    "predicted_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "gold_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
    "difficulty": "simple"
  },
  {
    "question_id": 1381,
    "db_id": "student_club",
    "question": "List the name of students that have attended more than 7 events.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
    "difficulty": "moderate"
  },
  {
    "question_id": 1382,
    "db_id": "student_club",
    "question": "Among the students majored in interior design, who have attended the Community Theater event?",
    "predicted_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T4 ON T2.link_to_member = T4.member_id INNER JOIN major AS T3 ON T4.link_to_major = T3.major_id WHERE T1.event_name = 'Community Theater' AND T3.major_name = 'Interior Design'",
    "gold_sql": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
    "evidence": "majored in music refers to major_name = 'Interior Design'; 'Community Theater' is the event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1383,
    "db_id": "student_club",
    "question": "State the name of students from Georgetown, South Carolina.",
    "predicted_sql": "SELECT T2.first_name, T2.last_name FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.city = 'Georgetown' AND T1.state = 'South Carolina'",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Georgetown' AND T2.state = 'South Carolina'",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; Georgetown is a city; South Carolina is a state",
    "difficulty": "simple"
  },
  {
    "question_id": 1384,
    "db_id": "student_club",
    "question": "How many income generated by Grant Gilmour?",
    "predicted_sql": "SELECT SUM(T1.amount) FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.first_name = 'Grant' AND T2.last_name = 'Gilmour'",
    "gold_sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'",
    "evidence": "income generated refers to income.amount",
    "difficulty": "simple"
  },
  {
    "question_id": 1385,
    "db_id": "student_club",
    "question": "Which student was able to generate income more than $40?",
    "predicted_sql": "SELECT T2.first_name, T2.last_name FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.amount > 40",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 40",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 40",
    "difficulty": "simple"
  },
  {
    "question_id": 1386,
    "db_id": "student_club",
    "question": "What is the total expense for the Yearly Kickoff?",
    "predicted_sql": "SELECT SUM(cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Yearly Kickoff'",
    "gold_sql": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'",
    "evidence": "'Yearly Kickoff' is an event name; total expense refers to SUM(cost)",
    "difficulty": "simple"
  },
  {
    "question_id": 1387,
    "db_id": "student_club",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "predicted_sql": "SELECT M.first_name, M.last_name FROM member AS M INNER JOIN expense AS E ON M.member_id = E.link_to_member INNER JOIN budget as B ON E.link_to_budget = B.budget_id INNER JOIN event as Ev ON B.link_to_event = Ev.event_id WHERE Ev.event_name = 'Yearly Kickoff'",
    "gold_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1388,
    "db_id": "student_club",
    "question": "Which students manage to generate the highest income. State his/her full name along with the income source.",
    "predicted_sql": "SELECT member.first_name, member.last_name, income.source FROM income INNER JOIN member ON income.link_to_member = member.member_id ORDER BY income.amount DESC LIMIT 1",
    "gold_sql": "SELECT T1.first_name, T1.last_name, T2.source FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount = (SELECT MAX(T4.amount) FROM member AS T3 INNER JOIN income AS T4 ON T3.member_id = T4.link_to_member)",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; generate the highest income refers to MAX(income.amount);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1389,
    "db_id": "student_club",
    "question": "Which event has the lowest cost?",
    "predicted_sql": "SELECT T2.event_name FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id ORDER BY T1.cost ASC LIMIT 1",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost = (SELECT MIN(T6.cost) FROM event AS T4 INNER JOIN budget AS T5 ON T4.event_id = T5.link_to_event INNER JOIN expense AS T6 ON T5.budget_id = T6.link_to_budget)",
    "evidence": "event refers to event_name where MIN(cost)",
    "difficulty": "simple"
  },
  {
    "question_id": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.cost ELSE 0 END) AS REAL) * 100 / SUM(T1.cost) FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1391,
    "db_id": "student_club",
    "question": "What is the ratio between students majored in finance and physics?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) FROM major",
    "gold_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))",
    "difficulty": "simple"
  },
  {
    "question_id": 1392,
    "db_id": "student_club",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "predicted_sql": "SELECT source FROM income WHERE STRFTIME('%Y-%m', date_received) = '2019-09' GROUP BY source ORDER BY SUM(amount) DESC LIMIT 1",
    "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
    "evidence": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'",
    "difficulty": "simple"
  },
  {
    "question_id": 1393,
    "db_id": "student_club",
    "question": "Provide the full name and email address of the Student_Club's Secretary.",
    "predicted_sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "gold_sql": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'",
    "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1394,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "predicted_sql": "SELECT COUNT(*) FROM member AS m INNER JOIN major AS mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Physics Teaching'",
    "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "evidence": "'Physics Teaching' is the major_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1395,
    "db_id": "student_club",
    "question": "How many members did attend the event 'Community Theater' in 2019?",
    "predicted_sql": "SELECT COUNT(distinct T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND STRFTIME('%Y', T1.event_date) = '2019'",
    "gold_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Community Theater' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
    "evidence": "event 'Community Theater' in 2019 refers to event_name = 'Community Theater' where YEAR(event_date) = 2019",
    "difficulty": "moderate"
  },
  {
    "question_id": 1396,
    "db_id": "student_club",
    "question": "Provide the number of events attended by Luisa Guidi. What is her major?",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T3.major_name, count(T4.event_id) as number_of_events FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id INNER JOIN event AS T4 ON T2.link_to_event = T4.event_id WHERE T1.first_name = 'Luisa' AND T1.last_name = 'Guidi'",
    "gold_sql": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'",
    "evidence": "major refers to major_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1397,
    "db_id": "student_club",
    "question": "On average, how much did the Student_Club spend on food for the typical event in the past?",
    "predicted_sql": "SELECT AVG(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "gold_sql": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'",
    "evidence": "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'",
    "difficulty": "simple"
  },
  {
    "question_id": 1398,
    "db_id": "student_club",
    "question": "Name the event with the highest amount spent on advertisement.",
    "predicted_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1;",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1399,
    "db_id": "student_club",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "predicted_sql": "SELECT CASE WHEN EXISTS ( SELECT 1 FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women's Soccer' ) THEN 'Yes' ELSE 'No' END AS AttendStatus",
    "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
    "difficulty": "moderate"
  },
  {
    "question_id": 1400,
    "db_id": "student_club",
    "question": "Among all events hold by the Student_Club in 2019, find the percentage share of events related to 'Community Service'",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) AS percentage FROM event WHERE STRFTIME('%Y', event_date) = '2019'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN type = 'Community Service' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(type) FROM event WHERE SUBSTR(event_date, 1, 4) = '2019'",
    "evidence": "DIVIDE(SUM(type = 'Community Service'), COUNT(event_id)) * 100 where event_date BETWEEN' 2019-01-01' and '2019-12-31'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1401,
    "db_id": "student_club",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "predicted_sql": "SELECT E.cost FROM expense AS E INNER JOIN budget AS B ON E.link_to_budget = B.budget_id INNER JOIN event AS EV ON B.link_to_event = EV.event_id WHERE E.expense_description = 'Posters' AND EV.event_name = 'September Speaker';",
    "gold_sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "difficulty": "moderate"
  },
  {
    "question_id": 1402,
    "db_id": "student_club",
    "question": "What is the most popular size of t-shirt ordered by the club members?",
    "predicted_sql": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "gold_sql": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1",
    "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))",
    "difficulty": "simple"
  },
  {
    "question_id": 1403,
    "db_id": "student_club",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "predicted_sql": "SELECT event.event_name FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event.status = 'Closed' AND budget.remaining < 0 ORDER BY budget.remaining ASC LIMIT 1;",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
    "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0",
    "difficulty": "moderate"
  },
  {
    "question_id": 1404,
    "db_id": "student_club",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "predicted_sql": "SELECT T1.type, SUM(T2.cost) FROM event AS T1 INNER JOIN budget AS T3 ON T1.event_id = T3.link_to_event INNER JOIN expense AS T2 ON T2.link_to_budget = T3.budget_id WHERE T1.event_name = 'October Meeting' AND T2.approved = 'TRUE' GROUP BY T1.type",
    "gold_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1405,
    "db_id": "student_club",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "predicted_sql": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' ORDER BY T2.amount ASC",
    "gold_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "difficulty": "moderate"
  },
  {
    "question_id": 1406,
    "db_id": "student_club",
    "question": "Among the budgets for Food, which one has the highest budgeted amount?",
    "predicted_sql": "SELECT budget_id FROM budget WHERE category = 'Food' ORDER BY amount DESC LIMIT 1",
    "gold_sql": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )",
    "evidence": "MAX(amount) where category = 'Food'",
    "difficulty": "simple"
  },
  {
    "question_id": 1407,
    "db_id": "student_club",
    "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
    "predicted_sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
    "gold_sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
    "evidence": "MAX(amount) where category = 'Advertisement'",
    "difficulty": "simple"
  },
  {
    "question_id": 1408,
    "db_id": "student_club",
    "question": "Calculate the total cost spent for Parking in the list.",
    "predicted_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'",
    "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'",
    "difficulty": "simple"
  },
  {
    "question_id": 1409,
    "db_id": "student_club",
    "question": "Mention the total expense used on 8/20/2019.",
    "predicted_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'",
    "difficulty": "simple"
  },
  {
    "question_id": 1410,
    "db_id": "student_club",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY T1.first_name, T1.last_name",
    "gold_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
    "evidence": "full name refers to first_name, last name",
    "difficulty": "simple"
  },
  {
    "question_id": 1411,
    "db_id": "student_club",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "predicted_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1412,
    "db_id": "student_club",
    "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?",
    "predicted_sql": "SELECT T1.expense_description FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T2.t_shirt_size = 'X-Large'",
    "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'",
    "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'",
    "difficulty": "simple"
  },
  {
    "question_id": 1413,
    "db_id": "student_club",
    "question": "Mention the zip code of member who incurred less than 50USD.",
    "predicted_sql": "SELECT T2.zip FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost < 50",
    "gold_sql": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50",
    "evidence": "incurred less than 50USD refers to cost < 50",
    "difficulty": "simple"
  },
  {
    "question_id": 1414,
    "db_id": "student_club",
    "question": "State the name of major that Phillip Cullen has joined.",
    "predicted_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Phillip' AND T1.last_name = 'Cullen'",
    "gold_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'",
    "evidence": "name of major refers to major_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1415,
    "db_id": "student_club",
    "question": "List out the position of members who joined major of Business.",
    "predicted_sql": "SELECT T1.position FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business'",
    "gold_sql": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business'",
    "evidence": "'Business' is the major name",
    "difficulty": "simple"
  },
  {
    "question_id": 1416,
    "db_id": "student_club",
    "question": "How many members of Business have the Medium size of tee shirt?",
    "predicted_sql": "SELECT COUNT(*) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'",
    "evidence": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'",
    "difficulty": "simple"
  },
  {
    "question_id": 1417,
    "db_id": "student_club",
    "question": "List out the type of events which have remaining budget more than 30 USD.",
    "predicted_sql": "SELECT DISTINCT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
    "gold_sql": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30",
    "evidence": "remaining budget more than 30 USD refers to remaining > 30",
    "difficulty": "simple"
  },
  {
    "question_id": 1418,
    "db_id": "student_club",
    "question": "Mention the category of events which were held at MU 215.",
    "predicted_sql": "SELECT DISTINCT type FROM event WHERE location = 'MU 215'",
    "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "evidence": "held at MU 215 refers to location = 'MU 215'",
    "difficulty": "simple"
  },
  {
    "question_id": 1419,
    "db_id": "student_club",
    "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "predicted_sql": "SELECT category FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE event_date = '2020-03-24T12:00:00'",
    "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
    "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'",
    "difficulty": "simple"
  },
  {
    "question_id": 1420,
    "db_id": "student_club",
    "question": "State the name of major that Vice President has joined.",
    "predicted_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'",
    "gold_sql": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'",
    "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1421,
    "db_id": "student_club",
    "question": "Calculate the percentage of members who are major Business in the list?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Mathematics' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Member'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.major_name = 'Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member'",
    "evidence": "DIVIDE(SUM(position = 'Member' and major_name = 'Business'), COUNT(member_id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1422,
    "db_id": "student_club",
    "question": "State the category of events were held at MU 215.",
    "predicted_sql": "SELECT category FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE location = 'MU 215'",
    "gold_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "evidence": "'MU 215' is the location of event; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1423,
    "db_id": "student_club",
    "question": "How many income are received with an amount of 50?",
    "predicted_sql": "SELECT COUNT(DISTINCT income_id) FROM income WHERE amount = 50",
    "gold_sql": "SELECT COUNT(income_id) FROM income WHERE amount = 50",
    "evidence": "amount of 50 refers to amount = 50",
    "difficulty": "simple"
  },
  {
    "question_id": 1424,
    "db_id": "student_club",
    "question": "Among the members, how many of them have an extra large t-shirt size?",
    "predicted_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
    "gold_sql": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'",
    "evidence": "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'",
    "difficulty": "simple"
  },
  {
    "question_id": 1425,
    "db_id": "student_club",
    "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?",
    "predicted_sql": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Agriculture and Applied Sciences' AND department = 'School of Applied Sciences, Technology and Education'",
    "gold_sql": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology and Education' AND college = 'College of Agriculture and Applied Sciences'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1426,
    "db_id": "student_club",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "predicted_sql": "SELECT m.last_name, mj.department, mj.college FROM member AS m INNER JOIN major AS mj ON m.link_to_major = mj.major_id WHERE mj.major_name = 'Environmental Engineering'",
    "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "evidence": "'Environmental Engineering' is the major_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1427,
    "db_id": "student_club",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "predicted_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T1.type = 'Guest Speaker' AND T2.spent = 0",
    "gold_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1428,
    "db_id": "student_club",
    "question": "List the city and state of members enrolled under electrical and computer engineering department.",
    "predicted_sql": "SELECT T4.city, T4.state FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN zip_code AS T4 ON T2.zip = T4.zip_code WHERE T1.department = 'Electrical and Computer Engineering Department' AND T2.position = 'Member'",
    "gold_sql": "SELECT city, state FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN zip_code AS T3 ON T3.zip_code = T1.zip WHERE department = 'Electrical and Computer Engineering Department' AND position = 'Member'",
    "evidence": "'Electrical and Computer Engineering Department' is the department; members enrolled refers to position = 'Member'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1429,
    "db_id": "student_club",
    "question": "What is the name of the social event that was attended by the vice president of the Student_Club located at 900 E. Washington St.?",
    "predicted_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.type = 'Social' AND T3.position = 'Vice President' AND T1.location = '900 E. Washington St.'",
    "gold_sql": "SELECT T2.event_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T3.position = 'Vice President' AND T2.location = '900 E. Washington St.' AND T2.type = 'Social'",
    "evidence": "name of social event refers to event_name where type = 'Social'; 'Vice President' is position; located at refers to location",
    "difficulty": "challenging"
  },
  {
    "question_id": 1430,
    "db_id": "student_club",
    "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
    "predicted_sql": "SELECT T2.last_name, T2.position FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Pizza' AND T1.expense_date = '2019-09-10'",
    "gold_sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
    "evidence": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1431,
    "db_id": "student_club",
    "question": "List the last name of the members of the club that attended the women's soccer event.",
    "predicted_sql": "SELECT T2.last_name FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.position = 'Member' AND T3.event_name = \"Women's Soccer\"",
    "gold_sql": "SELECT T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'Women''s Soccer' AND T3.position = 'Member'",
    "evidence": "members of the club refers to position = 'Member'; 'Women's Soccer' is event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN I.amount = 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM member AS M INNER JOIN income AS I ON M.member_id = I.link_to_member WHERE M.t_shirt_size = 'Medium' AND M.position = 'Member'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1433,
    "db_id": "student_club",
    "question": "Which countries have zip codes with post office boxes?",
    "predicted_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box'",
    "gold_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
    "evidence": "zip codes that have post office boxes refers to type = 'PO Box'",
    "difficulty": "simple"
  },
  {
    "question_id": 1434,
    "db_id": "student_club",
    "question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?",
    "predicted_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
    "gold_sql": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'",
    "evidence": "zip codes that have post office boxes refers to type = 'PO Box'",
    "difficulty": "simple"
  },
  {
    "question_id": 1435,
    "db_id": "student_club",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "predicted_sql": "SELECT event_name FROM event WHERE type = 'Game' AND status = 'Closed' AND event_date BETWEEN '2019-03-15' AND '2020-03-20'",
    "gold_sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1436,
    "db_id": "student_club",
    "question": "Please provide links to events for members who have paid more than 50 dollar.",
    "predicted_sql": "SELECT T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.cost > 50",
    "gold_sql": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
    "evidence": "have paid more than 50 dollar refers to cost > 50",
    "difficulty": "simple"
  },
  {
    "question_id": 1437,
    "db_id": "student_club",
    "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
    "predicted_sql": "SELECT T1.link_to_member, T2.link_to_event FROM expense AS T1 INNER JOIN attendance AS T2 ON T1.link_to_member = T2.link_to_member WHERE T1.approved = 'true' AND T1.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
    "gold_sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
    "evidence": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1438,
    "db_id": "student_club",
    "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
    "predicted_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Katy' AND T1.link_to_major = 'rec1N0upiVLy5esTO'",
    "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1439,
    "db_id": "student_club",
    "question": "Please list the phone numbers of the members who majored in business at the College of Agriculture and Applied Sciences.",
    "predicted_sql": "SELECT member.phone FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND major.college = 'College of Agriculture and Applied Sciences'",
    "gold_sql": "SELECT T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Business' AND T2.college = 'College of Agriculture and Applied Sciences'",
    "evidence": "'College of Agriculture and Applied Sciences' is the college; majored in business refers to major_name = 'Business'; phone numbers refers to phone",
    "difficulty": "moderate"
  },
  {
    "question_id": 1440,
    "db_id": "student_club",
    "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "predicted_sql": "SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_date BETWEEN '2019-09-10' and '2019-11-19' and T1.cost > 20",
    "gold_sql": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
    "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20",
    "difficulty": "moderate"
  },
  {
    "question_id": 1441,
    "db_id": "student_club",
    "question": "How many members have education major in the College of Education & Human Services?",
    "predicted_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'education' AND T2.college = 'College of Education & Human Services' AND T1.position = 'Member'",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
    "evidence": "'education' is the major name; 'Member' is a position of club;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1442,
    "db_id": "student_club",
    "question": "What is the percentage of the events that went over budget?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(event_id) FROM budget INNER JOIN event ON budget.link_to_event = event.event_id",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget",
    "evidence": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100",
    "difficulty": "simple"
  },
  {
    "question_id": 1443,
    "db_id": "student_club",
    "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.",
    "predicted_sql": "SELECT event_id, location, status FROM event WHERE event_date BETWEEN '2019-11-01' and '2020-03-31'",
    "gold_sql": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-11-01' AND '2020-03-31'",
    "evidence": "event_date BETWEEN '2019-11-01' and '2020-03-31'",
    "difficulty": "simple"
  },
  {
    "question_id": 1444,
    "db_id": "student_club",
    "question": "List the expenses that spend more than fifty dollars on average.",
    "predicted_sql": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
    "gold_sql": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50",
    "evidence": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50",
    "difficulty": "simple"
  },
  {
    "question_id": 1445,
    "db_id": "student_club",
    "question": "Find the full name of members whose t-shirt size is extra large.",
    "predicted_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
    "gold_sql": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'",
    "evidence": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'",
    "difficulty": "simple"
  },
  {
    "question_id": 1446,
    "db_id": "student_club",
    "question": "Calculate the percentage of zip codes that are PO boxes.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN type = 'PO Box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code",
    "evidence": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100",
    "difficulty": "simple"
  },
  {
    "question_id": 1447,
    "db_id": "student_club",
    "question": "List the name and location of events that underspend its budget.",
    "predicted_sql": "SELECT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
    "gold_sql": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0",
    "evidence": "name of event refers to event_name; underspend its budget refers to remaining > 0",
    "difficulty": "simple"
  },
  {
    "question_id": 1448,
    "db_id": "student_club",
    "question": "Find the name and date of events with expenses for pizza that were more than fifty dollars but less than a hundred dollars.",
    "predicted_sql": "SELECT T2.event_name, T2.event_date FROM expense AS T1 INNER JOIN event AS T2 ON T1.link_to_budget = T2.event_id WHERE T1.expense_description = 'Pizza' AND T1.cost > 50 AND T1.cost < 100",
    "gold_sql": "SELECT T1.event_name, T1.event_date FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.expense_description = 'Pizza' AND T3.cost > 50 AND T3.cost < 100",
    "evidence": "name of event refers to event_name; date of event refers to event_date; expenses for pizza refers to expense_description = 'Pizza' where cost > 50 and cost < 100",
    "difficulty": "challenging"
  },
  {
    "question_id": 1449,
    "db_id": "student_club",
    "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T3.major_name FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member INNER JOIN major AS T3 ON T1.link_to_major = T3.major_id WHERE T2.cost > 100",
    "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "evidence": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1450,
    "db_id": "student_club",
    "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "predicted_sql": "SELECT T3.city, T3.county FROM event AS T1 INNER JOIN income AS T2 ON T1.event_id = T2.link_to_member INNER JOIN zip_code AS T3 ON T1.location = T3.zip_code GROUP BY T1.event_id HAVING COUNT(T2.income_id) > 40",
    "gold_sql": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
    "evidence": "more than fifty incomes refers to income > 40",
    "difficulty": "simple"
  },
  {
    "question_id": 1451,
    "db_id": "student_club",
    "question": "Among the members who incurred expenses in more than one event, who paid the most amount?",
    "predicted_sql": "SELECT M.first_name, M.last_name, SUM(E.cost) AS Total_expense FROM member AS M JOIN expense AS E ON M.member_id = E.link_to_member JOIN attendance AS A ON M.member_id = A.link_to_member GROUP BY M.member_id HAVING COUNT(DISTINCT A.link_to_event) > 1 ORDER BY Total_expense DESC LIMIT 1;",
    "gold_sql": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
    "evidence": "paid the most amount refers to for expense incurred in more than one event refers to MAX(cost where COUNT(event_id) > 1)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1452,
    "db_id": "student_club",
    "question": "What is the average amount paid by students in a position other than a member?",
    "predicted_sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position != 'Member'",
    "gold_sql": "SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN member as T2 ON T1.link_to_member = T2.member_id WHERE T2.position != 'Member'",
    "evidence": "position other than a member refers to position ! = 'Member'; average amount paid = DIVIDE( SUM(cost), COUNT(event_id))",
    "difficulty": "moderate"
  },
  {
    "question_id": 1453,
    "db_id": "student_club",
    "question": "List the name of events with less than average parking cost.",
    "predicted_sql": "SELECT DISTINCT E.event_name FROM event E INNER JOIN budget B ON E.event_id = B.link_to_event INNER JOIN expense EX ON B.budget_id = EX.link_to_budget WHERE B.category = 'Parking' AND EX.cost < (SELECT AVG(cost) FROM expense WHERE link_to_budget IN (SELECT budget_id FROM budget WHERE category = 'Parking'))",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1454,
    "db_id": "student_club",
    "question": "What is the percentage of the cost for the meeting events?",
    "predicted_sql": "SELECT CAST(SUM(T2.cost) AS REAL) * 100 / COUNT(T1.event_id) FROM event AS T1 INNER JOIN expense AS T2 ON T1.event_id = T2.link_to_budget WHERE T1.type = 'Game'",
    "gold_sql": "SELECT SUM(CASE WHEN T1.type = 'Meeting' THEN T3.cost ELSE 0 END) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "evidence": "meeting events refers to type = 'Meeting'; percentage = DIVIDE( SUM(cost), COUNT(event_id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1455,
    "db_id": "student_club",
    "question": "Which budget allowed the most money for water, chips, and cookies?",
    "predicted_sql": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "gold_sql": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "evidence": "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1456,
    "db_id": "student_club",
    "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
    "predicted_sql": "SELECT M.first_name, M.last_name FROM member AS M INNER JOIN expense AS E ON M.member_id = E.link_to_member GROUP BY M.first_name, M.last_name ORDER BY SUM(E.cost) DESC LIMIT 5",
    "gold_sql": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
    "evidence": "full name refers to first_name, last_name; spend the most money refers to MAX(expense.cost)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1457,
    "db_id": "student_club",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > ( SELECT AVG(cost) FROM expense )",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1458,
    "db_id": "student_club",
    "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
    "predicted_sql": "SELECT (SELECT COUNT(T1.member_id) FROM member as T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Maine') * 100.0 / COUNT(T1.member_id) - (SELECT COUNT(T1.member_id) FROM member as T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Vermont') * 100.0 / COUNT(T1.member_id) FROM member AS T1",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "evidence": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
    "difficulty": "moderate"
  },
  {
    "question_id": 1459,
    "db_id": "student_club",
    "question": "What is the major of Garrett Gerke and which department does it belong to?",
    "predicted_sql": "SELECT T1.major_name, T1.department FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Garrett' AND T2.last_name = 'Gerke'",
    "gold_sql": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "evidence": "major refers to major name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1460,
    "db_id": "student_club",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "predicted_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "gold_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1461,
    "db_id": "student_club",
    "question": "List the last names of students under the Elementary Education major and include their phone numbers.",
    "predicted_sql": "SELECT last_name, phone FROM member WHERE link_to_major IN ( SELECT major_id FROM major WHERE major_name = 'Elementary Education' )",
    "gold_sql": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'",
    "evidence": "'Elementary Education' is the major name; phone numbers refers to phone",
    "difficulty": "simple"
  },
  {
    "question_id": 1462,
    "db_id": "student_club",
    "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?",
    "predicted_sql": "SELECT T1.category, T1.amount FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'January Speaker'",
    "gold_sql": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'",
    "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1463,
    "db_id": "student_club",
    "question": "List the event names which were budgeted for the food.",
    "predicted_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'",
    "evidence": "budgeted for food refers to category = 'Food'",
    "difficulty": "simple"
  },
  {
    "question_id": 1464,
    "db_id": "student_club",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "predicted_sql": "SELECT M.first_name, M.last_name, I.amount FROM member AS M INNER JOIN income AS I ON M.member_id = I.link_to_member WHERE I.date_received = '2019-09-09'",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
    "difficulty": "challenging"
  },
  {
    "question_id": 1465,
    "db_id": "student_club",
    "question": "Which budget category does the expense 'Posters' fall to?",
    "predicted_sql": "SELECT T1.category FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Posters'",
    "gold_sql": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "evidence": "'Posters' refers to expense description",
    "difficulty": "simple"
  },
  {
    "question_id": 1466,
    "db_id": "student_club",
    "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Secretary'",
    "gold_sql": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'",
    "evidence": "full name refers to first_name, last name",
    "difficulty": "simple"
  },
  {
    "question_id": 1467,
    "db_id": "student_club",
    "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.",
    "predicted_sql": "SELECT T2.event_name, SUM(T1.spent) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "gold_sql": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts' GROUP BY T2.event_name",
    "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'",
    "difficulty": "simple"
  },
  {
    "question_id": 1468,
    "db_id": "student_club",
    "question": "Where is the hometown of Garrett Gerke?",
    "predicted_sql": "SELECT T1.city FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T2.first_name = 'Garrett' AND T2.last_name = 'Girke'",
    "gold_sql": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'",
    "evidence": "hometown refers to city",
    "difficulty": "simple"
  },
  {
    "question_id": 1469,
    "db_id": "student_club",
    "question": "Which student has the hometown of Lincolnton, North Carolina with the zip code of 28092? List their full name and position.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
    "gold_sql": "SELECT T1.first_name, T1.last_name, T1.position FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T2.city = 'Lincolnton' AND T2.state = 'North Carolina' AND T2.zip_code = 28092",
    "evidence": "full name refers to first_name, last_name, hometown of Lincolnton, North Carolina refers to city = 'Lincolnton' AND state = 'North Carolina'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1470,
    "db_id": "debit_card_specializing",
    "question": "How many gas stations in CZE has Premium gas?",
    "predicted_sql": "SELECT COUNT(DISTINCT gasstationid) FROM gasstations WHERE country = 'CZE' AND segment = 'Premium'",
    "gold_sql": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1471,
    "db_id": "debit_card_specializing",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "predicted_sql": "SELECT CAST(SUM(IIF(currency = 'EUR', 1, 0)) AS REAL) / CAST(SUM(IIF(currency = 'CZK', 1, 0)) AS REAL) FROM customers",
    "gold_sql": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
    "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
    "difficulty": "simple"
  },
  {
    "question_id": 1472,
    "db_id": "debit_card_specializing",
    "question": "In 2012, who had the least consumption in LAM?",
    "predicted_sql": "SELECT customers.customerid FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE yearmonth.date BETWEEN '201201' AND '201212' AND customers.segment = 'LAM' ORDER BY yearmonth.consumption ASC LIMIT 1",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1473,
    "db_id": "debit_card_specializing",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "predicted_sql": "SELECT AVG(consumption) / 12 AS 'Average Monthly Consumption' FROM yearmonth WHERE customerid IN ( SELECT customerid FROM customers WHERE segment = 'SME' ) AND date BETWEEN '201301' AND '201312'",
    "gold_sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1474,
    "db_id": "debit_card_specializing",
    "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
    "predicted_sql": "SELECT T1.customerid, SUM(T2.consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid WHERE STRFTIME('%Y', T2.date) = '2011' AND T1.currency = 'CZK' GROUP BY T1.customerid ORDER BY SUM(T2.consumption) DESC LIMIT 1",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011",
    "difficulty": "moderate"
  },
  {
    "question_id": 1475,
    "db_id": "debit_card_specializing",
    "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.customerid) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid WHERE T1.segment = 'KAM' AND T2.consumption < 30000 AND T2.date BETWEEN '201201' AND '201212'",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012",
    "difficulty": "moderate"
  },
  {
    "question_id": 1476,
    "db_id": "debit_card_specializing",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "predicted_sql": "SELECT (SELECT SUM(consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T1.date BETWEEN '201201' AND '201212' AND T2.currency = 'CZK') - (SELECT SUM(consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T1.date BETWEEN '201201' AND '201212' AND T2.currency = 'EUR') AS ConsumptionDifference",
    "gold_sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
    "difficulty": "challenging"
  },
  {
    "question_id": 1477,
    "db_id": "debit_card_specializing",
    "question": "Which year recorded the most gas use paid in EUR?",
    "predicted_sql": "SELECT STRFTIME('%Y', T3.date) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid INNER JOIN transactions_1k AS T3 ON T2.customerid = T3.customerid WHERE T1.currency = 'EUR' GROUP BY STRFTIME('%Y', T3.date) ORDER BY SUM(T2.consumption) DESC LIMIT 1",
    "gold_sql": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1478,
    "db_id": "debit_card_specializing",
    "question": "Which segment had the least consumption?",
    "predicted_sql": "SELECT segment FROM customers JOIN yearmonth ON customers.customerid = yearmonth.customerid GROUP BY segment ORDER BY SUM(consumption) ASC LIMIT 1",
    "gold_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1479,
    "db_id": "debit_card_specializing",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "predicted_sql": "SELECT SUBSTR(date, 1, 4) as year FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE currency = 'CZK' GROUP BY year ORDER BY SUM(consumption) DESC LIMIT 1",
    "gold_sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1480,
    "db_id": "debit_card_specializing",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "predicted_sql": "SELECT SUBSTR(yearmonth.date, 6, 2) as month, SUM(yearmonth.consumption) as total_consumption FROM yearmonth INNER JOIN customers ON yearmonth.customerid = customers.customerid WHERE customers.segment = 'SME' AND SUBSTR(yearmonth.date, 1, 4) = '2013' GROUP BY month ORDER BY total_consumption DESC LIMIT 1",
    "gold_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1481,
    "db_id": "debit_card_specializing",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "predicted_sql": "SELECT (SME_avg.consumption - LAM_avg.consumption) as SME_LAM_diff, (LAM_avg.consumption - KAM_avg.consumption) as LAM_KAM_diff, (KAM_avg.consumption - SME_avg.consumption) as KAM_SME_diff FROM (SELECT AVG(yearmonth.consumption) as consumption FROM yearmonth INNER JOIN customers ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'CZK' AND customers.segment = 'SME' AND substr(yearmonth.date,1,4) = '2013' ORDER BY yearmonth.consumption ASC LIMIT 1) as SME_avg, (SELECT AVG(yearmonth.consumption) as consumption FROM yearmonth INNER JOIN customers ON customers.customerid = yearmonth.customerid WHERE customers.currency = 'CZK' AND customers.segment = 'LAM' AND substr(yearmonth.date,1,4) = '2013",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
    "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "challenging"
  },
  {
    "question_id": 1482,
    "db_id": "debit_card_specializing",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "predicted_sql": "SELECT T1.segment, 100.0 * (SUM(CASE WHEN SUBSTR(T2.date, 1, 4) = '2013' THEN T2.consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(T2.date, 1, 4) = '2012' THEN T2.consumption ELSE 0 END)) / SUM(CASE WHEN SUBSTR(T2.date, 1, 4) = '2013' THEN T2.consumption ELSE 0 END) as consumption_increase FROM customers as T1 INNER JOIN yearmonth as T2 ON T1.customerid = T2.customerid WHERE T1.currency = 'EUR' AND T1.segment IN ('SME', 'LAM', 'KAM') AND SUBSTR(T2.date, 1, 4) BETWEEN '2012' AND '2013' GROUP BY T1.segment ORDER BY consumption_increase DESC, consumption_increase ASC LIMIT 3",
    "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
    "difficulty": "challenging"
  },
  {
    "question_id": 1483,
    "db_id": "debit_card_specializing",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "predicted_sql": "SELECT SUM(consumption) FROM yearmonth WHERE customerid = 6 AND SUBSTR(date, 1, 6) BETWEEN '201308' AND '201311'",
    "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
    "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1484,
    "db_id": "debit_card_specializing",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "predicted_sql": "SELECT (SELECT COUNT(gasstationid) FROM gasstations WHERE country = 'Czech Republic' AND segment = 'Discount') - (SELECT COUNT(gasstationid) FROM gasstations WHERE country = 'Slovakia' AND segment = 'Discount') AS More_Discount_GasStations",
    "gold_sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
    "evidence": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
    "difficulty": "simple"
  },
  {
    "question_id": 1485,
    "db_id": "debit_card_specializing",
    "question": "How much more was customer 7 consuming in April 2013 than customer 5?",
    "predicted_sql": "SELECT (SELECT consumption FROM yearmonth WHERE customerid = 7 AND date = '201304') - (SELECT consumption FROM yearmonth WHERE customerid = 5 AND date = '201304') AS Difference",
    "gold_sql": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'",
    "evidence": "April 2013 refers to 201304 in the yearmonth.date",
    "difficulty": "simple"
  },
  {
    "question_id": 1486,
    "db_id": "debit_card_specializing",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "predicted_sql": "SELECT (SELECT COUNT(customerid) FROM customers WHERE currency = 'Czech koruna' AND segment = 'SME') - (SELECT COUNT(customerid) FROM customers WHERE currency = 'Euro' AND segment = 'SME') AS amount_of_more_SMEs",
    "gold_sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
    "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
    "difficulty": "simple"
  },
  {
    "question_id": 1487,
    "db_id": "debit_card_specializing",
    "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
    "predicted_sql": "SELECT T2.customerid, T2.currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T2.segment= 'LAM' AND T2.currency= 'Euro' AND T1.date= '201310' ORDER BY T1.consumption DESC LIMIT 1",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "October 2013 refers to 201310 in the yearmonth.date",
    "difficulty": "moderate"
  },
  {
    "question_id": 1488,
    "db_id": "debit_card_specializing",
    "question": "Who among KAM's customers consumed the most? How much did it consume?",
    "predicted_sql": "SELECT T2.customerid, MAX(T1.consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T2.segment = 'KAM' GROUP BY T2.customerid ORDER BY MAX(T1.consumption) DESC LIMIT 1",
    "gold_sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1489,
    "db_id": "debit_card_specializing",
    "question": "How much did the KAM customers consume in total in May 2013?",
    "predicted_sql": "SELECT SUM(consumption) FROM customers INNER JOIN yearmonth ON customers.customerid = yearmonth.customerid WHERE segment = 'KAM' AND date = '201305';",
    "gold_sql": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
    "evidence": "May 2013 refers to yearmonth.date = 201305",
    "difficulty": "simple"
  },
  {
    "question_id": 1490,
    "db_id": "debit_card_specializing",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN y.consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(y.consumption) AS percentage FROM yearmonth AS y INNER JOIN customers AS c ON y.customerid = c.customerid WHERE c.segment = 'LAM'",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
    "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1491,
    "db_id": "debit_card_specializing",
    "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "predicted_sql": "SELECT country, COUNT(gasstationid) FROM gasstations WHERE segment = 'Value for money' GROUP BY country ORDER BY COUNT(gasstationid) DESC",
    "gold_sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1492,
    "db_id": "debit_card_specializing",
    "question": "What percentage of KAM customers pay in euros?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN currency = 'Euro' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(customerid) FROM customers WHERE segment = 'KAM'",
    "gold_sql": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
    "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.",
    "difficulty": "simple"
  },
  {
    "question_id": 1493,
    "db_id": "debit_card_specializing",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(customerid) FROM yearmonth WHERE date = '201202'",
    "gold_sql": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
    "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1494,
    "db_id": "debit_card_specializing",
    "question": "What percentage of Slovakian gas stations are premium?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE country = 'Slovakia'",
    "gold_sql": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
    "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.",
    "difficulty": "simple"
  },
  {
    "question_id": 1495,
    "db_id": "debit_card_specializing",
    "question": "Which client ID consumed the most in September 2013?",
    "predicted_sql": "SELECT customerid FROM yearmonth WHERE date = '201309' ORDER BY consumption DESC LIMIT 1",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "September 2013 refers to yearmonth.date = '201309'",
    "difficulty": "simple"
  },
  {
    "question_id": 1496,
    "db_id": "debit_card_specializing",
    "question": "Which client segment consumed the least in September 2013?",
    "predicted_sql": "SELECT T2.segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T1.date = '201309' GROUP BY T2.segment ORDER BY SUM(T1.consumption) ASC LIMIT 1",
    "gold_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "evidence": "September 2013 refers to yearmonth.date = '201309'",
    "difficulty": "simple"
  },
  {
    "question_id": 1497,
    "db_id": "debit_card_specializing",
    "question": "Which SME customer consumed the least in June 2012?",
    "predicted_sql": "SELECT T1.customerid FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T2.segment = 'SME' AND T1.date = '201206' ORDER BY T1.consumption ASC LIMIT 1",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "evidence": "June 2012 refers to yearmonth.date = '201206'",
    "difficulty": "simple"
  },
  {
    "question_id": 1498,
    "db_id": "debit_card_specializing",
    "question": "What is the highest monthly consumption in the year 2012?",
    "predicted_sql": "SELECT MAX(consumption) FROM yearmonth WHERE SUBSTR(date, 1, 4) = '2012'",
    "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1499,
    "db_id": "debit_card_specializing",
    "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
    "predicted_sql": "SELECT MAX(T2.consumption/12) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid WHERE T1.currency = 'euro'",
    "gold_sql": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
    "evidence": "Monthly consumption = SUM(consumption) / 12",
    "difficulty": "simple"
  },
  {
    "question_id": 1500,
    "db_id": "debit_card_specializing",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "predicted_sql": "SELECT description FROM products WHERE productid IN (SELECT productid FROM transactions_1k WHERE SUBSTR(`date`, 1, 6) = '201309')",
    "gold_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
    "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1501,
    "db_id": "debit_card_specializing",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "predicted_sql": "SELECT DISTINCT T2.country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE SUBSTR(T1.date, 1, 6) = '201306';",
    "gold_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1502,
    "db_id": "debit_card_specializing",
    "question": "Please list the chains of the gas stations with transactions in euro.",
    "predicted_sql": "SELECT DISTINCT T1.chainid FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.gasstationid = T2.gasstationid INNER JOIN customers AS T3 ON T2.customerid = T3.customerid WHERE T3.currency = 'Euro'",
    "gold_sql": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1503,
    "db_id": "debit_card_specializing",
    "question": "Please list the product description of the products bought in transactions in euro.",
    "predicted_sql": "SELECT DISTINCT T1.description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.productid = T2.productid INNER JOIN customers AS T3 ON T2.customerid = T3.customerid WHERE T3.currency = 'euro'",
    "gold_sql": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1504,
    "db_id": "debit_card_specializing",
    "question": "What is the average total price of the transactions taken place in January, 2012?",
    "predicted_sql": "SELECT AVG(price) FROM transactions_1k WHERE STRFTIME('%Y-%m', date) = '2012-01'",
    "gold_sql": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'",
    "evidence": "In January, 2012 means Date contains '2012-01'",
    "difficulty": "simple"
  },
  {
    "question_id": 1505,
    "db_id": "debit_card_specializing",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "predicted_sql": "SELECT COUNT(T1.customerid) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid WHERE T1.currency = 'euro' AND T2.consumption > 1000",
    "gold_sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
    "evidence": "Pays in euro = Currency = 'EUR'.",
    "difficulty": "simple"
  },
  {
    "question_id": 1506,
    "db_id": "debit_card_specializing",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "predicted_sql": "SELECT DISTINCT P.description FROM products P JOIN transactions_1k T ON P.productid = T.productid JOIN gasstations G ON T.gasstationid = G.gasstationid WHERE G.country = 'CZE'",
    "gold_sql": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1507,
    "db_id": "debit_card_specializing",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "predicted_sql": "SELECT DISTINCT T2.time FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.gasstationid = T2.gasstationid WHERE T1.chainid = 11",
    "gold_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1508,
    "db_id": "debit_card_specializing",
    "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
    "predicted_sql": "SELECT COUNT(T1.transactionid) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T2.country = 'CZE' AND T1.price > 1000",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
    "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
    "difficulty": "simple"
  },
  {
    "question_id": 1509,
    "db_id": "debit_card_specializing",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "predicted_sql": "SELECT COUNT(T1.transactionid) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T2.country = 'CZE' AND T1.date > '2012-01-01'",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1510,
    "db_id": "debit_card_specializing",
    "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
    "predicted_sql": "SELECT AVG(T1.price*T1.amount) as avg_total_price FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T2.country = 'CZE'",
    "gold_sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
    "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
    "difficulty": "simple"
  },
  {
    "question_id": 1511,
    "db_id": "debit_card_specializing",
    "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
    "predicted_sql": "SELECT AVG(T2.price) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid WHERE T1.currency = 'Euro'",
    "gold_sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1512,
    "db_id": "debit_card_specializing",
    "question": "Which customer paid the most in 2012/8/25?",
    "predicted_sql": "SELECT customerid FROM transactions_1k WHERE date = '2012-08-25' GROUP BY customerid ORDER BY SUM(amount) DESC LIMIT 1",
    "gold_sql": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "evidence": "'2012/8/25' can be represented by '2012-08-25'",
    "difficulty": "simple"
  },
  {
    "question_id": 1513,
    "db_id": "debit_card_specializing",
    "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
    "predicted_sql": "SELECT T2.country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T1.date = '2012-08-25' ORDER BY T1.time ASC LIMIT 1",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1",
    "evidence": "'2012/8/25' can be represented by '2012-08-25'",
    "difficulty": "simple"
  },
  {
    "question_id": 1514,
    "db_id": "debit_card_specializing",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "predicted_sql": "SELECT T1.currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid WHERE T2.date = '2012-08-24' AND T2.time = '16:25:00'",
    "gold_sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1515,
    "db_id": "debit_card_specializing",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "predicted_sql": "SELECT T2.segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.customerid = T2.customerid WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "evidence": "'2012/8/23' can be represented by '2012-08-23'",
    "difficulty": "simple"
  },
  {
    "question_id": 1516,
    "db_id": "debit_card_specializing",
    "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
    "predicted_sql": "SELECT COUNT(T2.transactionid) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid WHERE T1.currency = 'EUR' AND T2.date = '2012-08-26' AND T2.time < '13:00:00'",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
    "evidence": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1517,
    "db_id": "debit_card_specializing",
    "question": "For the earliest customer, what segment did he/she have?",
    "predicted_sql": "SELECT T1.segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid ORDER BY T2.date ASC LIMIT 1",
    "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = (SELECT MIN(Date) FROM transactions_1k)",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1518,
    "db_id": "debit_card_specializing",
    "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
    "predicted_sql": "SELECT T2.country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T1.date = '2012-08-24' AND T1.time = '12:42:00'",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
    "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database",
    "difficulty": "simple"
  },
  {
    "question_id": 1519,
    "db_id": "debit_card_specializing",
    "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
    "predicted_sql": "SELECT T1.productid FROM transactions_1k AS T1 WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "gold_sql": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
    "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database",
    "difficulty": "simple"
  },
  {
    "question_id": 1520,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
    "predicted_sql": "SELECT T1.date, SUM(T1.consumption) FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid WHERE T1.date LIKE '2012-01%' AND T2.amount = 124.05 AND T2.date = '2012-08-24' GROUP BY T1.date",
    "gold_sql": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1521,
    "db_id": "debit_card_specializing",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "predicted_sql": "SELECT COUNT(transactionid) FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T1.date = '2012-08-26' AND T1.time BETWEEN '08:00:00' AND '09:00:00' AND T2.country = 'CZE';",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1522,
    "db_id": "debit_card_specializing",
    "question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?",
    "predicted_sql": "SELECT T1.currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid WHERE T2.date LIKE '201306%' AND T2.consumption = 214582.17",
    "gold_sql": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17",
    "evidence": "June of 2013 means Date contains '201306' in the yearmonth.date of the database",
    "difficulty": "simple"
  },
  {
    "question_id": 1523,
    "db_id": "debit_card_specializing",
    "question": "Which country was the card owner of No.667467 in?",
    "predicted_sql": "SELECT T2.country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T1.cardid = 667467",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1524,
    "db_id": "debit_card_specializing",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "predicted_sql": "SELECT T2.country FROM transactions_1k AS T1 INNER JOIN customers AS T3 ON T1.customerid = T3.customerid INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid WHERE T1.date = '2012-08-24' AND T1.amount = 548.4 LIMIT 1",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'",
    "difficulty": "simple"
  },
  {
    "question_id": 1525,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.customerid) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid WHERE T2.date = '2012-08-25'",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "evidence": "'2012/8/25' can be represented by '2012-08-25'",
    "difficulty": "simple"
  },
  {
    "question_id": 1526,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "predicted_sql": "SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.`date`) = '2012' THEN T2.consumption ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.`date`) = '2013' THEN T2.consumption ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.`date`) = '2012' THEN T2.consumption ELSE 0 END) FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.customerid = T2.customerid WHERE strftime('%Y-%m-%d', T1.`date`) = '2012-08-25' AND T1.amount = 634.8",
    "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
    "difficulty": "challenging"
  },
  {
    "question_id": 1527,
    "db_id": "debit_card_specializing",
    "question": "Which gas station has the highest amount of revenue?",
    "predicted_sql": "SELECT T2.gasstationid FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.gasstationid = T2.gasstationid GROUP BY T2.gasstationid ORDER BY SUM(T1.amount*T1.price) DESC LIMIT 1",
    "gold_sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1528,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE country = 'SVK'",
    "gold_sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1529,
    "db_id": "debit_card_specializing",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "predicted_sql": "SELECT SUM(amount) FROM transactions_1k WHERE customerid = 38508 AND date LIKE '201201%'",
    "gold_sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "evidence": "January 2012 refers to the Date value = '201201'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1530,
    "db_id": "debit_card_specializing",
    "question": "Which are the top five best selling products? Please state the full name of them.",
    "predicted_sql": "SELECT p.description FROM products p JOIN transactions_1k t ON p.productid = t.productid GROUP BY p.productid ORDER BY SUM(t.amount) DESC LIMIT 5;",
    "gold_sql": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
    "evidence": "Description of products contains full name",
    "difficulty": "simple"
  },
  {
    "question_id": 1531,
    "db_id": "debit_card_specializing",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "predicted_sql": "SELECT T1.customerid, AVG(T2.price / T2.amount) as average_price, T1.currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.customerid = T2.customerid GROUP BY T1.customerid ORDER BY SUM(T2.price) DESC LIMIT 1",
    "gold_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
    "evidence": "average price per single item = Total(price) / Total(amount)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1532,
    "db_id": "debit_card_specializing",
    "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
    "predicted_sql": "SELECT T1.country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.gasstationid = T2.gasstationid INNER JOIN products AS T3 ON T2.productid = T3.productid WHERE T3.productid = 2 ORDER BY T2.price DESC LIMIT 1",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1533,
    "db_id": "debit_card_specializing",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "predicted_sql": "SELECT T3.customerid, T3.date, T3.consumption FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.productid = T2.productid INNER JOIN yearmonth AS T3 ON T3.customerid = T1.customerid WHERE T2.productid = 5 AND T1.price/T1.amount > 29 AND SUBSTR(T3.date, 0, 7) = '201208'",
    "gold_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
    "difficulty": "moderate"
  }
]