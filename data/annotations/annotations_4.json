[
  {
    "question_id": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "predicted_sql": "SELECT T1.ID, T1.Diagnosis, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) AS Age FROM Patient AS T1 JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1338,
    "db_id": "student_club",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "predicted_sql": "SELECT e.expense_id, e.approved FROM expense AS e INNER JOIN attendance AS a ON e.link_to_member = a.link_to_member INNER JOIN event AS ev ON a.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08T12:00:00'",
    "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "label": false,
    "reason": "Join Error: Should use event → budget → expense join logic to filter the expenses"
  },
  {
    "question_id": 1152,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN Admission = '-' THEN 1 END) AS REAL) / COUNT(CASE WHEN Admission = '+' THEN 1 END) AS outpatient_to_inpatient_ratio FROM Patient WHERE Diagnosis = 'SLE'",
    "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "label": true,
    "reason": "GOLD FALSE: The question is asking for the ratio of outpatient to inpatient, so should use DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '-', COUNT(ID) where Diagnosis = 'SLE' and Admission = '+'). The provided evicence is also wrong here."
  },
  {
    "question_id": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "predicted_sql": "SELECT Patient.SEX, GROUP_CONCAT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`T-BIL` >= 2.0 GROUP BY Patient.SEX",
    "gold_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "label": true,
    "reason": "The question didn't specify the output format (Ambiguous output)"
  },
  {
    "question_id": 1525,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "predicted_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.Currency = 'EUR' THEN T2.CustomerID END) AS REAL) * 100.0 / COUNT(DISTINCT T2.CustomerID) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "label": true,
    "reason": "GOLD FALSE: Since the question is asking for the percentage of customers rather than the percentage of transactions, so should use DISTINCT CustomerID"
  },
  {
    "question_id": 1219,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
    "predicted_sql": "SELECT AVG(l.ua) FROM patient AS p INNER JOIN laboratory AS l ON p.id = l.id INNER JOIN (SELECT id, MAX(date) AS latestdate FROM laboratory GROUP BY id) AS latestlab ON p.id = latestlab.id AND l.date = latestlab.latestdate WHERE (p.sex = 'M' AND l.ua < 8.0) OR (p.sex = 'F' AND l.ua < 6.5)",
    "gold_sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
    "label": true,
    "reason": "GOLD FALSE: The logic for filtering the latest date is wrong, since the latest date may be different for different patients"
  },
  {
    "question_id": 952,
    "db_id": "formula_1",
    "question": "Which constructors have been ranked 1?",
    "predicted_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1",
    "gold_sql": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
    "label": true,
    "reason": "GOLD FALSE"
  },
  {
    "question_id": 97,
    "db_id": "financial",
    "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
    "predicted_sql": "SELECT DISTINCT disp.client_id FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'",
    "gold_sql": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "predicted_sql": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 10;",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "label": false,
    "reason": "Should use MAX(overall_rating) rather than ORDER BY overall_rating DESC LIMIT 10; Should use DISTINCT to remove duplicates"
  },
  {
    "question_id": 967,
    "db_id": "formula_1",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "predicted_sql": "SELECT code, SUM(CASE WHEN nationality IN ('Netherlandic', 'Dutch') THEN 1 ELSE 0 END) AS netherlandic_count FROM (SELECT code, nationality FROM drivers ORDER BY dob ASC LIMIT 3) AS top_drivers",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "label": false,
    "reason": "GOLD FALSE: should return code numbers of top 3 youngest drivers. Should use Netherlandic as the filter condition also. The problem should state how to return the answer given there are two separate questions (Ambiguous output)"
  },
  {
    "question_id": 1419,
    "db_id": "student_club",
    "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "predicted_sql": "SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00'",
    "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
    "label": true,
    "reason": "GOLD FALSE: The column budget.category is the category of the budget rather than the event. The question should state which column means the category of event (Ambiguous question)"
  },
  {
    "question_id": 364,
    "db_id": "card_games",
    "question": "What is the status of card \"Cloudchaser Eagle\"?",
    "predicted_sql": "SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1426,
    "db_id": "student_club",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "predicted_sql": "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
    "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 248,
    "db_id": "toxicology",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "predicted_sql": "SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected AS c INNER JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR041' AND b.bond_type = '#'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 365,
    "db_id": "card_games",
    "question": "What is the type of card \"Benalish Knight\"?",
    "predicted_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight'",
    "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "label": true,
    "reason": "GOLD FALSE: should not use foreign_data.name as filter condition"
  },
  {
    "question_id": 167,
    "db_id": "financial",
    "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "predicted_sql": "SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'",
    "gold_sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 102,
    "db_id": "financial",
    "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
    "predicted_sql": "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.balance > 3000",
    "gold_sql": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
    "label": true,
    "reason": "GOLD FALSE: the gold SQL uses trans.amount>3000 as the filter condition, which means the amount in a specific transaction. However, the question is asking for accounts own an amount of money greater than 3000USD, which in fact corresponding to the trans.balance column, which reflects the latest balance of the account"
  },
  {
    "question_id": 1,
    "db_id": "california_schools",
    "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "predicted_sql": "SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS EligibleFreeRate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOCType = 'Continuation School' ORDER BY EligibleFreeRate ASC LIMIT 3",
    "gold_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
    "label": false,
    "reason": "Should use school.EdOpsCode='CON' or frpm.Educational Option Type = 'Continuation School' as the filter condition"
  },
  {
    "question_id": 401,
    "db_id": "card_games",
    "question": "What percentage of legendary frame effect cards that are only available in online game variations?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN cards.hand = '+3' THEN 1 END) AS REAL) * 100 / COUNT(cards.id) FROM cards WHERE cards.frameEffects LIKE '%legendary%';",
    "gold_sql": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
    "label": false,
    "reason": "Filter condition incorrect"
  },
  {
    "question_id": 358,
    "db_id": "card_games",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 649,
    "db_id": "codebase_community",
    "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
    "predicted_sql": "SELECT COUNT(T2.Id), T1.LastEditDate FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What is the best introductory Bayesian statistics textbook?'",
    "gold_sql": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
    "label": true,
    "reason": "GOLD FALSE: Should return the post history counts"
  },
  {
    "question_id": 516,
    "db_id": "card_games",
    "question": "How many cards did Volkan BaÇµa illustrated whose foreign language is in French?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French'",
    "gold_sql": "SELECT COUNT(T3.id) FROM ( SELECT T1.id FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.artist = 'Volkan Baǵa' AND T2.language = 'French' GROUP BY T1.id ) AS T3",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1475,
    "db_id": "debit_card_specializing",
    "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
    "predicted_sql": "SELECT COUNT(customers.CustomerID) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date >= '201201' AND yearmonth.Date <= '201212' AND yearmonth.Consumption < 30000",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
    "label": false,
    "reason": "Should calculate the total consumption of the year"
  },
  {
    "question_id": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "predicted_sql": "SELECT COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY a15 DESC LIMIT 1 OFFSET 1) AND gender = 'M'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1033,
    "db_id": "european_football_2",
    "question": "What is the average height of players born between 1990 and 1995?",
    "predicted_sql": "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
    "gold_sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 786,
    "db_id": "superhero",
    "question": "How many heroes have the highest attribute value in strength?",
    "predicted_sql": "SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = (SELECT MAX(T3.attribute_value) FROM hero_attribute AS T3 INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength')",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 808,
    "db_id": "superhero",
    "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "predicted_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
    "gold_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 652,
    "db_id": "codebase_community",
    "question": "List the post IDs and badge names of the user Samuel in 2013.",
    "predicted_sql": "SELECT DISTINCT posts.Id, badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'Samuel' AND strftime('%Y', badges.Date) = '2013' AND strftime('%Y', posts.CreaionDate) = '2013'",
    "gold_sql": "SELECT T1.PostId, T2.Name FROM postHistory AS T1 INNER JOIN badges AS T2 ON T1.UserId = T2.UserId WHERE T1.UserDisplayName = 'Samuel' AND STRFTIME('%Y', T1.CreationDate) = '2013' AND STRFTIME('%Y', T2.Date) = '2013'",
    "label": true,
    "reason": "GOLD FALSE: Should use the posts table rather than the postHistory table for filtering, should use DISTINCT to remove duplicates"
  },
  {
    "question_id": 1283,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?",
    "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 AND T1.SEX = 'M'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'",
    "label": true,
    "reason": "GOLD FALSE: Wrong evidence. According to the real database schema, glutamic pyruvic transaminase corresponds to the Laboratory.GPT column, so the predicted SQL is right."
  },
  {
    "question_id": 389,
    "db_id": "card_games",
    "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "predicted_sql": "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf';",
    "gold_sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "label": true,
    "reason": "GOLD FALSE: Should return the name of cards"
  },
  {
    "question_id": 500,
    "db_id": "card_games",
    "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "predicted_sql": "SELECT DISTINCT st.translation FROM cards AS c INNER JOIN set_translations AS st ON c.setcode = st.setcode WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese'",
    "gold_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1273,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.SSB IN ('-', '0') AND T2.Diagnosis = 'SLE'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
    "label": false,
    "reason": "Predicted SQL uses a wrong filter condition\nGOLD FALSE: Wrong grammar: WHERE T2.SSB = 'negative' OR '0', will lead to a wrong result, should be written as WHERE (T2.SSB = 'negative'  OR T1.SSB = '0')"
  },
  {
    "question_id": 990,
    "db_id": "formula_1",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "predicted_sql": "SELECT c.constructorRef, c.url  FROM constructorStandings cs  JOIN races r ON cs.raceId = r.raceId  JOIN constructors c ON cs.constructorId = c.constructorId  WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix'  ORDER BY cs.points DESC  LIMIT 1",
    "gold_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "label": false,
    "reason": "Wrong filter condition"
  },
  {
    "question_id": 1054,
    "db_id": "european_football_2",
    "question": "What is the defensive work rate of the football player David Wilson\n?",
    "predicted_sql": "SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'David Wilson'",
    "gold_sql": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 427,
    "db_id": "card_games",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "predicted_sql": "SELECT set_translations.language FROM set_translations WHERE set_translations.setCode = 'ARC';",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "label": false,
    "reason": "False Positive: wrong filter condition"
  },
  {
    "question_id": 91,
    "db_id": "financial",
    "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
    "predicted_sql": "SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996 FROM district",
    "gold_sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
    "label": true,
    "reason": "Ambiguous question (Ambiguous output)"
  },
  {
    "question_id": 814,
    "db_id": "superhero",
    "question": "List the skin colour of the superheroes with 100 attribute value.",
    "predicted_sql": "SELECT colour.colour FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;",
    "gold_sql": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1526,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "predicted_sql": "SELECT (t2012.Consumption - t2013.Consumption) / t2012.Consumption AS DecreaseRate FROM ( SELECT Consumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE `Date` = '2012-08-25' AND Amount = 634.8 ) AND `Date` = '201212' ) t2012, ( SELECT Consumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE `Date` = '2012-08-25' AND Amount = 634.8 ) AND `Date` = '201312' ) t2013",
    "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "label": false,
    "reason": "Missing aggregation: to compute the consumption for a year, need to aggregate all consumption records in that year"
  },
  {
    "question_id": 895,
    "db_id": "formula_1",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "predicted_sql": "SELECT AVG(lapTimes.time) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.driverRef = 'vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix';",
    "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "label": false,
    "reason": "Wrong filter condition, wrong return column"
  },
  {
    "question_id": 591,
    "db_id": "codebase_community",
    "question": "How many users are awarded with supporter badge during year 2011?",
    "predicted_sql": "SELECT COUNT(badges.userid) FROM badges WHERE badges.name = 'Supporter' AND STRFTIME('%Y', badges.date) = '2011'",
    "gold_sql": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 483,
    "db_id": "card_games",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "predicted_sql": "SELECT fd.text FROM sets AS s INNER JOIN cards AS c ON c.setcode = s.code INNER JOIN foreign_data AS fd ON fd.uuid = c.uuid WHERE s.name = 'Coldsnap' AND fd.language = 'Italian'",
    "gold_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 939,
    "db_id": "formula_1",
    "question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
    "predicted_sql": "SELECT COUNT(DISTINCT d.driverid) AS driver_count FROM drivers AS d INNER JOIN results AS r ON d.driverid = r.driverid INNER JOIN races AS ra ON r.raceid = ra.raceid WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND d.nationality = 'British'",
    "gold_sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1216,
    "db_id": "thrombosis_prediction",
    "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
    "predicted_sql": "SELECT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 176,
    "db_id": "financial",
    "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "predicted_sql": "SELECT loan.amount, loan.status FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.client_id = 992 AND loan.status = 'D'",
    "gold_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
    "label": false,
    "reason": "Unnecessary filter condition (loan.status = 'D') leads to a wrong result"
  },
  {
    "question_id": 1457,
    "db_id": "student_club",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T1.phone FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.first_name, T1.last_name, T1.phone HAVING SUM(T2.cost) > (SELECT AVG(cost) FROM expense)",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "label": false,
    "reason": "False Positive: wrong filter condition"
  },
  {
    "question_id": 621,
    "db_id": "codebase_community",
    "question": "What are the name of badges that users who have the lowest reputation obtained?",
    "predicted_sql": "SELECT DISTINCT badges.Name FROM badges INNER JOIN users ON badges.UserId = users.Id WHERE users.Reputation = (SELECT MIN(Reputation) FROM users) AND badges.Name IS NOT NULL;",
    "gold_sql": "SELECT T2.Name, T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Reputation = (SELECT MIN(Reputation) FROM users)",
    "label": true,
    "reason": "GOLD FALSE: missing DISTINCT keyword"
  },
  {
    "question_id": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "predicted_sql": "SELECT Player.player_name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high';",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1249,
    "db_id": "thrombosis_prediction",
    "question": "Please list the disease names of the patients that have a proteinuria level higher than normal.",
    "predicted_sql": "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.\"U-PRO\" >= 30",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30",
    "label": true,
    "reason": "GOLD FALSE: missing DISTINCT keyword"
  },
  {
    "question_id": 163,
    "db_id": "financial",
    "question": "Which district has the most accounts with loan contracts finished with no problems?",
    "predicted_sql": "SELECT d.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.loan_id) DESC LIMIT 1",
    "gold_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
    "label": true,
    "reason": "Ambiguous output"
  },
  {
    "question_id": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "predicted_sql": "SELECT T1.year, AVG(SUBSTR(T2.time, 1, 2) * 3600 + SUBSTR(T2.time, 4, 2) * 60 + SUBSTR(T2.time, 7, 2) + SUBSTR(T2.time, 10, 3) * 0.001) AS average_seconds FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL GROUP BY T1.year",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "label": false,
    "reason": "Wrong filter condition"
  },
  {
    "question_id": 846,
    "db_id": "formula_1",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "predicted_sql": "SELECT DISTINCT t2.driverref FROM qualifying AS t1 INNER JOIN drivers AS t2 ON t1.driverid = t2.driverid WHERE t1.raceid = 20 ORDER BY t1.q1 DESC LIMIT 5",
    "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 398,
    "db_id": "card_games",
    "question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "predicted_sql": "SELECT SUM(CAST(REPLACE(REPLACE(manaCost, '{', ''), '}', '') AS INTEGER)) FROM cards WHERE artist = 'Rob Alexander'",
    "gold_sql": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "label": false,
    "reason": "GOLD FALSE: Should add manaCost IS NOT NULL"
  },
  {
    "question_id": 259,
    "db_id": "toxicology",
    "question": "How many elements are there for single bond molecules?",
    "predicted_sql": "SELECT COUNT(DISTINCT atom.element) AS element_count FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '-'",
    "gold_sql": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "label": true,
    "reason": "GOLD FALSE: Wrong JOIN logic, all atoms in any molecule containing single bonds will be counted."
  },
  {
    "question_id": 562,
    "db_id": "codebase_community",
    "question": "For the post which got 1910 view counts, how many comments does it get?",
    "predicted_sql": "SELECT CommentCount FROM posts WHERE ViewCount = 1910",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "label": true,
    "reason": "GOLD FALSE: Since the question is asking for how many comments, so should return SELECT COUNT(comments.Id)"
  },
  {
    "question_id": 710,
    "db_id": "codebase_community",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "predicted_sql": "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CommentCount = 1) AND Score = 0",
    "gold_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "label": true,
    "reason": "GOLD FALSE: Since the question is asking for how many of the comments have 0 score, so the filter condition should be comments.Score=0 rather than posts.Score = 0"
  },
  {
    "question_id": 1006,
    "db_id": "formula_1",
    "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
    "predicted_sql": "SELECT lapTimes.time FROM lapTimes ORDER BY lapTimes.time ASC LIMIT 1;",
    "gold_sql": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
    "label": false,
    "reason": "Predict SQL should transform the lapTimes.time to milliseconds, or just use the lapTimes.milliseconds column\nGOLD FALSE: Wrong Calculation, the correct result should be 1:07.411"
  },
  {
    "question_id": 400,
    "db_id": "card_games",
    "question": "Lists the set code of all cards translated into Spanish.",
    "predicted_sql": "SELECT DISTINCT setcode FROM set_translations WHERE language = 'Spanish'",
    "gold_sql": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1449,
    "db_id": "student_club",
    "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1022,
    "db_id": "european_football_2",
    "question": "What is the preferred foot when attacking of the player with the lowest potential?",
    "predicted_sql": "SELECT Player_Attributes.preferred_foot FROM Player_Attributes WHERE Player_Attributes.potential = (SELECT MIN(Player_Attributes.potential) FROM Player_Attributes);",
    "gold_sql": "SELECT preferred_foot FROM Player_Attributes WHERE penalties AND potential = (SELECT MIN(potential) FROM Player_Attributes)",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 913,
    "db_id": "formula_1",
    "question": "In which country can I find the circuit with the highest altitude?",
    "predicted_sql": "SELECT circuits.country, circuits.name FROM circuits ORDER BY circuits.alt DESC LIMIT 1",
    "gold_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 431,
    "db_id": "card_games",
    "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "predicted_sql": "SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND st.language = 'Japanese'",
    "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 139,
    "db_id": "financial",
    "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
    "predicted_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'disponent'",
    "gold_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
    "label": false,
    "reason": "Wrong filter condition, which should be type = 'OWNER'"
  },
  {
    "question_id": 525,
    "db_id": "card_games",
    "question": "Find the uuid of cards in which the old school format is restricted or banned.",
    "predicted_sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND status IN ('banned', 'restricted')",
    "gold_sql": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')",
    "label": true,
    "reason": "Wrong evidence and database schema provided, leading to wrong prediction"
  },
  {
    "question_id": 515,
    "db_id": "card_games",
    "question": "When was the oldest mythic card released and what are its legal play formats?",
    "predicted_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate ASC LIMIT 1",
    "gold_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' AND T1.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal')",
    "label": false,
    "reason": "Missing originalReleaseDate IS NOT NULL & should not use order by limit 1"
  },
  {
    "question_id": 685,
    "db_id": "codebase_community",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "predicted_sql": "SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id IN ( SELECT PostId FROM postHistory WHERE Text = 'Computer Game Datasets' )",
    "gold_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "label": false,
    "reason": "Should find LastEditorUserId instead of OwnerUserId"
  },
  {
    "question_id": 50,
    "db_id": "california_schools",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "predicted_sql": "SELECT T2.Street, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 5, 1",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "label": false,
    "reason": "Should use LIMIT 6, 1"
  },
  {
    "question_id": 340,
    "db_id": "card_games",
    "question": "Which are the cards that have incredibly powerful foils.",
    "predicted_sql": "SELECT cards.name FROM cards WHERE cards.cardKingdomId IS NOT NULL AND cards.cardKingdomFoilId = cards.cardKingdomId;",
    "gold_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
    "label": false,
    "reason": "Wrong filter condition\nAmbiguous question (output format)"
  },
  {
    "question_id": 1160,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient had total protein not within the normal range?",
    "predicted_sql": "SELECT CAST(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Patient.SEX = 'F') AS REAL) as percentage FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.5);",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "label": false,
    "reason": "Predicted SQL miss DISTINCT in the count function. GOLD FALSE: COUNT(*) is the total number of female patient lab records, but we should use the total number of female patients as the denominator"
  },
  {
    "question_id": 1455,
    "db_id": "student_club",
    "question": "Which budget allowed the most money for water, chips, and cookies?",
    "predicted_sql": "SELECT MAX(expense.cost) FROM expense WHERE expense.expense_description = 'Water, chips, cookies';",
    "gold_sql": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "label": false,
    "reason": "Wrong return results & should join the budget and expense table"
  },
  {
    "question_id": 1318,
    "db_id": "student_club",
    "question": "What is the event that has the highest attendance of the students from the Student_Club?",
    "predicted_sql": "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY attendance.link_to_event, event.event_name ORDER BY COUNT(member.member_id) DESC LIMIT 1",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name HAVING COUNT(T2.link_to_event) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS subquery)",
    "label": false,
    "reason": "Using LIMIT 1 cann't handle cases where more than one event should return"
  },
  {
    "question_id": 81,
    "db_id": "california_schools",
    "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
    "predicted_sql": "SELECT s.City, f.\"Low Grade\", s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.State = 'CA' ORDER BY s.Latitude ASC LIMIT 1",
    "gold_sql": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' AND T2.Latitude IS NOT NULL AND T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA' AND Latitude IS NOT NULL)",
    "label": false,
    "reason": "Should use Latitude IS NOT NULL to filter"
  },
  {
    "question_id": 599,
    "db_id": "codebase_community",
    "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "predicted_sql": "SELECT PostHistoryTypeId FROM postHistory WHERE PostId = 3720 UNION SELECT COUNT(DISTINCT UserId) AS UniqueUserCount FROM comments WHERE PostId = 3720",
    "gold_sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
    "label": false,
    "reason": "Predicted SQL: Wrong return format\nGOLD FALSE: Wrong return format (Ambiguous output)"
  },
  {
    "question_id": 327,
    "db_id": "toxicology",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T1.molecule_id) > 5",
    "gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 742,
    "db_id": "superhero",
    "question": "How many vampire superheroes are there?",
    "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "gold_sql": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 546,
    "db_id": "codebase_community",
    "question": "Please list the display names of all the users who owns a post that is well-finished.",
    "predicted_sql": "SELECT DISTINCT users.displayname FROM users INNER JOIN posts ON users.id = posts.owneruserid WHERE NOT posts.closeddate IS NULL",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL",
    "label": true,
    "reason": "GOLD FALSE: Missing DISTINCT keyword"
  },
  {
    "question_id": 957,
    "db_id": "formula_1",
    "question": "How many Italian drivers haven't finished the race?",
    "predicted_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Italian' AND T2.milliseconds IS NULL",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 109,
    "db_id": "financial",
    "question": "How many clients opened their accounts in Jesenik branch were women?",
    "predicted_sql": "SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.A2 = 'Jesenik' AND T4.gender = 'F'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
    "label": false,
    "reason": "Predicted SQL: Should return count(client_id)\nGOLD FALSE: account district != client district, so should not use client district as the filtering criterion"
  },
  {
    "question_id": 1034,
    "db_id": "european_football_2",
    "question": "List the players' api id who had the highest above average overall ratings in 2010.",
    "predicted_sql": "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' AND overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%' )",
    "gold_sql": "SELECT p.player_api_id FROM Player_Attributes AS p WHERE SUBSTR(p.date, 1, 4) = '2010' AND p.overall_rating = (SELECT MAX(pa.overall_rating) FROM Player_Attributes AS pa WHERE SUBSTR(pa.date, 1, 4) = '2010')",
    "label": false,
    "reason": "Wrong filter condition, should use max(overall_rating) as provided in the evidence"
  },
  {
    "question_id": 1501,
    "db_id": "debit_card_specializing",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "predicted_sql": "SELECT DISTINCT gasstations.Country FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE strftime('%Y%m', transactions_1k.Date) = '201306';",
    "gold_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "label": true,
    "reason": "GOLD FALSE: Filter date on the wrong table and column"
  },
  {
    "question_id": 83,
    "db_id": "california_schools",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "predicted_sql": "SELECT City, COUNT(School) FROM schools WHERE GSoffered = 'K-8' AND Magnet = 1 GROUP BY City",
    "gold_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "label": false,
    "reason": "Missing filter on  `NSLP Provision Status` = 'Multiple Provision Types'"
  },
  {
    "question_id": 363,
    "db_id": "card_games",
    "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
    "predicted_sql": "SELECT COUNT(c.id) FROM cards c INNER JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Restricted' AND c.isStarter = 1",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
    "label": false,
    "reason": "Missing DISTINCT in the count function"
  },
  {
    "question_id": 522,
    "db_id": "card_games",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "predicted_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
    "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1512,
    "db_id": "debit_card_specializing",
    "question": "Which customer paid the most in 2012/8/25?",
    "predicted_sql": "SELECT \"transactions_1k\".\"CustomerID\" FROM \"transactions_1k\" WHERE \"transactions_1k\".\"Date\" = '2012-08-25' GROUP BY \"transactions_1k\".\"CustomerID\" ORDER BY SUM(\"transactions_1k\".\"Amount\" * \"transactions_1k\".\"Price\") DESC LIMIT 1",
    "gold_sql": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "label": true,
    "reason": "GOLD FALSE: total price = Amount x Price, so should use ORDER BY SUM(\"transactions_1k\".\"Amount\" * \"transactions_1k\".\"Price\")"
  },
  {
    "question_id": 899,
    "db_id": "formula_1",
    "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "predicted_sql": "SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.name HAVING COUNT(r.raceId) = 4",
    "gold_sql": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 638,
    "db_id": "codebase_community",
    "question": "List all the name of users that obtained the Organizer Badges.",
    "predicted_sql": "SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "label": true,
    "reason": "GOLD FALSE: Should use DISTINCT to remove duplicates"
  },
  {
    "question_id": 758,
    "db_id": "superhero",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "predicted_sql": "SELECT c.colour FROM superhero s JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'Human'",
    "gold_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 603,
    "db_id": "codebase_community",
    "question": "What is the sum of favourite count gained by user ID 686 in 2011?",
    "predicted_sql": "SELECT SUM(FavoriteCount) FROM posts WHERE OwnerUserId = 686 AND strftime('%Y', CreaionDate) = '2011'",
    "gold_sql": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )",
    "label": true,
    "reason": "GOLD FALSE: Using postHistory.UserId will count the posts where user 686 just updated the post. In addition, using distinct in the sum function will filter out the posts with the same favorite count"
  },
  {
    "question_id": 359,
    "db_id": "card_games",
    "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "predicted_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1145,
    "db_id": "european_football_2",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "label": false,
    "reason": "Should use limit 4"
  },
  {
    "question_id": 528,
    "db_id": "card_games",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "predicted_sql": "SELECT cards.name, legalities.format FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal'",
    "gold_sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
    "label": false,
    "reason": "Should not use legalities.status = 'Legal' as the global filter condition"
  },
  {
    "question_id": 440,
    "db_id": "card_games",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "predicted_sql": "SELECT set_translations.language FROM set_translations WHERE set_translations.translation = 'A Pedra Fellwar';",
    "gold_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "label": false,
    "reason": "Wrong filter condition"
  },
  {
    "question_id": 637,
    "db_id": "codebase_community",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "predicted_sql": "SELECT DISTINCT T2.Tags FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0",
    "gold_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "label": true,
    "reason": "GOLD FALSE: Should use the DISTINCT keyword to remove duplicates"
  },
  {
    "question_id": 1065,
    "db_id": "european_football_2",
    "question": "Please list all team names which the speed class is fast.",
    "predicted_sql": "SELECT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';",
    "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 249,
    "db_id": "toxicology",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "predicted_sql": "SELECT a1.element, a2.element FROM connected JOIN atom AS a1 ON connected.atom_id = a1.atom_id JOIN atom AS a2 ON connected.atom_id2 = a2.atom_id WHERE connected.bond_id = 'TR144_8_19'",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "label": true,
    "reason": "Note: Ambiguous format"
  },
  {
    "question_id": 230,
    "db_id": "toxicology",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "predicted_sql": "SELECT T2.element, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'",
    "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 730,
    "db_id": "superhero",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T4.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "label": false,
    "reason": "Wrong return: should return the superhero instead of a percentage"
  },
  {
    "question_id": 418,
    "db_id": "card_games",
    "question": "What kind of printing is on the card that Daren Bader created?",
    "predicted_sql": "SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader';",
    "gold_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 306,
    "db_id": "toxicology",
    "question": "Which molecules have triple bonds and list all the elements they contain.",
    "predicted_sql": "SELECT atom.element, atom.molecule_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' GROUP BY atom.molecule_id, atom.element",
    "gold_sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "label": false,
    "reason": "Only selected the atoms in the triple bonds instead of all the elements in the molecule"
  },
  {
    "question_id": 1041,
    "db_id": "european_football_2",
    "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "predicted_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date LIKE '2014%' GROUP BY T2.team_long_name HAVING SUM(T1.chanceCreationPassing) / COUNT(T1.id) < ( SELECT CAST(SUM(chanceCreationPassing) AS REAL) / COUNT(id) FROM Team_Attributes WHERE date LIKE '2014%' ) ORDER BY SUM(T1.chanceCreationPassing) DESC",
    "gold_sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "label": false,
    "reason": "Predicted SQL: Missing the dribbling class filter condition in the sub-query\nGOLD FALSE: 1. Missing the 2014 filter condition in the main query, 2. do comparison and ranking using chance creation passing rather than average chance creation passing, which is different from the intent of the question"
  },
  {
    "question_id": 318,
    "db_id": "toxicology",
    "question": "What is the molecule id of bond id TR001_1_7?",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A11 > 10000",
    "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "label": true,
    "reason": "GOLD FALSE: the filter condition of with an average salary of over 10000 should be on district (Ambiguous question)"
  },
  {
    "question_id": 1499,
    "db_id": "debit_card_specializing",
    "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
    "predicted_sql": "SELECT MAX(MonthlyConsumption) FROM (SELECT SUM(T2.Consumption)/12.0 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID)",
    "gold_sql": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 832,
    "db_id": "superhero",
    "question": "Name the tallest superhero.",
    "predicted_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "gold_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "predicted_sql": "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM Player WHERE height < 180) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "label": false,
    "reason": "Predicted SQL: Missing DISTINCT keyword. GOLD FALSE: Missing DISTINCT keyword"
  },
  {
    "question_id": 421,
    "db_id": "card_games",
    "question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
    "predicted_sql": "SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name LIMIT 3",
    "gold_sql": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 214,
    "db_id": "toxicology",
    "question": "What type of label is not on molecules with atoms with tin?",
    "predicted_sql": "SELECT DISTINCT T2.label FROM molecule AS T2 WHERE T2.molecule_id NOT IN (SELECT T1.molecule_id FROM atom AS T1 WHERE T1.element = 'Sn')",
    "gold_sql": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'",
    "label": false,
    "reason": "Both predicted and gold SQL are incorrect"
  },
  {
    "question_id": 298,
    "db_id": "toxicology",
    "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "label": false,
    "reason": "Predicted SQL: Missing DISTINCT keyword. GOLD FALSE: Missing DISTINCT keyword. Note: Ambiguous question"
  },
  {
    "question_id": 197,
    "db_id": "toxicology",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "predicted_sql": "SELECT AVG(oxygen_count) FROM (SELECT COUNT(CASE WHEN T2.element = 'o' THEN 1 ELSE NULL END) AS oxygen_count FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' GROUP BY T1.molecule_id)",
    "gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "label": false,
    "reason": "Predicted SQL: Repeated Counting\nGOLD FALSE: Repeated Counting"
  },
  {
    "question_id": 1035,
    "db_id": "european_football_2",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "predicted_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "predicted_sql": "SELECT t2.date, STRFTIME('%Y', t1.\"First Date\") - STRFTIME('%Y', t1.birthday) AS age FROM patient AS t1 INNER JOIN laboratory AS t2 ON t1.id = t2.id WHERE t1.diagnosis = 'SJS' ORDER BY t1.birthday ASC LIMIT 1",
    "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1487,
    "db_id": "debit_card_specializing",
    "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
    "predicted_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "label": false,
    "reason": "Should use ORDER BY SUM(T2.Consumption)"
  },
  {
    "question_id": 504,
    "db_id": "card_games",
    "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
    "predicted_sql": "SELECT COUNT(*) FROM sets s JOIN cards c ON s.code = c.setCode WHERE s.name = 'World Championship Decks 2004' AND c.convertedManaCost = 3",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 954,
    "db_id": "formula_1",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "predicted_sql": "SELECT (CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS completion_percentage FROM races T1 INNER JOIN results T2 ON T1.raceId = T2.raceId INNER JOIN drivers T3 ON T2.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T1.year BETWEEN 2007 AND 2009",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 1509,
    "db_id": "debit_card_specializing",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "predicted_sql": "SELECT COUNT(*) FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 594,
    "db_id": "codebase_community",
    "question": "Which user created post ID 1 and what is the reputation of this user?",
    "predicted_sql": "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1",
    "gold_sql": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "label": true,
    "reason": "Ambiguous output"
  },
  {
    "question_id": 1482,
    "db_id": "debit_card_specializing",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "predicted_sql": "WITH segment_stats AS ( SELECT T1.Segment, (SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2013' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2012' THEN T2.Consumption ELSE 0 END)) * 100.0 / SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2012' THEN T2.Consumption ELSE 0 END) AS percentage_increase FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T1.Currency = 'EUR' GROUP BY T1.Segment ) SELECT * FROM ( SELECT 'Highest Increase' AS result_type, Segment, percentage_increase FROM segment_stats ORDER BY percentage_increase DESC LIMIT 1 ) AS highest UNION ALL SELECT * FROM ( SELECT 'Lowest Increase' AS result_type, Segment, percentage_increase FROM segment_stats ORDER BY percentage_increase ASC LIMIT 1 ) AS lowest;",
    "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "label": true,
    "reason": "GOLD FALSE: Missing filter condition: Currency = 'EUR', wrong return format\nNote: Wrong evidence, Percentage of Increase should be (Increase or Decrease / consumption for 2012) * 100%"
  },
  {
    "question_id": 65,
    "db_id": "california_schools",
    "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM schools WHERE County = 'Santa Clara'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
    "label": false,
    "reason": "Missing a filter condition: Charter = 1\nNote: ambiguous question (how to calculate?)"
  },
  {
    "question_id": 394,
    "db_id": "card_games",
    "question": "How many white bordered cards are powerful?",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "label": false,
    "reason": "Wrong filter condition"
  },
  {
    "question_id": 1387,
    "db_id": "student_club",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "predicted_sql": "SELECT DISTINCT T4.first_name ,  T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "gold_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "label": true,
    "reason": "GOLD FALSE: Missing DISTINCT keyword"
  },
  {
    "question_id": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "predicted_sql": "SELECT STRFTIME('%Y', DATETIME('now')) - STRFTIME('%Y', p.birthday) AS age FROM player_attributes AS pa INNER JOIN player AS p ON pa.player_api_id = p.player_api_id WHERE pa.sprint_speed >= 97 AND STRFTIME('%Y', pa.date) BETWEEN '2013' AND '2015'",
    "gold_sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 245,
    "db_id": "toxicology",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "predicted_sql": "SELECT AVG(bond_count) FROM (     SELECT a.atom_id, COUNT(c.bond_id) as bond_count     FROM atom a     JOIN connected c ON a.atom_id = c.atom_id     WHERE a.element = 'i'     GROUP BY a.atom_id ) as iodine_atoms",
    "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 938,
    "db_id": "formula_1",
    "question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
    "predicted_sql": "SELECT T3.forename, T3.surname, T3.url FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.position = 1",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 367,
    "db_id": "card_games",
    "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "predicted_sql": "SELECT cards.artist FROM set_translations INNER JOIN cards ON set_translations.setCode = cards.setCode WHERE set_translations.language = 'Phyrexian';",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "label": false,
    "reason": "Lack of enough information regarding the illustrated card art in Phyrexian (Ambiguous column)"
  },
  {
    "question_id": 1071,
    "db_id": "european_football_2",
    "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "predicted_sql": "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 584,
    "db_id": "codebase_community",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "predicted_sql": "SELECT comments.text FROM comments INNER JOIN posthistory ON comments.userid = posthistory.userid INNER JOIN posts ON posthistory.postid = posts.id WHERE posts.title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "gold_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "label": true,
    "reason": "GOLD FALSE: Wrong Join logic: should be posts -> posthistory -> comments"
  },
  {
    "question_id": 1527,
    "db_id": "debit_card_specializing",
    "question": "Which gas station has the highest amount of revenue?",
    "predicted_sql": "SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY SUM(amount * price) DESC LIMIT 1",
    "gold_sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "label": true,
    "reason": "GOLD FALSE: Should use SUM(amount * price) for the ranking"
  },
  {
    "question_id": 1087,
    "db_id": "european_football_2",
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "predicted_sql": "SELECT COUNT(*) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 AND pa.volleys > 70",
    "gold_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "label": false,
    "reason": "Missing DISTINCT keyword"
  },
  {
    "question_id": 250,
    "db_id": "toxicology",
    "question": "Of all the carcinogenic molecules, which one has the most double bonds?",
    "predicted_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1",
    "gold_sql": "SELECT T.molecule_id FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id) AS subquery) ORDER BY bond_count DESC) AS T",
    "label": false,
    "reason": "Using LIMIT 1 will limit only 1 result of all possible results"
  },
  {
    "question_id": 228,
    "db_id": "toxicology",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) FROM atom WHERE molecule_id = 'TR206'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "label": false,
    "reason": "Wrong return format (Should specify four decimal places specifically)"
  },
  {
    "question_id": 1458,
    "db_id": "student_club",
    "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
    "predicted_sql": "SELECT ROUND(((CAST(SUM(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL)) - (CAST(SUM(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL))) * 100, 2) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member';",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "label": false,
    "reason": "Predicted SQL: wrong filter: state = 'Maine'\nGOLD FALSE: missing filter on position = 'Member'"
  },
  {
    "question_id": 300,
    "db_id": "toxicology",
    "question": "What atoms comprise TR186?",
    "predicted_sql": "SELECT element FROM atom WHERE molecule_id = 'TR186'",
    "gold_sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
    "label": true,
    "reason": "Ambiguous question (ambiguous output)"
  },
  {
    "question_id": 411,
    "db_id": "card_games",
    "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
    "predicted_sql": "SELECT artist FROM cards WHERE uuid = ( SELECT uuid FROM foreign_data WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation' )",
    "gold_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
    "label": false,
    "reason": "Note: Ambiguous question (Ambiguous column)"
  },
  {
    "question_id": 321,
    "db_id": "toxicology",
    "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
    "predicted_sql": "SELECT molecule_id FROM atom WHERE atom_id IN ('TR000_2', 'TR000_4')",
    "gold_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
    "label": false,
    "reason": "Wrong filter condition"
  },
  {
    "question_id": 72,
    "db_id": "california_schools",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "predicted_sql": "SELECT SUM(frpm.\"Enrollment (Ages 5-17)\") FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"Academic Year\" = '2014-2015' AND schools.city = 'Fremont' AND schools.edopscode = 'SSS'",
    "gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "label": true,
    "reason": "GOLD FALSE: Wrong return format, should return total number"
  },
  {
    "question_id": 1050,
    "db_id": "european_football_2",
    "question": "What is the preferred foot when attacking of the youngest football player?",
    "predicted_sql": "SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id ORDER BY T1.birthday DESC LIMIT 1",
    "gold_sql": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
    "label": true,
    "reason": ""
  },
  {
    "question_id": 992,
    "db_id": "formula_1",
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "predicted_sql": "SELECT forename || ' ' || surname AS fullname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "gold_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "label": true,
    "reason": "Ambiguous Question (Ambiguous output format)"
  },
  {
    "question_id": 28,
    "db_id": "california_schools",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "predicted_sql": "SELECT T2.School, T2.DOCType FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > ( SELECT AVG(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' )",
    "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "label": true,
    "reason": "Ambiguous question (Ambiguous output format)"
  },
  {
    "question_id": 1014,
    "db_id": "formula_1",
    "question": "Please list the lap records for the circuits in Italy.",
    "predicted_sql": "SELECT c.name AS circuit_name, MIN(l.time) AS fastest_lap_time FROM laptimes AS l INNER JOIN races AS r ON l.raceid = r.raceid INNER JOIN circuits AS c ON r.circuitid = c.circuitid WHERE c.country = 'Italy' GROUP BY c.circuitid, c.name",
    "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "label": false,
    "reason": "Predicted SQL: Using MIN(l.time) will do string comparison rather than real time\nGOLD FALSE: there are multiple valid results, but it only returns 1 result"
  },
  {
    "question_id": 529,
    "db_id": "card_games",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "predicted_sql": "SELECT T1.name FROM sets AS T1 WHERE EXISTS (SELECT 1 FROM set_translations AS T2 WHERE T1.code = T2.setCode AND T2.language = 'Korean') AND NOT EXISTS (SELECT 1 FROM set_translations AS T3 WHERE T1.code = T3.setCode AND T3.language LIKE '%Japanese%')",
    "gold_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "label": true,
    "reason": "GOLD FALSE: Only checking a single record that is a Korean translation but not a Japanese translation is not enough, can't eliminate the sets having other Japanese translations (some sets may have Korean and Japanese records separately)"
  },
  {
    "question_id": 1253,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
    "predicted_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGA BETWEEN 80 AND 500 ORDER BY Laboratory.IGA DESC LIMIT 1",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)",
    "label": false,
    "reason": "Using LIMIT 1 will exclude other valid results"
  },
  {
    "question_id": 433,
    "db_id": "card_games",
    "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.isOnlineOnly) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Chinese Simplified'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
    "label": false,
    "reason": "Wrong calculation\nGOLD FALSE: Should use DISTINCT inside the sum and count functions\nNote: wrong evidence provided\nAmbiguous question (how to calculate)"
  },
  {
    "question_id": 27,
    "db_id": "california_schools",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "predicted_sql": "SELECT T1.School, T2.AvgScrWrite, T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE STRFTIME('%Y', T1.OpenDate) > '1991' OR STRFTIME('%Y', T1.ClosedDate) < '2000'",
    "gold_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
    "label": true,
    "reason": "GOLD FALSE: Using Left Join will include schools that lack records in the stascores table, which is not aligned with the intent"
  },
  {
    "question_id": 1450,
    "db_id": "student_club",
    "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "predicted_sql": "SELECT T1.location, T5.city, T5.county FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN income AS T3 ON T3.link_to_member = T2.link_to_member INNER JOIN zip_code AS T5 ON T1.location = T5.zip_code GROUP BY T1.location, T5.city, T5.county HAVING COUNT(T3.income_id) > 40",
    "gold_sql": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
    "label": false,
    "reason": "Wrong Join and filter condition"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "predicted_sql": "SELECT strftime('%Y', T1.`Examination Date`) - strftime('%Y', T3.Birthday) AS age, T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Patient AS T3 ON T1.ID = T3.ID ORDER BY T2.HGB DESC LIMIT 1;",
    "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "label": true,
    "reason": "GOLD FALSE: Should use  SUBTRACT(year(`Examination Date`), year(Birthday))"
  }
]