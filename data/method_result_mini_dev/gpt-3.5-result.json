[
  {
    "question_id": 1471,
    "db_id": "debit_card_specializing",
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN c.Currency = 'EUR' THEN 1 END) * 1.0) /\n    NULLIF(COUNT(CASE WHEN c.Currency = 'CZK' THEN 1 END), 0) AS ratio_of_customers\nFROM customers c;",
    "gold_sql": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
    "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
    "difficulty": "simple"
  },
  {
    "question_id": 1472,
    "db_id": "debit_card_specializing",
    "question": "In 2012, who had the least consumption in LAM?",
    "predicted_sql": "WITH total_consumption AS (\n    SELECT y.CustomerID, c.Segment, y.Consumption\n    FROM yearmonth y\n    JOIN customers c ON y.CustomerID = c.CustomerID\n    WHERE y.Date BETWEEN '201201' AND '201212'\n    AND c.Segment = 'LAM'\n)\nSELECT t.CustomerID\nFROM total_consumption t\nWHERE t.Consumption = (SELECT MIN(Consumption) FROM total_consumption);",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1473,
    "db_id": "debit_card_specializing",
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "predicted_sql": "SELECT AVG(C.yearly_consumption) as avg_monthly_consumption\nFROM (\n    SELECT SUM(Y.Consumption) as yearly_consumption\n    FROM yearmonth Y\n    JOIN customers C ON Y.CustomerID = C.CustomerID\n    WHERE Y.Date BETWEEN '201301' AND '201312'\n    AND C.Segment = 'SME'\n    GROUP BY Y.CustomerID\n) C;",
    "gold_sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1476,
    "db_id": "debit_card_specializing",
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "predicted_sql": "WITH czk_consumption_2012 AS (\n    SELECT SUM(y.Consumption) AS czk_consumption\n    FROM customers c\n    JOIN transactions_1k t ON c.CustomerID = t.CustomerID\n    JOIN yearmonth y ON c.CustomerID = y.CustomerID\n    WHERE c.Currency = 'CZK'\n    AND substr(y.Date, 1, 4) = '2012'\n),\neur_consumption_2012 AS (\n    SELECT SUM(y.Consumption) AS eur_consumption\n    FROM customers c\n    JOIN transactions_1k t ON c.CustomerID = t.CustomerID\n    JOIN yearmonth y ON c.CustomerID = y.CustomerID\n    WHERE c.Currency = 'EUR'\n    AND substr(y.Date, 1, 4) = '2012'\n)\nSELECT (czk_consumption_2012.czk_consumption - eur_consumption_2012.eur_consumption) AS difference_in_consumption\nFROM czk_consumption_2012, eur_consumption_2012;",
    "gold_sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
    "difficulty": "challenging"
  },
  {
    "question_id": 1479,
    "db_id": "debit_card_specializing",
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "predicted_sql": "SELECT substr(ym.Date, 1, 4) AS Year\nFROM yearmonth ym\nJOIN transactions_1k t ON ym.CustomerID = t.CustomerID\nWHERE t.ProductID = 3\nGROUP BY Year\nORDER BY SUM(t.Amount * t.Price) DESC\nLIMIT 1;",
    "gold_sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1480,
    "db_id": "debit_card_specializing",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "predicted_sql": "SELECT substr(ym.Date, 1, 4) AS Year, substr(ym.Date, 5, 2) AS Month, sum(ym.Consumption) AS Total_Consumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' \nAND ym.Date BETWEEN '201301' AND '201312'\nGROUP BY Year, Month\nORDER BY Total_Consumption DESC\nLIMIT 1;",
    "gold_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1481,
    "db_id": "debit_card_specializing",
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "predicted_sql": "WITH lowest_consumption_per_segment AS (\n    SELECT c.Segment,\n           MIN(y.Consumption) AS min_consumption\n    FROM customers c\n    JOIN yearmonth y ON c.CustomerID = y.CustomerID\n    WHERE substr(y.Date, 1, 4) = '2013'\n    GROUP BY c.Segment\n)\nSELECT\n    (SELECT AVG(y.Consumption)\n     FROM yearmonth y\n     JOIN customers c ON y.CustomerID = c.CustomerID\n     WHERE c.Segment = 'SME'\n     AND substr(y.Date, 1, 4) = '2013'\n     GROUP BY substr(y.Date, 1, 4)\n     HAVING AVG(y.Consumption) = (SELECT min_consumption FROM lowest_consumption_per_segment WHERE Segment = 'SME')\n    ) -\n    (SELECT AVG(y.Consumption)\n     FROM yearmonth y\n     JOIN customers c ON y.CustomerID = c.CustomerID\n     WHERE c.Segment = 'LAM'\n     AND substr(y.Date, 1, 4) = '2013'\n     GROUP BY substr(y.Date, 1, 4)\n     HAVING AVG(y.Consumption) = (SELECT min_consumption FROM lowest_consumption_per_segment WHERE Segment = 'LAM')\n    ) AS diff_SME_LAM,\n    (SELECT AVG(y.Consumption)\n     FROM yearmonth y\n     JOIN customers c ON y.CustomerID = c.CustomerID\n     WHERE c.Segment = 'LAM'\n     AND substr(y.Date, 1, 4) = '2013'\n     GROUP BY substr(y.Date, 1, 4)\n     HAVING AVG(y.Consumption) = (SELECT min_consumption FROM lowest_consumption_per_segment WHERE Segment = 'LAM')\n    ) -\n    (SELECT AVG(y.Consumption)\n     FROM yearmonth y\n     JOIN customers c ON y.CustomerID = c.CustomerID\n     WHERE c.Segment = 'KAM'\n     AND substr(y.Date, 1, 4) = '2013'\n     GROUP BY substr(y.Date, 1, 4)\n     HAVING AVG(y.Consumption) = (SELECT min_consumption FROM lowest_consumption_per_segment WHERE Segment = 'KAM')\n    ) AS diff_LAM_KAM,\n    (SELECT AVG(y.Consumption)\n     FROM yearmonth y\n     JOIN customers c ON y.CustomerID = c.CustomerID\n     WHERE c.Segment = 'KAM'\n     AND substr(y.Date, 1, 4) = '2013'\n     GROUP BY substr(y.Date, 1, 4)\n     HAVING AVG(y.Consumption) = (SELECT min_consumption FROM lowest_consumption_per_segment WHERE Segment = 'KAM')\n    ) -\n    (SELECT AVG(y.Consumption)\n     FROM yearmonth y\n     JOIN customers c ON y.CustomerID = c.CustomerID\n     WHERE c.Segment = 'SME'\n     AND substr(y.Date, 1, 4) = '2013'\n     GROUP BY substr(y.Date, 1, 4)\n     HAVING AVG(y.Consumption) = (SELECT min_consumption FROM lowest_consumption_per_segment WHERE Segment = 'SME')\n    ) AS diff_KAM_SME;",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
    "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "difficulty": "challenging"
  },
  {
    "question_id": 1482,
    "db_id": "debit_card_specializing",
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "predicted_sql": "WITH increase_table AS (\n    SELECT \n        ym.CustomerID, \n        ym.Date AS YearMonth, \n        ym.Consumption AS Consumption, \n        (ym_conso.Consumption - ym.Consumption) AS Increase,\n        ((ym_conso.Consumption - ym.Consumption) / ym_conso.Consumption) * 100.0 AS PercentageIncrease\n    FROM yearmonth ym\n    JOIN yearmonth ym_conso ON ym.CustomerID = ym_conso.CustomerID\n    WHERE substr(ym.Date, 1, 4) = '2012'\n    AND substr(ym_conso.Date, 1, 4) = '2013'\n)\nSELECT \n    c.Segment, \n    MAX(i.PercentageIncrease) AS MaxPercentageIncrease,\n    MIN(i.PercentageIncrease) AS MinPercentageIncrease\nFROM customers c\nJOIN increase_table i ON c.CustomerID = i.CustomerID\nGROUP BY c.Segment;",
    "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
    "difficulty": "challenging"
  },
  {
    "question_id": 1483,
    "db_id": "debit_card_specializing",
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "predicted_sql": "SELECT SUM(t.Amount)\nFROM transactions_1k AS t\nJOIN yearmonth AS y ON t.CustomerID = y.CustomerID\nWHERE t.CustomerID = 6\nAND y.Date BETWEEN '201308' AND '201311';",
    "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
    "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1484,
    "db_id": "debit_card_specializing",
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "predicted_sql": "SELECT \n    (SELECT COUNT(*) \n     FROM gasstations \n     WHERE Country = 'CZE' AND Segment = 'discount')\n    - \n    (SELECT COUNT(*) \n     FROM gasstations \n     WHERE Country = 'SVK' AND Segment = 'discount') AS difference_in_discount_gas_stations;",
    "gold_sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
    "evidence": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
    "difficulty": "simple"
  },
  {
    "question_id": 1486,
    "db_id": "debit_card_specializing",
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "predicted_sql": "SELECT \n    (SELECT COUNT(DISTINCT CustomerID) \n     FROM customers \n     WHERE Currency = 'CZK') - \n    (SELECT COUNT(DISTINCT CustomerID) \n     FROM customers \n     WHERE Currency = 'EUR') AS Amount_of_more_SMEs;",
    "gold_sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
    "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
    "difficulty": "simple"
  },
  {
    "question_id": 1490,
    "db_id": "debit_card_specializing",
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "predicted_sql": "WITH lam_customers AS (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'LAM'\n)\n\nSELECT\n    (CAST(COUNT(DISTINCT y.CustomerID) AS REAL) / COUNT(DISTINCT l.CustomerID)) * 100\nFROM\n    lam_customers l\n    LEFT JOIN yearmonth y ON l.CustomerID = y.CustomerID\nWHERE\n    y.Consumption > 46.73;",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
    "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1493,
    "db_id": "debit_card_specializing",
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "predicted_sql": "WITH CustomerConsumption AS (\n    SELECT ym.CustomerID, ym.Consumption\n    FROM yearmonth ym\n    WHERE ym.Date LIKE '201202%'\n)\nSELECT \n    100.0 * COUNT(DISTINCT cc.CustomerID) / COUNT(DISTINCT ym.CustomerID) AS percentage\nFROM CustomerConsumption cc\nJOIN yearmonth ym ON cc.CustomerID = ym.CustomerID\nWHERE cc.Consumption > 528.3;",
    "gold_sql": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
    "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1498,
    "db_id": "debit_card_specializing",
    "question": "What is the highest monthly consumption in the year 2012?",
    "predicted_sql": "WITH MonthlyConsumption AS (\n    SELECT SUBSTR(Date, 1, 4) AS Year, SUBSTR(Date, 5, 2) AS Month, Consumption\n    FROM yearmonth\n)\nSELECT Year, Month, MAX(Consumption) AS HighestMonthlyConsumption\nFROM MonthlyConsumption\nWHERE Year = '2012'\nGROUP BY Year, Month;",
    "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1500,
    "db_id": "debit_card_specializing",
    "question": "Please list the product description of the products consumed in September, 2013.",
    "predicted_sql": "WITH SeptemberTransactions AS (\n    SELECT t.Date, t.ProductID\n    FROM transactions_1k t\n    WHERE t.Date LIKE '201309%'\n)\nSELECT p.Description\nFROM SeptemberTransactions st\nJOIN products p ON st.ProductID = p.ProductID;",
    "gold_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
    "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "difficulty": "simple"
  },
  {
    "question_id": 1501,
    "db_id": "debit_card_specializing",
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "predicted_sql": "SELECT DISTINCT g.Country\nFROM gasstations g\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE t.Date LIKE '201306';",
    "gold_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1505,
    "db_id": "debit_card_specializing",
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "predicted_sql": "SELECT COUNT(DISTINCT t.CustomerID)\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nJOIN yearmonth y ON t.CustomerID = y.CustomerID\nWHERE c.Currency = 'EUR'\nAND y.Consumption > 1000;",
    "gold_sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
    "evidence": "Pays in euro = Currency = 'EUR'.",
    "difficulty": "simple"
  },
  {
    "question_id": 1506,
    "db_id": "debit_card_specializing",
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "predicted_sql": "SELECT p.Description\nFROM transactions_1k AS t\nJOIN gasstations AS g ON t.GasStationID = g.GasStationID\nJOIN products AS p ON t.ProductID = p.ProductID\nWHERE g.Country = 'CZE';",
    "gold_sql": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1507,
    "db_id": "debit_card_specializing",
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "predicted_sql": "SELECT DISTINCT DATE || ' ' || Time AS transaction_time\nFROM transactions_1k\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.ChainID = 11;",
    "gold_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1509,
    "db_id": "debit_card_specializing",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "predicted_sql": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.Country = 'CZE' \n  AND t.Date > '2012-01-01';",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1514,
    "db_id": "debit_card_specializing",
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "predicted_sql": "SELECT c.Currency\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24'\nAND t.Time = '16:25:00';",
    "gold_sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1515,
    "db_id": "debit_card_specializing",
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "predicted_sql": "SELECT customers.Segment\nFROM customers\nJOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID\nWHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00' LIMIT 1;",
    "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "evidence": "'2012/8/23' can be represented by '2012-08-23'",
    "difficulty": "simple"
  },
  {
    "question_id": 1521,
    "db_id": "debit_card_specializing",
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "predicted_sql": "SELECT COUNT(*)\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-26' \nAND t.Time BETWEEN '08:00:00' AND '09:00:00'\nAND g.Country = 'CZE';",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1524,
    "db_id": "debit_card_specializing",
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "predicted_sql": "SELECT c.Country\nFROM transactions_1k AS t\nJOIN customers AS c ON t.CustomerID = c.CustomerID\nWHERE t.Amount = 548.4\nAND t.Date = '2012-08-24' limit 1;",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'",
    "difficulty": "simple"
  },
  {
    "question_id": 1525,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "predicted_sql": "SELECT \n    (CAST(COUNT(DISTINCT t.CustomerID) AS REAL) / \n    (SELECT COUNT(*) FROM customers)) * 100\nFROM transactions_1k t\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-25' and c.Currency = 'EUR';",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "evidence": "'2012/8/25' can be represented by '2012-08-25'",
    "difficulty": "simple"
  },
  {
    "question_id": 1526,
    "db_id": "debit_card_specializing",
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "predicted_sql": "WITH customer_payment AS (\n    SELECT t.Date, t.Amount\n    FROM transactions_1k t\n    WHERE t.Amount = 634.8\n    AND t.Date = '2012-08-25'\n    AND t.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 634.8 LIMIT 1)\n)\nSELECT \n    ((y2.Consumption - y1.Consumption) / y2.Consumption) AS consumption_decrease_rate\nFROM yearmonth y1\nJOIN yearmonth y2 ON y1.CustomerID = y2.CustomerID\nWHERE substr(y1.Date, 1, 4) = '2012'\nAND substr(y2.Date, 1, 4) = '2013'\nAND y1.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Amount = 634.8 LIMIT 1);",
    "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
    "difficulty": "challenging"
  },
  {
    "question_id": 1528,
    "db_id": "debit_card_specializing",
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "predicted_sql": "SELECT \n    (premium_count * 100.0 / total_count) AS percentage_of_premium\nFROM\n    (SELECT \n        COUNT(DISTINCT t1.CustomerID) AS total_count,\n        COUNT(DISTINCT CASE WHEN g.Segment = 'premium' THEN t1.CustomerID END) AS premium_count\n    FROM\n        transactions_1k t1\n    JOIN gasstations g ON t1.GasStationID = g.GasStationID\n    WHERE\n        g.Country = 'SVK'\n    ) subquery;",
    "gold_sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
    "evidence": "",
    "difficulty": "simple"
  },
  {
    "question_id": 1529,
    "db_id": "debit_card_specializing",
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "predicted_sql": "SELECT \n    SUM(t.Amount) AS TotalAmountSpentAtGasStations,\n    (\n        SELECT SUM(t.Amount)\n        FROM transactions_1k AS t\n        WHERE t.CustomerID = 38508\n        AND t.Date LIKE '201201%'\n        AND t.GasStationID IN (\n            SELECT g.GasStationID\n            FROM gasstations AS g\n        )\n    ) AS AmountSpentInJanuary2012\nFROM transactions_1k AS t\nWHERE t.CustomerID = 38508\nAND t.GasStationID IN (\n    SELECT g.GasStationID\n    FROM gasstations AS g\n);",
    "gold_sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "evidence": "January 2012 refers to the Date value = '201201'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1531,
    "db_id": "debit_card_specializing",
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "predicted_sql": "SELECT c.CustomerID, AVG(t.Price / t.Amount) AS average_price_per_item_purchased, c.Currency\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nGROUP BY c.CustomerID\nORDER BY SUM(t.Price) DESC\nLIMIT 1;",
    "gold_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
    "evidence": "average price per single item = Total(price) / Total(amount)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1533,
    "db_id": "debit_card_specializing",
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "predicted_sql": "SELECT t.CustomerID, y.Consumption\nFROM transactions_1k AS t\nJOIN products AS p ON t.ProductID = p.ProductID\nJOIN yearmonth AS y ON t.CustomerID = y.CustomerID\nWHERE t.Price / t.Amount > 29.00\nAND t.Date LIKE '201208%' \nAND p.ProductID = 5;",
    "gold_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1312,
    "db_id": "student_club",
    "question": "What's Angela Sanders's major?",
    "predicted_sql": "SELECT major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE first_name = 'Angela' AND last_name = 'Sanders';",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "evidence": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name.",
    "difficulty": "simple"
  },
  {
    "question_id": 1317,
    "db_id": "student_club",
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "predicted_sql": "SELECT COUNT(DISTINCT a.link_to_member) AS num_medium_tshirt\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nJOIN member m ON a.link_to_member = m.member_id\nWHERE e.event_name = 'Women''s Soccer'\nAND m.t_shirt_size = 'Medium';",
    "gold_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1322,
    "db_id": "student_club",
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "predicted_sql": "SELECT COUNT(DISTINCT a.link_to_event) as meeting_attendance_count\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.type = 'Meeting'\nGROUP BY a.link_to_event\nHAVING COUNT(DISTINCT a.link_to_member) > 10;",
    "gold_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
    "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
    "difficulty": "moderate"
  },
  {
    "question_id": 1323,
    "db_id": "student_club",
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "predicted_sql": "SELECT event_name\nFROM event\nLEFT JOIN (\n    SELECT link_to_event, COUNT(link_to_member) as attendance\n    FROM attendance\n    GROUP BY link_to_event\n    HAVING attendance > 20\n) AS event_attendance\nON event.event_id = event_attendance.link_to_event\nWHERE event.type != 'fundraiser';",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
    "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
    "difficulty": "moderate"
  },
  {
    "question_id": 1331,
    "db_id": "student_club",
    "question": "What is the amount of the funds that the Vice President received?",
    "predicted_sql": "SELECT\n    SUM(i.amount) AS total_funds_received_by_Vice_President\nFROM\n    income i\n    JOIN member m ON i.link_to_member = m.member_id\nWHERE\n    m.position = 'Vice President';",
    "gold_sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "difficulty": "simple"
  },
  {
    "question_id": 1334,
    "db_id": "student_club",
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE z.state = 'Illinois';",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "evidence": "full name of member refers to first_name, last_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1338,
    "db_id": "student_club",
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "predicted_sql": "SELECT e.event_name, e.event_date, ex.expense_description, ex.approved\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE e.event_name = 'October Meeting' \nAND e.event_date = '2019-10-08';",
    "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
    "difficulty": "moderate"
  },
  {
    "question_id": 1339,
    "db_id": "student_club",
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "predicted_sql": "SELECT AVG(e.cost) AS average_cost\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE (substr(e.expense_date, 6, 2) = '09' OR substr(e.expense_date, 6, 2) = '10')\nAND m.first_name || ' ' || m.last_name = 'Elijah Allen';",
    "gold_sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
    "difficulty": "challenging"
  },
  {
    "question_id": 1340,
    "db_id": "student_club",
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "predicted_sql": "SELECT \n    (SELECT COALESCE(SUM(spent), 0) FROM budget b \n    JOIN event e ON b.link_to_event = e.event_id \n    WHERE substr(e.event_date, 1, 4) = '2019') - \n    (SELECT COALESCE(SUM(spent), 0) FROM budget b \n    JOIN event e ON b.link_to_event = e.event_id \n    WHERE substr(e.event_date, 1, 4) = '2020') AS difference_of_total_amount_spent;",
    "gold_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1344,
    "db_id": "student_club",
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "predicted_sql": "SELECT notes\nFROM income\nWHERE date_received = '2019-09-14'\nAND source = 'Fundraising';",
    "gold_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'",
    "difficulty": "simple"
  },
  {
    "question_id": 1346,
    "db_id": "student_club",
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "predicted_sql": "SELECT phone\nFROM member\nWHERE first_name || ' ' || last_name = 'Carlo Jacobs';",
    "gold_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "evidence": "Carlo Jacobs is the full name; full name refers to first_name, last_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1350,
    "db_id": "student_club",
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "predicted_sql": "SELECT e.status \nFROM event e \nJOIN budget b ON e.event_id = b.link_to_event \nJOIN expense ex ON ex.link_to_budget = b.budget_id \nWHERE ex.expense_description = 'Post Cards, Posters' \nAND ex.expense_date = '2019-8-20';",
    "gold_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "evidence": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
    "difficulty": "moderate"
  },
  {
    "question_id": 1351,
    "db_id": "student_club",
    "question": "What was Brent Thomason's major?",
    "predicted_sql": "SELECT major_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1352,
    "db_id": "student_club",
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "predicted_sql": "SELECT COUNT(*) AS medium_t_shirt_count\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1356,
    "db_id": "student_club",
    "question": "Which department was the President of the club in?",
    "predicted_sql": "SELECT m.department AS president_department\nFROM member m\nWHERE m.position = 'President';",
    "gold_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "evidence": "'President' is a position of Student Club",
    "difficulty": "simple"
  },
  {
    "question_id": 1357,
    "db_id": "student_club",
    "question": "State the date Connor Hilton paid his/her dues.",
    "predicted_sql": "SELECT date_received \nFROM income\nJOIN member ON income.link_to_member = member.member_id\nWHERE first_name = 'Connor' \nAND last_name = 'Hilton'\nAND source = 'Dues';",
    "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';",
    "difficulty": "simple"
  },
  {
    "question_id": 1359,
    "db_id": "student_club",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "predicted_sql": "SELECT \n    (SUM(CASE WHEN b.event_status = 'Yearly Kickoff' THEN b.amount ELSE 0 END) \n    / NULLIF(SUM(CASE WHEN b.event_status = 'October Meeting' THEN b.amount ELSE 0 END), 0)) AS times_more_than_October\nFROM\n    budget b\nWHERE\n    b.category = 'Advertisement';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
    "difficulty": "challenging"
  },
  {
    "question_id": 1361,
    "db_id": "student_club",
    "question": "What is the total cost of the pizzas for all the events?",
    "predicted_sql": "SELECT SUM(cost) AS total_cost_of_pizzas\nFROM expense\nWHERE expense_description = 'Pizza';",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
    "difficulty": "simple"
  },
  {
    "question_id": 1362,
    "db_id": "student_club",
    "question": "How many cities are there in Orange County, Virginia?",
    "predicted_sql": "SELECT COUNT(DISTINCT z.city) AS city_count\nFROM zip_code z\nJOIN event e ON z.city = e.location\nWHERE z.county = 'Orange County' AND z.state = 'Virginia';",
    "gold_sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "evidence": "Orange County is the county name, Virginia is the state name",
    "difficulty": "simple"
  },
  {
    "question_id": 1368,
    "db_id": "student_club",
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "predicted_sql": "SELECT m.first_name, m.last_name, mj.major_name\nFROM member m\nJOIN major mj ON m.link_to_major = mj.major_id\nWHERE m.phone = \"809-555-3360\";",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "evidence": "major in refers to major_name",
    "difficulty": "simple"
  },
  {
    "question_id": 1371,
    "db_id": "student_club",
    "question": "How many members attended the \"Women's Soccer\" event?",
    "predicted_sql": "SELECT COUNT(*) AS attendance_count\nFROM attendance\nJOIN event ON attendance.link_to_event = event.event_id\nWHERE event.event_name = 'Women''s Soccer';",
    "gold_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "evidence": "'Women's Soccer' is the event name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1375,
    "db_id": "student_club",
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "predicted_sql": "SELECT first_name || ' ' || last_name AS full_name\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.department = 'School of Applied Sciences, Technology and Education';",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1376,
    "db_id": "student_club",
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "predicted_sql": "SELECT event.event_name,\n       MAX(CAST(budget.spent AS REAL) / budget.amount) AS spend_to_budget_ratio\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nWHERE event.status = 'Closed'\nGROUP BY event.event_name\nORDER BY spend_to_budget_ratio DESC\nLIMIT 1;",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "difficulty": "moderate"
  },
  {
    "question_id": 1378,
    "db_id": "student_club",
    "question": "What is the highest amount of budget spend for an event?",
    "predicted_sql": "SELECT MAX(spent) AS highest_budget_spend\nFROM budget;",
    "gold_sql": "SELECT MAX(spent) FROM budget",
    "evidence": "highest amount of budget spend refers to MAX(spent)",
    "difficulty": "simple"
  },
  {
    "question_id": 1380,
    "db_id": "student_club",
    "question": "What is the total amount of money spent for food?",
    "predicted_sql": "SELECT SUM(e.spent) AS total_amount_spent_for_food\nFROM budget AS e\nWHERE e.category = 'Food';",
    "gold_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
    "difficulty": "simple"
  },
  {
    "question_id": 1381,
    "db_id": "student_club",
    "question": "List the name of students that have attended more than 7 events.",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS student_name\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nGROUP BY m.member_id\nHAVING COUNT(a.link_to_event) > 7;",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
    "difficulty": "moderate"
  },
  {
    "question_id": 1387,
    "db_id": "student_club",
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "predicted_sql": "WITH event_manager AS (\n    SELECT m.first_name || ' ' || m.last_name AS manager_name\n    FROM member m\n    JOIN attendance a ON m.member_id = a.link_to_member\n    JOIN event e ON a.link_to_event = e.event_id\n    WHERE e.event_name = 'Yearly Kickoff'\n)\nSELECT manager_name\nFROM event_manager;",
    "gold_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1389,
    "db_id": "student_club",
    "question": "Which event has the lowest cost?",
    "predicted_sql": "SELECT event_name AS event_with_lowest_cost\nFROM event\nINNER JOIN budget ON event.event_id = budget.link_to_event\nWHERE budget.spent = (\n    SELECT MIN(spent)\n    FROM budget\n    );",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost = (SELECT MIN(T6.cost) FROM event AS T4 INNER JOIN budget AS T5 ON T4.event_id = T5.link_to_event INNER JOIN expense AS T6 ON T5.budget_id = T6.link_to_budget)",
    "evidence": "event refers to event_name; lowest cost means MIN(cost)",
    "difficulty": "simple"
  },
  {
    "question_id": 1390,
    "db_id": "student_club",
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "predicted_sql": "WITH total_cost AS (\n    SELECT SUM(cost) AS total_cost_all_events\n    FROM expense\n),\nyearly_kickoff_cost AS (\n    SELECT SUM(cost) AS cost_yearly_kickoff\n    FROM expense\n    JOIN budget ON expense.link_to_budget = budget.budget_id\n    JOIN event ON budget.link_to_event = event.event_id\n    WHERE event.event_name = 'Yearly Kickoff'\n)\nSELECT 100.0 * cost_yearly_kickoff / total_cost_all_events AS percentage\nFROM yearly_kickoff_cost, total_cost;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1392,
    "db_id": "student_club",
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "predicted_sql": "SELECT source AS top_source_of_funds, SUM(amount) AS total_amount_received\nFROM income\nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source\nORDER BY total_amount_received DESC\nLIMIT 1;",
    "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
    "evidence": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'",
    "difficulty": "simple"
  },
  {
    "question_id": 1394,
    "db_id": "student_club",
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "predicted_sql": "SELECT COUNT(*) AS physics_teaching_major_count\nFROM member\nJOIN major ON member.link_to_major = major.major_id\nWHERE major.major_name = 'Physics Teaching'\nAND member.member_id IN (\n    SELECT link_to_member\n    FROM attendance\n    WHERE link_to_event IN (\n        SELECT event_id\n        FROM event\n        WHERE status = 'approved'\n    )\n);",
    "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "evidence": "'Physics Teaching' is the major_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1398,
    "db_id": "student_club",
    "question": "Name the event with the highest amount spent on advertisement.",
    "predicted_sql": "SELECT event.event_name\nFROM event\nJOIN budget ON event.event_id = budget.link_to_event\nWHERE budget.spent = (SELECT MAX(spent) FROM budget WHERE category = 'Advertisement');",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1399,
    "db_id": "student_club",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "predicted_sql": "SELECT COUNT(*) AS attended_event\nFROM member m\nJOIN attendance a ON m.member_id = a.link_to_member\nJOIN event e ON a.link_to_event = e.event_id\nWHERE m.first_name = 'Maya' \nAND m.last_name = 'Mclean'\nAND e.event_name = 'Women\\'s Soccer';",
    "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
    "difficulty": "moderate"
  },
  {
    "question_id": 1401,
    "db_id": "student_club",
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "predicted_sql": "SELECT e.event_name, SUM(ex.cost) AS total_poster_cost\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE e.event_name = 'September Speaker'\nAND ex.expense_description = 'Posters';",
    "gold_sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "difficulty": "moderate"
  },
  {
    "question_id": 1403,
    "db_id": "student_club",
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed'\nAND b.remaining < 0\nORDER BY b.remaining\nLIMIT 1;",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
    "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0",
    "difficulty": "moderate"
  },
  {
    "question_id": 1404,
    "db_id": "student_club",
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "predicted_sql": "SELECT e.type AS expense_type, SUM(ex.cost) AS total_approved_cost\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE e.event_name = 'October Meeting'\nAND ex.approved = 'approved'\nGROUP BY expense_type;",
    "gold_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1405,
    "db_id": "student_club",
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "predicted_sql": "SELECT b.category, SUM(b.amount) AS amount_budgeted\nFROM budget AS b\nJOIN event AS e ON b.link_to_event = e.event_id\nWHERE e.event_name = 'April Speaker'\nGROUP BY b.category\nORDER BY amount_budgeted ASC;",
    "gold_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "difficulty": "moderate"
  },
  {
    "question_id": 1409,
    "db_id": "student_club",
    "question": "Mention the total expense used on 8/20/2019.",
    "predicted_sql": "SELECT SUM(cost) AS total_expense\nFROM expense\nWHERE expense_date = '2019-08-20';",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'",
    "difficulty": "simple"
  },
  {
    "question_id": 1410,
    "db_id": "student_club",
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name,\n       SUM(e.cost) AS total_cost\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY m.first_name, m.last_name;",
    "gold_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
    "evidence": "full name refers to first_name, last name",
    "difficulty": "simple"
  },
  {
    "question_id": 1411,
    "db_id": "student_club",
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "predicted_sql": "SELECT DISTINCT expense_description\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id\nWHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';",
    "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 1422,
    "db_id": "student_club",
    "question": "State the category of events were held at MU 215.",
    "predicted_sql": "SELECT DISTINCT e.type AS category_of_events\nFROM event e\nWHERE e.location = 'MU 215';",
    "gold_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "evidence": "'MU 215' is the location of event; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1426,
    "db_id": "student_club",
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "predicted_sql": "SELECT m.last_name, ma.department, ma.college\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Environmental Engineering';",
    "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "evidence": "'Environmental Engineering' is the major_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1427,
    "db_id": "student_club",
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "predicted_sql": "WITH event_guest_speakers AS (\n    SELECT e.event_id\n    FROM event e\n    WHERE e.location = 'MU 215'\n    AND e.type = 'Guest Speaker'\n)\nSELECT b.category\nFROM budget b\nWHERE b.spent = 0\nAND b.link_to_event IN (SELECT event_id FROM event_guest_speakers);",
    "gold_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "db_id": "student_club",
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "predicted_sql": "WITH medium_members AS (\n    SELECT m.member_id\n    FROM member m\n    WHERE m.t_shirt_size = 'Medium'\n    AND m.position = 'Member'\n)\nSELECT \n    (COUNT(i.amount = 50) * 100.0) / COUNT(DISTINCT i.link_to_member) AS percentage\nFROM income i\nWHERE i.link_to_member IN (SELECT member_id FROM medium_members)\nAND i.source = 'Student_Club';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1435,
    "db_id": "student_club",
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.type = 'Game'\nAND e.status = 'Closed'\nAND e.event_date BETWEEN '2019-03-15' AND '2020-03-20';",
    "gold_sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1457,
    "db_id": "student_club",
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "predicted_sql": "WITH avg_expense AS (\n    SELECT e.link_to_member, AVG(cost) AS avg_cost\n    FROM expense e\n    GROUP BY e.link_to_member\n)\nSELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nJOIN avg_expense ae ON e.link_to_member = ae.link_to_member\nWHERE e.cost > ae.avg_cost;",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1460,
    "db_id": "student_club",
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "predicted_sql": "WITH member_expenses AS (\n    SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost\n    FROM member m\n    JOIN expense e ON m.member_id = e.link_to_member\n    WHERE e.expense_description = 'Water, Veggie tray, supplies'\n)\nSELECT full_name, SUM(cost) AS total_cost\nFROM member_expenses\nGROUP BY full_name;",
    "gold_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1464,
    "db_id": "student_club",
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount AS amount_received\nFROM member m\nJOIN income i ON m.member_id = i.link_to_member\nWHERE i.date_received = '2019-09-09';",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
    "difficulty": "challenging"
  },
  {
    "question_id": 1149,
    "db_id": "thrombosis_prediction",
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "predicted_sql": "WITH male_counts AS (\n    SELECT Admission, COUNT(ID) AS male_count\n    FROM Patient\n    WHERE SEX = 'M'\n    GROUP BY Admission\n)\nSELECT \n    (CASE \n        WHEN male_counts.Admission = '+' THEN 'in-patient' \n        ELSE 'outpatient' \n     END) AS patient_type,\n    ABS(100.0 * male_counts.male_count / NULLIF(total_counts.total_count, 0) - 50) AS deviation_percentage\nFROM male_counts\nJOIN (\n    SELECT Admission, COUNT(ID) AS total_count\n    FROM Patient\n    GROUP BY Admission\n) AS total_counts\nON male_counts.Admission = total_counts.Admission;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
    "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX  = 'M' and Admission = '-')",
    "difficulty": "moderate"
  },
  {
    "question_id": 1150,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient were born after 1930?",
    "predicted_sql": "WITH FemaleCount AS (\n    SELECT COUNT(ID) AS CountFemale\n    FROM Patient\n    WHERE SEX = 'F'\n),\nFemaleBornAfter1930 AS (\n    SELECT COUNT(ID) AS CountFemaleBornAfter1930\n    FROM Patient\n    WHERE SEX = 'F' AND Birthday > '1930-01-01'\n)\nSELECT 100.0 * FemaleBornAfter1930.CountFemaleBornAfter1930 / NULLIF(FemaleCount.CountFemale, 0) AS PercentageFemaleBornAfter1930\nFROM FemaleCount, FemaleBornAfter1930;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
    "difficulty": "moderate"
  },
  {
    "question_id": 1152,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "predicted_sql": "WITH inpatient_count AS (\n    SELECT COUNT(ID) AS inpatient_count\n    FROM Patient\n    WHERE Diagnosis = 'SLE' AND Admission = '+'\n),\noutpatient_count AS (\n    SELECT COUNT(ID) AS outpatient_count\n    FROM Patient\n    WHERE Diagnosis = 'SLE' AND Admission = '-'\n)\nSELECT \n    1.0 * inpatient_count / NULLIF(outpatient_count, 0) AS ratio\nFROM inpatient_count, outpatient_count;",
    "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
    "difficulty": "moderate"
  },
  {
    "question_id": 1153,
    "db_id": "thrombosis_prediction",
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "predicted_sql": "SELECT Examination.Diagnosis, Laboratory.Date\nFROM Examination\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Examination.ID = 30609;",
    "gold_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "evidence": "'30609' is the Patient ID; disease means Diagnosis",
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "db_id": "thrombosis_prediction",
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "predicted_sql": "SELECT p.ID as patient_ID, p.SEX as sex, p.Birthday as birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.LDH > 500;",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "evidence": "LDH beyond normal range refers to LDH > '500';",
    "difficulty": "simple"
  },
  {
    "question_id": 1156,
    "db_id": "thrombosis_prediction",
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "predicted_sql": "SELECT Examination.ID, (STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday)) AS age\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Examination.RVVT = '+';",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1157,
    "db_id": "thrombosis_prediction",
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "predicted_sql": "SELECT p.ID, p.SEX, p.Diagnosis\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.Thrombosis = 2;",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
    "difficulty": "simple"
  },
  {
    "question_id": 1162,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "predicted_sql": "SELECT COUNT(DISTINCT P.ID) AS female_patients_immediately_followed\nFROM Patient AS P\nJOIN Examination AS E ON P.ID = E.ID\nJOIN Patient AS P2 ON P.ID = P2.ID\nAND P2.Admission = '-' \nAND P.SEX = 'F' \nAND strftime('%Y', P.Description) = '1997';",
    "gold_sql": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
    "evidence": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1164,
    "db_id": "thrombosis_prediction",
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "predicted_sql": "WITH SeriousThrombosis AS (\n    SELECT e.ID AS PatientID\n    FROM Examination e\n    WHERE e.Thrombosis = '1' AND e.\"Examination Date\" BETWEEN '1997-01-01' AND '1997-12-31'\n)\nSELECT COUNT(*) AS WomenWithSeriousThrombosis\nFROM SeriousThrombosis st\nJOIN Patient p ON st.PatientID = p.ID\nWHERE p.SEX = 'F';",
    "gold_sql": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
    "evidence": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1166,
    "db_id": "thrombosis_prediction",
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "predicted_sql": "WITH YoungestPatient AS (\n    SELECT *\n    FROM Patient\n    ORDER BY Birthday ASC\n    LIMIT 1\n)\n\nSELECT e.Symptoms, e.Diagnosis\nFROM Examination e\nJOIN YoungestPatient yp ON e.ID = yp.ID\nWHERE e.Symptoms IS NOT NULL;",
    "gold_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
    "difficulty": "simple"
  },
  {
    "question_id": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "predicted_sql": "WITH OldestSJS AS (\n    SELECT *\n    FROM Patient\n    WHERE Diagnosis = 'SJS'\n    ORDER BY Birthday\n    LIMIT 1\n)\n\nSELECT l.Date AS \"Completion Date\", (STRFTIME('%Y', l.Date) - STRFTIME('%Y', p.Birthday)) AS \"Initial Arrival Age\"\nFROM OldestSJS o\nJOIN Laboratory l ON o.ID = l.ID\nJOIN Patient p ON o.ID = p.ID;",
    "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "db_id": "thrombosis_prediction",
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "predicted_sql": "SELECT \n    CAST(SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) AS REAL) / NULLIF(CAST(SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END) AS REAL), 0)\nFROM \n    Patient\n    JOIN Laboratory ON Patient.ID = Laboratory.ID;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "evidence": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))",
    "difficulty": "challenging"
  },
  {
    "question_id": 1171,
    "db_id": "thrombosis_prediction",
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "predicted_sql": "SELECT COUNT(DISTINCT E.ID) AS underage_examined\nFROM Examination E\nJOIN Patient P ON E.ID = P.ID\nWHERE strftime('%Y', P.Birthday) > strftime('%Y', E.`Examination Date`, '-18 years')\nAND E.`Examination Date` BETWEEN '1990-01-01' AND '1993-12-31';",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
    "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1175,
    "db_id": "thrombosis_prediction",
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "predicted_sql": "WITH MaxHGB AS (\n    SELECT e.ID AS PatientID, e.`Examination Date`, l.HGB\n    FROM Examination e\n    JOIN Laboratory l ON e.ID = l.ID\n    WHERE l.HGB = (SELECT MAX(HGB) FROM Laboratory)\n)\n\nSELECT (strftime('%Y', MaxHGB.`Examination Date`) - strftime('%Y', p.Birthday)) AS Age, e.Diagnosis\nFROM MaxHGB\nJOIN Patient p ON MaxHGB.PatientID = p.ID\nJOIN Examination e ON MaxHGB.PatientID = e.ID;",
    "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "predicted_sql": "SELECT l.\"aCL IgM\"\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID \nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Diagnosis = 'SLE' \nAND p.Description = '1994-02-19'\nAND e.\"Examination Date\" = '1993-11-12';",
    "gold_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1185,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "predicted_sql": "WITH cholesterol AS (\n    SELECT p.ID, l.Date, l.`T-CHO`\n    FROM Patient p\n    JOIN Laboratory l ON p.ID = l.ID\n    WHERE p.Birthday = '1959-02-18'\n    AND (l.Date LIKE '1981-11-%' OR l.Date LIKE '1981-12-%')\n)\nSELECT (MAX(CASE WHEN substr(Date, 1, 7) = '1981-11' THEN `T-CHO` END) - MAX(CASE WHEN substr(Date, 1, 7) = '1981-12' THEN `T-CHO` END)) * 100.0 / NULLIF(MAX(CASE WHEN substr(Date, 1, 7) = '1981-12' THEN `T-CHO` END), 0) AS decrease_rate\nFROM cholesterol;",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = DIVISION(SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`)), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))",
    "difficulty": "challenging"
  },
  {
    "question_id": 1187,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "predicted_sql": "WITH ExaminedPatients AS (\n    SELECT DISTINCT e.ID\n    FROM Examination e\n    JOIN Laboratory l ON e.ID = l.ID\n    JOIN Patient p ON e.ID = p.ID\n    WHERE e.[Examination Date] BETWEEN '1987-07-06' AND '1996-01-31'\n    AND l.GPT > 30\n    AND l.ALB < 4\n)\nSELECT ID\nFROM ExaminedPatients;",
    "gold_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "evidence": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4",
    "difficulty": "moderate"
  },
  {
    "question_id": 1189,
    "db_id": "thrombosis_prediction",
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "predicted_sql": "WITH AverageAntiCardiolip AS (\n    SELECT AVG(`aCL IgM`) AS avg_aCL_IgM\n    FROM Examination\n)\nSELECT COUNT(DISTINCT e.ID) AS num_patients\nFROM Examination e\nJOIN AverageAntiCardiolip a ON 1=1\nJOIN Patient p ON e.ID = p.ID\nWHERE e.Thrombosis = 2\nAND e.ANA = 'S'\nAND e.`aCL IgM` > a.avg_aCL_IgM * 1.2;",
    "gold_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
    "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1192,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "predicted_sql": "WITH OctoberLab AS (\n    SELECT L.ID AS PatientID, L.Date AS LabDate, L.T_BIL\n    FROM Laboratory L \n    WHERE L.Date LIKE '1991-10%' AND L.T_BIL < 2.0\n)\nSELECT P.ID AS PatientID, P.SEX, P.Birthday, P.Description, P.First_Date\nFROM Patient P\nWHERE P.Admission = '-' AND P.ID IN (SELECT PatientID FROM OctoberLab);",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
    "evidence": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1195,
    "db_id": "thrombosis_prediction",
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "predicted_sql": "SELECT AVG(L.ALB) AS avg_blood_albumin_level\nFROM Laboratory AS L\nJOIN Patient AS P ON L.ID = P.ID\nWHERE P.SEX = 'F'\nAND L.PLT > 400\nAND P.Diagnosis = 'SLE';",
    "gold_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1198,
    "db_id": "thrombosis_prediction",
    "question": "How many female patients were given an APS diagnosis?",
    "predicted_sql": "SELECT COUNT(*)\nFROM Examination\nJOIN Patient ON Examination.ID = Patient.ID\nWHERE Patient.SEX = 'F' AND Examination.Diagnosis = 'APS';",
    "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'",
    "difficulty": "simple"
  },
  {
    "question_id": 1201,
    "db_id": "thrombosis_prediction",
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "predicted_sql": "WITH RA_Patients AS (\n    SELECT P.ID\n    FROM Patient P\n    JOIN Examination E ON P.ID = E.ID\n    WHERE strftime('%Y', P.Birthday) = '1980'\n    AND E.Diagnosis = 'RA'\n)\nSELECT \n    (COUNT(CASE WHEN P.SEX = 'F' THEN 1 END) * 100.0) / COUNT(P.SEX) AS Percentage_of_Women\nFROM Patient P\nJOIN RA_Patients R ON P.ID = R.ID\nWHERE P.SEX IS NOT NULL;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
    "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 1205,
    "db_id": "thrombosis_prediction",
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "predicted_sql": "WITH NormalRange AS (\n    SELECT \n        CASE \n            WHEN SEX = 'M' AND UA > 8.0 THEN 1\n            WHEN SEX = 'F' AND UA > 6.5 THEN 1\n            ELSE 0\n        END AS WithinNormalRange\n    FROM Laboratory\n    JOIN Patient ON Laboratory.ID = Patient.ID\n    WHERE Patient.ID = 57266\n)\nSELECT \n    CASE \n        WHEN WithinNormalRange > 0 THEN 'Yes'\n        ELSE 'No'\n    END AS NormalRangeStatus\nFROM NormalRange;",
    "gold_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "evidence": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1208,
    "db_id": "thrombosis_prediction",
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "predicted_sql": "WITH AbnormalGPT AS (\n    SELECT ID\n    FROM Laboratory\n    WHERE GPT >= 60\n)\nSELECT p.ID\nFROM Patient p\nJOIN AbnormalGPT ag ON p.ID = ag.ID\nWHERE p.SEX = 'M';",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "evidence": "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60",
    "difficulty": "moderate"
  },
  {
    "question_id": 1209,
    "db_id": "thrombosis_prediction",
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "predicted_sql": "SELECT p.Birthday, p.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GPT > 60\nORDER BY p.Birthday ASC;",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1220,
    "db_id": "thrombosis_prediction",
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "predicted_sql": "SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.UN = 29;",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
    "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1225,
    "db_id": "thrombosis_prediction",
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "predicted_sql": "SELECT p.SEX, GROUP_CONCAT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.\"T-BIL\" >= 2.0\nGROUP BY p.SEX;",
    "gold_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "evidence": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
    "difficulty": "moderate"
  },
  {
    "question_id": 1227,
    "db_id": "thrombosis_prediction",
    "question": "What is the average age of the male patient with high cholesterol?",
    "predicted_sql": "WITH MaleHighCholesterol AS (\n    SELECT P.ID, YEAR(P.Birthday) AS BirthYear\n    FROM Patient AS P\n    JOIN Laboratory AS L ON P.ID = L.ID\n    WHERE P.Sex = 'M' AND L.\"T-CHO\" >= 250\n)\nSELECT ROUND(AVG(YEAR(NOW()) - BirthYear), 2) AS average_age\nFROM MaleHighCholesterol;",
    "gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
    "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1229,
    "db_id": "thrombosis_prediction",
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID) \nFROM Patient p \nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 50;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
    "evidence": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1231,
    "db_id": "thrombosis_prediction",
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID) AS num_male_patients_with_high_cpk\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\nAND STRFTIME('%Y', p.Birthday) BETWEEN '1936' AND '1956'\nAND l.CPK >= 250;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1232,
    "db_id": "thrombosis_prediction",
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "predicted_sql": "SELECT p.ID, p.SEX, (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GLU >= 180 AND l.\"T-CHO\" < 250;",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
    "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1235,
    "db_id": "thrombosis_prediction",
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "predicted_sql": "SELECT p.ID, (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age, l.Diagnosis\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.RBC < 3.5\nAND l.Diagnosis IS NOT NULL;",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
    "difficulty": "moderate"
  },
  {
    "question_id": 1238,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "predicted_sql": "WITH SLE_Patients AS (\n    SELECT p.ID, p.SEX, p.Birthday\n    FROM Patient p\n    WHERE p.Diagnosis = 'SLE'\n)\nSELECT sp.ID, sp.SEX\nFROM SLE_Patients sp\nJOIN Laboratory l ON sp.ID = l.ID\nWHERE l.HGB > 10 AND l.HGB < 17\nORDER BY sp.Birthday ASC\nLIMIT 1;",
    "gold_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1239,
    "db_id": "thrombosis_prediction",
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "predicted_sql": "SELECT p.ID, (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS Age\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.HCT >= 52\nGROUP BY p.ID\nHAVING COUNT(e.ID) > 2;",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
    "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "predicted_sql": "WITH AbnormalPlatelet AS (\n    SELECT ID, PLT,\n        CASE\n            WHEN PLT < 100 THEN 'Lower'\n            WHEN PLT > 400 THEN 'Higher'\n            ELSE 'Normal'\n        END AS PlateletRange\n    FROM Laboratory\n    WHERE PLT <= 100 OR PLT >= 400\n)\nSELECT PlateletRange, COUNT(ID) AS PatientCount\nFROM AbnormalPlatelet\nGROUP BY PlateletRange;",
    "gold_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1242,
    "db_id": "thrombosis_prediction",
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "predicted_sql": "WITH Under_50 AS (\n    SELECT P.ID\n    FROM Patient AS P\n    WHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) < 50\n)\nSELECT U.ID, L.Date\nFROM Under_50 AS U\nJOIN Laboratory AS L ON U.ID = L.ID\nWHERE L.PLT BETWEEN 100 AND 400\nAND strftime('%Y', L.Date) = '1984';",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
    "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1243,
    "db_id": "thrombosis_prediction",
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "predicted_sql": "WITH AbnormalPT AS (\n    SELECT P.ID, P.SEX\n    FROM Patient P\n    JOIN Laboratory L ON P.ID = L.ID\n    WHERE (strftime('%Y', 'now') - strftime('%Y', P.Birthday)) > 55\n    AND L.PT >= 14\n)\nSELECT \n    (COUNT(DISTINCT CASE WHEN A.SEX = 'F' THEN A.ID END) * 100.0) / NULLIF(COUNT(DISTINCT A.ID), 0) AS Percentage\nFROM AbnormalPT A;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
    "evidence": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1247,
    "db_id": "thrombosis_prediction",
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "predicted_sql": "WITH MalePatients AS (\n    SELECT *\n    FROM Patient\n    WHERE Sex = 'M'\n)\n\nSELECT COUNT(*)\nFROM MalePatients\nJOIN Laboratory ON MalePatients.ID = Laboratory.ID\nWHERE WBC > 3.5 AND WBC < 9.0\nAND (FG <= 150 OR FG >= 450);",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
    "difficulty": "challenging"
  },
  {
    "question_id": 1251,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with an Ig G higher than normal?",
    "predicted_sql": "SELECT COUNT(DISTINCT e.ID) AS num_patients_igG_higher_than_normal\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.IGG >= 2000;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "evidence": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
    "difficulty": "simple"
  },
  {
    "question_id": 1252,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "predicted_sql": "SELECT COUNT(DISTINCT E.ID) AS Patients_With_Normal_IgG_And_Symptoms\nFROM Examination E\nJOIN Laboratory L ON E.ID = L.ID\nJOIN Patient P ON E.ID = P.ID\nWHERE L.IGG > 900 AND L.IGG < 2000\nAND E.Symptoms IS NOT NULL;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
    "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1254,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID) AS num_patients\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.Date >= '1990-01-01' \nAND l.IGA > 80 \nAND l.IGA < 500;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
    "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1255,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "predicted_sql": "WITH AbnormalIgM AS (\n    SELECT ID\n    FROM Laboratory\n    WHERE IGM <= 40 OR IGM >= 400\n)\nSELECT Diagnosis, COUNT(Diagnosis) AS DiagnosisCount\nFROM Examination\nWHERE ID IN AbnormalIgM\nGROUP BY Diagnosis\nORDER BY DiagnosisCount DESC\nLIMIT 1;",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
    "evidence": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
    "difficulty": "moderate"
  },
  {
    "question_id": 1256,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "predicted_sql": "SELECT COUNT(DISTINCT E.ID) AS num_patients\nFROM Examination E\nLEFT JOIN Laboratory L ON E.ID = L.ID\nLEFT JOIN Patient P ON E.ID = P.ID\nWHERE CRP = '+' AND Description IS NULL;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
    "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1257,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "predicted_sql": "SELECT COUNT(*) AS AbnormalCreatinineUnder70\nFROM Laboratory L\nJOIN Patient P ON L.ID = P.ID\nWHERE CRE >= 1.5\nAND (strftime('%Y', 'now') - strftime('%Y', Birthday)) < 70;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
    "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1265,
    "db_id": "thrombosis_prediction",
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID) AS num_patients\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE (l.RNP = '-' OR l.RNP = '+-') AND p.Admission = '+';",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "evidence": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1267,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "predicted_sql": "SELECT COUNT(*)\nFROM Examination E\nJOIN Laboratory L ON E.ID = L.ID\nJOIN Patient P ON E.ID = P.ID\nWHERE SM IN ('-', '+-') \nAND Thrombosis = 0;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1270,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "predicted_sql": "WITH NormalAntiScl70 AS (\n    SELECT P.ID\n    FROM Patient P\n    JOIN Laboratory L ON P.ID = L.ID\n    WHERE L.SC170 IN ('negative', '0')\n)\nSELECT COUNT(DISTINCT P.ID) AS num_female_no_symptom\nFROM Patient P\nJOIN NormalAntiScl70 N ON P.ID = N.ID\nLEFT JOIN Examination E ON P.ID = E.ID\nWHERE P.SEX = 'F' AND E.Symptoms IS NULL;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1275,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "predicted_sql": "WITH NormalAntiBodies AS (\n    SELECT DISTINCT l.ID\n    FROM Laboratory l\n    WHERE l.CENTROMEA IN ('-', '+-') AND l.SSB IN ('-', '+-')\n)\nSELECT COUNT(DISTINCT p.ID) AS MalePatientsWithNormalAntibodies\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN NormalAntiBodies n ON p.ID = n.ID\nWHERE p.SEX = 'M';",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "evidence": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1281,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "predicted_sql": "SELECT MIN(P.Birthday) AS \"Youngest Birth Date\"\nFROM Patient AS P\nJOIN Laboratory AS L ON P.ID = L.ID\nWHERE L.GOT >= 60;",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
    "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1302,
    "db_id": "thrombosis_prediction",
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "predicted_sql": "WITH Normal_CPK_Patients AS (\n    SELECT E.ID\n    FROM Examination E\n    JOIN Laboratory L ON E.ID = L.ID\n    WHERE L.CPK < 250\n)\nSELECT COUNT(*)\nFROM Normal_CPK_Patients N\nJOIN Examination E ON N.ID = E.ID\nWHERE E.KCT = '+' OR E.RVVT = '+' OR E.LAC = '+';",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1025,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "predicted_sql": "WITH TotalGoals AS (\n    SELECT l.name AS league_name, \n           SUM(m.home_team_goal + m.away_team_goal) AS total_goals\n    FROM Match m\n    JOIN League l ON m.league_id = l.id\n    WHERE m.season = '2015/2016'\n    GROUP BY l.name\n)\nSELECT league_name\nFROM TotalGoals\nORDER BY total_goals DESC\nLIMIT 1;",
    "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1028,
    "db_id": "european_football_2",
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "predicted_sql": "WITH away_wins AS (\n    SELECT t.team_long_name, COUNT(*) AS num_wins\n    FROM Match m\n    JOIN Team t ON m.away_team_api_id = t.team_api_id\n    WHERE m.season = '2009/2010'\n    AND m.away_team_goal > m.home_team_goal\n    AND m.league_id = (\n        SELECT id\n        FROM League\n        WHERE name = 'Scotland Premier League'\n    )\n    GROUP BY t.team_long_name\n    ORDER BY num_wins DESC\n    LIMIT 1\n)\nSELECT team_long_name \nFROM away_wins;",
    "gold_sql": "SELECT t3.team_long_name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id INNER JOIN Team AS t3 ON t2.away_team_api_id = t3.team_api_id WHERE t1.name = 'Scotland Premier League' AND t2.season = '2009/2010' AND t2.away_team_goal - t2.home_team_goal > 0 GROUP BY t2.away_team_api_id HAVING COUNT(*) = (SELECT MAX(won_matches_count) FROM (SELECT away_team_api_id, COUNT(*) AS won_matches_count FROM Match AS m INNER JOIN League AS l ON m.league_id = l.id WHERE l.name = 'Scotland Premier League' AND m.season = '2009/2010' AND m.away_team_goal - m.home_team_goal > 0 GROUP BY m.away_team_api_id))",
    "evidence": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));",
    "difficulty": "challenging"
  },
  {
    "question_id": 1029,
    "db_id": "european_football_2",
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "predicted_sql": "WITH top_teams AS (\n    SELECT team_api_id\n    FROM Team_Attributes\n    ORDER BY buildUpPlaySpeed DESC\n    LIMIT 4\n)\n\nSELECT m.home_team_api_id AS team_api_id, MAX(t.buildUpPlaySpeed) AS build_up_play_speed\nFROM Match m\nJOIN Team_Attributes t ON m.home_team_api_id = t.team_api_id\nJOIN top_teams tt ON m.home_team_api_id = tt.team_api_id\nGROUP BY m.home_team_api_id\nORDER BY build_up_play_speed DESC;",
    "gold_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
    "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1030,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "predicted_sql": "WITH match_draw_count AS (\n    SELECT l.name AS league_name, \n           SUM(m.home_team_goal = m.away_team_goal) AS draw_count\n    FROM Match m\n    JOIN League l ON m.league_id = l.id\n    WHERE m.season = '2015/2016'\n    GROUP BY l.name\n)\n\nSELECT league_name\nFROM match_draw_count\nWHERE draw_count = (SELECT MAX(draw_count) FROM match_draw_count);",
    "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1031,
    "db_id": "european_football_2",
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "predicted_sql": "WITH player_age AS (\n    SELECT p.player_name, \n           (julianday('now') - julianday(p.birthday)) / 365 AS age\n    FROM Player p\n    JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\n    WHERE pa.sprint_speed >= 97 \n    AND pa.date BETWEEN '2013-01-01' AND '2015-12-31'\n)\n\nSELECT * FROM player_age;",
    "gold_sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
    "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1032,
    "db_id": "european_football_2",
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "predicted_sql": "SELECT l.name AS league_name, COUNT(m.id) AS total_matches\nFROM League l\nJOIN Match m ON l.id = m.league_id\nGROUP BY l.id\nORDER BY total_matches DESC\nLIMIT 1;",
    "gold_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
    "evidence": " league with highest matches of all time refers to MAX(COUNT(league_id));",
    "difficulty": "moderate"
  },
  {
    "question_id": 1035,
    "db_id": "european_football_2",
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "predicted_sql": "SELECT team_fifa_api_id\nFROM Team_Attributes\nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;",
    "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; ",
    "difficulty": "simple"
  },
  {
    "question_id": 1036,
    "db_id": "european_football_2",
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "predicted_sql": "SELECT team_long_name\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team_Attributes.buildUpPlayPassing > (SELECT AVG(buildUpPlayPassing) FROM Team_Attributes WHERE buildUpPlayPassing IS NOT NULL)\nAND strftime('%Y', Team_Attributes.date) = '2012';",
    "gold_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
    "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 1037,
    "db_id": "european_football_2",
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "predicted_sql": "WITH player_birth_year AS (\n    SELECT player_api_id, \n           CASE \n               WHEN strftime('%Y', birthday) BETWEEN '1987' AND '1992' THEN 1\n               ELSE 0\n           END AS born_between_1987_1992\n    FROM Player\n)\nSELECT 100.0 * SUM(preferred_foot = 'left') / COUNT(player_fifa_api_id) AS percentage_of_players_prefer_left_foot\nFROM Player_Attributes pa\nJOIN player_birth_year pb ON pa.player_api_id = pb.player_api_id\nWHERE pb.born_between_1987_1992 = 1;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
    "difficulty": "challenging"
  },
  {
    "question_id": 1039,
    "db_id": "european_football_2",
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "predicted_sql": "SELECT AVG(CAST(pa.long_shots AS REAL)) \nFROM Player_Attributes AS pa \nJOIN Player AS p ON pa.player_fifa_api_id = p.player_fifa_api_id \nWHERE p.player_name = 'Ahmed Samir Farag';",
    "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
    "difficulty": "simple"
  },
  {
    "question_id": 1040,
    "db_id": "european_football_2",
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "predicted_sql": "WITH player_heading_accuracy_avg AS (\n    SELECT pa.player_api_id, p.player_name, AVG(pa.heading_accuracy) AS avg_heading_accuracy\n    FROM Player_Attributes pa\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE p.height > 180\n    GROUP BY pa.player_api_id, p.player_name\n)\nSELECT player_name\nFROM player_heading_accuracy_avg\nORDER BY avg_heading_accuracy DESC\nLIMIT 10;",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
    "evidence": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
    "difficulty": "moderate"
  },
  {
    "question_id": 1042,
    "db_id": "european_football_2",
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "predicted_sql": "WITH home_avg_goals AS (\n    SELECT league_id, AVG(home_team_goal) AS avg_home_goals\n    FROM Match\n    WHERE season = '2009/2010'\n    GROUP BY league_id\n),\naway_avg_goals AS (\n    SELECT league_id, AVG(away_team_goal) AS avg_away_goals\n    FROM Match\n    WHERE season = '2009/2010'\n    GROUP BY league_id\n)\nSELECT L.name\nFROM League L\nJOIN home_avg_goals H ON L.id = H.league_id\nJOIN away_avg_goals A ON L.id = A.league_id\nWHERE H.avg_home_goals > A.avg_away_goals;",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
    "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1044,
    "db_id": "european_football_2",
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "predicted_sql": "SELECT *\nFROM Player\nWHERE substr(birthday, 1, 7) = '1970-10';",
    "gold_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';",
    "difficulty": "simple"
  },
  {
    "question_id": 1048,
    "db_id": "european_football_2",
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "predicted_sql": "WITH Player_2011 AS (\n    SELECT pa.player_api_id, pa.overall_rating\n    FROM Player_Attributes pa\n    WHERE substr(pa.date, 1, 4) = '2011'\n)\nSELECT AVG(overall_rating) AS overall_rating\nFROM Player_2011 p\nJOIN Player pl ON p.player_api_id = pl.player_api_id\nWHERE pl.player_name = 'Gabriel Tamas';",
    "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "difficulty": "simple"
  },
  {
    "question_id": 1057,
    "db_id": "european_football_2",
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "predicted_sql": "WITH PolandMatches AS (\n    SELECT Match.id, Match.home_team_goal\n    FROM Match\n    JOIN Country ON Match.country_id = Country.id\n    WHERE Country.name = 'Poland' AND Match.season = '2010/2011'\n)\nSELECT AVG(home_team_goal) AS average_home_team_goal\nFROM PolandMatches;",
    "gold_sql": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1058,
    "db_id": "european_football_2",
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "predicted_sql": "WITH ShortestTallest AS (\n    SELECT MIN(height) AS shortest_height, MAX(height) AS tallest_height\n    FROM Player\n)\nSELECT p.player_name AS player_name, \n       AVG(pa.finishing) AS avg_finishing_rate\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nJOIN ShortestTallest st ON p.height = st.tallest_height OR p.height = st.shortest_height\nGROUP BY p.player_name\nHAVING COUNT(*) = 1\nORDER BY avg_finishing_rate DESC\nLIMIT 1;",
    "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
    "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
    "difficulty": "challenging"
  },
  {
    "question_id": 1068,
    "db_id": "european_football_2",
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "predicted_sql": "WITH Player_Height_Filter AS (\n    SELECT pa.player_api_id\n    FROM Player_Attributes pa\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE p.height > 170\n)\nSELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player_Attributes pa\nJOIN Player_Height_Filter phf ON pa.player_api_id = phf.player_api_id\nWHERE strftime('%Y', pa.date) >= '2010' AND strftime('%Y', pa.date) <= '2015';",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
    "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1076,
    "db_id": "european_football_2",
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "predicted_sql": "SELECT\n    (SELECT AVG(ball_control) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Abdou Diallo') -\n    (SELECT AVG(ball_control) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Aaron Appindangoye') as diff_avg_ball_control_score;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
    "difficulty": "challenging"
  },
  {
    "question_id": 1078,
    "db_id": "european_football_2",
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "predicted_sql": "SELECT player_name\nFROM Player\nWHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')\nORDER BY birthday DESC\nLIMIT 1;",
    "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "simple"
  },
  {
    "question_id": 1079,
    "db_id": "european_football_2",
    "question": "Which player is the tallest?",
    "predicted_sql": "SELECT player_name\nFROM Player\nORDER BY height DESC\nLIMIT 1;",
    "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "evidence": "tallest player refers to MAX(height);",
    "difficulty": "simple"
  },
  {
    "question_id": 1080,
    "db_id": "european_football_2",
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "predicted_sql": "WITH LeftFootPlayers AS (\n    SELECT COUNT(*) AS num_left_foot_attacker\n    FROM Player_Attributes\n    WHERE preferred_foot = 'left'\n    AND attacking_work_rate = 'low'\n)\nSELECT num_left_foot_attacker\nFROM LeftFootPlayers;",
    "gold_sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "evidence": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1084,
    "db_id": "european_football_2",
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "predicted_sql": "SELECT COUNT(DISTINCT pa.player_api_id)\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986'\nAND pa.defensive_work_rate = 'high';",
    "gold_sql": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
    "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;",
    "difficulty": "challenging"
  },
  {
    "question_id": 1088,
    "db_id": "european_football_2",
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "predicted_sql": "SELECT player_name\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nWHERE volleys > 70 AND dribbling > 70;",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.volleys > 70 AND t2.dribbling > 70",
    "evidence": "volley score are over 70 refers to volleys > 70; dribbling score refers to dribbling are over 70 refers to dribbling > 70;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1091,
    "db_id": "european_football_2",
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "predicted_sql": "SELECT COUNT(*) AS match_count\nFROM Match\nJOIN League ON Match.league_id = League.id\nWHERE League.name = 'Belgium Jupiler League'\nAND SUBSTR(Match.date, 1, 7) = '2009-04';",
    "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
    "difficulty": "moderate"
  },
  {
    "question_id": 1092,
    "db_id": "european_football_2",
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "predicted_sql": "SELECT l.name AS league_name\nFROM League l\nJOIN Match m ON l.id = m.league_id\nWHERE m.season = '2008/2009'\nGROUP BY l.name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "gold_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
    "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
    "difficulty": "simple"
  },
  {
    "question_id": 1094,
    "db_id": "european_football_2",
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "predicted_sql": "SELECT (100.0 * ((\n        SELECT overall_rating \n        FROM Player_Attributes \n        WHERE player_name = 'Ariel Borysiuk'\n    ) - (\n        SELECT overall_rating \n        FROM Player_Attributes \n        WHERE player_name = 'Paulin Puel'\n    )) / (\n        SELECT overall_rating \n        FROM Player_Attributes \n        WHERE player_name = 'Paulin Puel'\n    )) AS percentage_difference;",
    "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
    "difficulty": "challenging"
  },
  {
    "question_id": 1096,
    "db_id": "european_football_2",
    "question": "Calculate the average overall rating of Pietro Marino.",
    "predicted_sql": "SELECT AVG(overall_rating) AS average_rating\nFROM Player_Attributes\nJOIN Player ON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player.player_name = 'Pietro Marino';",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1098,
    "db_id": "european_football_2",
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "predicted_sql": "WITH AjaxChance AS (\n    SELECT team_long_name, chanceCreationPassing, chanceCreationPassingClass\n    FROM Team\n    JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\n    WHERE team_long_name = 'Ajax'\n    ORDER BY chanceCreationPassing DESC\n    LIMIT 1\n)\n\nSELECT chanceCreationPassing, chanceCreationPassingClass\nFROM AjaxChance;",
    "gold_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "difficulty": "moderate"
  },
  {
    "question_id": 1102,
    "db_id": "european_football_2",
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "predicted_sql": "WITH players_77_rating AS (\n    SELECT pa.player_api_id, p.player_name, p.birthday\n    FROM Player_Attributes AS pa\n    JOIN Player AS p ON pa.player_api_id = p.player_api_id\n    WHERE pa.overall_rating = 77\n    AND pa.date LIKE '2016-06-23%'\n)\nSELECT player_name\nFROM players_77_rating\nWHERE birthday = (SELECT MAX(birthday) FROM players_77_rating);",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
    "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "moderate"
  },
  {
    "question_id": 1103,
    "db_id": "european_football_2",
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "predicted_sql": "WITH player_id AS (\n    SELECT id\n    FROM Player\n    WHERE player_name = 'Aaron Mooy'\n)\nSELECT overall_rating\nFROM Player_Attributes\nWHERE player_api_id = (SELECT id FROM player_id)\n    AND date LIKE '2016-02-04%';",
    "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1105,
    "db_id": "european_football_2",
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "predicted_sql": "WITH Player_ID AS (\n    SELECT player_api_id\n    FROM Player\n    WHERE player_name = 'Francesco Migliore'\n)\n\nSELECT AVG(overall_rating) AS avg_attacking_work_rate\nFROM Player_Attributes\nWHERE player_api_id IN (\n    SELECT player_api_id\n    FROM Player_ID\n)\nAND date LIKE '2015-05-01%';",
    "gold_sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "evidence": "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1107,
    "db_id": "european_football_2",
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "predicted_sql": "WITH max_crossing_date AS (\n    SELECT date\n    FROM Player_Attributes\n    WHERE player_api_id = (\n        SELECT player_api_id\n        FROM Player\n        WHERE player_name = 'Kevin Constant'\n    )\n    ORDER BY crossing DESC\n    LIMIT 1\n)\n\nSELECT date\nFROM max_crossing_date;",
    "gold_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1110,
    "db_id": "european_football_2",
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "predicted_sql": "WITH team_id AS (\n    SELECT team_api_id\n    FROM Team\n    WHERE team_long_name = 'FC Lorient'\n)\nSELECT buildUpPlayPassingClass\nFROM Team_Attributes\nWHERE team_api_id IN team_id\n    AND date LIKE '2010-02-22%';",
    "gold_sql": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
    "evidence": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1113,
    "db_id": "european_football_2",
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "predicted_sql": "SELECT defenceAggressionClass\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team.team_long_name = 'Hannover 96'\nAND Team_Attributes.date = '2015-09-10';",
    "gold_sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
    "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1114,
    "db_id": "european_football_2",
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "predicted_sql": "SELECT AVG(pa.overall_rating) as average_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Marko Arnautovic'\nAND pa.date BETWEEN '2007-02-22' AND '2016-04-21';",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
    "difficulty": "challenging"
  },
  {
    "question_id": 1115,
    "db_id": "european_football_2",
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "predicted_sql": "SELECT ((SELECT overall_rating FROM Player_Attributes pa1 \n         JOIN Player p1 ON pa1.player_api_id = p1.player_api_id \n         WHERE p1.player_name = 'Landon Donovan' AND pa1.date <= '2013-07-12' \n         ORDER BY pa1.date DESC LIMIT 1) - \n        (SELECT overall_rating FROM Player_Attributes pa2 \n         JOIN Player p2 ON pa2.player_api_id = p2.player_api_id \n         WHERE p2.player_name = 'Jordan Bowery' AND pa2.date <= '2013-07-12' \n         ORDER BY pa2.date DESC LIMIT 1)) * 100.0 /\n        (SELECT overall_rating FROM Player_Attributes pa3 \n         JOIN Player p3 ON pa3.player_api_id = p3.player_api_id \n         WHERE p3.player_name = 'Jordan Bowery' AND pa3.date <= '2013-07-12' \n         ORDER BY pa3.date DESC LIMIT 1) AS percentage_difference;",
    "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
    "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 1116,
    "db_id": "european_football_2",
    "question": "List down most tallest players' name.",
    "predicted_sql": "WITH TallestPlayers AS (\n    SELECT player_name\n    FROM Player\n    ORDER BY height DESC\n    LIMIT 1\n)\n\nSELECT player_name\nFROM TallestPlayers;",
    "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
    "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 ",
    "difficulty": "simple"
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "predicted_sql": "SELECT player.player_name AS strongest_player\nFROM player\nJOIN player_attributes ON player.player_api_id = player_attributes.player_api_id\nWHERE player_attributes.overall_rating = (SELECT MAX(overall_rating) FROM player_attributes);",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "strongest players refers to player has MAX(overall_rating)",
    "difficulty": "simple"
  },
  {
    "question_id": 1124,
    "db_id": "european_football_2",
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "predicted_sql": "WITH AttackingPlayers AS (\n    SELECT p.player_name\n    FROM Match m\n    JOIN Player_Attributes pa ON m.home_player_1 = pa.player_api_id \n        OR m.home_player_2 = pa.player_api_id\n        OR m.home_player_3 = pa.player_api_id\n        OR m.home_player_4 = pa.player_api_id\n        OR m.home_player_5 = pa.player_api_id\n        OR m.home_player_6 = pa.player_api_id\n        OR m.home_player_7 = pa.player_api_id\n        OR m.home_player_8 = pa.player_api_id\n        OR m.home_player_9 = pa.player_api_id\n        OR m.home_player_10 = pa.player_api_id\n        OR m.home_player_11 = pa.player_api_id\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE pa.attacking_work_rate = 'high'\n    \n    UNION \n    \n    SELECT p.player_name\n    FROM Match m\n    JOIN Player_Attributes pa ON m.away_player_1 = pa.player_api_id \n        OR m.away_player_2 = pa.player_api_id\n        OR m.away_player_3 = pa.player_api_id\n        OR m.away_player_4 = pa.player_api_id\n        OR m.away_player_5 = pa.player_api_id\n        OR m.away_player_6 = pa.player_api_id\n        OR m.away_player_7 = pa.player_api_id\n        OR m.away_player_8 = pa.player_api_id\n        OR m.away_player_9 = pa.player_api_id\n        OR m.away_player_10 = pa.player_api_id\n        OR m.away_player_11 = pa.player_api_id\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE pa.attacking_work_rate = 'high'\n)\n\nSELECT DISTINCT player_name\nFROM AttackingPlayers;",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';",
    "difficulty": "moderate"
  },
  {
    "question_id": 1130,
    "db_id": "european_football_2",
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "predicted_sql": "WITH team_chance_creation AS (\n    SELECT t.team_short_name\n    FROM Team t\n    JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\n    WHERE ta.chanceCreationPassingClass = 'Safe'\n)\nSELECT DISTINCT team_short_name\nFROM team_chance_creation;",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
    "difficulty": "moderate"
  },
  {
    "question_id": 1133,
    "db_id": "european_football_2",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "predicted_sql": "SELECT COUNT(*) \nFROM Player \nWHERE player_name LIKE 'Aaron%' \nAND birthday > '1999-12-31';",
    "gold_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
    "difficulty": "simple"
  },
  {
    "question_id": 1134,
    "db_id": "european_football_2",
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "predicted_sql": "SELECT (SELECT jumping FROM player_attributes WHERE player_api_id = 6) -\n       (SELECT jumping FROM player_attributes WHERE player_api_id = 23) AS difference;",
    "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
    "difficulty": "simple"
  },
  {
    "question_id": 1135,
    "db_id": "european_football_2",
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "predicted_sql": "WITH PlayerStats AS (\n    SELECT player_api_id\n    FROM Player_Attributes\n    WHERE preferred_foot = 'right'\n    ORDER BY potential\n    LIMIT 4\n)\n\nSELECT player_api_id\nFROM PlayerStats;",
    "gold_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
    "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1136,
    "db_id": "european_football_2",
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "predicted_sql": "WITH potential_max AS (\n    SELECT MAX(crossing) AS max_crossing\n    FROM Player_Attributes\n)\nSELECT COUNT(DISTINCT pa.player_api_id) AS num_players_max_crossing_left_foot\nFROM Player_Attributes pa\nJOIN potential_max pm ON pa.crossing = pm.max_crossing\nWHERE pa.preferred_foot = 'left';",
    "gold_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'",
    "difficulty": "moderate"
  },
  {
    "question_id": 1139,
    "db_id": "european_football_2",
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "predicted_sql": "SELECT home_team_goal AS final_score_for_home_team, away_team_goal AS final_score_for_away_team\nFROM Match\nJOIN League ON Match.league_id = League.id\nWHERE League.name = 'Belgium Jupiler League'\nAND Match.date LIKE '2008-09-24%'\nLIMIT 1;",
    "gold_sql": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
    "evidence": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
    "difficulty": "challenging"
  },
  {
    "question_id": 1141,
    "db_id": "european_football_2",
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "predicted_sql": "SELECT buildUpPlaySpeedClass \nFROM Team \nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id \nWHERE team_long_name = 'KSV Cercle Brugge';",
    "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "difficulty": "moderate"
  },
  {
    "question_id": 1144,
    "db_id": "european_football_2",
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "predicted_sql": "WITH heaviest_player AS (\n    SELECT *\n    FROM Player\n    WHERE weight = (\n        SELECT MAX(weight)\n        FROM Player\n    )\n)\nSELECT finishing, curve\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id FROM heaviest_player);",
    "gold_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "evidence": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
    "difficulty": "simple"
  },
  {
    "question_id": 1145,
    "db_id": "european_football_2",
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "predicted_sql": "WITH LeagueGamesCount AS (\n    SELECT l.name AS league_name, COUNT(m.id) AS games_count\n    FROM League l\n    JOIN Match m ON l.id = m.league_id\n    WHERE m.season = '2015/2016'\n    GROUP BY l.id\n    ORDER BY games_count DESC\n    LIMIT 4\n)\n\nSELECT league_name\nFROM LeagueGamesCount;",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "evidence": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))",
    "difficulty": "simple"
  },
  {
    "question_id": 1146,
    "db_id": "european_football_2",
    "question": "Please provide the full name of the away team that scored the most goals.",
    "predicted_sql": "SELECT team_long_name AS away_team_name\nFROM Team\nJOIN Match ON Team.team_api_id = Match.away_team_api_id\nGROUP BY away_team_name\nORDER BY MAX(away_team_goal) DESC\nLIMIT 1;",
    "gold_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
    "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1147,
    "db_id": "european_football_2",
    "question": "Please name one player whose overall strength is the greatest.",
    "predicted_sql": "SELECT Player.player_name\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nORDER BY Player_Attributes.overall_rating DESC\nLIMIT 1;",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "evidence": "overall strength is the greatest refers to MAX(overall_rating)",
    "difficulty": "simple"
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "predicted_sql": "WITH Height_Strength AS\n(\n    SELECT p.player_api_id\n    FROM Player_Attributes pa\n    JOIN Player p ON pa.player_api_id = p.player_api_id\n    WHERE p.height < 180 AND pa.strength > 70\n)\nSELECT CAST(COUNT(hs.player_api_id) AS REAL) / CAST(COUNT(DISTINCT p.player_api_id) AS REAL) * 100 AS percentage\nFROM Height_Strength hs\nJOIN Player p ON hs.player_api_id = p.player_api_id;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 846,
    "db_id": "formula_1",
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "predicted_sql": "WITH FirstQualifying AS (\n    SELECT driverId, MAX(q1) AS max_q1\n    FROM qualifying\n    WHERE raceId = 20\n    GROUP BY driverId\n)\nSELECT d.driverRef\nFROM FirstQualifying f\nJOIN drivers d ON f.driverId = d.driverId\nWHERE f.max_q1 = 'yes';",
    "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
    "difficulty": "moderate"
  },
  {
    "question_id": 847,
    "db_id": "formula_1",
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "predicted_sql": "WITH best_lap AS (\n    SELECT q.raceId, q.driverId, q.q2 AS best_lap_time\n    FROM qualifying q\n    WHERE q.number = 19\n)\nSELECT d.surname\nFROM best_lap bl\nJOIN drivers d ON bl.driverId = d.driverId\nWHERE bl.best_lap_time = (\n    SELECT MIN(q2)\n    FROM qualifying\n    WHERE raceId = bl.raceId\n    AND number = 19\n);",
    "gold_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL AND T1.q2 = (SELECT MIN(q2) AS min_q2 FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)",
    "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
    "difficulty": "simple"
  },
  {
    "question_id": 850,
    "db_id": "formula_1",
    "question": "Please give the name of the race held on the circuits in Germany.",
    "predicted_sql": "SELECT races.name\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Germany';",
    "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "evidence": "Germany is a name of country;",
    "difficulty": "simple"
  },
  {
    "question_id": 854,
    "db_id": "formula_1",
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "predicted_sql": "SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Australian Grand Prix';",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
    "difficulty": "simple"
  },
  {
    "question_id": 857,
    "db_id": "formula_1",
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "predicted_sql": "SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Abu Dhabi Grand Prix';",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
    "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'",
    "difficulty": "simple"
  },
  {
    "question_id": 859,
    "db_id": "formula_1",
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "predicted_sql": "SELECT q1\nFROM qualifying\nJOIN drivers ON qualifying.driverId = drivers.driverId\nJOIN races ON qualifying.raceId = races.raceId\nWHERE forename = 'Bruno' AND surname = 'Senna' AND races.raceId = 354;",
    "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "simple"
  },
  {
    "question_id": 861,
    "db_id": "formula_1",
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "predicted_sql": "WITH q3_times AS (\n    SELECT raceId, driverId, q3\n    FROM qualifying\n    WHERE raceId = 903\n    AND q3 LIKE '0:01:54%'\n)\n\nSELECT number\nFROM drivers\nWHERE driverId = (SELECT driverId FROM q3_times);",
    "gold_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
    "difficulty": "simple"
  },
  {
    "question_id": 862,
    "db_id": "formula_1",
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "predicted_sql": "SELECT COUNT(DISTINCT rs.driverId) AS not_finished_count\nFROM races r\nJOIN results rs ON rs.raceId = r.raceId\nLEFT JOIN status s ON rs.statusId = s.statusId\nWHERE r.name = 'Bahrain Grand Prix' \nAND (rs.time IS NULL OR s.status = 'R');",
    "gold_sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
    "difficulty": "simple"
  },
  {
    "question_id": 865,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "predicted_sql": "WITH finished_drivers AS (\n    SELECT r.driverId\n    FROM results r\n    WHERE r.raceId = 592\n      AND r.time IS NOT NULL\n)\nSELECT d.forename, d.surname\nFROM drivers d\nJOIN finished_drivers fd ON d.driverId = fd.driverId\nORDER BY d.dob\nLIMIT 1;",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "moderate"
  },
  {
    "question_id": 866,
    "db_id": "formula_1",
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "predicted_sql": "WITH SelectedLap AS (\n    SELECT driverId\n    FROM lapTimes\n    WHERE raceId = 161\n    AND time LIKE '0:01:27%'\n)\nSELECT d.forename, d.surname, d.url\nFROM drivers d\nJOIN SelectedLap s ON d.driverId = s.driverId;",
    "gold_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
    "difficulty": "moderate"
  },
  {
    "question_id": 868,
    "db_id": "formula_1",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "predicted_sql": "SELECT circuits.name, circuits.lat, circuits.lng\nFROM circuits\nJOIN races ON circuits.circuitId = races.circuitId\nWHERE races.name = 'Malaysian Grand Prix';",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
    "difficulty": "simple"
  },
  {
    "question_id": 869,
    "db_id": "formula_1",
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "predicted_sql": "SELECT c.url AS introduction_website\nFROM constructorResults cr\nJOIN constructors c ON cr.constructorId = c.constructorId\nWHERE cr.points = (\n    SELECT MAX(points)\n    FROM constructorResults\n    WHERE raceId = 9\n) AND cr.raceId = 9;",
    "gold_sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
    "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
    "difficulty": "moderate"
  },
  {
    "question_id": 872,
    "db_id": "formula_1",
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "predicted_sql": "SELECT drivers.code\nFROM qualifying\nJOIN drivers ON drivers.driverId = qualifying.driverId\nWHERE qualifying.raceId = 45\nAND qualifying.q3 LIKE '0:01:33%';",
    "gold_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
    "difficulty": "simple"
  },
  {
    "question_id": 875,
    "db_id": "formula_1",
    "question": "Show me the season page of year when the race No. 901 took place.",
    "predicted_sql": "SELECT s.url AS season_page\nFROM seasons s\nJOIN races r ON s.year = r.year\nWHERE r.raceId = 901;",
    "gold_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "evidence": "the season page refers to url; race number refers to raceId;",
    "difficulty": "simple"
  },
  {
    "question_id": 877,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "predicted_sql": "SELECT drivers.surname\nFROM results\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE results.raceId = 872\nAND results.position IS NOT NULL\nORDER BY drivers.dob DESC\nLIMIT 1;",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
    "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
    "difficulty": "moderate"
  },
  {
    "question_id": 879,
    "db_id": "formula_1",
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "predicted_sql": "SELECT d.nationality\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.fastestLapSpeed = (SELECT MAX(fastestLapSpeed) FROM results);",
    "gold_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;",
    "difficulty": "moderate"
  },
  {
    "question_id": 880,
    "db_id": "formula_1",
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "predicted_sql": "SELECT \n    ((r1.fastestLapSpeed - r2.fastestLapSpeed) * 100.0) / r2.fastestLapSpeed AS percentage_faster\nFROM \n    results r1\nJOIN \n    results r2 ON r1.raceId = 853 AND r2.raceId = 854\nJOIN \n    drivers d ON r1.driverId = d.driverId\nWHERE \n    d.forename = 'Paul' AND d.surname = 'di Resta';",
    "gold_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
    "difficulty": "challenging"
  },
  {
    "question_id": 881,
    "db_id": "formula_1",
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "predicted_sql": "WITH RaceParticipation AS (\n    SELECT r.raceId, r.date, rs.driverId\n    FROM races r\n    JOIN results rs ON r.raceId = rs.raceId\n    WHERE r.date = '1983-07-16'\n)\nSELECT COUNT(rp.driverId) * 100.0 / COUNT(DISTINCT rs.driverId) AS completion_rate_percentage\nFROM RaceParticipation rp\nJOIN results rs ON rp.driverId = rs.driverId AND rp.raceId = rs.raceId;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
    "difficulty": "moderate"
  },
  {
    "question_id": 884,
    "db_id": "formula_1",
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "predicted_sql": "SELECT name \nFROM races \nWHERE date = (SELECT MIN(date) FROM races);",
    "gold_sql": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "evidence": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));",
    "difficulty": "moderate"
  },
  {
    "question_id": 892,
    "db_id": "formula_1",
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "predicted_sql": "SELECT drivers.forename || ' ' || drivers.surname AS full_name, MAX(driverStandings.points) AS max_points\nFROM drivers\nJOIN driverStandings ON drivers.driverId = driverStandings.driverId;",
    "gold_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
    "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "moderate"
  },
  {
    "question_id": 894,
    "db_id": "formula_1",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "predicted_sql": "SELECT drivers.forename, drivers.surname, races.name\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nJOIN races ON lapTimes.raceId = races.raceId\nWHERE lapTimes.milliseconds = (SELECT MIN(lapTimes.milliseconds) FROM lapTimes);",
    "gold_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
    "difficulty": "moderate"
  },
  {
    "question_id": 895,
    "db_id": "formula_1",
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "predicted_sql": "SELECT AVG(milliseconds)\nFROM lapTimes\nJOIN races ON lapTimes.raceId = races.raceId\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'\nAND races.name = 'Malaysian Grand Prix'\nAND races.year = 2009;",
    "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
    "difficulty": "moderate"
  },
  {
    "question_id": 896,
    "db_id": "formula_1",
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "predicted_sql": "WITH HamiltonRaces AS (\n    SELECT raceId\n    FROM results\n    JOIN drivers ON results.driverId = drivers.driverId\n    WHERE surname = 'Hamilton' AND position > 1\n    AND raceId IN (SELECT raceId FROM races WHERE year >= 2010)\n),\nHamiltonTotalRaces AS (\n    SELECT raceId\n    FROM results\n    JOIN drivers ON results.driverId = drivers.driverId\n    WHERE surname = 'Hamilton'\n    AND raceId IN (SELECT raceId FROM races WHERE year >= 2010)\n)\nSELECT (100.0 * COUNT(HamiltonRaces.raceId) / NULLIF(COUNT(HamiltonTotalRaces.raceId), 0)) AS percentage\nFROM HamiltonRaces, HamiltonTotalRaces;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
    "difficulty": "challenging"
  },
  {
    "question_id": 897,
    "db_id": "formula_1",
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "predicted_sql": "SELECT \n    d.forename || ' ' || d.surname AS driver_name, \n    d.nationality AS driver_nationality, \n    MAX(ds.points) AS max_points_score\nFROM \n    drivers d \nJOIN \n    driverStandings ds ON d.driverId = ds.driverId\nWHERE \n    ds.wins = (\n        SELECT \n            MAX(wins) \n        FROM \n            driverStandings\n    )\nGROUP BY \n    driver_name, \n    driver_nationality\nLIMIT 1;",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
    "difficulty": "moderate"
  },
  {
    "question_id": 898,
    "db_id": "formula_1",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "predicted_sql": "SELECT D.forename || ' ' || D.surname AS driver_name, (strftime('%Y', 'now') - strftime('%Y', D.dob)) AS age\nFROM drivers D\nWHERE D.nationality = 'Japanese'\nORDER BY age\nLIMIT 1;",
    "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "difficulty": "simple"
  },
  {
    "question_id": 901,
    "db_id": "formula_1",
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "predicted_sql": "SELECT races.name AS race_name, circuits.name AS circuit_name, circuits.location\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE strftime('%Y', races.date) = '2005' AND strftime('%m', races.date) = '09';",
    "gold_sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
    "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
    "difficulty": "simple"
  },
  {
    "question_id": 902,
    "db_id": "formula_1",
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "predicted_sql": "SELECT races.name AS race_name\nFROM races\nJOIN results ON races.raceId = results.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE drivers.forename || ' ' || drivers.surname = 'Alex Yoong'\nAND results.position < 20;",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
    "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
    "difficulty": "simple"
  },
  {
    "question_id": 904,
    "db_id": "formula_1",
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "predicted_sql": "WITH fastest_lap AS (\n    SELECT races.year as year, circuits.name as race, MIN(milliseconds) as fastest_lap_time\n    FROM races\n    JOIN circuits ON races.circuitId = circuits.circuitId\n    JOIN results ON races.raceId = results.raceId\n    WHERE results.driverId = (SELECT driverId FROM drivers WHERE forename = 'Michael' AND surname = 'Schumacher')\n    GROUP BY races.year, circuits.name\n)\nSELECT race, year\nFROM fastest_lap\nWHERE fastest_lap_time = (SELECT MIN(fastest_lap_time) FROM fastest_lap);",
    "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
    "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "moderate"
  },
  {
    "question_id": 906,
    "db_id": "formula_1",
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "predicted_sql": "SELECT races.name AS first_race, driverStandings.points AS first_race_points\nFROM driverStandings\nJOIN races ON driverStandings.raceId = races.raceId\nJOIN drivers ON driverStandings.driverId = drivers.driverId\nWHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'\nAND races.year = (SELECT MIN(year) FROM races);",
    "gold_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = (SELECT MIN(T4.year) FROM races AS T4 INNER JOIN driverStandings AS T5 ON T5.raceId = T4.raceId INNER JOIN drivers AS T6 ON T6.driverId = T5.driverId WHERE T6.forename = 'Lewis' AND T6.surname = 'Hamilton')",
    "evidence": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "moderate"
  },
  {
    "question_id": 909,
    "db_id": "formula_1",
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN r.name = 'European Grand Prix' AND c.country = 'Germany' THEN r.raceId END) * 100.0) / \n    COUNT(CASE WHEN r.name = 'European Grand Prix' THEN r.raceId END) AS percentage\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.name = 'European Grand Prix';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 910,
    "db_id": "formula_1",
    "question": "What's the location coordinates of Silverstone Circuit?",
    "predicted_sql": "SELECT lat, lng \nFROM circuits \nWHERE name = 'Silverstone Circuit';",
    "gold_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "difficulty": "simple"
  },
  {
    "question_id": 912,
    "db_id": "formula_1",
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "predicted_sql": "SELECT circuitRef AS reference_name\nFROM circuits\nWHERE name = 'Marina Bay Street Circuit';",
    "gold_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "difficulty": "simple"
  },
  {
    "question_id": 915,
    "db_id": "formula_1",
    "question": "Which country is the oldest driver from?",
    "predicted_sql": "SELECT d.nationality AS oldest_driver_country\nFROM drivers d\nORDER BY d.dob ASC\nLIMIT 1;",
    "gold_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "difficulty": "simple"
  },
  {
    "question_id": 928,
    "db_id": "formula_1",
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "predicted_sql": "WITH Canadian_Grand_Prix AS (\n    SELECT raceId\n    FROM races\n    WHERE name = 'Canadian Grand Prix' AND date BETWEEN '2007-01-01' AND '2007-12-31'\n)\nSELECT DISTINCT d.driverRef\nFROM driverStandings ds\nJOIN drivers d ON ds.driverId = d.driverId\nJOIN Canadian_Grand_Prix cgp ON ds.raceId = cgp.raceId\nWHERE ds.position = 1;",
    "gold_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
    "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
    "difficulty": "moderate"
  },
  {
    "question_id": 930,
    "db_id": "formula_1",
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "predicted_sql": "WITH ranked_results AS (\n    SELECT r.name AS race_name, r.date, rs.position, rs.rank, d.forename, d.surname\n    FROM results rs\n    JOIN races r ON rs.raceId = r.raceId\n    JOIN drivers d ON rs.driverId = d.driverId\n    WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\n)\nSELECT race_name\nFROM ranked_results\nWHERE rank = (SELECT MIN(rank) FROM ranked_results);",
    "gold_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
    "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "difficulty": "simple"
  },
  {
    "question_id": 931,
    "db_id": "formula_1",
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "predicted_sql": "SELECT MAX(CAST(fastestLapSpeed AS REAL)) AS fastest_lap_speed\nFROM races AS r\nJOIN results AS res ON r.raceId = res.raceId\nWHERE r.name = 'Spanish Grand Prix'\nAND res.fastestLapSpeed IS NOT NULL;",
    "gold_sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
    "difficulty": "moderate"
  },
  {
    "question_id": 933,
    "db_id": "formula_1",
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "predicted_sql": "SELECT positionOrder AS final_rank\nFROM results\nJOIN races ON results.raceId = races.raceId\nJOIN drivers ON results.driverId = drivers.driverId\nWHERE races.name = 'Chinese Grand Prix'\nAND drivers.forename || ' ' || drivers.surname = 'Lewis Hamilton'\nAND races.year = 2008;",
    "gold_sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
    "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
    "difficulty": "moderate"
  },
  {
    "question_id": 937,
    "db_id": "formula_1",
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "predicted_sql": "WITH Ranked_Drivers AS (\n    SELECT r.year, res.driverId, res.position, res.time\n    FROM results res\n    JOIN races r ON res.raceId = r.raceId\n    WHERE r.name = 'Chinese Grand Prix' AND r.year = 2008\n    ORDER BY res.position\n    LIMIT 2\n)\n\nSELECT rd.time AS finish_time\nFROM Ranked_Drivers rd\nWHERE rd.position = 2;",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
    "evidence": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
    "difficulty": "simple"
  },
  {
    "question_id": 940,
    "db_id": "formula_1",
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "predicted_sql": "WITH finished_drivers AS (\n    SELECT DISTINCT driverId\n    FROM results\n    WHERE raceId IN (\n        SELECT raceId\n        FROM races\n        WHERE year = 2008\n        AND date IS NOT NULL\n    )\n    AND position IS NOT NULL\n)\nSELECT COUNT(DISTINCT driverId)\nFROM finished_drivers\nWHERE driverId IN (\n    SELECT driverId\n    FROM driverStandings\n);",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
    "difficulty": "moderate"
  },
  {
    "question_id": 944,
    "db_id": "formula_1",
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "predicted_sql": "WITH last_driver AS (\n    SELECT r.raceId, MAX(r.time) AS last_driver_time\n    FROM results r\n    WHERE r.time IS NOT NULL\n    AND r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')\n    GROUP BY r.raceId\n),\nchampion AS (\n    SELECT r.raceId, r.time AS champion_time\n    FROM results r\n    WHERE r.time IS NOT NULL\n    AND r.position = 1\n    AND r.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')\n)\nSELECT \n    ((r1.milliseconds - r2.milliseconds)*1.0 / r2.milliseconds) * 100 AS percentage_faster_than_last_driver\nFROM results r1\nJOIN champion c ON r1.raceId = c.raceId\nJOIN last_driver ld ON r1.raceId = ld.raceId\nLEFT JOIN results r2 ON ld.raceId = r2.raceId AND r2.position = (SELECT COUNT(*) FROM results WHERE raceId = ld.raceId AND time IS NOT NULL)\nWHERE r1.raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')\nAND r1.position = 1\nAND r2.driverId = r1.driverId;",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
    "difficulty": "challenging"
  },
  {
    "question_id": 945,
    "db_id": "formula_1",
    "question": "How many circuits are there in Adelaide, Australia?",
    "predicted_sql": "SELECT COUNT(*)\nFROM circuits\nWHERE location = 'Adelaide' AND country = 'Australia';",
    "gold_sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
    "evidence": "Australia is the country; Melbourne is the location of circuit;",
    "difficulty": "simple"
  },
  {
    "question_id": 948,
    "db_id": "formula_1",
    "question": "What are the maximum points of British constructors?",
    "predicted_sql": "SELECT MAX(points) AS max_points\nFROM constructorStandings\nJOIN constructors ON constructorStandings.constructorId = constructors.constructorId\nWHERE constructors.nationality = 'British';",
    "gold_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "evidence": "maximum points = MAX(points); British is a nationality",
    "difficulty": "simple"
  },
  {
    "question_id": 950,
    "db_id": "formula_1",
    "question": "Please list the constructor names with 0 points at race 291.",
    "predicted_sql": "SELECT c.name AS constructor_name\nFROM constructors c\nLEFT JOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE cr.points = 0 AND cr.raceId = 291;",
    "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "evidence": "race at 291 refers to raceID = 291;",
    "difficulty": "simple"
  },
  {
    "question_id": 951,
    "db_id": "formula_1",
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "predicted_sql": "WITH racedata AS (\n    SELECT cr.constructorId, COUNT(cr.raceId) AS race_count, SUM(cr.points) AS total_points\n    FROM constructorResults cr\n    GROUP BY cr.constructorId\n    HAVING race_count = 2 AND total_points = 0\n)\nSELECT COUNT(*) \nFROM constructors c\nJOIN racedata rd ON c.constructorId = rd.constructorId\nWHERE c.nationality = 'Japanese';",
    "gold_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
    "difficulty": "simple"
  },
  {
    "question_id": 954,
    "db_id": "formula_1",
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "predicted_sql": "WITH JapaneseDrivers AS (\n    SELECT DISTINCT driverId\n    FROM drivers\n    WHERE nationality = 'Japanese'\n)\nSELECT (COUNT(results.driverId) * 100.0) / NULLIF((SELECT COUNT(DISTINCT driverId) FROM JapaneseDrivers), 0) AS race_completion_percentage\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE results.driverId IN JapaneseDrivers\nAND races.year BETWEEN 2007 AND 2009\nAND results.time IS NOT NULL;",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 955,
    "db_id": "formula_1",
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "predicted_sql": "WITH champion_finished_time AS (\n    SELECT r.year, rt.time\n    FROM results AS rt\n    JOIN races AS r ON rt.raceId = r.raceId\n    WHERE rt.time IS NOT NULL AND r.year < 1975\n)\nSELECT year, AVG(strftime('%s', time) - strftime('%s', '00:00:00')) AS average_time_seconds\nFROM champion_finished_time\nGROUP BY year;",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
    "difficulty": "challenging"
  },
  {
    "question_id": 959,
    "db_id": "formula_1",
    "question": "What is the fastest lap number of the champion in 2009?",
    "predicted_sql": "SELECT MIN(fastestLap) AS fastest_lap_number\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.year = 2009\nAND results.position = 1;",
    "gold_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
    "difficulty": "simple"
  },
  {
    "question_id": 960,
    "db_id": "formula_1",
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "predicted_sql": "SELECT AVG(CAST(REPLACE(fastestLapSpeed, ' km/h', '') AS REAL)) AS average_fastest_lap_speed\nFROM races\nJOIN results ON races.raceId = results.raceId\nWHERE races.name = 'Spanish Grand Prix'\nAND results.fastestLapSpeed IS NOT NULL\nAND results.fastestLapSpeed != '' \nAND races.date BETWEEN '2009-01-01' AND '2009-12-31';",
    "gold_sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
    "difficulty": "moderate"
  },
  {
    "question_id": 962,
    "db_id": "formula_1",
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "predicted_sql": "WITH DriverCount AS (\n    SELECT COUNT(DISTINCT driverId) AS total_drivers\n    FROM driverStandings\n    WHERE raceId IN (\n        SELECT raceId\n        FROM races\n        WHERE year BETWEEN 2000 AND 2005\n    )\n)\n, QualifiedDrivers AS (\n    SELECT driverId\n    FROM driverStandings\n    WHERE raceId IN (\n        SELECT raceId\n        FROM races\n        WHERE year BETWEEN 2000 AND 2005\n    ) \n    AND driverId IN (\n        SELECT driverId\n        FROM drivers\n        WHERE strftime('%Y', dob) < '1985'\n    )\n)\n, QualifiedDriversOver50Laps AS (\n    SELECT COUNT(DISTINCT driverId) AS qualified_drivers_over_50_laps\n    FROM lapTimes\n    WHERE raceId IN (\n        SELECT raceId\n        FROM races\n        WHERE year BETWEEN 2000 AND 2005\n    )\n    AND driverId IN (\n        SELECT driverId\n        FROM QualifiedDrivers\n    )\n    AND lap > 50\n)\nSELECT (100.0 * qualified_drivers_over_50_laps) / total_drivers AS percentage\nFROM DriverCount, QualifiedDriversOver50Laps;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
    "difficulty": "challenging"
  },
  {
    "question_id": 963,
    "db_id": "formula_1",
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "predicted_sql": "SELECT COUNT(DISTINCT l.driverId) AS french_drivers_count\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.time < '120000' AND d.nationality = 'French';",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
    "evidence": "lap time less than 02:00.00 refers to seconds < 120;",
    "difficulty": "moderate"
  },
  {
    "question_id": 964,
    "db_id": "formula_1",
    "question": "List out the code for drivers who have nationality in American.",
    "predicted_sql": "SELECT DISTINCT drivers.code\nFROM drivers\nWHERE drivers.nationality = 'American';",
    "gold_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "evidence": "nationality = 'American'",
    "difficulty": "simple"
  },
  {
    "question_id": 967,
    "db_id": "formula_1",
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "predicted_sql": "WITH youngest_drivers AS (\n    SELECT d.driverId, d.code, d.nationality, strftime('%Y', d.dob) AS birth_year\n    FROM drivers d\n    WHERE birth_year = (SELECT MAX(strftime('%Y', dob)) FROM drivers)\n    ORDER BY d.dob ASC\n    LIMIT 3\n)\n\nSELECT COUNT(*) AS netherlandic_drivers_among_top3\nFROM youngest_drivers\nWHERE nationality = 'Dutch';",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
    "difficulty": "simple"
  },
  {
    "question_id": 971,
    "db_id": "formula_1",
    "question": "Please state the reference name of the oldest German driver.",
    "predicted_sql": "WITH oldest_german_driver AS (\n    SELECT d.driverRef AS reference_name\n    FROM drivers d\n    WHERE d.nationality = 'German'\n    ORDER BY d.dob\n    LIMIT 1\n)\n\nSELECT reference_name\nFROM oldest_german_driver;",
    "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "difficulty": "simple"
  },
  {
    "question_id": 972,
    "db_id": "formula_1",
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "predicted_sql": "WITH FastestLap AS (\n    SELECT driverId, fastestLapTime\n    FROM results\n    WHERE fastestLapTime IS NOT NULL\n),\nBornIn1971 AS (\n    SELECT driverId\n    FROM drivers\n    WHERE strftime('%Y', dob) = '1971'\n)\nSELECT d.driverId, d.code\nFROM drivers d\nJOIN FastestLap fl ON d.driverId = fl.driverId\nJOIN BornIn1971 b ON d.driverId = b.driverId\nORDER BY fl.fastestLapTime\nLIMIT 1;",
    "gold_sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
    "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
    "difficulty": "moderate"
  },
  {
    "question_id": 977,
    "db_id": "formula_1",
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "predicted_sql": "SELECT COUNT(*) AS disqualified_finishers\nFROM results\nWHERE raceId > 50\nAND raceId < 100\nAND statusId = 2\nAND time IS NOT NULL;",
    "gold_sql": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
    "difficulty": "simple"
  },
  {
    "question_id": 978,
    "db_id": "formula_1",
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "predicted_sql": "SELECT COUNT(*) as num_circuits_held, c.location, c.lat, c.lng\nFROM circuits c\nWHERE c.country = 'Austria';",
    "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "difficulty": "simple"
  },
  {
    "question_id": 981,
    "db_id": "formula_1",
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "predicted_sql": "WITH youngest_driver AS (\n    SELECT r.year, d.forename || ' ' || d.surname AS name, r.date, r.time\n    FROM races r\n    JOIN qualifying q ON r.raceId = q.raceId\n    JOIN drivers d ON q.driverId = d.driverId\n    ORDER BY d.dob\n    LIMIT 1\n)\nSELECT year, name, date, time\nFROM youngest_driver;",
    "gold_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
    "difficulty": "moderate"
  },
  {
    "question_id": 988,
    "db_id": "formula_1",
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "predicted_sql": "WITH pit_stop_avg_duration AS (\n    SELECT ps.driverId, AVG(CAST(ps.milliseconds AS REAL)) / 1000 AS avg_duration\n    FROM pitStops AS ps\n    JOIN drivers AS d ON ps.driverId = d.driverId\n    WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985'\n    GROUP BY ps.driverId\n)\n\nSELECT d.forename || ' ' || d.surname AS full_name, PAD.avg_duration AS average_pitstop_duration\nFROM pit_stop_avg_duration AS PAD\nJOIN drivers AS d ON PAD.driverId = d.driverId\nORDER BY PAD.avg_duration\nLIMIT 3;",
    "gold_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980<= year(dob) <=1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
    "difficulty": "challenging"
  },
  {
    "question_id": 989,
    "db_id": "formula_1",
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "predicted_sql": "SELECT drivers.forename || ' ' || drivers.surname AS champion_name, results.time\nFROM results\nJOIN races ON races.raceId = results.raceId\nJOIN drivers ON drivers.driverId = results.driverId\nWHERE races.name = 'Canadian Grand Prix' \nAND races.year = 2008\nAND results.positionOrder = 1;",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
    "difficulty": "moderate"
  },
  {
    "question_id": 990,
    "db_id": "formula_1",
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "predicted_sql": "WITH ChampionInfo AS (\n    SELECT results.positionOrder AS position, constructors.name AS constructor_name, constructors.url AS website\n    FROM results\n    JOIN constructors ON results.constructorId = constructors.constructorId\n    JOIN races ON results.raceId = races.raceId\n    WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009\n    ORDER BY position\n    LIMIT 1\n)\n\nSELECT constructor_name AS constructor_reference_name, website\nFROM ChampionInfo;",
    "gold_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
    "difficulty": "challenging"
  },
  {
    "question_id": 717,
    "db_id": "superhero",
    "question": "Please list all the superpowers of 3-D Man.",
    "predicted_sql": "SELECT sp.power_name\nFROM superhero AS s\nJOIN hero_power AS hp ON s.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE s.superhero_name = '3-D Man';",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "difficulty": "simple"
  },
  {
    "question_id": 994,
    "db_id": "formula_1",
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "predicted_sql": "SELECT c.name AS constructor_name, c.nationality AS constructor_nationality, SUM(cr.points) AS total_points\nFROM constructorResults AS cr\nJOIN constructors AS c ON cr.constructorId = c.constructorId\nJOIN races AS r ON cr.raceId = r.raceId\nWHERE r.date BETWEEN '1980-01-01' AND '2010-12-31'\nAND r.name = 'Monaco Grand Prix'\nGROUP BY cr.constructorId\nORDER BY total_points DESC\nLIMIT 1;",
    "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
    "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
    "difficulty": "challenging"
  },
  {
    "question_id": 1001,
    "db_id": "formula_1",
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "predicted_sql": "SELECT d.forename || ' ' || d.surname AS full_name\nFROM drivers d\nJOIN qualifying q ON d.driverId = q.driverId\nJOIN races r ON r.raceId = q.raceId\nWHERE r.year = 2008\nAND r.name = 'Marina Bay Street Circuit'\nAND r.round = 3\nAND q.position = (SELECT MIN(position) FROM qualifying WHERE raceId = r.raceId AND q3 NOT NULL);",
    "gold_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
    "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
    "difficulty": "challenging"
  },
  {
    "question_id": 1002,
    "db_id": "formula_1",
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "predicted_sql": "WITH YoungestRacer AS (\n    SELECT d.forename || ' ' || d.surname AS full_name, d.nationality, r.name AS first_race_joined\n    FROM drivers d\n    JOIN driverStandings ds ON d.driverId = ds.driverId\n    JOIN races r ON ds.raceId = r.raceId\n    WHERE d.dob = (SELECT MAX(dob) FROM drivers)\n)\nSELECT full_name, nationality, first_race_joined\nFROM YoungestRacer;",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
    "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)",
    "difficulty": "moderate"
  },
  {
    "question_id": 1003,
    "db_id": "formula_1",
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "predicted_sql": "WITH driver_accident_count AS (\n    SELECT driverId, COUNT(*) AS accident_count\n    FROM results\n    WHERE statusId = 3\n    GROUP BY driverId\n)\nSELECT MAX(accident_count) AS highest_accident_count\nFROM driver_accident_count;",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
    "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
    "difficulty": "moderate"
  },
  {
    "question_id": 1011,
    "db_id": "formula_1",
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "predicted_sql": "WITH shortest_lap_times AS (\n    SELECT \n        lt.driverId,\n        MIN(lt.milliseconds) AS min_lap_time\n    FROM lapTimes lt\n    GROUP BY lt.driverId\n)\nSELECT \n    d.forename || ' ' || d.surname AS full_name\nFROM shortest_lap_times s\nJOIN drivers d ON s.driverId = d.driverId\nORDER BY s.min_lap_time\nLIMIT 20;",
    "gold_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
    "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
    "difficulty": "challenging"
  },
  {
    "question_id": 1014,
    "db_id": "formula_1",
    "question": "Please list the lap records for the circuits in Italy.",
    "predicted_sql": "WITH fastest_lap_times AS (\n    SELECT c.name AS circuit_name, lt.time AS lap_record_time\n    FROM circuits c\n    JOIN races r ON c.circuitId = r.circuitId\n    JOIN lapTimes lt ON r.raceId = lt.raceId\n    WHERE c.country = 'Italy'\n    ORDER BY lt.milliseconds\n    LIMIT 1\n)\nSELECT circuit_name, lap_record_time\nFROM fastest_lap_times;",
    "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "difficulty": "challenging"
  },
  {
    "question_id": 719,
    "db_id": "superhero",
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "predicted_sql": "SELECT COUNT(DISTINCT hero_id) AS num_superheroes\nFROM hero_power \nJOIN superhero ON hero_power.hero_id = superhero.id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE power_name = 'Super Strength' AND height_cm > 200;",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
    "difficulty": "moderate"
  },
  {
    "question_id": 723,
    "db_id": "superhero",
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "predicted_sql": "SELECT COUNT(DISTINCT h.id) AS count_of_superheroes_with_agility_and_blue_eyes\nFROM superhero h\nJOIN colour eye_c ON h.eye_colour_id = eye_c.id\nJOIN hero_power hp ON h.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE eye_c.colour = 'Blue' \nAND sp.power_name = 'Agility';",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "difficulty": "moderate"
  },
  {
    "question_id": 724,
    "db_id": "superhero",
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "predicted_sql": "SELECT superhero.superhero_name\nFROM superhero\nJOIN colour AS eye_color ON superhero.eye_colour_id = eye_color.id\nJOIN colour AS hair_color ON superhero.hair_colour_id = hair_color.id\nWHERE eye_color.colour = 'Blue' \nAND hair_color.colour = 'Blond';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "difficulty": "challenging"
  },
  {
    "question_id": 726,
    "db_id": "superhero",
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "predicted_sql": "SELECT superhero.superhero_name, superhero.height_cm\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Marvel Comics'\nORDER BY superhero.height_cm DESC;",
    "gold_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "difficulty": "moderate"
  },
  {
    "question_id": 728,
    "db_id": "superhero",
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "predicted_sql": "WITH eye_color_popularity AS (\n    SELECT c.colour AS eye_color, COUNT(s.id) AS count\n    FROM superhero s\n    JOIN colour c ON s.eye_colour_id = c.id\n    JOIN publisher p ON s.publisher_id = p.id\n    WHERE p.publisher_name = 'Marvel Comics'\n    GROUP BY c.colour\n)\nSELECT eye_color, count\nFROM eye_color_popularity\nORDER BY count DESC, eye_color ASC;",
    "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "difficulty": "moderate"
  },
  {
    "question_id": 730,
    "db_id": "superhero",
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "predicted_sql": "SELECT DISTINCT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE sp.power_name = 'Super Strength'\nAND p.publisher_name = 'Marvel Comics';",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "difficulty": "challenging"
  },
  {
    "question_id": 732,
    "db_id": "superhero",
    "question": "Which publisher published the slowest superhero?",
    "predicted_sql": "WITH min_speed_hero AS (\n    SELECT h.publisher_id, h.superhero_name, ha.attribute_value\n    FROM superhero h\n    JOIN hero_attribute ha ON h.id = ha.hero_id\n    JOIN attribute a ON ha.attribute_id = a.id\n    WHERE a.attribute_name = 'Speed'\n    ORDER BY ha.attribute_value\n    LIMIT 1\n)\nSELECT p.publisher_name\nFROM publisher p\nJOIN min_speed_hero msh ON p.id = msh.publisher_id;",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
    "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name",
    "difficulty": "moderate"
  },
  {
    "question_id": 733,
    "db_id": "superhero",
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "predicted_sql": "SELECT COUNT(DISTINCT superhero.id) AS gold_eyed_superheroes\nFROM superhero\nJOIN colour eye_colour ON superhero.eye_colour_id = eye_colour.id\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE eye_colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
    "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'",
    "difficulty": "moderate"
  },
  {
    "question_id": 736,
    "db_id": "superhero",
    "question": "Who is the dumbest superhero?",
    "predicted_sql": "WITH min_intelligence AS (\n    SELECT superhero_name, MIN(attribute_value) AS min_intelligence\n    FROM superhero\n    JOIN hero_attribute ON superhero.id = hero_attribute.hero_id\n    JOIN attribute ON hero_attribute.attribute_id = attribute.id\n    WHERE attribute_name = 'Intelligence'\n    GROUP BY superhero.id\n)\n\nSELECT superhero_name\nFROM min_intelligence\nWHERE min_intelligence = (\n    SELECT MIN(min_intelligence)\n    FROM min_intelligence\n);",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Intelligence')",
    "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
    "difficulty": "moderate"
  },
  {
    "question_id": 737,
    "db_id": "superhero",
    "question": "What is Copycat's race?",
    "predicted_sql": "SELECT race.race\nFROM superhero\nJOIN race ON superhero.race_id = race.id\nWHERE superhero.superhero_name = 'Copycat';",
    "gold_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "evidence": "Copycat is the superhero_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 738,
    "db_id": "superhero",
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "predicted_sql": "SELECT DISTINCT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "difficulty": "simple"
  },
  {
    "question_id": 739,
    "db_id": "superhero",
    "question": "What are the names of the superheroes with the power of death touch?",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Death Touch';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "difficulty": "moderate"
  },
  {
    "question_id": 740,
    "db_id": "superhero",
    "question": "How many female superheroes have a strength value of 100?",
    "predicted_sql": "SELECT COUNT(DISTINCT hs.hero_id) AS female_superheroes_with_strength_100\nFROM superhero AS s\nJOIN gender AS g ON s.gender_id = g.id\nJOIN hero_attribute AS hs ON s.id = hs.hero_id\nJOIN attribute AS a ON hs.attribute_id = a.id\nWHERE g.gender = 'Female'\nAND a.attribute_name = 'Strength'\nAND hs.attribute_value = 100;",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
    "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 743,
    "db_id": "superhero",
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "predicted_sql": "WITH superhero_alignment_count AS (\n    SELECT COUNT(*) AS total_superheroes,\n           SUM(CASE WHEN a.alignment = 'Bad' THEN 1 ELSE 0 END) AS bad_aligned_superheroes\n    FROM superhero s\n    JOIN alignment a ON s.alignment_id = a.id\n)\nSELECT 100.0 * bad_aligned_superheroes / NULLIF(total_superheroes, 0) AS percentage_bad_aligned,\n       COUNT(CASE WHEN p.publisher_name = 'Marvel Comics' AND a.alignment = 'Bad' THEN s.id END) AS marvel_bad_aligned\nFROM superhero_alignment_count\nCROSS JOIN superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN alignment a ON s.alignment_id = a.id;",
    "gold_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
    "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 744,
    "db_id": "superhero",
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "predicted_sql": "SELECT \n    ABS(COUNT(CASE WHEN publisher_name = 'Marvel Comics' THEN superhero.id END) - \n    COUNT(CASE WHEN publisher_name = 'DC Comics' THEN superhero.id END)) AS superhero_difference\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE publisher_name IN ('DC Comics', 'Marvel Comics');",
    "gold_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))",
    "difficulty": "challenging"
  },
  {
    "question_id": 745,
    "db_id": "superhero",
    "question": "Give the publisher ID of Star Trek.",
    "predicted_sql": "SELECT id AS publisher_id\nFROM publisher\nWHERE publisher_name = 'Star Trek';",
    "gold_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "evidence": "Star Trek is the publisher_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 747,
    "db_id": "superhero",
    "question": "What is the total number of superheroes without full name?",
    "predicted_sql": "SELECT COUNT(*) AS total_superheroes_without_full_name\nFROM superhero\nWHERE full_name IS NULL;",
    "gold_sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "evidence": "superheroes without full name refers to full_name IS NULL",
    "difficulty": "simple"
  },
  {
    "question_id": 750,
    "db_id": "superhero",
    "question": "What is the average weight of all female superheroes?",
    "predicted_sql": "SELECT AVG(s.weight_kg)\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Female';",
    "gold_sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
    "evidence": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)",
    "difficulty": "simple"
  },
  {
    "question_id": 751,
    "db_id": "superhero",
    "question": "List down at least five superpowers of male superheroes.",
    "predicted_sql": "SELECT sp.power_name \nFROM superhero AS sh\nJOIN gender AS g ON sh.gender_id = g.id\nJOIN hero_power AS hp ON sh.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE g.gender = 'Male'\nLIMIT 5;",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
    "difficulty": "moderate"
  },
  {
    "question_id": 753,
    "db_id": "superhero",
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "predicted_sql": "SELECT superhero.superhero_name\nFROM superhero\nLEFT JOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.height_cm BETWEEN 170 AND 190\nAND colour.colour = 'No Colour';",
    "gold_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
    "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
    "difficulty": "moderate"
  },
  {
    "question_id": 758,
    "db_id": "superhero",
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "predicted_sql": "SELECT c.colour\nFROM superhero s\nJOIN colour c ON s.hair_colour_id = c.id\nJOIN race r ON s.race_id = r.id\nWHERE s.height_cm = 185\nAND r.race = 'human';",
    "gold_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "difficulty": "moderate"
  },
  {
    "question_id": 760,
    "db_id": "superhero",
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "predicted_sql": "SELECT (COUNT(CASE WHEN publisher_id = 13 THEN 1 END) * 100.0 / COUNT(*)) AS percentage_marvel_heroes\nFROM superhero\nWHERE height_cm BETWEEN 150 AND 180;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 761,
    "db_id": "superhero",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "predicted_sql": "WITH average_weight AS (\n    SELECT AVG(weight_kg) AS avg_weight\n    FROM superhero\n)\nSELECT superhero_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nCROSS JOIN average_weight\nWHERE g.gender = 'Male' AND s.weight_kg > average_weight.avg_weight * 0.79;",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
    "difficulty": "moderate"
  },
  {
    "question_id": 764,
    "db_id": "superhero",
    "question": "What are the superpowers of heroes with ID 1?",
    "predicted_sql": "SELECT sp.power_name AS superpower\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.id = 1;",
    "gold_sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 765,
    "db_id": "superhero",
    "question": "How many heroes have stealth power?",
    "predicted_sql": "SELECT COUNT(DISTINCT hp.hero_id) AS num_heroes_with_stealth_power\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Stealth';",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
    "evidence": "stealth power refers to power_name = 'Stealth';",
    "difficulty": "simple"
  },
  {
    "question_id": 766,
    "db_id": "superhero",
    "question": "What is the hero's full name with the highest attribute in strength?",
    "predicted_sql": "WITH max_strength_hero AS (\n    SELECT h.full_name\n    FROM superhero h\n    JOIN hero_attribute ha ON h.id = ha.hero_id\n    JOIN attribute a ON ha.attribute_id = a.id\n    WHERE a.attribute_name = 'strength'\n    ORDER BY ha.attribute_value DESC\n    LIMIT 1\n)\n\nSELECT * FROM max_strength_hero;",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "difficulty": "moderate"
  },
  {
    "question_id": 769,
    "db_id": "superhero",
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "predicted_sql": "WITH dark_horse_durability AS (\n    SELECT h.superhero_name, ha.attribute_value AS max_durability\n    FROM superhero h\n    JOIN publisher p ON h.publisher_id = p.id\n    JOIN hero_attribute ha ON h.id = ha.hero_id\n    JOIN attribute a ON ha.attribute_id = a.id\n    WHERE p.publisher_name = 'Dark Horse Comics'\n    AND a.attribute_name = 'durability'\n    ORDER BY max_durability DESC\n    LIMIT 1\n)\n\nSELECT superhero_name\nFROM dark_horse_durability;",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T2.attribute_value = (SELECT MAX(T5.attribute_value) FROM superhero AS T6 INNER JOIN hero_attribute AS T5 ON T6.id = T5.hero_id INNER JOIN publisher AS T7 ON T7.id = T6.publisher_id WHERE T7.publisher_name = 'Dark Horse Comics')",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "difficulty": "challenging"
  },
  {
    "question_id": 772,
    "db_id": "superhero",
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "predicted_sql": "WITH female_superheroes AS (\n    SELECT sh.superhero_name, c1.colour AS eye_colour, c2.colour AS hair_colour, c3.colour AS skin_colour\n    FROM superhero sh\n    JOIN gender g ON sh.gender_id = g.id\n    JOIN colour c1 ON sh.eye_colour_id = c1.id\n    JOIN colour c2 ON sh.hair_colour_id = c2.id\n    JOIN colour c3 ON sh.skin_colour_id = c3.id\n    JOIN publisher p ON sh.publisher_id = p.id\n    WHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics'\n)\nSELECT * FROM female_superheroes;",
    "gold_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "difficulty": "challenging"
  },
  {
    "question_id": 773,
    "db_id": "superhero",
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "predicted_sql": "WITH matched_attributes AS (\n    SELECT h.superhero_name, p.publisher_name\n    FROM superhero h\n    INNER JOIN publisher p ON h.publisher_id = p.id\n    INNER JOIN colour e ON h.eye_colour_id = e.id\n    INNER JOIN colour h2 ON h.hair_colour_id = h2.id\n    INNER JOIN colour s ON h.skin_colour_id = s.id\n    WHERE e.id = h2.id AND e.id = s.id\n)\nSELECT superhero_name, publisher_name\nFROM matched_attributes;",
    "gold_sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
    "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;",
    "difficulty": "challenging"
  },
  {
    "question_id": 775,
    "db_id": "superhero",
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "predicted_sql": "WITH female_superheroes AS (\n    SELECT s.id\n    FROM superhero s\n    JOIN gender g ON s.gender_id = g.id\n    WHERE g.gender = 'Female'\n)\nSELECT \n    (100.0 * COUNT(DISTINCT fs.id) / NULLIF(COUNT(DISTINCT s.id), 0)) AS percentage\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nJOIN female_superheroes fs ON s.id = fs.id\nWHERE c.colour = 'Blue';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
    "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
    "difficulty": "challenging"
  },
  {
    "question_id": 779,
    "db_id": "superhero",
    "question": "How many powers does Amazo hero have?",
    "predicted_sql": "SELECT COUNT(*) AS power_count\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superhero.superhero_name = 'Amazo';",
    "gold_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
    "evidence": "Amazo hero refers to superhero_name = 'Amazo';",
    "difficulty": "simple"
  },
  {
    "question_id": 781,
    "db_id": "superhero",
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "predicted_sql": "SELECT height_cm\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE colour.colour = 'Amber';",
    "gold_sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
    "difficulty": "simple"
  },
  {
    "question_id": 782,
    "db_id": "superhero",
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "predicted_sql": "SELECT superhero_name\nFROM superhero\nJOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id\nJOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id\nWHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
    "difficulty": "moderate"
  },
  {
    "question_id": 785,
    "db_id": "superhero",
    "question": "Describe the names of neutral alignment superheroes.",
    "predicted_sql": "SELECT superhero_name\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE alignment.alignment = 'Neutral';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
    "difficulty": "simple"
  },
  {
    "question_id": 786,
    "db_id": "superhero",
    "question": "How many heroes have the highest attribute value in strength?",
    "predicted_sql": "SELECT COUNT(DISTINCT hero_id) AS num_heroes\nFROM hero_attribute\nWHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength')\nAND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Strength'));",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';",
    "difficulty": "moderate"
  },
  {
    "question_id": 788,
    "db_id": "superhero",
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "predicted_sql": "WITH female_heroes AS (\n    SELECT COUNT(*) AS female_count\n    FROM superhero s\n    JOIN gender g ON s.gender_id = g.id\n    WHERE g.gender = 'Female'\n)\nSELECT (100.0 * female_count) / NULLIF(\n        (SELECT COUNT(*)\n        FROM superhero s\n        JOIN publisher p ON s.publisher_id = p.id\n        WHERE p.publisher_name = 'Marvel Comics'\n    ), 0) AS percent\nFROM female_heroes;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
    "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
    "difficulty": "challenging"
  },
  {
    "question_id": 790,
    "db_id": "superhero",
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "predicted_sql": "SELECT\n    (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Emil Blonsky') -\n    (SELECT SUM(weight_kg) FROM superhero WHERE full_name = 'Charles Chandler');",
    "gold_sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
    "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;",
    "difficulty": "moderate"
  },
  {
    "question_id": 791,
    "db_id": "superhero",
    "question": "Calculate the average height for all superhero.",
    "predicted_sql": "SELECT AVG(height_cm) AS average_height\nFROM superhero;",
    "gold_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
    "evidence": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
    "difficulty": "simple"
  },
  {
    "question_id": 792,
    "db_id": "superhero",
    "question": "What is Abomination's superpower?",
    "predicted_sql": "SELECT sp.power_name AS superpower\nFROM superhero AS sh\nJOIN hero_power AS hp ON sh.id = hp.hero_id\nJOIN superpower AS sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = 'Abomination';",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "difficulty": "simple"
  },
  {
    "question_id": 794,
    "db_id": "superhero",
    "question": "Which hero was the fastest?",
    "predicted_sql": "SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'Speed'\nORDER BY hero_attribute.attribute_value DESC\nLIMIT 1;",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
    "difficulty": "moderate"
  },
  {
    "question_id": 796,
    "db_id": "superhero",
    "question": "State all of 3-D Man's attributes along with their values.",
    "predicted_sql": "SELECT attribute.attribute_name, hero_attribute.attribute_value\nFROM superhero\nJOIN hero_attribute ON superhero.id = hero_attribute.hero_id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero.superhero_name = '3-D Man';",
    "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "difficulty": "moderate"
  },
  {
    "question_id": 797,
    "db_id": "superhero",
    "question": "Which superheroes have blue eyes with brown hair?",
    "predicted_sql": "SELECT superhero_name\nFROM superhero\nJOIN colour AS eye_color ON superhero.eye_colour_id = eye_color.id\nJOIN colour AS hair_color ON superhero.hair_colour_id = hair_color.id\nWHERE eye_color.colour = 'Blue' AND hair_color.colour = 'Brown';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "difficulty": "moderate"
  },
  {
    "question_id": 798,
    "db_id": "superhero",
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "predicted_sql": "SELECT superhero.superhero_name as superhero, publisher.publisher_name as publisher\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nWHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';",
    "difficulty": "moderate"
  },
  {
    "question_id": 800,
    "db_id": "superhero",
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "predicted_sql": "SELECT (COUNT(DISTINCT s.id) * 100.0) / (SELECT COUNT(*) FROM superhero) \n    FROM superhero s \n    WHERE s.eye_colour_id = 7;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
    "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;",
    "difficulty": "moderate"
  },
  {
    "question_id": 801,
    "db_id": "superhero",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "predicted_sql": "SELECT \n    100.0 * SUM(s.gender_id = 1) / NULLIF(SUM(s.gender_id = 2), 0) AS gender_ratio\nFROM \n    superhero s;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
    "difficulty": "moderate"
  },
  {
    "question_id": 806,
    "db_id": "superhero",
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "predicted_sql": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.full_name = 'Karen Beecher-Duncan';",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "difficulty": "simple"
  },
  {
    "question_id": 819,
    "db_id": "superhero",
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "predicted_sql": "SELECT \n    (SUM(CASE WHEN s.eye_colour_id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN s.eye_colour_id = 1 OR s.eye_colour_id IS NULL THEN 1 ELSE 0 END)) AS difference\nFROM \n    superhero s\nWHERE \n    s.weight_kg = 0 OR s.weight_kg IS NULL;",
    "gold_sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
    "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
    "difficulty": "challenging"
  },
  {
    "question_id": 822,
    "db_id": "superhero",
    "question": "How many green-skinned villains are there in the superhero universe?",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS num_green_skinned_villains\nFROM superhero s\nJOIN colour c ON s.skin_colour_id = c.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE c.colour = 'Green' AND a.alignment = 'Bad';",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
    "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';",
    "difficulty": "moderate"
  },
  {
    "question_id": 824,
    "db_id": "superhero",
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "predicted_sql": "SELECT DISTINCT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Wind Control'\nORDER BY s.superhero_name;",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
    "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';",
    "difficulty": "moderate"
  },
  {
    "question_id": 825,
    "db_id": "superhero",
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "predicted_sql": "SELECT g.gender\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nJOIN gender g ON s.gender_id = g.id\nWHERE sp.power_name = 'Phoenix Force';",
    "gold_sql": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "difficulty": "moderate"
  },
  {
    "question_id": 829,
    "db_id": "superhero",
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "predicted_sql": "SELECT ( \n    SELECT COUNT(*) \n    FROM superhero \n    WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'DC Comics') \n) - (\n    SELECT COUNT(*) \n    FROM superhero \n    WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') \n) AS difference;",
    "gold_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
    "difficulty": "challenging"
  },
  {
    "question_id": 531,
    "db_id": "codebase_community",
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "predicted_sql": "SELECT DisplayName\nFROM users\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nORDER BY Reputation DESC\nLIMIT 1;",
    "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
    "difficulty": "simple"
  },
  {
    "question_id": 532,
    "db_id": "codebase_community",
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "predicted_sql": "SELECT u.DisplayName\nFROM users u\nWHERE strftime('%Y', u.CreationDate) = '2011';",
    "gold_sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
    "evidence": "account created in the year 2011 refers to year(CreationDate) = 2011",
    "difficulty": "simple"
  },
  {
    "question_id": 533,
    "db_id": "codebase_community",
    "question": "How many users last accessed the website after 2014/9/1?",
    "predicted_sql": "SELECT COUNT(DISTINCT users.Id) AS NumUsersLastAccessedAfter20140901\nFROM users\nWHERE LastAccessDate > '2014-09-01';",
    "gold_sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
    "difficulty": "simple"
  },
  {
    "question_id": 539,
    "db_id": "codebase_community",
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "predicted_sql": "SELECT u.DisplayName AS Owner\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = \"Eliciting priors from experts\";",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "difficulty": "simple"
  },
  {
    "question_id": 537,
    "db_id": "codebase_community",
    "question": "How many posts does the user csgillespie own?",
    "predicted_sql": "SELECT COUNT(*) \nFROM posts \nWHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'csgillespie');",
    "gold_sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "difficulty": "simple"
  },
  {
    "question_id": 544,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "predicted_sql": "WITH LastPostEdit AS (\n    SELECT UserId\n    FROM postHistory\n    WHERE PostId = (\n        SELECT Id\n        FROM posts\n        WHERE Title = \"Examples for teaching: Correlation does not mean causation\"\n    )\n    ORDER BY CreationDate DESC\n    LIMIT 1\n)\n\nSELECT DisplayName\nFROM users\nWHERE Id = (SELECT UserId FROM LastPostEdit);",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "difficulty": "moderate"
  },
  {
    "question_id": 547,
    "db_id": "codebase_community",
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "predicted_sql": "SELECT COUNT(*) \nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Age > 65 AND p.Score > 19;",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20",
    "difficulty": "simple"
  },
  {
    "question_id": 549,
    "db_id": "codebase_community",
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "predicted_sql": "SELECT p.Body \nFROM posts p\nJOIN tags t ON p.Id = t.ExcerptPostId\nWHERE t.TagName = \"bayesian\";",
    "gold_sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "difficulty": "simple"
  },
  {
    "question_id": 555,
    "db_id": "codebase_community",
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "predicted_sql": "SELECT AVG(p.Score) AS average_score\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "gold_sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
    "difficulty": "simple"
  },
  {
    "question_id": 557,
    "db_id": "codebase_community",
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "predicted_sql": "WITH ElderPosts AS (\n    SELECT p.Id\n    FROM posts p\n    JOIN users u ON p.OwnerUserId = u.Id\n    WHERE p.Score > 5 AND u.Age > 65\n)\nSELECT (COUNT(ep.Id) * 100.0 / COUNT(p.Id)) AS Percentage\nFROM posts p\nLEFT JOIN ElderPosts ep ON p.Id = ep.Id;",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 563,
    "db_id": "codebase_community",
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "predicted_sql": "SELECT p.FavoriteCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.UserId = 3025\nAND c.CreationDate = '2014/4/23 20:29:39.0';",
    "gold_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
    "difficulty": "moderate"
  },
  {
    "question_id": 565,
    "db_id": "codebase_community",
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "predicted_sql": "SELECT\n    CASE\n        WHEN p.ClosedDate IS NULL THEN 'well-finished'\n        ELSE 'not well-finished'\n    END AS PostStatus\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.CreationDate = '2013-07-12 09:08:18.0'\n    AND c.UserId = 23853;",
    "gold_sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
    "difficulty": "moderate"
  },
  {
    "question_id": 567,
    "db_id": "codebase_community",
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "predicted_sql": "SELECT COUNT(*) AS NumberOfPostsOwned\nFROM posts\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = \"Tiago Pasqualini\";",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "evidence": "\"Tiago Pasqualini\" is the DisplayName;",
    "difficulty": "simple"
  },
  {
    "question_id": 568,
    "db_id": "codebase_community",
    "question": "Provide the display name of the user who made the vote No.6347.",
    "predicted_sql": "SELECT u.DisplayName AS UserDisplayName\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nWHERE v.Id = '6347' AND v.VoteTypeId = 2;",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "evidence": "vote no. 6347 refers to Id = '6347'",
    "difficulty": "simple"
  },
  {
    "question_id": 571,
    "db_id": "codebase_community",
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "predicted_sql": "SELECT \n    COUNT(DISTINCT p.Id) * 1.0 / NULLIF(COUNT(DISTINCT v.Id), 0) AS \"PostsToVotesRatio\"\nFROM \n    posts p\n    LEFT JOIN votes v ON p.OwnerUserId = v.UserId\nWHERE \n    p.PostTypeId = 1 \n    AND p.OwnerUserId = 24;",
    "gold_sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
    "difficulty": "moderate"
  },
  {
    "question_id": 572,
    "db_id": "codebase_community",
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "predicted_sql": "SELECT ViewCount\nFROM posts\nWHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
    "gold_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "difficulty": "moderate"
  },
  {
    "question_id": 573,
    "db_id": "codebase_community",
    "question": "Write the contents of comments with a score of 17.",
    "predicted_sql": "SELECT Text\nFROM comments\nWHERE Score = 17;",
    "gold_sql": "SELECT Text FROM comments WHERE Score = 17",
    "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text",
    "difficulty": "simple"
  },
  {
    "question_id": 576,
    "db_id": "codebase_community",
    "question": "Name the user that commented 'thank you user93!'",
    "predicted_sql": "SELECT u.DisplayName\nFROM users u\nJOIN comments c ON u.Id = c.UserId\nWHERE c.Text = 'thank you user93!';",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
    "difficulty": "simple"
  },
  {
    "question_id": 578,
    "db_id": "codebase_community",
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "predicted_sql": "SELECT u.DisplayName, u.Reputation\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';",
    "gold_sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
    "difficulty": "moderate"
  },
  {
    "question_id": 581,
    "db_id": "codebase_community",
    "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "predicted_sql": "SELECT u.DisplayName AS Owner\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE p.Title = 'Open source tools for visualizing multi-dimensional data';",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; owner refers to DisplayName;",
    "difficulty": "moderate"
  },
  {
    "question_id": 584,
    "db_id": "codebase_community",
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "predicted_sql": "WITH post_id AS (\n    SELECT Id\n    FROM posts\n    WHERE Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\n)\nSELECT c.Text\nFROM comments c\nJOIN post_id p ON c.PostId = p.Id;",
    "gold_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
    "difficulty": "moderate"
  },
  {
    "question_id": 586,
    "db_id": "codebase_community",
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "predicted_sql": "SELECT u.DisplayName\nFROM users u\nJOIN votes v ON u.Id = v.UserId\nJOIN posts p ON v.PostId = p.Id\nWHERE v.BountyAmount = 50\nAND p.Title LIKE '%variance%';",
    "gold_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
    "difficulty": "challenging"
  },
  {
    "question_id": 587,
    "db_id": "codebase_community",
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "predicted_sql": "WITH AvgViewCounts AS (\n    SELECT p.Title, c.Text AS Comment, AVG(p.ViewCount) AS AvgViewCount\n    FROM posts p\n    JOIN postHistory ph ON p.Id = ph.PostId\n    JOIN postLinks pl ON p.Id = pl.PostId\n    JOIN comments c ON p.Id = c.PostId\n    JOIN tags t ON t.Id = p.Id\n    WHERE t.TagName = 'humor'\n    GROUP BY p.Title, c.Text\n)\nSELECT Title, Comment, AvgViewCount\nFROM AvgViewCounts;",
    "gold_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
    "evidence": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
    "difficulty": "moderate"
  },
  {
    "question_id": 592,
    "db_id": "codebase_community",
    "question": "How many users are awarded with more than 5 badges?",
    "predicted_sql": "SELECT COUNT(DISTINCT UserId) AS UserCount\nFROM badges\nGROUP BY UserId\nHAVING COUNT(Name) > 5;",
    "gold_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
    "difficulty": "simple"
  },
  {
    "question_id": 595,
    "db_id": "codebase_community",
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "predicted_sql": "WITH PostViewCount AS (\n    SELECT p.OwnerUserId AS UserId, COUNT(*) AS PostCount\n    FROM posts p\n    WHERE p.ViewCount >= 1000\n    GROUP BY p.OwnerUserId\n    HAVING COUNT(*) = 1\n)\nSELECT u.DisplayName AS User\nFROM users u\nJOIN PostViewCount pvc ON u.Id = pvc.UserId;",
    "gold_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
    "difficulty": "moderate"
  },
  {
    "question_id": 598,
    "db_id": "codebase_community",
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "predicted_sql": "WITH BadgeCounts AS (\n    SELECT \n        (SELECT COUNT(*) \n         FROM badges \n         WHERE Name = 'Student' \n         AND strftime('%Y', Date) = '2010') AS count_2010,\n        (SELECT COUNT(*) \n         FROM badges \n         WHERE Name = 'Student' \n         AND strftime('%Y', Date) = '2011') AS count_2011\n)\nSELECT \n    ((count_2010 * 100.0 / (count_2010 + count_2011)) - (count_2011 * 100.0 / (count_2010 + count_2011))) AS percentage_difference\nFROM BadgeCounts;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
    "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
    "difficulty": "challenging"
  },
  {
    "question_id": 604,
    "db_id": "codebase_community",
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "predicted_sql": "WITH UserPostCounts AS (\n    SELECT OwnerUserId, COUNT(Id) AS PostCount\n    FROM posts\n    WHERE PostTypeId = 1\n    GROUP BY OwnerUserId\n    HAVING PostCount > 10\n)\nSELECT \n    AVG(users.UpVotes) AS AvgUpVotes, \n    AVG(users.Age) AS AvgUserAge\nFROM users\nJOIN UserPostCounts ON users.Id = UserPostCounts.OwnerUserId;",
    "gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "evidence": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
    "difficulty": "moderate"
  },
  {
    "question_id": 629,
    "db_id": "codebase_community",
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "predicted_sql": "SELECT \n    (CAST(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2010' THEN Id END) AS REAL) / NULLIF(COUNT(CASE WHEN strftime('%Y', CreationDate) = '2011' THEN Id END), 0)) AS vote_ratio\nFROM votes;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;",
    "difficulty": "simple"
  },
  {
    "question_id": 633,
    "db_id": "codebase_community",
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "predicted_sql": "SELECT p.Id AS PostID\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'slashnick'\nORDER BY p.AnswerCount DESC\nLIMIT 1;",
    "gold_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "difficulty": "moderate"
  },
  {
    "question_id": 634,
    "db_id": "codebase_community",
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "predicted_sql": "WITH post_view_counts AS (\n    SELECT p.OwnerUserId AS user_id, u.DisplayName, SUM(p.ViewCount) AS total_view_count\n    FROM posts p\n    JOIN users u ON p.OwnerUserId = u.Id\n    WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')\n    GROUP BY p.OwnerUserId\n)\nSELECT DisplayName\nFROM post_view_counts\nWHERE total_view_count = (SELECT MAX(total_view_count) FROM post_view_counts);",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "difficulty": "challenging"
  },
  {
    "question_id": 637,
    "db_id": "codebase_community",
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "predicted_sql": "WITH mark_posts_tags AS (\n    SELECT p.Tags AS post_tags, t.TagName\n    FROM posts p\n    JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%'\n    WHERE p.OwnerDisplayName = 'Mark Meckes'\n)\nSELECT DISTINCT mt.TagName\nFROM mark_posts_tags mt\nLEFT JOIN posts p ON mt.post_tags LIKE '%' || p.Tags || '%'\nWHERE p.CommentCount = 0\nAND p.Id IS NOT NULL;",
    "gold_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "evidence": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
    "difficulty": "moderate"
  },
  {
    "question_id": 639,
    "db_id": "codebase_community",
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN p.Tags LIKE '%<r>%' THEN p.Id END) * 100.0) / COUNT(p.Id) AS percentage\nFROM \n    posts p\nWHERE \n    p.OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Community') \n    AND p.PostTypeId = 1;",
    "gold_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
    "difficulty": "challenging"
  },
  {
    "question_id": 640,
    "db_id": "codebase_community",
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "predicted_sql": "SELECT \n    (SELECT SUM(ViewCount) \n     FROM posts \n     WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Mornington')\n    ) \n    - \n    (SELECT SUM(ViewCount) \n     FROM posts \n     WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Amos')\n    ) AS view_count_difference;",
    "gold_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
    "difficulty": "moderate"
  },
  {
    "question_id": 665,
    "db_id": "codebase_community",
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "predicted_sql": "SELECT strftime('%m', pl.CreationDate) AS month, COUNT(DISTINCT pl.Id) AS link_count\nFROM postLinks pl\nJOIN posts p ON pl.PostId = p.Id\nWHERE p.CreaionDate LIKE '2010%' \nAND p.AnswerCount <= 2\nGROUP BY month\nHAVING COUNT(DISTINCT pl.Id) > 0\nORDER BY month;",
    "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
    "difficulty": "moderate"
  },
  {
    "question_id": 669,
    "db_id": "codebase_community",
    "question": "When did 'chl' cast its first vote in a post?",
    "predicted_sql": "WITH first_post_vote AS (\n    SELECT MIN(v.CreationDate) AS first_vote_date\n    FROM votes v\n    JOIN users u ON v.UserId = u.Id\n    WHERE u.DisplayName = 'chl'\n)\nSELECT first_vote_date\nFROM first_post_vote;",
    "gold_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
    "difficulty": "simple"
  },
  {
    "question_id": 671,
    "db_id": "codebase_community",
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "predicted_sql": "WITH first_autobiographer AS (\n    SELECT UserId, MIN(Date) AS min_date\n    FROM badges\n    WHERE Name = 'Autobiographer'\n    GROUP BY UserId\n    ORDER BY min_date\n    LIMIT 1\n)\n\nSELECT u.DisplayName \nFROM first_autobiographer fa\nJOIN users u ON fa.UserId = u.Id;",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "difficulty": "simple"
  },
  {
    "question_id": 672,
    "db_id": "codebase_community",
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "predicted_sql": "SELECT COUNT(DISTINCT u.Id) AS user_count\nFROM users u\nJOIN posts p ON u.Id = p.OwnerUserId\nWHERE u.Location = 'United Kingdom'\nAND p.FavoriteCount >= 4;",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
    "difficulty": "moderate"
  },
  {
    "question_id": 678,
    "db_id": "codebase_community",
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "predicted_sql": "SELECT p.Id, p.Title\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky'\nORDER BY p.ViewCount DESC\nLIMIT 1;",
    "gold_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "difficulty": "simple"
  },
  {
    "question_id": 682,
    "db_id": "codebase_community",
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "predicted_sql": "SELECT p.Id AS PostId, u.DisplayName AS OwnerDisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.FavoriteCount = (\n    SELECT MAX(FavoriteCount)\n    FROM posts\n    WHERE strftime('%Y', CreationDate) = '2010'\n) AND strftime('%Y', p.CreaionDate) = '2010';",
    "gold_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "evidence": "the most valuable post in 2010 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
    "difficulty": "moderate"
  },
  {
    "question_id": 683,
    "db_id": "codebase_community",
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "predicted_sql": "WITH QualifiedOwners AS (\n    SELECT p.OwnerUserId\n    FROM posts p\n    JOIN users u ON p.OwnerUserId = u.Id\n    WHERE p.CreaionDate LIKE '2011-%'\n    AND u.Reputation > 1000\n)\nSELECT \n    100.0 * COUNT(DISTINCT p.Id) / NULLIF((SELECT COUNT(*) FROM posts),0) AS percentage\nFROM posts p\nWHERE p.OwnerUserId IN (SELECT OwnerUserId FROM QualifiedOwners);",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
    "difficulty": "moderate"
  },
  {
    "question_id": 685,
    "db_id": "codebase_community",
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "predicted_sql": "WITH last_post AS (\n    SELECT *\n    FROM posts\n    WHERE Title = 'Computer Game Datasets'\n    ORDER BY LasActivityDate DESC\n    LIMIT 1\n)\nSELECT last_post.ViewCount AS total_views, users.DisplayName AS user_name\nFROM last_post\nJOIN users ON last_post.OwnerUserId = users.Id;",
    "gold_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "difficulty": "moderate"
  },
  {
    "question_id": 687,
    "db_id": "codebase_community",
    "question": "How many comments were added to the post with the highest score?",
    "predicted_sql": "SELECT COUNT(*) AS CommentCount\nFROM comments\nWHERE PostId = (SELECT Id\n                FROM posts\n                ORDER BY Score DESC\n                LIMIT 1);",
    "gold_sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "evidence": "the highest score refers to MAX(Score);",
    "difficulty": "simple"
  },
  {
    "question_id": 694,
    "db_id": "codebase_community",
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "predicted_sql": "WITH LatestPostComments AS (\n    SELECT c.Text AS CommentText, c.UserDisplayName\n    FROM comments c\n    JOIN posts p ON c.PostId = p.Id\n    WHERE p.Title = 'Analysing wind data with R'\n    ORDER BY p.CreaionDate DESC\n    LIMIT 10\n)\n\nSELECT CommentText, UserDisplayName\nFROM LatestPostComments;",
    "gold_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' AND T3.CreationDate = (SELECT MAX(T4.CreationDate) FROM users AS T5 INNER JOIN posts AS T6 ON T5.Id = T6.OwnerUserId INNER JOIN comments AS T4 ON T6.Id = T4.PostId WHERE T6.Title = 'Analysing wind data with R')",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "difficulty": "moderate"
  },
  {
    "question_id": 701,
    "db_id": "codebase_community",
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "predicted_sql": "WITH most_influential_user AS (\n    SELECT OwnerUserId\n    FROM posts\n    ORDER BY Score * (SELECT MAX(Reputation) FROM users) DESC\n    LIMIT 1\n)\nSELECT \n    100.0 * COUNT(CASE WHEN p.Score > 50 THEN 1 END) / COUNT(p.Id) AS percentage_above_50\nFROM \n    posts p\nWHERE \n    p.OwnerUserId = (SELECT OwnerUserId FROM most_influential_user);",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.Score > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Id) FROM users T1 INNER JOIN posts T2 ON T1.Id = T2.OwnerUserId INNER JOIN ( SELECT MAX(Reputation) AS max_reputation FROM users ) T3 ON T1.Reputation = T3.max_reputation",
    "evidence": "The higher reputation the user has the more influence; percentage = DIVIDE(COUNT(stats_posts.Id where Score > 50 and MAX(Reputation))), COUNT(stats_posts.Id where MAX(Reputation));",
    "difficulty": "challenging"
  },
  {
    "question_id": 704,
    "db_id": "codebase_community",
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "predicted_sql": "SELECT t.ExcerptPostId AS ExcerptPostId, t.WikiPostId AS WikiPostId\nFROM tags t\nWHERE t.TagName = 'sample';",
    "gold_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "difficulty": "simple"
  },
  {
    "question_id": 705,
    "db_id": "codebase_community",
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "predicted_sql": "SELECT u.Reputation, u.UpVotes \nFROM users u \nJOIN comments c ON u.Id = c.UserId \nWHERE c.Text = 'fine, you win :)';",
    "gold_sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "evidence": "Text = 'fine, you win :)';",
    "difficulty": "simple"
  },
  {
    "question_id": 707,
    "db_id": "codebase_community",
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "predicted_sql": "WITH FilteredPosts AS (\n    SELECT *\n    FROM posts\n    WHERE ViewCount BETWEEN 100 AND 150\n)\nSELECT Text\nFROM comments\nWHERE PostId IN (SELECT Id FROM FilteredPosts)\nORDER BY Score DESC\nLIMIT 1;",
    "gold_sql": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
    "difficulty": "moderate"
  },
  {
    "question_id": 710,
    "db_id": "codebase_community",
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "predicted_sql": "WITH CommentCountPerPost AS (\n    SELECT PostId, COUNT(Id) AS NumComments\n    FROM comments\n    GROUP BY PostId\n    HAVING NumComments = 1\n)\n\nSELECT COUNT(*) AS NumCommentsWithZeroScore\nFROM comments\nWHERE Score = 0\nAND PostId IN (SELECT PostId FROM CommentCountPerPost);",
    "gold_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "evidence": "in posts with 1 comment refers to CommentCount = 1;",
    "difficulty": "simple"
  },
  {
    "question_id": 716,
    "db_id": "codebase_community",
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "predicted_sql": "SELECT \n    (100.0 * COUNT(DISTINCT c.UserId) FILTER(WHERE v.VoteTypeId = 2 AND c.Score BETWEEN 5 AND 10)\n    / COUNT(DISTINCT c.UserId) FILTER(WHERE c.Score BETWEEN 5 AND 10)) AS percentage\nFROM \n    comments c\nLEFT JOIN \n    votes v ON c.Id = v.PostId AND c.UserId = v.UserId;",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "evidence": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));",
    "difficulty": "moderate"
  },
  {
    "question_id": 340,
    "db_id": "card_games",
    "question": "Which are the cards that have incredibly powerful foils.",
    "predicted_sql": "SELECT c.name AS card_name\nFROM cards c\nWHERE c.cardKingdomFoilId IS NOT NULL\nAND c.cardKingdomId IS NOT NULL;",
    "gold_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
    "evidence": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 341,
    "db_id": "card_games",
    "question": "What are the borderless cards available without powerful foils?",
    "predicted_sql": "SELECT c.name AS borderless_cards_available_without_powerful_foils\nFROM cards c\nWHERE c.borderColor = 'borderless'\nAND (c.cardKingdomFoilId != c.cardKingdomId OR c.cardKingdomId IS NULL);",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
    "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 344,
    "db_id": "card_games",
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "predicted_sql": "SELECT c.name AS card_name\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic' \nAND l.format = 'gladiator' \nAND l.status = 'Banned';",
    "gold_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "difficulty": "moderate"
  },
  {
    "question_id": 345,
    "db_id": "card_games",
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "predicted_sql": "SELECT DISTINCT c.type, l.status\nFROM cards c\nLEFT JOIN legalities l ON c.uuid = l.uuid\nWHERE c.types = 'Artifact' \nAND c.side IS NULL\nAND l.format = 'vintage';",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "difficulty": "moderate"
  },
  {
    "question_id": 346,
    "db_id": "card_games",
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "predicted_sql": "WITH commander_legal_cards AS (\n    SELECT c.id AS card_id, c.artist\n    FROM cards c\n    JOIN legalities l ON c.uuid = l.uuid\n    WHERE c.power = '*' OR c.power IS NULL\n    AND l.format = 'commander'\n    AND l.status = 'Legal'\n)\nSELECT *\nFROM commander_legal_cards;",
    "gold_sql": "SELECT T1.id, T1.artist FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Legal' AND T2.format = 'commander' AND (T1.power IS NULL OR T1.power = '*')",
    "evidence": "unknown power refers to power = '*' or POWER IS NULL; commander play format refers to format = 'commander'; legal for commander play format refers to format = 'commander' where status = 'Legal'",
    "difficulty": "moderate"
  },
  {
    "question_id": 347,
    "db_id": "card_games",
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "predicted_sql": "WITH StephenDanieleCard AS (\n    SELECT c.id AS card_id, r.text AS ruling_text, \n           CASE \n               WHEN fd.text IS NULL THEN 'missing' \n               ELSE 'degraded' \n           END AS property_value_state\n    FROM cards c\n    JOIN rulings r ON c.uuid = r.uuid\n    LEFT JOIN foreign_data fd ON c.uuid = fd.uuid\n    WHERE c.artist = 'Stephen Daniel'\n)\n\nSELECT card_id, ruling_text, property_value_state\nFROM StephenDanieleCard;",
    "gold_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id",
    "difficulty": "moderate"
  },
  {
    "question_id": 349,
    "db_id": "card_games",
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "predicted_sql": "SELECT cards.name AS card,\n       cards.artist AS artist,\n       CASE WHEN cards.isPromo = 1 THEN 'Yes' ELSE 'No' END AS isPromotionalPrinting\nFROM cards\nJOIN (\n    SELECT uuid, COUNT(uuid) AS num_rulings\n    FROM rulings\n    GROUP BY uuid\n    ORDER BY num_rulings DESC\n    LIMIT 1\n) AS max_rulings ON cards.uuid = max_rulings.uuid;",
    "gold_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
    "evidence": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
    "difficulty": "moderate"
  },
  {
    "question_id": 352,
    "db_id": "card_games",
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "predicted_sql": "WITH chinese_cards AS (\n    SELECT \n        COUNT(id) AS total_count,\n        SUM(CASE WHEN language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS chinese_count\n    FROM foreign_data\n)\nSELECT (chinese_count * 100.0 / total_count) AS percentage_of_chinese_cards\nFROM chinese_cards;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
    "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
    "difficulty": "moderate"
  },
  {
    "question_id": 356,
    "db_id": "card_games",
    "question": "How many cards have infinite power?",
    "predicted_sql": "SELECT COUNT(*) AS num_cards_with_infinite_power\nFROM cards\nWHERE power = '*';",
    "gold_sql": "SELECT COUNT(*) FROM cards WHERE power = '*'",
    "evidence": "infinite power refers to power = '*';",
    "difficulty": "simple"
  },
  {
    "question_id": 358,
    "db_id": "card_games",
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT c.borderColor\nFROM cards c\nWHERE c.name = 'Ancestor''s Chosen';",
    "gold_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "evidence": "name of card  = 'Ancestor''s Chosen' ;",
    "difficulty": "simple"
  },
  {
    "question_id": 366,
    "db_id": "card_games",
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "predicted_sql": "WITH card_rule AS (\n    SELECT name, originalText\n    FROM cards\n    WHERE name = 'Benalish Knight'\n)\nSELECT originalText AS rule_of_playing_card_Benalish_Knight\nFROM card_rule;",
    "gold_sql": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "difficulty": "simple"
  },
  {
    "question_id": 368,
    "db_id": "card_games",
    "question": "What is the percentage of borderless cards?",
    "predicted_sql": "SELECT\n    (COUNT(CASE WHEN borderColor = 'borderless' THEN id END) * 100.0 / COUNT(id)) AS percentage_of_borderless_cards\nFROM\n    cards;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100",
    "difficulty": "simple"
  },
  {
    "question_id": 371,
    "db_id": "card_games",
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "predicted_sql": "WITH story_spotlight_cards AS (\n    SELECT id\n    FROM cards\n    WHERE isStorySpotlight = 1\n)\nSELECT \n    (COUNT(DISTINCT c.id) * 100.0) / NULLIF(COUNT(DISTINCT c.id), 0) AS percentage\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nJOIN story_spotlight_cards s ON c.id = s.id\nWHERE f.language = 'French';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
    "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 377,
    "db_id": "card_games",
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "predicted_sql": "SELECT COUNT(DISTINCT c.id) AS num_cards\nFROM cards c\nWHERE c.originalType = 'Summon - Angel' \nAND c.subtypes NOT LIKE '%Angel%';",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
    "evidence": "subtype other than Angel refers to subtypes is not 'Angel';",
    "difficulty": "simple"
  },
  {
    "question_id": 379,
    "db_id": "card_games",
    "question": "What are the cards belong to duel deck a? List the ID.",
    "predicted_sql": "SELECT id\nFROM cards\nWHERE duelDeck = 'a';",
    "gold_sql": "SELECT id FROM cards WHERE duelDeck = 'a'",
    "evidence": "duel deck a refers to duelDeck = a;",
    "difficulty": "simple"
  },
  {
    "question_id": 383,
    "db_id": "card_games",
    "question": "How many of the banned cards are white border?",
    "predicted_sql": "SELECT COUNT(*) \nFROM cards \nWHERE status = 'Banned' \nAND borderColor = 'white';",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
    "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
    "difficulty": "simple"
  },
  {
    "question_id": 391,
    "db_id": "card_games",
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "predicted_sql": "SELECT c.name AS card_name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.originalType = 'Artifact'\nAND c.colors LIKE '%B%'\nAND fd.language != 'English';",
    "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "difficulty": "moderate"
  },
  {
    "question_id": 397,
    "db_id": "card_games",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "predicted_sql": "SELECT c.name, c.manaCost\nFROM cards c\nWHERE c.layout = 'normal'\nAND c.frameVersion = '2003'\nAND c.borderColor = 'black'\nAND c.availability = 'mtgo,paper';",
    "gold_sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "evidence": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'",
    "difficulty": "moderate"
  },
  {
    "question_id": 402,
    "db_id": "card_games",
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "predicted_sql": "WITH story_spotlight_cards AS (\n    SELECT id\n    FROM cards\n    WHERE isStorySpotlight = 1\n)\nSELECT s.id\nFROM story_spotlight_cards s\nLEFT JOIN cards c ON s.id = c.id\nWHERE c.isTextless = 0\nUNION\nSELECT NULL AS id\nFROM story_spotlight_cards\nWHERE id NOT IN (SELECT id FROM cards WHERE isTextless = 0) \nORDER BY id;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "evidence": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 405,
    "db_id": "card_games",
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "predicted_sql": "SELECT COUNT(*) \nFROM sets \nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.block = 'Commander' \nAND set_translations.language = 'Portuguese (Brasil)';",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "evidence": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
    "difficulty": "moderate"
  },
  {
    "question_id": 407,
    "db_id": "card_games",
    "question": "Lists all types of cards in German.",
    "predicted_sql": "SELECT DISTINCT subtypes as german_card_types\nFROM cards\nWHERE subtypes IS NOT NULL\nAND supertypes IS NOT NULL;",
    "gold_sql": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
    "evidence": "German refer to language; all types refer to the subtypes, supertypes; subtypes is not null AND supertypes is not null",
    "difficulty": "moderate"
  },
  {
    "question_id": 408,
    "db_id": "card_games",
    "question": "How many unknown power cards contain info about the triggered ability",
    "predicted_sql": "SELECT COUNT(DISTINCT c.id)\nFROM cards c\nWHERE (c.power IS NULL OR c.power = '*')\nAND c.text LIKE '%triggered ability%';",
    "gold_sql": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE (T1.power IS NULL OR T1.power = '*') AND T2.text LIKE '%triggered ability%'",
    "evidence": "unknown power cards refers to power is null or power = '*';contain info about the triggered ability refers to text contains 'triggered ability'",
    "difficulty": "moderate"
  },
  {
    "question_id": 409,
    "db_id": "card_games",
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "predicted_sql": "SELECT COUNT(DISTINCT c.id) AS num_cards\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'premodern' \nAND c.side IS NULL \nAND c.uuid IN \n    (SELECT r.uuid \n     FROM rulings r \n     WHERE r.text = 'This is a triggered mana ability.');",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
    "evidence": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL",
    "difficulty": "moderate"
  },
  {
    "question_id": 412,
    "db_id": "card_games",
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "predicted_sql": "WITH french_cards AS (\n    SELECT c.name AS foreign_name\n    FROM cards c\n    JOIN foreign_data f ON c.uuid = f.uuid\n    WHERE f.language = 'French'\n    AND c.layout = 'normal'\n    AND c.borderColor = 'black'\n    AND c.type LIKE '%Creature%'\n    AND c.artist = 'Matthew D. Wilson'\n)\nSELECT foreign_name\nFROM french_cards;",
    "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
    "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
    "difficulty": "moderate"
  },
  {
    "question_id": 414,
    "db_id": "card_games",
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "predicted_sql": "WITH ravnica_set AS (\n    SELECT *\n    FROM sets\n    WHERE baseSetSize = 180\n)\n\nSELECT st.language\nFROM set_translations AS st\nJOIN ravnica_set AS rs ON st.setCode = rs.code;",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
    "evidence": "set of 180 cards refers to baseSetSize = 180",
    "difficulty": "simple"
  },
  {
    "question_id": 415,
    "db_id": "card_games",
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN c.hasContentWarning = 0 THEN 1 END) * 100.0 / COUNT(c.id)) AS percentage_without_content_warning\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nWHERE \n    l.format = 'commander' AND l.status = 'legal';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
    "difficulty": "challenging"
  },
  {
    "question_id": 416,
    "db_id": "card_games",
    "question": "What percentage of cards without power are in French?",
    "predicted_sql": "SELECT \n    (CAST(COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END) AS REAL) / \n    NULLIF(COUNT(CASE WHEN c.power IS NULL OR c.power = '*' THEN 1 END), 0) * 100) AS percentage_of_cards_in_french_without_power\nFROM \n    cards c\nJOIN \n    foreign_data f ON c.uuid = f.uuid\nWHERE \n    f.language = 'French';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
    "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 422,
    "db_id": "card_games",
    "question": "What is the language of the card with the multiverse number 149934?",
    "predicted_sql": "SELECT language \nFROM foreign_data \nWHERE multiverseid = 149934;",
    "gold_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "evidence": "multiverse number 149934 refers to multiverseid = 149934;",
    "difficulty": "simple"
  },
  {
    "question_id": 424,
    "db_id": "card_games",
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "predicted_sql": "SELECT (COUNT(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 END) * 100.0) / COUNT(isTextless) AS proportion_of_textless_normal_layout_cards\nFROM cards;",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100",
    "difficulty": "simple"
  },
  {
    "question_id": 427,
    "db_id": "card_games",
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "predicted_sql": "SELECT DISTINCT language\nFROM foreign_data\nJOIN cards ON cards.uuid = foreign_data.uuid\nJOIN sets ON sets.code = cards.setCode\nWHERE sets.mcmName = 'Archenemy' AND cards.setCode = 'ARC';",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
    "difficulty": "moderate"
  },
  {
    "question_id": 440,
    "db_id": "card_games",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "predicted_sql": "SELECT language\nFROM foreign_data\nWHERE uuid = (\n    SELECT uuid\n    FROM cards\n    WHERE name = 'A Pedra Fellwar'\n);",
    "gold_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "difficulty": "simple"
  },
  {
    "question_id": 459,
    "db_id": "card_games",
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "predicted_sql": "SELECT\n    c.name,\n    c.convertedManaCost\nFROM\n    cards AS c\nWHERE\n    c.name IN ('Serra Angel', 'Shrine Keeper')\nORDER BY\n    c.convertedManaCost DESC\nLIMIT 1;",
    "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
    "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater",
    "difficulty": "moderate"
  },
  {
    "question_id": 462,
    "db_id": "card_games",
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "predicted_sql": "SELECT set_translations.translation AS italian_name_of_set\nFROM cards\nJOIN set_translations ON cards.setCode = set_translations.setCode\nWHERE cards.name = 'Ancestor''s Chosen'\nAND set_translations.language = 'Italian';",
    "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
    "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'",
    "difficulty": "moderate"
  },
  {
    "question_id": 465,
    "db_id": "card_games",
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "predicted_sql": "SELECT DISTINCT c.name\nFROM cards c\nJOIN foreign_data f ON c.uuid = f.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND f.language = 'Korean';",
    "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
    "difficulty": "moderate"
  },
  {
    "question_id": 466,
    "db_id": "card_games",
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "predicted_sql": "SELECT COUNT(*) AS num_cards_designed_by_adam_rex\nFROM cards\nJOIN set_translations ON cards.setCode = set_translations.setCode\nWHERE set_translations.translation = 'Hauptset Zehnte Edition'\nAND cards.artist = 'Adam Rex';",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
    "difficulty": "moderate"
  },
  {
    "question_id": 468,
    "db_id": "card_games",
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "predicted_sql": "SELECT set_translations.translation AS simplified_chinese_translation_of_eighth_edition\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';",
    "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
    "evidence": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation",
    "difficulty": "moderate"
  },
  {
    "question_id": 469,
    "db_id": "card_games",
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "predicted_sql": "SELECT DISTINCT \"Angel of Mercy\"\nFROM cards\nWHERE mtgoCode IS NOT NULL;",
    "gold_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "difficulty": "moderate"
  },
  {
    "question_id": 472,
    "db_id": "card_games",
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "predicted_sql": "SELECT COUNT(DISTINCT set_translations.setCode) AS num_sets_with_italian_translation\nFROM set_translations\nJOIN sets ON set_translations.setCode = sets.code\nWHERE sets.block = 'Ice Age' AND set_translations.language = 'Italian' AND set_translations.translation IS NOT NULL;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
    "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null",
    "difficulty": "moderate"
  },
  {
    "question_id": 473,
    "db_id": "card_games",
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "predicted_sql": "SELECT DISTINCT c.name, s.isForeignOnly\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Adarkar Valkyrie';",
    "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
    "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
    "difficulty": "moderate"
  },
  {
    "question_id": 474,
    "db_id": "card_games",
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "predicted_sql": "SELECT COUNT(DISTINCT c.id)\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nJOIN sets s ON c.setCode = s.code\nWHERE st.language = 'Italian' \nAND c.setCode = s.code \nAND s.baseSetSize < 100;",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
    "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10",
    "difficulty": "moderate"
  },
  {
    "question_id": 477,
    "db_id": "card_games",
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "predicted_sql": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')\nAND s.name = 'Coldsnap';",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "difficulty": "challenging"
  },
  {
    "question_id": 479,
    "db_id": "card_games",
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "predicted_sql": "SELECT COUNT(*)\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE cards.convertedManaCost > 5\nAND (cards.power = '*' OR cards.power IS NULL)\nAND sets.name = 'Coldsnap';",
    "gold_sql": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null",
    "difficulty": "moderate"
  },
  {
    "question_id": 480,
    "db_id": "card_games",
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT fd.flavorText\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';",
    "gold_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
    "difficulty": "moderate"
  },
  {
    "question_id": 483,
    "db_id": "card_games",
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "predicted_sql": "SELECT cards.name, rulings.text AS Italian_text_ruling\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'Coldsnap' AND rulings.language = 'Italian';",
    "gold_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "difficulty": "moderate"
  },
  {
    "question_id": 484,
    "db_id": "card_games",
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "predicted_sql": "WITH max_converted_mana AS (\n    SELECT MAX(convertedManaCost) AS max_cmc\n    FROM cards\n    WHERE setCode = 'CSP'\n)\nSELECT c.name\nFROM cards c\nJOIN set_translations st ON c.setCode = st.setCode\nWHERE st.language = 'Italian'\nAND c.convertedManaCost = (SELECT max_cmc FROM max_converted_mana)\nAND c.setCode = 'CSP';",
    "gold_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.convertedManaCost = (SELECT MAX(convertedManaCost) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian')",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "difficulty": "moderate"
  },
  {
    "question_id": 486,
    "db_id": "card_games",
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "predicted_sql": "SELECT \n    (COUNT(DISTINCT c.id) * 100.0) / (SELECT COUNT(*) FROM cards WHERE setCode = 'CSP') AS percentage\nFROM \n    cards c\nWHERE \n    c.convertedManaCost = 7\n    AND c.setCode = 'CSP';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
    "difficulty": "moderate"
  },
  {
    "question_id": 487,
    "db_id": "card_games",
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "predicted_sql": "SELECT \n    (COUNT(DISTINCT c.cardKingdomId) + COUNT(DISTINCT c.cardKingdomFoilId)) * 100.0 / \n    (SELECT COUNT(*) FROM cards WHERE setCode = 'CSP') AS percentage_of_incredibly_powerful\nFROM \n    cards c \nWHERE \n    c.setCode = 'CSP';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
    "difficulty": "challenging"
  },
  {
    "question_id": 518,
    "db_id": "card_games",
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "predicted_sql": "WITH banned_cards_count AS (\n    SELECT\n        l.format AS play_format,\n        c.name AS card_name,\n        COUNT(l.status) AS banned_count\n    FROM\n        legalities l\n    JOIN cards c ON l.uuid = c.uuid\n    WHERE\n        l.status = 'Banned'\n    GROUP BY\n        l.format,\n        c.name\n)\nSELECT\n    bc.play_format AS play_format,\n    bc.card_name AS card_name\nFROM\n    banned_cards_count bc\nWHERE\n    bc.banned_count = (\n        SELECT\n            MAX(banned_count)\n        FROM\n            banned_cards_count\n    );",
    "gold_sql": "WITH MaxBanned AS (SELECT format, COUNT(*) AS count_banned FROM legalities WHERE status = 'Banned' GROUP BY format ORDER BY COUNT(*) DESC LIMIT 1) SELECT T2.format, T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid INNER JOIN MaxBanned MB ON MB.format = T2.format WHERE T2.status = 'Banned'",
    "evidence": "play format refers to format; banned status refers to status = 'Banned'; the highest number of banned status refers to MAX(COUNT(status = 'Banned'))",
    "difficulty": "moderate"
  },
  {
    "question_id": 522,
    "db_id": "card_games",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "predicted_sql": "WITH top_cards AS (\n    SELECT c.name, l.status AS banned_play_format\n    FROM cards c\n    JOIN legalities l ON c.uuid = l.uuid\n    WHERE c.edhrecRank = 1\n)\nSELECT * FROM top_cards;",
    "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "difficulty": "moderate"
  },
  {
    "question_id": 528,
    "db_id": "card_games",
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "predicted_sql": "SELECT c.name, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';",
    "gold_sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
    "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format",
    "difficulty": "challenging"
  },
  {
    "question_id": 529,
    "db_id": "card_games",
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "predicted_sql": "SELECT s.name\nFROM sets s\nLEFT JOIN set_translations st1 ON s.code = st1.setCode AND st1.language = 'Japanese'\nLEFT JOIN set_translations st2 ON s.code = st2.setCode AND st2.language = 'Korean'\nWHERE st1.translation IS NULL\nAND st2.translation IS NOT NULL;",
    "gold_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
    "difficulty": "moderate"
  },
  {
    "question_id": 530,
    "db_id": "card_games",
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "predicted_sql": "SELECT c.frameVersion AS frame_styles, c.name AS cards\nFROM cards c\nWHERE c.artist = 'Allen Williams'\nAND c.uuid IN (SELECT l.uuid FROM legalities l WHERE l.status = 'Banned');",
    "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "difficulty": "moderate"
  },
  {
    "question_id": 195,
    "db_id": "toxicology",
    "question": "What is the most common bond type?",
    "predicted_sql": "SELECT bond_type\nFROM bond\nGROUP BY bond_type\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "evidence": "most common bond type refers MAX(COUNT(bond_type))",
    "difficulty": "simple"
  },
  {
    "question_id": 197,
    "db_id": "toxicology",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "predicted_sql": "SELECT AVG(oxygen_count) AS average_oxygen_count\nFROM (\n    SELECT molecule_id, COUNT(DISTINCT atom_id) AS oxygen_count\n    FROM atom\n    WHERE element = 'o' AND molecule_id IN (\n        SELECT molecule_id\n        FROM bond\n        WHERE bond_type = '-'\n    )\n    GROUP BY molecule_id\n) subquery;",
    "gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
    "difficulty": "moderate"
  },
  {
    "question_id": 198,
    "db_id": "toxicology",
    "question": "On average how many carcinogenic molecules are single bonded?",
    "predicted_sql": "SELECT AVG(single_bond_count) AS average_single_bond_count\nFROM \n    (SELECT molecule.molecule_id, \n            COUNT(DISTINCT molecule.molecule_id) AS molecule_count, \n            CAST(SUM(CASE WHEN bond.bond_type = '-' THEN 1 ELSE 0 END) AS REAL) AS single_bond_count\n     FROM molecule\n     JOIN bond ON molecule.molecule_id = bond.molecule_id\n     GROUP BY molecule.molecule_id) subquery;",
    "gold_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
    "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
    "difficulty": "challenging"
  },
  {
    "question_id": 200,
    "db_id": "toxicology",
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "predicted_sql": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_type = '#' AND m.label = '+';",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
    "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
    "difficulty": "simple"
  },
  {
    "question_id": 201,
    "db_id": "toxicology",
    "question": "What is the percentage of carbon in double-bond molecules?",
    "predicted_sql": "SELECT \n    100.0 * SUM(a.element = 'c') / COUNT(DISTINCT m.molecule_id) AS percentage_of_carbon_in_double_bond_molecules\nFROM \n    atom a\n    JOIN bond b ON a.molecule_id = b.molecule_id\n    JOIN molecule m ON a.molecule_id = m.molecule_id\n    JOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2 \n    AND b.bond_id = c.bond_id\nWHERE \n    b.bond_type = '=';",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
    "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
    "difficulty": "moderate"
  },
  {
    "question_id": 206,
    "db_id": "toxicology",
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "predicted_sql": "SELECT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_id = 'TR004_8_9';",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
    "difficulty": "challenging"
  },
  {
    "question_id": 207,
    "db_id": "toxicology",
    "question": "What elements are in a double type bond?",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '=';",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "evidence": "double type bond refers to bond_type = '=';",
    "difficulty": "challenging"
  },
  {
    "question_id": 208,
    "db_id": "toxicology",
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "predicted_sql": "SELECT m.label AS most_numerous_label_in_hydrogen_atoms\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nWHERE a.element = 'h'\nGROUP BY m.label\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "gold_sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
    "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
    "difficulty": "moderate"
  },
  {
    "question_id": 212,
    "db_id": "toxicology",
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "predicted_sql": "SELECT element\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = '-'\nGROUP BY element\nORDER BY COUNT(*) ASC\nLIMIT 1;",
    "gold_sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
    "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));",
    "difficulty": "challenging"
  },
  {
    "question_id": 213,
    "db_id": "toxicology",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "predicted_sql": "SELECT b.bond_type\nFROM bond b\nJOIN connected c ON b.molecule_id = c.bond_id\nJOIN atom a ON (c.atom_id = a.atom_id AND c.atom_id2 = 'TR004_20' AND a.atom_id = 'TR004_8')\nWHERE c.bond_id = b.bond_id\nUNION\nSELECT b.bond_type\nFROM bond b\nJOIN connected c ON b.molecule_id = c.bond_id\nJOIN atom a ON (c.atom_id2 = a.atom_id AND c.atom_id = 'TR004_20' AND a.atom_id = 'TR004_8')\nWHERE c.bond_id = b.bond_id;",
    "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
    "difficulty": "moderate"
  },
  {
    "question_id": 215,
    "db_id": "toxicology",
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "predicted_sql": "SELECT COUNT(DISTINCT a.atom_id)\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN atom a2 ON c.atom_id2 = a2.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE (a.element = 'i' OR a.element = 's')\nAND (a2.element = 'i' OR a2.element = 's')\nAND b.bond_type = '-';",
    "gold_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
    "difficulty": "challenging"
  },
  {
    "question_id": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "predicted_sql": "SELECT (SUM(CASE WHEN m.label = '+' AND a.element <> 'f' THEN 1 ELSE 0 END) * 100.0) / COUNT(DISTINCT m.molecule_id) AS percentage\nFROM molecule m\nLEFT JOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'f' OR a.element IS NULL;",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
    "difficulty": "challenging"
  },
  {
    "question_id": 219,
    "db_id": "toxicology",
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "predicted_sql": "SELECT \n    (COUNT(DISTINCT bond.bond_id) * 100.0) / COUNT(*) AS percent\nFROM \n    bond\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE \n    bond.bond_type = '#' \n    AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+');",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
    "difficulty": "challenging"
  },
  {
    "question_id": 220,
    "db_id": "toxicology",
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "predicted_sql": "WITH toxicology_count AS (\n    SELECT a.element, COUNT(DISTINCT b.bond_id) AS bond_count\n    FROM atom a\n    LEFT JOIN connected c ON a.atom_id = c.atom_id\n    LEFT JOIN bond b ON c.bond_id = b.bond_id\n    WHERE a.molecule_id = 'TR000'\n    GROUP BY a.element\n)\nSELECT element\nFROM toxicology_count\nORDER BY bond_count DESC, element\nLIMIT 3;",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "evidence": "TR000 is the molecule id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 226,
    "db_id": "toxicology",
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "predicted_sql": "WITH double_bond_count AS (\n    SELECT \n        COUNT(b.bond_id) AS total_bonds,\n        SUM(CASE WHEN b.bond_type = '=' THEN 1 ELSE 0 END) AS double_bonds\n    FROM molecule m\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    WHERE m.molecule_id = 'TR008'\n)\nSELECT \n    ROUND(100.0 * double_bonds / total_bonds, 5) AS percent\nFROM double_bond_count;",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
    "difficulty": "moderate"
  },
  {
    "question_id": 227,
    "db_id": "toxicology",
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "predicted_sql": "WITH labeled_molecules AS (\n    SELECT molecule_id, label\n    FROM molecule\n)\nSELECT \n    ROUND(100.0 * SUM(CASE WHEN label = '+' THEN 1 ELSE 0 END) / COUNT(labeled_molecules.molecule_id), 3) AS percent\nFROM labeled_molecules;",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
    "difficulty": "simple"
  },
  {
    "question_id": 228,
    "db_id": "toxicology",
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "predicted_sql": "WITH HydrogenCounts AS (\n    SELECT COUNT(a.atom_id) AS total_hydrogen\n    FROM atom a\n    WHERE a.molecule_id = 'TR206' AND a.element = 'h'\n)\nSELECT 100.0 * h.total_hydrogen / (SELECT COUNT(a.atom_id) FROM atom a WHERE a.molecule_id = 'TR206') AS percent\nFROM HydrogenCounts h;",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
    "difficulty": "moderate"
  },
  {
    "question_id": 230,
    "db_id": "toxicology",
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "predicted_sql": "SELECT atom.element, molecule.label\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE atom.molecule_id = 'TR060';",
    "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "evidence": "TR060 is the molecule id; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 231,
    "db_id": "toxicology",
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "predicted_sql": "WITH BondCounts AS (\n    SELECT b.bond_type, COUNT(*) AS bond_count\n    FROM bond b\n    WHERE b.molecule_id = 'TR010'\n    GROUP BY b.bond_type\n)\nSELECT bc.bond_type\nFROM BondCounts bc\nWHERE bc.bond_count = (SELECT MAX(bond_count) FROM BondCounts)\nLIMIT 1;",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
    "difficulty": "challenging"
  },
  {
    "question_id": 232,
    "db_id": "toxicology",
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "predicted_sql": "WITH SingleBonds AS (\n    SELECT b.molecule_id\n    FROM bond b\n    WHERE b.bond_type = '-'\n    GROUP BY b.molecule_id\n    HAVING COUNT(*) = 1\n)\n\nSELECT m.molecule_id\nFROM molecule m\nJOIN SingleBonds sb ON m.molecule_id = sb.molecule_id\nWHERE m.label = '-'\nORDER BY m.molecule_id\nLIMIT 3;",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
    "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
    "difficulty": "moderate"
  },
  {
    "question_id": 234,
    "db_id": "toxicology",
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "predicted_sql": "SELECT COUNT(DISTINCT b.bond_id) AS num_bonds\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12'\nAND b.molecule_id = 'TR009';",
    "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
    "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
    "difficulty": "moderate"
  },
  {
    "question_id": 236,
    "db_id": "toxicology",
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "predicted_sql": "SELECT bond.bond_type, connected.atom_id, connected.atom_id2\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nWHERE bond.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR001_6_9');",
    "gold_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "evidence": "atoms refer to atom_id or atom_id2",
    "difficulty": "moderate"
  },
  {
    "question_id": 239,
    "db_id": "toxicology",
    "question": "How many connections does the atom 19 have?",
    "predicted_sql": "SELECT COUNT(DISTINCT bond_id) AS num_connections\nFROM connected\nWHERE atom_id = (SELECT atom_id FROM atom WHERE atom_id LIKE 'TR%_19') \n   OR atom_id2 = (SELECT atom_id FROM atom WHERE atom_id LIKE 'TR%_19');",
    "gold_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
    "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';",
    "difficulty": "simple"
  },
  {
    "question_id": 240,
    "db_id": "toxicology",
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "predicted_sql": "SELECT element\nFROM atom\nWHERE molecule_id = 'TR004';",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
    "evidence": "TR004 is the molecule id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 242,
    "db_id": "toxicology",
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "predicted_sql": "SELECT DISTINCT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25'\nAND m.label = '+';",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
    "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 243,
    "db_id": "toxicology",
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "predicted_sql": "SELECT DISTINCT b.bond_id\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nJOIN atom a1 ON c.atom_id = a1.atom_id AND a1.element = 'p'\nJOIN atom a2 ON c.atom_id2 = a2.atom_id AND a2.element = 'n';",
    "gold_sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
    "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
    "difficulty": "moderate"
  },
  {
    "question_id": 244,
    "db_id": "toxicology",
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "predicted_sql": "SELECT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE b.bond_type = ' = '\nGROUP BY m.molecule_id\nHAVING MAX(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) = 1;",
    "gold_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) AS bond_count FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT molecule_id, COUNT(bond_type) AS bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id) AS subquery) ORDER BY bond_count DESC) AS T2 ON T1.molecule_id = T2.molecule_id",
    "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
    "difficulty": "moderate"
  },
  {
    "question_id": 245,
    "db_id": "toxicology",
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "predicted_sql": "SELECT AVG(bond_count) AS average_bonds_with_iodine\nFROM (\n    SELECT COUNT(b.bond_id) AS bond_count\n    FROM atom a\n    JOIN connected c ON a.atom_id = c.atom_id\n    JOIN bond b ON c.bond_id = b.bond_id\n    WHERE a.element = 'i'\n    GROUP BY a.atom_id\n) subquery;",
    "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
    "difficulty": "moderate"
  },
  {
    "question_id": 247,
    "db_id": "toxicology",
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "predicted_sql": "SELECT atom_id, element\nFROM atom\nWHERE atom_id NOT IN (SELECT atom_id FROM connected);",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
    "evidence": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
    "difficulty": "challenging"
  },
  {
    "question_id": 248,
    "db_id": "toxicology",
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "predicted_sql": "SELECT atom.element\nFROM atom\nJOIN bond ON atom.molecule_id = bond.molecule_id\nJOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2\nWHERE bond.bond_type = '#'\nAND atom.molecule_id = 'TR041';",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "evidence": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
    "difficulty": "simple"
  },
  {
    "question_id": 249,
    "db_id": "toxicology",
    "question": "What are the elements of the atoms of TR144_8_19?",
    "predicted_sql": "WITH atom_elements AS (\n    SELECT a.element\n    FROM atom a\n    JOIN connected c ON a.atom_id = c.atom_id\n    WHERE c.bond_id = 'TR144_8_19'\n    UNION\n    SELECT a.element\n    FROM atom a\n    JOIN connected c ON a.atom_id = c.atom_id2\n    WHERE c.bond_id = 'TR144_8_19'\n)\nSELECT DISTINCT element\nFROM atom_elements;",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "evidence": "TR144_8_19 is the bond id; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 253,
    "db_id": "toxicology",
    "question": "List the elements of all the triple bonds.",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '#';",
    "gold_sql": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
    "evidence": "triple bond refers to bond_type = '#';",
    "difficulty": "challenging"
  },
  {
    "question_id": 255,
    "db_id": "toxicology",
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "predicted_sql": "SELECT CAST(SUM(m.label = '+') AS REAL) * 100 / NULLIF(COUNT(b.bond_id), 0) AS proportion_of_carcinogenic_bonds\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '-';",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
    "evidence": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'",
    "difficulty": "moderate"
  },
  {
    "question_id": 260,
    "db_id": "toxicology",
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "predicted_sql": "SELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN bond ON atom.molecule_id = bond.molecule_id\nJOIN connected ON atom.atom_id = connected.atom_id OR atom.atom_id = connected.atom_id2\nWHERE (atom.element = 'p' OR atom.element = 'br') AND bond.bond_type = '#';",
    "gold_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
    "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
    "difficulty": "moderate"
  },
  {
    "question_id": 263,
    "db_id": "toxicology",
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "predicted_sql": "WITH single_bond_molecules AS (\n    SELECT m.molecule_id\n    FROM molecule m\n    JOIN bond b ON m.molecule_id = b.molecule_id\n    GROUP BY m.molecule_id\n    HAVING COUNT(DISTINCT b.bond_id) = 1\n)\nSELECT \n    CAST(SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) AS REAL) / COUNT(a.atom_id) * 100.0 AS percent\nFROM single_bond_molecules sbm\nJOIN atom a ON sbm.molecule_id = a.molecule_id\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
    "difficulty": "challenging"
  },
  {
    "question_id": 268,
    "db_id": "toxicology",
    "question": "What are the elements for bond id TR001_10_11?",
    "predicted_sql": "SELECT element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_id = 'TR001_10_11';",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
    "evidence": "TR001_10_11 is the bond id;",
    "difficulty": "challenging"
  },
  {
    "question_id": 273,
    "db_id": "toxicology",
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "predicted_sql": "WITH carcinogenic_molecules AS (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '+'\n)\n\nSELECT (100.0 * SUM(element = 'cl') / COUNT(atom_id)) AS percentage\nFROM atom\nWHERE molecule_id IN (SELECT molecule_id FROM carcinogenic_molecules);",
    "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
    "difficulty": "moderate"
  },
  {
    "question_id": 281,
    "db_id": "toxicology",
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "predicted_sql": "SELECT element, COUNT(*) as tally\nFROM atom\nWHERE atom_id IN (\n    SELECT atom_id\n    FROM (\n        SELECT molecule_id, atom_id, ROW_NUMBER() OVER (PARTITION BY molecule_id ORDER BY atom_id) as atom_num\n        FROM atom\n    )\n    WHERE atom_num = 4\n)\nAND molecule_id IN (\n    SELECT molecule_id\n    FROM molecule\n    WHERE label = '+'\n)\nGROUP BY element;",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
    "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
    "difficulty": "challenging"
  },
  {
    "question_id": 282,
    "db_id": "toxicology",
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "predicted_sql": "WITH HydrogenRatio AS (\n    SELECT m.label, \n           SUM(a.element = 'h') * 1.0 / COUNT(a.element) AS ratio\n    FROM molecule m\n    JOIN atom a ON m.molecule_id = a.molecule_id\n    WHERE m.molecule_id = 'TR006'\n    GROUP BY m.label\n)\nSELECT label, ratio\nFROM HydrogenRatio;",
    "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
    "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "difficulty": "challenging"
  },
  {
    "question_id": 327,
    "db_id": "toxicology",
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "predicted_sql": "SELECT m.molecule_id\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nGROUP BY m.molecule_id\nHAVING m.label = '-' AND COUNT(DISTINCT a.atom_id) > 5;",
    "gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
    "difficulty": "moderate"
  },
  {
    "question_id": 5,
    "db_id": "california_schools",
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "predicted_sql": "SELECT COUNT(DISTINCT s.CDSCode) AS num_schools\nFROM satscores sat\nJOIN schools s ON sat.cds = s.CDSCode\nWHERE sat.AvgScrMath > 400\nAND s.Virtual = 'F';",
    "gold_sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
    "evidence": "Exclusively virtual refers to Virtual = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 11,
    "db_id": "california_schools",
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "predicted_sql": "SELECT CDSCode\nFROM schools\nWHERE (\"Enrollment (K-12)\" + \"Enrollment (Ages 5-17)\") > 500;",
    "gold_sql": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500",
    "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`",
    "difficulty": "simple"
  },
  {
    "question_id": 12,
    "db_id": "california_schools",
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "predicted_sql": "WITH SchoolsWithHighSATExcellence AS (\n    SELECT s.CDSCode\n    FROM schools s\n    JOIN satscores ss ON s.CDSCode = ss.cds\n    WHERE ss.NumTstTakr > 0\n    AND CAST(ss.NumGE1500 AS REAL) / ss.NumTstTakr > 0.3\n)\nSELECT MAX(s.\"Percent (%) Eligible Free (Ages 5-17)\")\nFROM frpm s\nJOIN SchoolsWithHighSATExcellence se ON s.CDSCode = se.CDSCode\nWHERE s.\"Enrollment (Ages 5-17)\" > 0;",
    "gold_sql": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
    "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 17,
    "db_id": "california_schools",
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "predicted_sql": "SELECT s.\"CharterNum\"\nFROM schools s\nJOIN satscores ss ON s.\"CDSCode\" = ss.\"cds\"\nWHERE ss.\"AvgScrWrite\" > 499\nGROUP BY s.\"CharterNum\"\nORDER BY AVG(ss.\"AvgScrWrite\") DESC;",
    "gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
    "evidence": "Valid charter number means the number is not null",
    "difficulty": "simple"
  },
  {
    "question_id": 23,
    "db_id": "california_schools",
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "predicted_sql": "SELECT s.School, s.Street\nFROM schools s\nJOIN (\n    SELECT CDSCode, ABS(\"Enrollment (K-12)\" - \"Enrollment (Ages 5-17)\") AS diff_enrollment\n    FROM frpm\n) f ON s.CDSCode = f.CDSCode\nWHERE f.diff_enrollment > 30;",
    "gold_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
    "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 24,
    "db_id": "california_schools",
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "predicted_sql": "SELECT s.School_Name\nFROM frpm f\nJOIN satscores s ON f.CDSCode = s.cds\nWHERE f.[Percent (%) Eligible Free (K-12)] > 0.1\nAND s.NumGE1500 >= 1500;",
    "gold_sql": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
    "evidence": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
    "difficulty": "moderate"
  },
  {
    "question_id": 25,
    "db_id": "california_schools",
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "predicted_sql": "SELECT DISTINCT s.FundingType\nFROM satscores AS ss\nJOIN schools AS s ON ss.cds = s.CDSCode\nWHERE ss.AvgScrMath > 400\nAND s.County = 'Riverside';",
    "gold_sql": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
    "evidence": "Average of average math = sum(average math scores) / count(schools).",
    "difficulty": "moderate"
  },
  {
    "question_id": 26,
    "db_id": "california_schools",
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "predicted_sql": "WITH HighSchools AS (\n    SELECT s.School, s.Street || ', ' || s.City || ', ' || s.State || ' ' || s.Zip AS Full_Address\n    FROM frpm f\n    JOIN schools s ON f.School_Code = s.CDSCode\n    WHERE f.Enrollment_Ages_5_17 > 800\n    AND (f.\"Free Meal Count (Ages 5-17)\" + f.\"FRPM Count (Ages 5-17)\") > 800\n)\n\nSELECT h.School, h.Full_Address\nFROM HighSchools h;",
    "gold_sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
    "evidence": "Full communication address should include Street, City, State and zip code if any.",
    "difficulty": "moderate"
  },
  {
    "question_id": 27,
    "db_id": "california_schools",
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "predicted_sql": "WITH OpenedClosedSchools AS (\n    SELECT s.School, s.Phone, ss.AvgScrWrite\n    FROM schools s\n    JOIN satscores ss ON s.CDSCode = ss.cds\n    WHERE (s.OpenDate > '1991-01-01' OR s.ClosedDate < '2000-01-01')\n)\nSELECT School, Phone, AVG(AvgScrWrite) AS AverageWritingScore\nFROM OpenedClosedSchools\nGROUP BY School, Phone;",
    "gold_sql": "SELECT T2.School, T1.AvgScrWrite, T2.Phone FROM schools AS T2 LEFT JOIN satscores AS T1 ON T2.CDSCode = T1.cds WHERE strftime('%Y', T2.OpenDate) > '1991' OR strftime('%Y', T2.ClosedDate) < '2000'",
    "evidence": "Communication number refers to phone number.",
    "difficulty": "moderate"
  },
  {
    "question_id": 28,
    "db_id": "california_schools",
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "predicted_sql": "WITH enrollment_difference AS (\n    SELECT s.School Name, s.DOCType, (f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") AS Difference\n    FROM schools s\n    JOIN frpm f ON s.CDSCode = f.CDSCode\n    WHERE s.\"FundingType\" = 'locally funded'\n)\n\nSELECT School Name, DOCType\nFROM enrollment_difference\nWHERE Difference > (SELECT AVG(Difference) FROM enrollment_difference);",
    "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "difficulty": "challenging"
  },
  {
    "question_id": 31,
    "db_id": "california_schools",
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "predicted_sql": "WITH RankedSchools AS (\n    SELECT *,\n           ROW_NUMBER() OVER (ORDER BY \"Enrollment (K-12)\" DESC) AS SchoolRank\n    FROM frpm\n    WHERE \"Low Grade\" = '1' AND \"High Grade\" = '12'\n)\n\nSELECT \"School Name\",\n       \"Percent (%) Eligible Free (K-12)\"\nFROM RankedSchools\nWHERE SchoolRank IN (10, 11);",
    "gold_sql": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
    "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 32,
    "db_id": "california_schools",
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "predicted_sql": "SELECT s.SchoolName,\n       f.[FRPM Count (K-12)] / f.[Enrollment (K-12)] AS Eligible_FRPM_Rate_K_12\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE f.[Ownership Code] = 66\nAND s.[Low Grade] = 'K'\nAND s.[High Grade] = '12'\nORDER BY f.[Free Meal Count (K-12)] DESC\nLIMIT 5;",
    "gold_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
    "evidence": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
    "difficulty": "moderate"
  },
  {
    "question_id": 37,
    "db_id": "california_schools",
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "predicted_sql": "WITH SchoolExcellenceRates AS (\n    SELECT s.CDSCode, s.School, s.Street, s.City, s.Zip, s.State, \n           (sats.NumGE1500 * 1.0 / sats.NumTstTakr) AS ExcellenceRate\n    FROM schools s\n    JOIN satscores sats ON s.CDSCode = sats.cds\n)\nSELECT Street, City, Zip, State\nFROM SchoolExcellenceRates\nWHERE ExcellenceRate = (SELECT MIN(ExcellenceRate) FROM SchoolExcellenceRates);",
    "gold_sql": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T2 INNER JOIN (SELECT cds, CAST(NumGE1500 AS REAL) / NumTstTakr AS rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) AS T1 ON T2.CDSCode = T1.cds WHERE T1.rate = (SELECT MIN(CAST(NumGE1500 AS REAL) / NumTstTakr) AS min_rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) ORDER BY T2.CDSCode",
    "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
    "difficulty": "moderate"
  },
  {
    "question_id": 36,
    "db_id": "california_schools",
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "predicted_sql": "WITH high_scoring_school AS (\n    SELECT s.School AS school_name\n    FROM satscores sc\n    JOIN schools s ON sc.cds = s.CDSCode\n    WHERE sc.NumGE1500 >= 1500\n    ORDER BY sc.NumGE1500 DESC\n    LIMIT 1\n)\nSELECT s.AdmFName1 || ' ' || s.AdmLName1 AS administrator_name\nFROM high_scoring_school h\nJOIN schools s ON h.school_name = s.School;",
    "gold_sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
    "difficulty": "challenging"
  },
  {
    "question_id": 39,
    "db_id": "california_schools",
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "predicted_sql": "SELECT AVG(satscores.NumTstTakr) AS AvgNumTstTakers\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE schools.City = 'Fresno'\nAND schools.OpenDate >= '1980-01-01'\nAND schools.OpenDate <= '1980-12-31';",
    "gold_sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
    "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980",
    "difficulty": "simple"
  },
  {
    "question_id": 40,
    "db_id": "california_schools",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "predicted_sql": "SELECT schools.Phone\nFROM schools\nJOIN satscores ON schools.CDSCode = satscores.cds\nWHERE schools.District = 'Fresno Unified'\nGROUP BY schools.CDSCode\nORDER BY AVG(satscores.AvgScrRead)\nLIMIT 1;",
    "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "evidence": "Fresno Unified is a name of district;",
    "difficulty": "moderate"
  },
  {
    "question_id": 41,
    "db_id": "california_schools",
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "predicted_sql": "WITH ranked_schools AS (\n    SELECT s.School AS school_name, s.County AS county_name, ss.AvgScrRead,\n           ROW_NUMBER() OVER (PARTITION BY s.County ORDER BY ss.AvgScrRead DESC) AS rank\n    FROM schools s\n    JOIN satscores ss ON s.CDSCode = ss.cds\n    WHERE s.Virtual = 'F'\n)\nSELECT school_name\nFROM ranked_schools\nWHERE rank <= 5;",
    "gold_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
    "difficulty": "simple"
  },
  {
    "question_id": 45,
    "db_id": "california_schools",
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "predicted_sql": "WITH Managed_Schools AS (\n    SELECT s.CDSCode, s.School, ss.AvgScrWrite\n    FROM schools s\n    JOIN satscores ss ON s.CDSCode = ss.cds\n    WHERE s.CDSCode IN (\n        SELECT CDSCode \n        FROM schools \n        WHERE AdmFName1 = 'Ricci' AND AdmLName1 = 'Ulrich'\n    )\n)\n\nSELECT School, AVG(AvgScrWrite) AS Average_Writing_Score\nFROM Managed_Schools\nGROUP BY School;",
    "gold_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
    "evidence": "Usually, administrators manage the school stuff.",
    "difficulty": "moderate"
  },
  {
    "question_id": 46,
    "db_id": "california_schools",
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "predicted_sql": "WITH k12_enrollment AS (\n    SELECT s.State, s.\"School Name\", s.\"Enrollment (K-12)\" AS k12_enrollment\n    FROM schools s\n    WHERE s.DOC = 31\n)\nSELECT State, \"School Name\", MAX(k12_enrollment) AS max_enrollment\nFROM k12_enrollment\nGROUP BY State;",
    "gold_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
    "difficulty": "simple"
  },
  {
    "question_id": 47,
    "db_id": "california_schools",
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "predicted_sql": "WITH opened_schools AS (\n    SELECT strftime('%m', OpenDate) AS opening_month, CDSCode\n    FROM schools\n    WHERE County = 'Alameda' \n        AND DOC = '52' \n        AND OpenDate LIKE '1980-%'\n)\nSELECT opening_month, COUNT(DISTINCT CDSCode) / 12.0 AS monthly_avg_opened_schools\nFROM opened_schools\nGROUP BY opening_month;",
    "gold_sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
    "difficulty": "moderate"
  },
  {
    "question_id": 48,
    "db_id": "california_schools",
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "predicted_sql": "SELECT \n    (SELECT COUNT(*) FROM schools WHERE DOC = 54 AND County = 'Orange County') * 1.0 /\n    (SELECT COUNT(*) FROM schools WHERE DOC = 52 AND County = 'Orange County');",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
    "difficulty": "moderate"
  },
  {
    "question_id": 50,
    "db_id": "california_schools",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "predicted_sql": "WITH RankedSchools AS (\n    SELECT s.School Name, s.Street AS Postal_Street,\n           ss.AvgScrMath,\n           RANK() OVER (ORDER BY ss.AvgScrMath DESC) AS Math_Rank\n    FROM schools s\n    JOIN satscores ss ON s.CDSCode = ss.cds\n)\nSELECT Postal_Street, \"School Name\"\nFROM RankedSchools\nWHERE Math_Rank = 7;",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "evidence": "Postal street and mailing street are synonyms.",
    "difficulty": "simple"
  },
  {
    "question_id": 62,
    "db_id": "california_schools",
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "predicted_sql": "SELECT COUNT(*) AS Total_Non_Chartered_Schools\nFROM schools\nJOIN frpm ON schools.CDSCode = frpm.CDSCode\nWHERE frpm.[Charter School (Y/N)] = 0\nAND frpm.[County Name] = 'Los Angeles'\nAND frpm.[Percent (%) Eligible Free (K-12)] < 0.18;",
    "gold_sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
    "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
    "difficulty": "challenging"
  },
  {
    "question_id": 72,
    "db_id": "california_schools",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "predicted_sql": "SELECT COUNT(DISTINCT frpm.CDSCode) AS enrollment_count\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE frpm.AcademicYear = '2014-2015'\nAND frpm.Enrollment >= 0\nAND frpm.Enrollment <= 17\nAND frpm.Enrollment >= 5\nAND frpm.EdOpsCode = 'SSS';",
    "gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "evidence": "State Special School means EdOpsCode = 'SSS'",
    "difficulty": "moderate"
  },
  {
    "question_id": 77,
    "db_id": "california_schools",
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "predicted_sql": "WITH KindergartenTo9th AS (\n    SELECT s.School, f.\"Percent (%) Eligible FRPM (Ages 5-17)\"\n    FROM schools s\n    JOIN frpm f ON s.CDSCode = f.CDSCode\n    WHERE f.\"High Grade\" = '9' AND f.\"Low Grade\" = 'K'\n    AND s.County = 'Los Angeles'\n)\n\nSELECT * FROM KindergartenTo9th;",
    "gold_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "evidence": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
    "difficulty": "moderate"
  },
  {
    "question_id": 79,
    "db_id": "california_schools",
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "predicted_sql": "WITH virtual_schools_county AS (\n    SELECT s.County, COUNT(*) AS num_virtual_schools\n    FROM schools s\n    WHERE s.Virtual = 'F'\n    AND s.County IN ('San Diego', 'Santa Barbara')\n    AND s.CDSCode IN (SELECT CDSCode FROM frpm)\n    GROUP BY s.County\n)\nSELECT County, num_virtual_schools\nFROM virtual_schools_county\nORDER BY num_virtual_schools DESC\nLIMIT 1;",
    "gold_sql": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "evidence": "'Does not offer physical building' means Virtual = F in the database.",
    "difficulty": "moderate"
  },
  {
    "question_id": 82,
    "db_id": "california_schools",
    "question": "What is the grade span offered in the school with the highest longitude?",
    "predicted_sql": "WITH max_longitude_school AS (\n    SELECT *\n    FROM schools\n    WHERE ABS(Longitude) = (SELECT MAX(ABS(Longitude)) FROM schools)\n)\nSELECT GSoffered\nFROM max_longitude_school;",
    "gold_sql": "SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools)",
    "evidence": "the highest longitude refers to the school with the maximum absolute longitude value.",
    "difficulty": "simple"
  },
  {
    "question_id": 83,
    "db_id": "california_schools",
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "predicted_sql": "WITH K8Schools AS (\n    SELECT s.City, COUNT(s.CDSCode) AS NumSchools\n    FROM schools s\n    WHERE s.\"GSserved\" = 'K-8' AND s.Magnet = 1\n    GROUP BY s.City\n)\n\nSELECT COUNT(s.CDSCode) AS NumSchoolsMultipleProvisionTypes, k.City, k.NumSchools\nFROM schools s\nJOIN K8Schools k ON s.City = k.City\nWHERE s.\"GSserved\" = 'K-8' AND s.Magnet = 1 AND s.\"NSLP Provision Status\" = 'Multiple Provision Types'\nGROUP BY s.City, k.NumSchools\nORDER BY s.City;",
    "gold_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
    "difficulty": "challenging"
  },
  {
    "question_id": 85,
    "db_id": "california_schools",
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "predicted_sql": "SELECT frpm.\"District Code\" AS District_Code\nFROM frpm\nJOIN schools ON frpm.CDSCode = schools.CDSCode\nWHERE schools.AdmFName1 = \"Alusine\"\nAND frpm.\"Enrollment (K-12)\" > 0\nAND frpm.\"Free Meal Count (K-12)\" IS NOT NULL\nAND frpm.\"Enrollment (K-12)\" IS NOT NULL;",
    "gold_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "difficulty": "moderate"
  },
  {
    "question_id": 87,
    "db_id": "california_schools",
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "predicted_sql": "WITH ValidSchools AS (\n    SELECT s.*\n    FROM schools s\n    WHERE s.City = 'San Bernardino' \n        AND s.County = 'San Bernardino' \n        AND (s.OpenDate >= '2009-01-01' AND s.OpenDate <= '2010-12-31')\n        AND (s.SOC = '62' OR s.DOC = '54')\n)\nSELECT DISTINCT AdmEmail1\nFROM ValidSchools\nWHERE AdmEmail1 LIKE '%_@__%.__%' ESCAPE '_';",
    "gold_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
    "evidence": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
    "difficulty": "challenging"
  },
  {
    "question_id": 89,
    "db_id": "financial",
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "predicted_sql": "SELECT COUNT(DISTINCT a.account_id) AS num_accounts\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN client c ON d.client_id = c.client_id\nJOIN district dist ON c.district_id = dist.district_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE t.type = 'PRIJEM' \nAND t.operation = 'VYDAJ' \nAND dist.A3 = 'East Bohemia';",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
    "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
    "difficulty": "moderate"
  },
  {
    "question_id": 92,
    "db_id": "financial",
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "predicted_sql": "SELECT COUNT(DISTINCT d.district_id) AS num_districts\nFROM district d\nJOIN client c ON d.district_id = c.district_id\nJOIN account a ON c.client_id = a.account_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE c.gender = 'F'\nGROUP BY d.district_id\nHAVING AVG(t.amount) > 6000 AND AVG(t.amount) < 10000;",
    "gold_sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
    "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
    "difficulty": "simple"
  },
  {
    "question_id": 93,
    "db_id": "financial",
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "predicted_sql": "SELECT COUNT(DISTINCT c.client_id) AS male_customers_with_avg_salary_gt_8000\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district t ON c.district_id = t.district_id\nWHERE c.gender = 'M'\nAND t.A3 = 'North Bohemia'\nAND t.A11 > 8000;",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
    "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
    "difficulty": "moderate"
  },
  {
    "question_id": 94,
    "db_id": "financial",
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "predicted_sql": "WITH salary_avg as (\n    SELECT c.client_id, AVG(t.amount) as avg_salary\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN account a ON d.account_id = a.account_id\n    JOIN trans t ON a.account_id = t.account_id\n    WHERE c.gender = 'F'\n    GROUP BY c.client_id\n)\n\nSELECT s.client_id, d.A2 as account_number\nFROM salary_avg s\nJOIN client c ON s.client_id = c.client_id\nJOIN district d ON c.district_id = d.district_id\nWHERE s.avg_salary = (SELECT MIN(avg_salary) FROM salary_avg)\nORDER BY c.birth_date ASC\nLIMIT 1\n\nUNION\n\nSELECT s.client_id, d.A2 as account_number\nFROM salary_avg s\nJOIN client c ON s.client_id = c.client_id\nJOIN district d ON c.district_id = d.district_id\nWHERE s.avg_salary = (SELECT MAX(avg_salary) FROM salary_avg)\nORDER BY c.birth_date DESC\nLIMIT 1\n\nUNION\n\nSELECT MAX(avg_salary) - MIN(avg_salary) as salary_gap\nFROM salary_avg;",
    "gold_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
    "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
    "difficulty": "challenging"
  },
  {
    "question_id": 95,
    "db_id": "financial",
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "predicted_sql": "WITH AvgSalary AS (\n    SELECT d.client_id, AVG(t.amount) AS avg_salary\n    FROM trans t\n    JOIN disp d ON t.account_id = d.account_id\n    GROUP BY d.client_id\n)\nSELECT d.account_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN AvgSalary a ON d.client_id = a.client_id\nWHERE c.birth_date = (SELECT MIN(birth_date) FROM client)\nORDER BY a.avg_salary DESC\nLIMIT 1;",
    "gold_sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
    "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
    "difficulty": "moderate"
  },
  {
    "question_id": 98,
    "db_id": "financial",
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "predicted_sql": "WITH approved_loans AS (\n    SELECT l.account_id, l.amount, l.date, a.frequency\n    FROM loan l\n    JOIN account a ON l.account_id = a.account_id\n    WHERE l.date BETWEEN '1997-01-01' AND '1997-12-31' \n)\nSELECT a.account_id, MIN(a.amount) AS lowest_approved_amount, a.frequency\nFROM approved_loans a\nWHERE a.amount = (SELECT MIN(amount) FROM approved_loans)\nAND a.frequency = 'POPLATEK TYDNE'\nGROUP BY a.account_id;",
    "gold_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
    "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
    "difficulty": "moderate"
  },
  {
    "question_id": 99,
    "db_id": "financial",
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "predicted_sql": "WITH valid_loans AS (\n    SELECT l.account_id, \n           MAX(l.amount) AS max_approved_amount\n    FROM loan l\n    WHERE l.duration > 12\n    GROUP BY l.account_id\n)\nSELECT a.account_id\nFROM account a\nJOIN valid_loans vl ON a.account_id = vl.account_id\nWHERE a.date BETWEEN '1993-01-01' AND '1993-12-31'\nORDER BY vl.max_approved_amount DESC\nLIMIT 1;",
    "gold_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "evidence": "Loan validity more than 12 months refers to duration > 12",
    "difficulty": "moderate"
  },
  {
    "question_id": 100,
    "db_id": "financial",
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "predicted_sql": "SELECT COUNT(DISTINCT c.client_id) AS female_customers\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district dis ON c.district_id = dis.district_id\nWHERE c.gender = 'F'\nAND c.birth_date < '1950-01-01'\nAND dis.A2 = 'Sokolov';",
    "gold_sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
    "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
    "difficulty": "moderate"
  },
  {
    "question_id": 112,
    "db_id": "financial",
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "predicted_sql": "SELECT d.A2 AS district_opened\nFROM client AS c\nJOIN disp AS dp ON c.client_id = dp.client_id\nJOIN account AS a ON dp.account_id = a.account_id\nJOIN district AS d ON c.district_id = d.district_id\nWHERE c.gender = 'F'\nAND c.birth_date = '1976-01-29';",
    "gold_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "evidence": "Female refers to gender = 'F'; A2 refers to district names",
    "difficulty": "simple"
  },
  {
    "question_id": 115,
    "db_id": "financial",
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "predicted_sql": "WITH south_bohemia_max_inhabitants AS (\n    SELECT d.district_id\n    FROM district d\n    WHERE d.A3 = 'south Bohemia'\n    ORDER BY CAST(d.A4 AS INTEGER) DESC\n    LIMIT 1\n)\n\nSELECT \n    100.0 * COUNT(CASE WHEN c.gender = 'M' THEN 1 END) / NULLIF(COUNT(*), 0) AS percentage_male_clients\nFROM client c\nJOIN disp ON c.client_id = disp.client_id\nJOIN account ON disp.account_id = account.account_id\nWHERE account.district_id IN (SELECT district_id FROM south_bohemia_max_inhabitants);",
    "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
    "difficulty": "challenging"
  },
  {
    "question_id": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "predicted_sql": "WITH initial_balance AS (\n    SELECT t.account_id, t.balance AS initial_balance\n    FROM trans t\n    WHERE t.date = '1993-03-22'\n), final_balance AS (\n    SELECT t.account_id, t.balance AS final_balance\n    FROM trans t\n    WHERE t.date = '1998-12-27'\n)\nSELECT \n    ((final_balance.final_balance - initial_balance.initial_balance) * 100.0 / \n    NULLIF(initial_balance.initial_balance, 0)) AS increase_rate\nFROM initial_balance\nJOIN final_balance ON initial_balance.account_id = final_balance.account_id\nJOIN loan l ON initial_balance.account_id = l.account_id\nWHERE l.date = '1993-07-05';",
    "gold_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
    "difficulty": "challenging"
  },
  {
    "question_id": 117,
    "db_id": "financial",
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "predicted_sql": "WITH fully_paid_loans AS (\n    SELECT SUM(amount) AS total_paid_amount\n    FROM loan\n    WHERE status = 'A'\n)\nSELECT (CAST(total_paid_amount AS REAL) / (SELECT SUM(amount) FROM loan)) * 100.0 AS percentage\nFROM fully_paid_loans;",
    "gold_sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
    "difficulty": "moderate"
  },
  {
    "question_id": 118,
    "db_id": "financial",
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "predicted_sql": "WITH running_accounts AS (\n    SELECT account_id\n    FROM loan\n    WHERE amount < 100000 AND status = 'C'\n)\nSELECT (COUNT(account_id) * 100.0) / (SELECT COUNT(*) FROM loan WHERE amount < 100000) AS percentage\nFROM running_accounts;",
    "gold_sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
    "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
    "difficulty": "moderate"
  },
  {
    "question_id": 125,
    "db_id": "financial",
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "predicted_sql": "WITH unemployment_rates AS (\n    SELECT \n        l.account_id,\n        d.A2 AS district,\n        d.A3 AS state,\n        ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_increment\n    FROM loan l\n    JOIN account a ON l.account_id = a.account_id\n    JOIN district d ON a.district_id = d.district_id\n    WHERE l.status = 'D'\n)\nSELECT \n    district,\n    state,\n    unemployment_increment\nFROM unemployment_rates;",
    "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
    "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
    "difficulty": "challenging"
  },
  {
    "question_id": 128,
    "db_id": "financial",
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "predicted_sql": "WITH female_account_holders_count AS (\n    SELECT district.A2 AS district_name, COUNT(DISTINCT disp.client_id) AS female_account_holders\n    FROM district\n    LEFT JOIN client ON district.district_id = client.district_id\n    LEFT JOIN disp ON client.client_id = disp.client_id\n    WHERE client.gender = 'F'\n    GROUP BY district_name\n    ORDER BY female_account_holders DESC\n    LIMIT 9\n)\n\nSELECT district_name, female_account_holders\nFROM female_account_holders_count;",
    "gold_sql": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
    "evidence": "A2 refers to districts; Female refers to gender = 'F'",
    "difficulty": "moderate"
  },
  {
    "question_id": 136,
    "db_id": "financial",
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "predicted_sql": "WITH approved_loans AS (\n    SELECT l.account_id\n    FROM loan l\n    JOIN account a ON l.account_id = a.account_id\n    WHERE l.amount >= 250000\n    AND l.date BETWEEN '1995-01-01' AND '1997-12-31'\n    AND a.frequency = 'POPLATEK MESICNE'\n    AND l.status = 'A'\n)\nSELECT COUNT(*) AS approved_loans_count\nFROM approved_loans;",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
    "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
    "difficulty": "moderate"
  },
  {
    "question_id": 129,
    "db_id": "financial",
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "predicted_sql": "WITH january_transactions AS (\n    SELECT t.amount, d.A2 AS district_name\n    FROM trans t\n    JOIN account a ON t.account_id = a.account_id\n    JOIN district d ON a.district_id = d.district_id\n    WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%'\n)\nSELECT district_name, SUM(amount) AS total_withdrawals\nFROM january_transactions\nGROUP BY district_name\nORDER BY total_withdrawals DESC\nLIMIT 10;",
    "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
    "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
    "difficulty": "moderate"
  },
  {
    "question_id": 137,
    "db_id": "financial",
    "question": "How many accounts have running contracts in Branch location 1?",
    "predicted_sql": "SELECT COUNT(DISTINCT a.account_id) AS num_accounts\nFROM account a\nJOIN disp d ON a.account_id = d.account_id\nJOIN loan l ON a.account_id = l.account_id\nWHERE (l.status = 'C' OR l.status = 'D')\nAND d.type = 'OWNER'\nAND a.district_id = 1;",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
    "difficulty": "moderate"
  },
  {
    "question_id": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "predicted_sql": "SELECT COUNT(DISTINCT c.client_id) AS male_clients\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON d.account_id = a.account_id\nJOIN district dis ON a.district_id = dis.district_id\nWHERE dis.A15 = (\n    SELECT MAX(A15)\n    FROM district\n    )\nAND c.gender = 'M';",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
    "difficulty": "moderate"
  },
  {
    "question_id": 145,
    "db_id": "financial",
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "predicted_sql": "WITH transaction_average AS (\n    SELECT AVG(amount) AS avg_amount\n    FROM trans\n    WHERE date BETWEEN '1998-01-01' AND '1998-12-31'\n    AND operation = 'VYBER KARTOU'\n)\nSELECT DISTINCT d.client_id\nFROM disp d\nJOIN trans t ON d.account_id = t.account_id\nWHERE t.amount < (SELECT avg_amount FROM transaction_average);",
    "gold_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
    "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
    "difficulty": "moderate"
  },
  {
    "question_id": 149,
    "db_id": "financial",
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "predicted_sql": "SELECT DISTINCT a.type AS account_type\nFROM disp a\nJOIN account b ON a.account_id = b.account_id\nJOIN client c ON a.client_id = c.client_id\nJOIN district d ON b.district_id = d.district_id\nWHERE a.type NOT LIKE 'OWNER'\nAND d.A11 > 8000\nAND d.A11 <= 9000;",
    "gold_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
    "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
    "difficulty": "challenging"
  },
  {
    "question_id": 152,
    "db_id": "financial",
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "predicted_sql": "WITH CrimeStats AS (\n    SELECT d.A3 AS region_name, AVG(d.A15) AS avg_crimes\n    FROM district d\n    JOIN account a ON d.district_id = a.district_id\n    JOIN trans t ON a.account_id = t.account_id\n    WHERE t.date >= '1997-01-01' \n    GROUP BY region_name\n    HAVING COUNT(DISTINCT t.date) >= 365 AND SUM(t.amount) > 4000\n)\n\nSELECT AVG(avg_crimes) AS average_crimes_1995\nFROM CrimeStats;",
    "gold_sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
    "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
    "difficulty": "moderate"
  },
  {
    "question_id": 159,
    "db_id": "financial",
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "predicted_sql": "SELECT t.trans_id, t.account_id, t.date, t.type, t.operation, t.amount, t.balance, t.k_symbol, t.bank, t.account\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE d.client_id = 3356\nAND t.operation = 'VYBER';",
    "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
    "evidence": "operation = 'VYBER' refers to withdrawal in cash",
    "difficulty": "simple"
  },
  {
    "question_id": 168,
    "db_id": "financial",
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "predicted_sql": "WITH AverageSalaryPerDistrict AS (\n    SELECT d.district_id, AVG(d.A11) AS avg_salary\n    FROM district d\n    GROUP BY d.district_id\n    HAVING avg_salary > 10000\n)\nSELECT \n    COUNT(DISTINCT c.client_id) * 100.0 / NULLIF((\n        SELECT COUNT(DISTINCT c.client_id)\n        FROM client c\n        JOIN account a ON c.district_id = a.district_id\n        JOIN AverageSalaryPerDistrict avg ON a.district_id = avg.district_id\n        WHERE c.gender = 'F'\n    ), 0) AS percentage_of_women\nFROM client c\nJOIN account a ON c.district_id = a.district_id\nJOIN AverageSalaryPerDistrict avg ON a.district_id = avg.district_id\nWHERE c.gender = 'F';",
    "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
    "difficulty": "moderate"
  },
  {
    "question_id": 169,
    "db_id": "financial",
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "predicted_sql": "WITH loan_amounts AS (\n    SELECT l.account_id, \n           SUM(CASE WHEN l.date BETWEEN '1996-01-01' AND '1996-12-31' THEN l.amount ELSE 0 END) AS amount_1996,\n           SUM(CASE WHEN l.date BETWEEN '1997-01-01' AND '1997-12-31' THEN l.amount ELSE 0 END) AS amount_1997\n    FROM loan l\n    JOIN disp d ON l.account_id = d.account_id\n    JOIN client c ON d.client_id = c.client_id\n    WHERE c.gender = 'M'\n    GROUP BY l.account_id\n)\nSELECT ((SUM(amount_1997) - SUM(amount_1996)) * 100.0 / NULLIF(SUM(amount_1996), 0)) AS growth_rate\nFROM loan_amounts;",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
    "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
    "difficulty": "challenging"
  },
  {
    "question_id": 173,
    "db_id": "financial",
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "predicted_sql": "WITH statement_requests AS (\n    SELECT COUNT(*) AS statement_count\n    FROM trans\n    WHERE account_id = 3\n    AND type = 'S'\n    AND operation = 'INT_POS'\n),\ntotal_debit_3539 AS (\n    SELECT SUM(amount) AS aim_total\n    FROM trans\n    WHERE account_id = 3\n    AND amount = 3539\n)\nSELECT statement_count, aim_total\nFROM statement_requests, total_debit_3539;",
    "gold_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "evidence": "k_symbol refers to the purpose of payments",
    "difficulty": "challenging"
  },
  {
    "question_id": 186,
    "db_id": "financial",
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "predicted_sql": "WITH weekly_statement_requests AS (\n    SELECT c.gender, COUNT(DISTINCT d.client_id) AS total_clients\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN account a ON d.account_id = a.account_id\n    WHERE a.frequency = 'POPLATEK TYDNE'\n    GROUP BY c.gender\n)\nSELECT \n    (CAST(SUM(CASE WHEN w.gender = 'M' THEN w.total_clients ELSE 0 END) AS REAL) \n    / NULLIF(SUM(w.total_clients), 0)) * 100 AS percentage_male_clients_weekly_requests\nFROM weekly_statement_requests w;",
    "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
    "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
    "difficulty": "moderate"
  },
  {
    "question_id": 189,
    "db_id": "financial",
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "predicted_sql": "WITH oldest_female_clients AS (\n    SELECT \n        c.client_id,\n        a.account_id,\n        c.birth_date,\n        AVG(CAST(t.amount AS REAL)) AS avg_salary\n    FROM client c\n    JOIN disp d ON c.client_id = d.client_id\n    JOIN account a ON d.account_id = a.account_id\n    JOIN trans t ON a.account_id = t.account_id\n    WHERE c.gender = 'F'\n    GROUP BY c.client_id, a.account_id, c.birth_date\n    HAVING c.birth_date = (SELECT MAX(c1.birth_date) FROM client c1 WHERE c1.client_id = c.client_id)\n)\nSELECT account_id\nFROM oldest_female_clients\nWHERE (birth_date, avg_salary) = (SELECT MIN(birth_date), MIN(avg_salary) FROM oldest_female_clients);",
    "gold_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND T2.A11 = (SELECT MIN(T2.A11) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F'))",
    "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
    "difficulty": "moderate"
  },
  {
    "question_id": 192,
    "db_id": "financial",
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "predicted_sql": "WITH running_contracts AS (\n    SELECT l.account_id, l.amount, l.status\n    FROM loan l\n    WHERE l.status IN ('C', 'D')\n)\nSELECT AVG(r.amount)\nFROM running_contracts r\nJOIN trans t ON r.account_id = t.account_id\nWHERE t.k_symbol = 'POPLATEK PO OBRATU';",
    "gold_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
    "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "difficulty": "moderate"
  },
  {
    "question_id": 194,
    "db_id": "financial",
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "predicted_sql": "SELECT c.client_id, c.birth_date\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN card cr ON d.disp_id = cr.disp_id\nWHERE cr.type = 'gold'\nAND d.type = 'OWNER';",
    "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
    "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
    "difficulty": "moderate"
  },
  {
    "question_id": 119,
    "db_id": "financial",
    "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
    "predicted_sql": "WITH statement_issued_after_transaction AS (\n    SELECT t.account_id\n    FROM trans t\n    JOIN account a ON t.account_id = a.account_id\n    WHERE t.date > a.date AND t.date LIKE '1993%'\n)\nSELECT a.account_id, d.A2 AS district_name, d.A3 AS district_region\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.account_id IN statement_issued_after_transaction;",
    "gold_sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
    "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "difficulty": "moderate"
  },
  {
    "question_id": 120,
    "db_id": "financial",
    "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "predicted_sql": "WITH AccountHolders AS (\n    SELECT a.account_id, COUNT(t.trans_id) AS statement_frequency\n    FROM account a\n    JOIN disp d ON a.account_id = d.account_id\n    JOIN client c ON d.client_id = c.client_id\n    JOIN district dis ON c.district_id = dis.district_id\n    JOIN trans t ON a.account_id = t.account_id\n    WHERE dis.A6 = 'east Bohemia' \n    AND a.date BETWEEN '1995-01-01' AND '2000-12-31'\n    GROUP BY a.account_id\n)\nSELECT a.account_id, ah.statement_frequency\nFROM account a\nJOIN AccountHolders ah ON a.account_id = ah.account_id;",
    "gold_sql": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "evidence": "Accounts holder refers to the person who own this account.",
    "difficulty": "moderate"
  }
]