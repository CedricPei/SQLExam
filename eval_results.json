[
  {
    "question_id": 637,
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "predicted_sql": "SELECT DISTINCT T2.`TagName`\n  FROM posts AS T1\n  INNER JOIN tags AS T2\n  ON T1.`Tags` LIKE '%<' || T2.`TagName` || '>%'\n  WHERE T1.`OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    WHERE `DisplayName` = 'Mark Meckes'\n  )\n  AND T1.`CommentCount` = 0",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1389,
    "question": "Which event has the lowest cost?",
    "predicted_sql": "SELECT T1.`event_name`\n  FROM event AS T1\n  INNER JOIN budget AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  INNER JOIN expense AS T3\n  ON T2.`budget_id` = T3.`link_to_budget`\n  WHERE T3.`cost` = (\n    SELECT MIN(`cost`)\n    FROM expense\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1493,
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "predicted_sql": "SELECT \n    (COUNT(DISTINCT CASE WHEN `Consumption` > 528.3 THEN `CustomerID` END) * 100.0 / \n    COUNT(DISTINCT `CustomerID`)) AS Percentage\nFROM yearmonth\nWHERE `Date` LIKE '201202%'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 465,
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "predicted_sql": "SELECT CASE WHEN COUNT(*) > 0 THEN 'Yes' ELSE 'No' END AS has_korean_version\n  FROM foreign_data\n  WHERE `uuid` = (\n    SELECT `uuid`\n    FROM cards\n    WHERE `name` = 'Ancestor''s Chosen'\n  )\n  AND `language` = 'Korean'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1044,
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "predicted_sql": "SELECT `player_name`\n  FROM Player\n  WHERE strftime('%Y', `birthday`) = '1970'\n  AND strftime('%m', `birthday`) = '10'\n  AND `player_name` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1275,
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`CENTROMEA` IN ('-', '+-')\n  AND T2.`SSB` IN ('-', '+-')\n  AND T1.`SEX` = 'M'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1243,
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T2.`SEX` = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM Laboratory AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`Birthday` IS NOT NULL\n  AND (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) > 55\n  AND T1.`PT` >= 14",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1426,
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "predicted_sql": "SELECT T1.`last_name`, T2.`department`, T2.`college`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T2.`major_name` = 'Environmental Engineering'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 459,
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "predicted_sql": "SELECT \n  CASE \n    WHEN (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Serra Angel') > \n         (SELECT `convertedManaCost` FROM cards WHERE `name` = 'Shrine Keeper') \n    THEN 'Serra Angel' \n    ELSE 'Shrine Keeper' \n  END AS more_expensive_card",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1376,
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "predicted_sql": "SELECT T1.`event_name`\n  FROM event AS T1\n  INNER JOIN budget AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  WHERE T1.`status` = 'Closed'\n  AND T2.`amount` > 0\n  ORDER BY (T2.`spent` / T2.`amount`) DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 340,
    "question": "Which are the cards that have incredibly powerful foils.",
    "predicted_sql": "SELECT `name`\n  FROM cards\n  WHERE `cardKingdomFoilId` IS NOT NULL\n  AND `cardKingdomId` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 186,
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "predicted_sql": "SELECT (\n    (SELECT COUNT(DISTINCT T1.`client_id`)\n    FROM client AS T1\n    INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id`\n    INNER JOIN account AS T3 ON T2.`account_id` = T3.`account_id`\n    WHERE T3.`frequency` = 'POPLATEK TYDNE'\n    AND T1.`gender` = 'M')\n    * 100.0 / \n    (SELECT COUNT(DISTINCT T1.`client_id`)\n    FROM client AS T1\n    INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id`\n    INNER JOIN account AS T3 ON T2.`account_id` = T3.`account_id`\n    WHERE T3.`frequency` = 'POPLATEK TYDNE')\n) AS percentage_male_weekly;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 46,
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "predicted_sql": "SELECT T1.`sname`, T1.`enroll12`\n  FROM satscores AS T1\n  INNER JOIN schools AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  WHERE T2.`DOC` = '31'\n  AND T2.`GSoffered` = 'K-12'\n  ORDER BY T1.`enroll12` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 785,
    "question": "Describe the names of neutral alignment superheroes.",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN alignment AS T2\n  ON T1.`alignment_id` = T2.`id`\n  WHERE T2.`alignment` = 'Neutral'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1356,
    "question": "Which department was the President of the club in?",
    "predicted_sql": "SELECT T2.`department`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T1.`position` = 'President'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 544,
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "predicted_sql": "SELECT T2.`DisplayName`\n  FROM posts AS T1\n  INNER JOIN users AS T2\n  ON T1.`LastEditorUserId` = T2.`Id`\n  WHERE T1.`Title` = 'Examples for teaching: Correlation does not mean causation'\n  AND T1.`LastEditorUserId` IS NOT NULL",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 937,
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "predicted_sql": "SELECT `time`\n  FROM results\n  WHERE `raceId` = (\n    SELECT `raceId`\n    FROM races\n    WHERE `year` = 2008 AND `name` = 'Chinese Grand Prix'\n  )\n  AND `position` = 2",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1505,
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`CustomerID`)\n  FROM customers AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Currency` = 'EUR'\n  AND T2.`Consumption` > 1000",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1501,
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "predicted_sql": "SELECT DISTINCT g.`Country`\nFROM yearmonth ym\nJOIN transactions_1k t ON ym.`CustomerID` = t.`CustomerID`\nJOIN gasstations g ON t.`GasStationID` = g.`GasStationID`\nWHERE SUBSTR(ym.`Date`, 1, 4) = '2013' \n  AND SUBSTR(ym.`Date`, 5, 2) = '06'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1361,
    "question": "What is the total cost of the pizzas for all the events?",
    "predicted_sql": "SELECT SUM(`cost`) AS total_pizza_cost\n  FROM expense\n  WHERE `expense_description` = 'Pizza'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1239,
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "predicted_sql": "SELECT T1.`ID`, (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) as age\n  FROM (\n    SELECT `ID`, COUNT(*) as exam_count\n    FROM Laboratory\n    WHERE `HCT` >= 52\n    GROUP BY `ID`\n    HAVING COUNT(*) >= 2\n  ) AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1255,
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "predicted_sql": "SELECT `Diagnosis`\n  FROM (\n    SELECT T2.`Diagnosis`, COUNT(*) AS diagnosis_count\n    FROM Laboratory AS T1\n    INNER JOIN Patient AS T2\n    ON T1.`ID` = T2.`ID`\n    WHERE T1.`IGM` <= 40 OR T1.`IGM` >= 400\n    GROUP BY T2.`Diagnosis`\n    ORDER BY diagnosis_count DESC\n    LIMIT 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 740,
    "question": "How many female superheroes have a strength value of 100?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`id`)\n  FROM superhero AS T1\n  INNER JOIN gender AS T2 ON T1.`gender_id` = T2.`id`\n  INNER JOIN hero_attribute AS T3 ON T1.`id` = T3.`hero_id`\n  INNER JOIN attribute AS T4 ON T3.`attribute_id` = T4.`id`\n  WHERE T2.`gender` = 'Female'\n  AND T4.`attribute_name` = 'Strength'\n  AND T3.`attribute_value` = 100",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 565,
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "predicted_sql": "SELECT CASE WHEN `ClosedDate` IS NULL THEN 'No' ELSE 'Yes' END AS is_well_finished\n  FROM posts\n  WHERE `Id` = (\n    SELECT `PostId`\n    FROM comments\n    WHERE `UserId` = 23853\n    AND `CreationDate` = '2013-07-12 09:08:18.0'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1498,
    "question": "What is the highest monthly consumption in the year 2012?",
    "predicted_sql": "SELECT SUBSTR(`Date`, 6, 2) AS month, MAX(`Consumption`) AS highest_consumption\n  FROM yearmonth\n  WHERE SUBSTR(`Date`, 1, 4) = '2012'\n  GROUP BY month\n  ORDER BY highest_consumption DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 797,
    "question": "Which superheroes have blue eyes with brown hair?",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN colour AS T3 ON T1.`hair_colour_id` = T3.`id`\n  WHERE T2.`colour` = 'Blue'\n  AND T3.`colour` = 'Brown'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1208,
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "predicted_sql": "SELECT DISTINCT T1.`ID`\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND T2.`GPT` >= 60",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 407,
    "question": "Lists all types of cards in German.",
    "predicted_sql": "SELECT DISTINCT T1.`subtypes` AS card_type\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`language` = 'German'\n  AND T1.`subtypes` IS NOT NULL\nUNION\nSELECT DISTINCT T1.`supertypes` AS card_type\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`language` = 'German'\n  AND T1.`supertypes` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 671,
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "predicted_sql": "SELECT T2.`DisplayName`\n  FROM badges AS T1\n  INNER JOIN users AS T2\n  ON T1.`UserId` = T2.`Id`\n  WHERE T1.`Name` = 'Autobiographer'\n  ORDER BY T1.`Date` ASC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 377,
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "predicted_sql": "SELECT COUNT(*)\nFROM cards\nWHERE `originalType` = 'Summon - Angel'\nAND (`subtypes` IS NULL OR `subtypes` != 'Angel')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 129,
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "predicted_sql": "SELECT T3.`A2`, T1.`amount`\n  FROM trans AS T1\n  INNER JOIN account AS T2\n  ON T1.`account_id` = T2.`account_id`\n  INNER JOIN district AS T3\n  ON T2.`district_id` = T3.`district_id`\n  WHERE T1.`type` = 'VYDAJ'\n  AND T1.`date` LIKE '1996-01%'\n  AND T1.`operation` != 'VYBER KARTOU'\n  ORDER BY T1.`amount` DESC\n  LIMIT 10",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 931,
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "predicted_sql": "SELECT MAX(T1.`fastestLapSpeed`)\n  FROM results AS T1\n  INNER JOIN races AS T2\n  ON T1.`raceId` = T2.`raceId`\n  WHERE T2.`name` = 'Spanish Grand Prix' AND T2.`year` = 2009\n  AND T1.`fastestLapSpeed` IS NOT NULL",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1241,
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "predicted_sql": "SELECT \n    (SELECT COUNT(DISTINCT `ID`) FROM Laboratory WHERE `PLT` < 100) AS low_platelet_count,\n    (SELECT COUNT(DISTINCT `ID`) FROM Laboratory WHERE `PLT` > 400) AS high_platelet_count,\n    (SELECT COUNT(DISTINCT `ID`) FROM Laboratory WHERE `PLT` < 100) - \n    (SELECT COUNT(DISTINCT `ID`) FROM Laboratory WHERE `PLT` > 400) AS comparison",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 964,
    "question": "List out the code for drivers who have nationality in American.",
    "predicted_sql": "SELECT `code`\n  FROM drivers\n  WHERE `nationality` = 'American'\n  AND `code` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 537,
    "question": "How many posts does the user csgillespie own?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM posts\n  WHERE `OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    WHERE `DisplayName` = 'csgillespie'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1057,
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "predicted_sql": "SELECT AVG(`home_team_goal`)\n  FROM Match\n  WHERE `country_id` = (\n    SELECT `id`\n    FROM Country\n    WHERE `name` = 'Poland'\n  )\n  AND `season` = '2010/2011'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 228,
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "predicted_sql": "SELECT ROUND((COUNT(CASE WHEN `element` = 'h' THEN 1 END) * 100.0 / COUNT(`atom_id`)), 4) AS percentage\n  FROM atom\n  WHERE `molecule_id` = 'TR206'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 26,
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "predicted_sql": "SELECT \n    s.`School`,\n    s.`Street`,\n    s.`City`,\n    s.`State`,\n    s.`Zip`\nFROM frpm AS f\nINNER JOIN schools AS s ON f.`CDSCode` = s.`CDSCode`\nWHERE \n    f.`FRPM Count (Ages 5-17)` > 800\n    AND s.`City` = 'Monterey'\n    AND (s.`School` LIKE '%High%' OR s.`School` LIKE '%HS%' OR s.`School` LIKE '%Secondary%')\n    AND s.`Street` IS NOT NULL\n    AND s.`City` IS NOT NULL\n    AND s.`State` IS NOT NULL\n    AND s.`Zip` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1476,
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "predicted_sql": "SELECT \n  (SELECT SUM(T2.`Consumption`)\n   FROM customers AS T1\n   INNER JOIN yearmonth AS T2\n   ON T1.`CustomerID` = T2.`CustomerID`\n   WHERE T1.`Currency` = 'CZK'\n   AND T2.`Date` LIKE '2012%') -\n  (SELECT SUM(T4.`Consumption`)\n   FROM customers AS T3\n   INNER JOIN yearmonth AS T4\n   ON T3.`CustomerID` = T4.`CustomerID`\n   WHERE T3.`Currency` = 'EUR'\n   AND T4.`Date` LIKE '2012%') AS consumption_difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 480,
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT `flavorText`\n  FROM foreign_data\n  WHERE `uuid` = (\n    SELECT `uuid`\n    FROM cards\n    WHERE `name` = 'Ancestor''s Chosen'\n  )\n  AND `language` = 'Italian'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 226,
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN `bond_type` = '=' THEN 1 ELSE 0 END) / COUNT(`bond_id`), 5) AS percentage\n  FROM bond\n  WHERE `molecule_id` = 'TR008'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1153,
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "predicted_sql": "SELECT `Date`\n  FROM Laboratory\n  WHERE `ID` = '30609'\n  AND `Date` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 368,
    "question": "What is the percentage of borderless cards?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN `borderColor` = 'borderless' THEN 1 END) * 100.0 / COUNT(`id`)) AS percentage\nFROM cards",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 136,
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "predicted_sql": "SELECT COUNT(*) AS loan_count\n  FROM loan AS T1\n  INNER JOIN account AS T2\n  ON T1.`account_id` = T2.`account_id`\n  WHERE T1.`amount` >= 250000\n  AND T1.`date` BETWEEN '1995-01-01' AND '1997-12-31'\n  AND T2.`frequency` = 'POPLATEK MESICNE'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1144,
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "predicted_sql": "SELECT T1.`finishing`, T1.`curve`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`weight` = (\n    SELECT MAX(`weight`)\n    FROM Player\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 82,
    "question": "What is the grade span offered in the school with the highest longitude?",
    "predicted_sql": "SELECT `GSoffered`\n  FROM schools\n  ORDER BY ABS(`Longitude`) DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1150,
    "question": "What is the percentage of female patient were born after 1930?",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN strftime('%Y', Birthday) > '1930' AND SEX = 'F' THEN ID END) * 100.0 / \n    COUNT(CASE WHEN SEX = 'F' THEN ID END)) AS percentage_female_born_after_1930\nFROM Patient\nWHERE SEX = 'F'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1238,
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "predicted_sql": "SELECT `ID`, `SEX`\n  FROM (\n    SELECT T1.`ID`, T1.`SEX`, T1.`Birthday`\n    FROM Patient AS T1\n    INNER JOIN Laboratory AS T2\n    ON T1.`ID` = T2.`ID`\n    WHERE T1.`Diagnosis` = 'SLE'\n    AND T1.`Birthday` IS NOT NULL\n    AND T2.`HGB` > 10\n    AND T2.`HGB` < 17\n  )\n  ORDER BY `Birthday` ASC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 484,
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "predicted_sql": "SELECT T3.`name`\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  INNER JOIN foreign_data AS T3\n  ON T1.`uuid` = T3.`uuid`\n  WHERE T2.`name` = 'Coldsnap'\n  AND T3.`language` = 'Italian'\n  AND T1.`convertedManaCost` = (\n    SELECT MAX(T4.`convertedManaCost`)\n    FROM cards AS T4\n    INNER JOIN sets AS T5\n    ON T4.`setCode` = T5.`code`\n    WHERE T5.`name` = 'Coldsnap'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1139,
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "predicted_sql": "SELECT `home_team_goal`, `away_team_goal`\n  FROM Match\n  WHERE `date` LIKE '2008-09-24%'\n  AND `league_id` = (\n    SELECT `id`\n    FROM League\n    WHERE `name` = 'Belgium Jupiler League'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 149,
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "predicted_sql": "SELECT DISTINCT T1.`type`\n  FROM disp AS T1\n  INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id`\n  INNER JOIN district AS T3 ON T2.`district_id` = T3.`district_id`\n  WHERE T1.`type` != 'OWNER'\n  AND T3.`A11` > 8000 AND T3.`A11` <= 9000",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 118,
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "predicted_sql": "SELECT (\n    (SELECT COUNT(DISTINCT T1.`account_id`)\n     FROM loan AS T1\n     WHERE T1.`amount` < 100000\n     AND T1.`status` = 'C'\n    ) * 100.0 / \n    (SELECT COUNT(DISTINCT T2.`account_id`)\n     FROM loan AS T2\n     WHERE T2.`amount` < 100000\n    )\n) AS percentage",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 879,
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "predicted_sql": "SELECT T2.`nationality`\nFROM results AS T1\nJOIN drivers AS T2 ON T1.`driverId` = T2.`driverId`\nWHERE T1.`fastestLapSpeed` = (\n    SELECT MAX(`fastestLapSpeed`) \n    FROM results\n    WHERE `fastestLapSpeed` IS NOT NULL\n)",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1368,
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "predicted_sql": "SELECT T2.`major_name`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T1.`phone` = '809-555-3360'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 857,
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "predicted_sql": "SELECT `lat`, `lng`\n  FROM circuits\n  WHERE `circuitId` = (\n    SELECT `circuitId`\n    FROM races\n    WHERE `name` = 'Abu Dhabi Grand Prix'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 268,
    "question": "What are the elements for bond id TR001_10_11?",
    "predicted_sql": "SELECT T1.`element`\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id` OR T1.`atom_id` = T2.`atom_id2`\n  WHERE T2.`bond_id` = 'TR001_10_11'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1146,
    "question": "Please provide the full name of the away team that scored the most goals.",
    "predicted_sql": "SELECT T2.`team_long_name`\n  FROM Match AS T1\n  INNER JOIN Team AS T2\n  ON T1.`away_team_api_id` = T2.`team_api_id`\n  WHERE T1.`away_team_goal` = (\n    SELECT MAX(`away_team_goal`)\n    FROM Match\n  )\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 567,
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM posts\n  WHERE `OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    WHERE `DisplayName` = 'Tiago Pasqualini'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1036,
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "predicted_sql": "SELECT T1.`team_long_name`\n  FROM Team AS T1\n  INNER JOIN Team_Attributes AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE strftime('%Y', T2.`date`) = '2012'\n  AND T2.`buildUpPlayPassing` > (\n    SELECT AVG(`buildUpPlayPassing`)\n    FROM Team_Attributes\n    WHERE strftime('%Y', `date`) = '2012'\n    AND `buildUpPlayPassing` IS NOT NULL\n  )\n  AND T2.`buildUpPlayPassing` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 227,
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "predicted_sql": "SELECT ROUND(COUNT(CASE WHEN label = '+' THEN 1 END) * 100.0 / COUNT(molecule_id), 3) AS percentage\nFROM molecule",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1521,
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "predicted_sql": "SELECT COUNT(T1.`TransactionID`)\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T1.`Date` = '2012-08-26'\n  AND T1.`Time` BETWEEN '08:00:00' AND '09:00:00'\n  AND T2.`Country` = 'CZE'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 422,
    "question": "What is the language of the card with the multiverse number 149934?",
    "predicted_sql": "SELECT `language`\n  FROM foreign_data\n  WHERE `multiverseid` = 149934",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 981,
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "predicted_sql": "SELECT r.`year`, r.`name`, r.`date`, r.`time`\n  FROM races r\n  JOIN qualifying q ON r.`raceId` = q.`raceId`\n  JOIN drivers d ON q.`driverId` = d.`driverId`\n  WHERE d.`driverId` = (\n    SELECT `driverId`\n    FROM drivers\n    WHERE `dob` IS NOT NULL\n    ORDER BY `dob` DESC\n    LIMIT 1\n  )\n  AND r.`date` = (\n    SELECT MIN(r2.`date`)\n    FROM races r2\n    JOIN qualifying q2 ON r2.`raceId` = q2.`raceId`\n    WHERE q2.`driverId` = d.`driverId`\n  )\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 773,
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "predicted_sql": "SELECT T1.`superhero_name`, T2.`publisher_name`\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2\n  ON T1.`publisher_id` = T2.`id`\n  WHERE T1.`hair_colour_id` = T1.`skin_colour_id`\n  AND T1.`hair_colour_id` = T1.`eye_colour_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1401,
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "predicted_sql": "SELECT `cost`\n  FROM expense\n  WHERE `expense_description` = 'Posters'\n  AND `link_to_budget` = (\n    SELECT `budget_id`\n    FROM budget\n    WHERE `link_to_event` = (\n      SELECT `event_id`\n      FROM event\n      WHERE `event_name` = 'September Speaker'\n    )\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 877,
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "predicted_sql": "SELECT T2.`driverId`, T2.`forename`, T2.`surname`\n  FROM drivers AS T2\n  INNER JOIN results AS T1\n  ON T2.`driverId` = T1.`driverId`\n  WHERE T1.`raceId` = 872\n  AND T1.`time` IS NOT NULL\n  AND T2.`dob` IS NOT NULL\n  ORDER BY T2.`dob` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1346,
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "predicted_sql": "SELECT `phone`\n  FROM member\n  WHERE `first_name` = 'Carlo' AND `last_name` = 'Jacobs'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 790,
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "predicted_sql": "SELECT \n  (SELECT `weight_kg` FROM superhero WHERE `full_name` = 'Emil Blonsky') - \n  (SELECT `weight_kg` FROM superhero WHERE `full_name` = 'Charles Chandler') \n  AS weight_difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1088,
    "question": "Please list the names of the players whose volley score and dribbling score are over 70.",
    "predicted_sql": "SELECT DISTINCT T2.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`volleys` > 70\n  AND T1.`dribbling` > 70\n  AND T2.`player_name` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 244,
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "predicted_sql": "SELECT T1.`label`\n  FROM molecule AS T1\n  WHERE T1.`molecule_id` = (\n    SELECT T2.`molecule_id`\n    FROM bond AS T2\n    WHERE T2.`bond_type` = '='\n    GROUP BY T2.`molecule_id`\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 595,
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "predicted_sql": "SELECT COUNT(DISTINCT UserId) \n   FROM postHistory \n   GROUP BY UserId, PostId \n   HAVING COUNT(*) = 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 581,
    "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "predicted_sql": "SELECT u.`DisplayName` AS editor\nFROM posts p\nJOIN users u ON COALESCE(p.`LastEditorUserId`, p.`OwnerUserId`) = u.`Id`\nWHERE p.`Title` = 'Open source tools for visualizing multi-dimensional data';",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 861,
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "predicted_sql": "SELECT d.number\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 903\nAND q.q3 LIKE '1:54%'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 825,
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "predicted_sql": "SELECT T3.`gender`\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN gender AS T3\n  ON T1.`gender_id` = T3.`id`\n  WHERE T2.`power_id` = (\n    SELECT `id`\n    FROM superpower\n    WHERE `power_name` = 'Phoenix Force'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1198,
    "question": "How many female patients were given an APS diagnosis?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Patient\n  WHERE `SEX` = 'F'\n  AND `Diagnosis` = 'APS'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 379,
    "question": "What are the cards belong to duel deck a? List the ID.",
    "predicted_sql": "SELECT `id`\n  FROM cards\n  WHERE `duelDeck` = 'a'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1334,
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`\n  FROM member AS T1\n  INNER JOIN zip_code AS T2\n  ON T1.`zip` = T2.`zip_code`\n  WHERE T2.`state` = 'Illinois' OR T2.`short_state` = 'IL'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1524,
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "predicted_sql": "SELECT T1.`Country`\nFROM gasstations AS T1\nINNER JOIN transactions_1k AS T2\nON T1.`GasStationID` = T2.`GasStationID`\nWHERE T2.`Date` = '2012-08-24'\nAND ROUND(T2.`Price`, 1) = 548.4",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 687,
    "question": "How many comments were added to the post with the highest score?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM comments\n  WHERE `PostId` = (\n    SELECT `Id`\n    FROM posts\n    ORDER BY `Score` DESC\n    LIMIT 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1251,
    "question": "How many patients with an Ig G higher than normal?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`IGG` >= 2000",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 528,
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "predicted_sql": "SELECT DISTINCT T3.`format`\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  INNER JOIN legalities AS T3\n  ON T1.`uuid` = T3.`uuid`\n  WHERE T2.`name` = 'Hour of Devastation'\n  AND T3.`status` = 'Legal'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1080,
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "predicted_sql": "SELECT COUNT(*)\nFROM Player_Attributes\nWHERE `preferred_foot` = 'left' AND `attacking_work_rate` = 'low'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 25,
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "predicted_sql": "SELECT T2.`FundingType`\n  FROM satscores AS T1\n  INNER JOIN schools AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  WHERE T1.`cname` = 'Riverside'\n  AND T1.`AvgScrMath` > 400\n  AND T1.`sname` IS NOT NULL\n  AND T2.`FundingType` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 116,
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "predicted_sql": "SELECT ((T2.`balance` - T1.`balance`) / T1.`balance`) * 100 AS increase_rate\n  FROM (\n    SELECT `balance`\n    FROM trans\n    WHERE `account_id` = (\n      SELECT `account_id`\n      FROM loan\n      WHERE `date` = '1993-07-05'\n      ORDER BY `date` ASC\n      LIMIT 1\n    )\n    AND `date` = '1993-03-22'\n  ) AS T1,\n  (\n    SELECT `balance`\n    FROM trans\n    WHERE `account_id` = (\n      SELECT `account_id`\n      FROM loan\n      WHERE `date` = '1993-07-05'\n      ORDER BY `date` ASC\n      LIMIT 1\n    )\n    AND `date` = '1998-12-27'\n  ) AS T2",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1375,
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "predicted_sql": "SELECT m.first_name, m.last_name\nFROM member m\nJOIN major maj ON m.link_to_major = maj.major_id\nWHERE maj.college = 'College of Agriculture and Applied Sciences'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 28,
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "predicted_sql": "SELECT T2.`School`, T2.`DOCType`\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE T2.`FundingType` = 'Locally funded'\n  AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (\n    SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) AS avg_difference\n    FROM frpm AS T3\n    INNER JOIN schools AS T4\n    ON T3.`CDSCode` = T4.`CDSCode`\n    WHERE T4.`FundingType` = 'Locally funded'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 41,
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "predicted_sql": "SELECT ranked.`sname`\nFROM (\n  SELECT \n    T2.`sname`,\n    T2.`cname`,\n    T2.`AvgScrRead`,\n    RANK() OVER (PARTITION BY T2.`cname` ORDER BY T2.`AvgScrRead` DESC) AS rank\n  FROM satscores AS T2\n  INNER JOIN schools AS T1\n  ON T2.`cds` = T1.`CDSCode`\n  WHERE T1.`Virtual` = 'F'\n) AS ranked\nWHERE ranked.rank <= 5\nAND ranked.`sname` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 972,
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "predicted_sql": "SELECT T1.`driverId`, T1.`code`\n  FROM drivers AS T1\n  INNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE strftime('%Y', T1.`dob`) = '1971'\n  AND T2.`fastestLapTime` = (\n    SELECT MIN(T4.`fastestLapTime`)\n    FROM results AS T4\n    INNER JOIN drivers AS T3\n    ON T4.`driverId` = T3.`driverId`\n    WHERE strftime('%Y', T3.`dob`) = '1971'\n    AND T4.`raceId` = T2.`raceId`\n    AND T4.`fastestLapTime` IS NOT NULL\n  )\n  GROUP BY T1.`driverId`, T1.`code`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 633,
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "predicted_sql": "SELECT `Id`\n  FROM posts\n  WHERE `OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    WHERE `DisplayName` = 'slashnick'\n  )\n  ORDER BY `AnswerCount` DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 862,
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM results\n  WHERE `raceId` = (\n    SELECT `raceId`\n    FROM races\n    WHERE `name` = 'Bahrain Grand Prix'\n    AND `year` = 2007\n  )\n  AND `time` IS NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1156,
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "predicted_sql": "SELECT T1.`ID`, (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) AS age\n  FROM Examination AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`RVVT` = '+'\n  AND T2.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 868,
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "predicted_sql": "SELECT `lat`, `lng`\n  FROM circuits\n  WHERE `circuitId` = (\n    SELECT `circuitId`\n    FROM races\n    WHERE `name` = 'Malaysian Grand Prix'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 850,
    "question": "Please give the name of the race held on the circuits in Germany.",
    "predicted_sql": "SELECT T1.`name`\n  FROM races AS T1\n  INNER JOIN circuits AS T2\n  ON T1.`circuitId` = T2.`circuitId`\n  WHERE T2.`country` = 'Germany'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1231,
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND T1.`Birthday` IS NOT NULL\n  AND strftime('%Y', T1.`Birthday`) BETWEEN '1936' AND '1956'\n  AND T2.`CPK` >= 250",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 707,
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "predicted_sql": "SELECT `Text`\n  FROM comments\n  WHERE `PostId` IN (\n    SELECT `Id`\n    FROM posts\n    WHERE `ViewCount` BETWEEN 100 AND 150\n  )\n  ORDER BY `Score` DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1037,
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T2.preferred_foot = 'left' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.player_api_id = T2.player_api_id\n  WHERE strftime('%Y', T1.birthday) BETWEEN '1987' AND '1992'\n  AND T2.preferred_foot IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 93,
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'M'\n  AND T2.`A3` = 'north Bohemia'\n  AND T2.`A11` > 8000",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 345,
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "predicted_sql": "SELECT T2.`status`\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`types` = 'Artifact'\n  AND T1.`side` IS NULL\n  AND T2.`format` = 'vintage'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 669,
    "question": "When did 'chl' cast its first vote in a post?",
    "predicted_sql": "SELECT MIN(T1.`CreationDate`)\n  FROM votes AS T1\n  INNER JOIN users AS T2\n  ON T1.`UserId` = T2.`Id`\n  WHERE T2.`DisplayName` = 'chl'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1338,
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "predicted_sql": "SELECT `expense_description`, `approved`\n  FROM expense\n  WHERE `link_to_budget` IN (\n    SELECT `budget_id`\n    FROM budget\n    WHERE `link_to_event` = (\n      SELECT `event_id`\n      FROM event\n      WHERE `event_name` = 'October Meeting'\n      AND `event_date` = '2019-10-08T12:00:00'\n    )\n  )\n  AND `expense_date` LIKE '2019-10-%'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 571,
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) FROM posts WHERE `OwnerUserId` = 24) * 1.0 /\n  (SELECT COUNT(*) FROM votes WHERE `UserId` = 24) AS post_vote_ratio",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 220,
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "predicted_sql": "SELECT `element`\n  FROM atom\n  WHERE `molecule_id` = 'TR000'\n  ORDER BY `element` ASC\n  LIMIT 3",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1166,
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "predicted_sql": "SELECT `Diagnosis`\n  FROM Patient\n  WHERE `ID` = (\n    SELECT `ID`\n    FROM Patient\n    WHERE `Birthday` IS NOT NULL\n    ORDER BY `Birthday` DESC\n    LIMIT 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 772,
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "predicted_sql": "SELECT T4.`colour` AS eye_colour, T5.`colour` AS hair_colour, T6.`colour` AS skin_colour\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id`\n  INNER JOIN gender AS T3 ON T1.`gender_id` = T3.`id`\n  INNER JOIN colour AS T4 ON T1.`eye_colour_id` = T4.`id`\n  INNER JOIN colour AS T5 ON T1.`hair_colour_id` = T5.`id`\n  INNER JOIN colour AS T6 ON T1.`skin_colour_id` = T6.`id`\n  WHERE T2.`publisher_name` = 'Dark Horse Comics'\n  AND T3.`gender` = 'Female'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 5,
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.`CDSCode`)\nFROM satscores AS T1\nINNER JOIN schools AS T2\nON T1.`cds` = T2.`CDSCode`\nWHERE T1.`AvgScrMath` > 400\nAND T2.`Virtual` = 'F'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 169,
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "predicted_sql": "SELECT \n  ((SUM(CASE WHEN L.`date` LIKE '1997%' THEN L.`amount` ELSE 0 END) - \n    SUM(CASE WHEN L.`date` LIKE '1996%' THEN L.`amount` ELSE 0 END)) / \n    SUM(CASE WHEN L.`date` LIKE '1996%' THEN L.`amount` ELSE 0 END)) * 100 AS growth_rate\n  FROM loan AS L\n  INNER JOIN account AS A ON L.`account_id` = A.`account_id`\n  INNER JOIN disp AS D ON A.`account_id` = D.`account_id`\n  INNER JOIN client AS C ON D.`client_id` = C.`client_id`\n  WHERE C.`gender` = 'M'\n  AND (L.`date` LIKE '1996%' OR L.`date` LIKE '1997%')",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 218,
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "predicted_sql": "SELECT (COUNT(DISTINCT T1.`molecule_id`) - COUNT(DISTINCT T3.`molecule_id`)) * 100.0 / COUNT(DISTINCT T1.`molecule_id`) AS percentage\n  FROM molecule AS T1\n  LEFT JOIN (\n    SELECT DISTINCT T2.`molecule_id`\n    FROM atom AS T2\n    WHERE T2.`element` = 'f'\n  ) AS T3\n  ON T1.`molecule_id` = T3.`molecule_id`\n  WHERE T1.`label` = '+'\n  AND T3.`molecule_id` IS NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 988,
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "predicted_sql": "SELECT T1.`forename`, T1.`surname`, AVG(T2.`duration`) AS avg_duration\n  FROM drivers AS T1\n  INNER JOIN pitStops AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T1.`nationality` = 'German'\n  AND T1.`dob` BETWEEN '1980-01-01' AND '1985-12-31'\n  GROUP BY T1.`driverId`, T1.`forename`, T1.`surname`\n  ORDER BY avg_duration ASC\n  LIMIT 3",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 79,
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "predicted_sql": "SELECT `County`, COUNT(*) AS school_count\n  FROM schools\n  WHERE `County` IN ('San Diego', 'Santa Barbara')\n  AND `Virtual` = 'F'\n  GROUP BY `County`\n  ORDER BY school_count DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1040,
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "predicted_sql": "SELECT T1.`player_name`\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`height` > 180\n  GROUP BY T1.`player_api_id`, T1.`player_name`\n  ORDER BY AVG(T2.`heading_accuracy`) DESC\n  LIMIT 10",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 194,
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "predicted_sql": "SELECT T1.`client_id`, \n       (strftime('%Y', '2023-01-01') - strftime('%Y', T1.`birth_date`)) - \n       (strftime('%m-%d', '2023-01-01') < strftime('%m-%d', T1.`birth_date`)) AS age\n  FROM client AS T1\n  INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id`\n  INNER JOIN card AS T3 ON T2.`disp_id` = T3.`disp_id`\n  WHERE T3.`type` = 'gold'\n  AND T2.`type` = 'OWNER'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 349,
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "predicted_sql": "SELECT T1.`name`, T1.`artist`, T1.`isPromo`\n  FROM cards AS T1\n  INNER JOIN (\n    SELECT `uuid`\n    FROM rulings\n    GROUP BY `uuid`\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  ) AS T2\n  ON T1.`uuid` = T2.`uuid`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 794,
    "question": "Which hero was the fastest?",
    "predicted_sql": "SELECT S.`superhero_name`\n  FROM superhero AS S\n  INNER JOIN hero_attribute AS HA\n  ON S.`id` = HA.`hero_id`\n  INNER JOIN attribute AS A\n  ON HA.`attribute_id` = A.`id`\n  WHERE A.`attribute_name` = 'Speed'\n  AND HA.`attribute_value` = (\n    SELECT MAX(HA2.`attribute_value`)\n    FROM hero_attribute AS HA2\n    INNER JOIN attribute AS A2\n    ON HA2.`attribute_id` = A2.`id`\n    WHERE A2.`attribute_name` = 'Speed'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 87,
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "predicted_sql": "SELECT COUNT(*) \nFROM schools AS T1\nJOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds`\nWHERE T1.`County` = 'San Bernardino'\nAND T2.`cname` = 'San Bernardino'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 346,
    "question": "List all the card id and artist with unknown power which are legal for commander play format.",
    "predicted_sql": "SELECT T1.`id`, T1.`artist`\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE (T1.`power` IS NULL OR T1.`power` = '*')\n  AND T2.`format` = 'commander'\n  AND T2.`status` = 'Legal'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1124,
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "predicted_sql": "SELECT DISTINCT T3.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Match AS T2\n  ON T1.`player_api_id` IN (\n    T2.`home_player_1`, T2.`home_player_2`, T2.`home_player_3`, T2.`home_player_4`, T2.`home_player_5`,\n    T2.`home_player_6`, T2.`home_player_7`, T2.`home_player_8`, T2.`home_player_9`, T2.`home_player_10`, T2.`home_player_11`,\n    T2.`away_player_1`, T2.`away_player_2`, T2.`away_player_3`, T2.`away_player_4`, T2.`away_player_5`,\n    T2.`away_player_6`, T2.`away_player_7`, T2.`away_player_8`, T2.`away_player_9`, T2.`away_player_10`, T2.`away_player_11`\n  )\n  INNER JOIN Player AS T3\n  ON T3.`player_api_id` IN (\n    T2.`home_player_1`, T2.`home_player_2`, T2.`home_player_3`, T2.`home_player_4`, T2.`home_player_5`,\n    T2.`home_player_6`, T2.`home_player_7`, T2.`home_player_8`, T2.`home_player_9`, T2.`home_player_10`, T2.`home_player_11`,\n    T2.`away_player_1`, T2.`away_player_2`, T2.`away_player_3`, T2.`away_player_4`, T2.`away_player_5`,\n    T2.`away_player_6`, T2.`away_player_7`, T2.`away_player_8`, T2.`away_player_9`, T2.`away_player_10`, T2.`away_player_11`\n  )\n  INNER JOIN Player_Attributes AS T4\n  ON T3.`player_api_id` = T4.`player_api_id`\n  WHERE T1.`attacking_work_rate` = 'high'\n  AND T4.`attacking_work_rate` = 'high'\n  AND T3.`player_api_id` != T1.`player_api_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1531,
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "predicted_sql": "SELECT \n  T1.`CustomerID`,\n  SUM(T2.`Price`) / SUM(T2.`Amount`) AS avg_price_per_item,\n  T1.`Currency`\nFROM customers AS T1\nINNER JOIN transactions_1k AS T2 ON T1.`CustomerID` = T2.`CustomerID`\nWHERE T1.`CustomerID` = (\n  SELECT `CustomerID`\n  FROM transactions_1k\n  GROUP BY `CustomerID`\n  ORDER BY SUM(`Price`) DESC\n  LIMIT 1\n)\nGROUP BY T1.`CustomerID`, T1.`Currency`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1252,
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2 ON T1.`ID` = T2.`ID`\n  INNER JOIN Examination AS T3 ON T1.`ID` = T3.`ID`\n  WHERE T2.`IGG` > 900 AND T2.`IGG` < 2000\n  AND T3.`Symptoms` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 128,
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "predicted_sql": "SELECT T4.`A2` AS district_name, COUNT(DISTINCT T1.`client_id`) AS female_account_holders\n  FROM client AS T1\n  INNER JOIN disp AS T2 ON T1.`client_id` = T2.`client_id`\n  INNER JOIN account AS T3 ON T2.`account_id` = T3.`account_id`\n  INNER JOIN district AS T4 ON T3.`district_id` = T4.`district_id`\n  WHERE T1.`gender` = 'F' AND T2.`type` = 'OWNER'\n  GROUP BY T3.`district_id`\n  ORDER BY female_account_holders DESC\n  LIMIT 9",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1113,
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "predicted_sql": "SELECT `defenceAggressionClass`\n  FROM Team_Attributes\n  WHERE `team_api_id` = (\n    SELECT `team_api_id`\n    FROM Team\n    WHERE `team_long_name` = 'Hannover 96'\n  )\n  AND `date` LIKE '2015-09-10%'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 902,
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "predicted_sql": "SELECT T3.`name`\n  FROM results AS T1\n  INNER JOIN drivers AS T2\n  ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3\n  ON T1.`raceId` = T3.`raceId`\n  WHERE T2.`forename` = 'Alex' AND T2.`surname` = 'Yoong'\n  AND T1.`position` < 20",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1039,
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "predicted_sql": "SELECT AVG(`long_shots`) AS average_long_shots\n  FROM Player_Attributes\n  WHERE `player_api_id` = (\n    SELECT `player_api_id`\n    FROM Player\n    WHERE `player_name` = 'Ahmed Samir Farag'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1323,
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "predicted_sql": "SELECT T1.`event_name`\n  FROM event AS T1\n  INNER JOIN attendance AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  WHERE T1.`type` != 'Fundraiser'\n  GROUP BY T1.`event_id`\n  HAVING COUNT(T2.`link_to_member`) > 20",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1232,
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "predicted_sql": "SELECT T2.`ID`, T2.`SEX`, (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) AS age\n  FROM Patient AS T2\n  INNER JOIN (\n    SELECT DISTINCT T1.`ID`\n    FROM Laboratory AS T1\n    WHERE T1.`GLU` >= 180\n    AND T1.`T-CHO` < 250\n  ) AS filtered_patients\n  ON T2.`ID` = filtered_patients.`ID`\n  WHERE T2.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 801,
    "question": "Find the ratio between male superheroes and female superheroes.",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.`gender_id` = T2.`id` WHERE T2.`gender` = 'Male') * 1.0 /\n  (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.`gender_id` = T2.`id` WHERE T2.`gender` = 'Female') AS male_to_female_ratio",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 408,
    "question": "How many unknown power cards contain info about the triggered ability",
    "predicted_sql": "SELECT COUNT(*)\n  FROM cards\n  WHERE (`power` IS NULL OR `power` = '*')\n  AND `text` LIKE '%triggered ability%'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 466,
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM cards AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`setCode` = T2.`setCode`\n  WHERE T2.`translation` = 'Hauptset Zehnte Edition'\n  AND T1.`artist` = 'Adam Rex'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 440,
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "predicted_sql": "SELECT fd.language \nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nWHERE c.name = 'A Pedra Fellwar'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 682,
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "predicted_sql": "SELECT p.`Id`, p.`OwnerDisplayName`\nFROM posts AS p\nWHERE p.`FavoriteCount` = (\n    SELECT MAX(`FavoriteCount`)\n    FROM posts\n    WHERE `OwnerDisplayName` IS NOT NULL\n)\nAND p.`OwnerDisplayName` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 737,
    "question": "What is Copycat's race?",
    "predicted_sql": "SELECT T2.`race`\n  FROM superhero AS T1\n  INNER JOIN race AS T2\n  ON T1.`race_id` = T2.`id`\n  WHERE T1.`superhero_name` = 'Copycat'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 897,
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "predicted_sql": "SELECT T1.`forename`, T1.`surname`, T1.`nationality`, MAX(T2.`points`) AS max_points\n  FROM drivers AS T1\n  INNER JOIN driverStandings AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T1.`driverId` = (\n    SELECT T3.`driverId`\n    FROM drivers AS T3\n    INNER JOIN driverStandings AS T4\n    ON T3.`driverId` = T4.`driverId`\n    GROUP BY T3.`driverId`\n    ORDER BY SUM(T4.`wins`) DESC\n    LIMIT 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 640,
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "predicted_sql": "SELECT (\n  (SELECT COALESCE(SUM(T1.`ViewCount`), 0)\n   FROM posts AS T1\n   INNER JOIN users AS T2\n   ON T1.`OwnerUserId` = T2.`Id`\n   WHERE T2.`DisplayName` = 'Mornington'\n   AND T1.`ViewCount` IS NOT NULL)\n  -\n  (SELECT COALESCE(SUM(T3.`ViewCount`), 0)\n   FROM posts AS T3\n   INNER JOIN users AS T4\n   ON T3.`OwnerUserId` = T4.`Id`\n   WHERE T4.`DisplayName` = 'Amos'\n   AND T3.`ViewCount` IS NOT NULL)\n) AS view_count_difference",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 978,
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "predicted_sql": "SELECT COUNT(*) AS race_count, T2.`location`, T2.`lat`, T2.`lng`\nFROM races AS T1\nINNER JOIN circuits AS T2\nON T1.`circuitId` = T2.`circuitId`\nWHERE T2.`country` = 'Austria'\nGROUP BY T2.`location`, T2.`lat`, T2.`lng`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1432,
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T1.`amount` = 50 THEN 1 END) * 100.0 / COUNT(T2.`member_id`)) AS percentage\n  FROM member AS T2\n  LEFT JOIN income AS T1\n  ON T1.`link_to_member` = T2.`member_id`\n  WHERE T2.`t_shirt_size` = 'Medium'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 17,
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "predicted_sql": "SELECT T1.`sname`, T3.`CharterNum`, T1.`AvgScrWrite`\nFROM satscores AS T1\nINNER JOIN schools AS T3\nON T1.`cds` = T3.`CDSCode`\nWHERE T1.`AvgScrWrite` > 499\nAND T3.`CharterNum` IS NOT NULL\nORDER BY T1.`AvgScrWrite` DESC",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 159,
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "predicted_sql": "SELECT T1.`amount`, T1.`date`, T1.`operation`\n  FROM trans AS T1\n  INNER JOIN disp AS T2\n  ON T1.`account_id` = T2.`account_id`\n  WHERE T2.`client_id` = 3356\n  AND T1.`operation` = 'VYBER'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1281,
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "predicted_sql": "SELECT T2.`Birthday`\n  FROM Patient AS T2\n  INNER JOIN (\n    SELECT DISTINCT T1.`ID`\n    FROM Laboratory AS T1\n    WHERE T1.`GOT` >= 60\n  ) AS abnormal_patients\n  ON T2.`ID` = abnormal_patients.`ID`\n  WHERE T2.`Birthday` IS NOT NULL\n  ORDER BY T2.`Birthday` DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 99,
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "predicted_sql": "SELECT T1.`account_id`\n  FROM account AS T1\n  INNER JOIN loan AS T2\n  ON T1.`account_id` = T2.`account_id`\n  WHERE T2.`duration` > 12\n  AND T1.`date` LIKE '1993%'\n  AND T2.`amount` = (\n    SELECT MAX(T4.`amount`)\n    FROM account AS T3\n    INNER JOIN loan AS T4\n    ON T3.`account_id` = T4.`account_id`\n    WHERE T4.`duration` > 12\n    AND T3.`date` LIKE '1993%'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 775,
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T3.colour = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM superhero AS T1\nINNER JOIN gender AS T2 ON T1.gender_id = T2.id\nLEFT JOIN colour AS T3 ON T1.skin_colour_id = T3.id\nWHERE T2.gender = 'Female'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1035,
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "predicted_sql": "SELECT T1.`team_fifa_api_id`\n  FROM Team_Attributes AS T1\n  WHERE T1.`buildUpPlaySpeed` > 50 AND T1.`buildUpPlaySpeed` < 60",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 533,
    "question": "How many users last accessed the website after 2014/9/1?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM users\n  WHERE `LastAccessDate` > '2014-09-01'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 945,
    "question": "How many circuits are there in Adelaide, Australia?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM circuits\n  WHERE `location` = 'Adelaide' AND `country` = 'Australia'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 532,
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "predicted_sql": "SELECT `DisplayName`\n  FROM users\n  WHERE strftime('%Y', `CreationDate`) = '2011'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 901,
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "predicted_sql": "SELECT T1.`name` AS race_name, T2.`name` AS circuit_name, T2.`location`\n  FROM races AS T1\n  INNER JOIN circuits AS T2\n  ON T1.`circuitId` = T2.`circuitId`\n  WHERE strftime('%m', T1.`date`) = '09' AND strftime('%Y', T1.`date`) = '2005'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 248,
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "predicted_sql": "SELECT T1.`element`, T2.`element`\n  FROM atom AS T1\n  INNER JOIN connected AS T3\n  ON T1.`atom_id` = T3.`atom_id`\n  INNER JOIN atom AS T2\n  ON T3.`atom_id2` = T2.`atom_id`\n  WHERE T3.`bond_id` IN (\n    SELECT `bond_id`\n    FROM bond\n    WHERE `molecule_id` = 'TR041'\n    AND `bond_type` = '#'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 477,
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "predicted_sql": "SELECT DISTINCT T1.`artist`\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  WHERE T2.`name` = 'Coldsnap'\n  AND T1.`artist` IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1422,
    "question": "State the category of events were held at MU 215.",
    "predicted_sql": "SELECT DISTINCT `type`\n  FROM event\n  WHERE `location` = 'MU 215'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 744,
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "predicted_sql": "SELECT (\n  (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'Marvel Comics') -\n  (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'DC Comics')\n) AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 732,
    "question": "Which publisher published the slowest superhero?",
    "predicted_sql": "SELECT P.`publisher_name`\nFROM publisher AS P\nINNER JOIN superhero AS S ON P.`id` = S.`publisher_id`\nINNER JOIN hero_attribute AS HA ON S.`id` = HA.`hero_id`\nINNER JOIN attribute AS A ON HA.`attribute_id` = A.`id`\nWHERE A.`attribute_name` = 'Speed'\nAND HA.`attribute_value` = (\n    SELECT MIN(HA2.`attribute_value`)\n    FROM hero_attribute AS HA2\n    INNER JOIN attribute AS A2 ON HA2.`attribute_id` = A2.`id`\n    WHERE A2.`attribute_name` = 'Speed'\n)",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1359,
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "predicted_sql": "SELECT \n  (SELECT SUM(T1.`amount`)\n   FROM budget AS T1\n   INNER JOIN event AS T2\n   ON T1.`link_to_event` = T2.`event_id`\n   WHERE T1.`category` = 'Advertisement'\n   AND T2.`event_name` = 'Yearly Kickoff') /\n  (SELECT SUM(T3.`amount`)\n   FROM budget AS T3\n   INNER JOIN event AS T4\n   ON T3.`link_to_event` = T4.`event_id`\n   WHERE T3.`category` = 'Advertisement'\n   AND T4.`event_name` = 'October Meeting') AS times_more",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1525,
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "predicted_sql": "SELECT \n  (COUNT(DISTINCT CASE WHEN T2.`Currency` = 'EUR' THEN T1.`CustomerID` END) * 100.0 / \n  COUNT(DISTINCT T1.`CustomerID`)) AS EUR_Customer_Percentage\nFROM transactions_1k AS T1\nLEFT JOIN customers AS T2\nON T1.`CustomerID` = T2.`CustomerID`\nWHERE T1.`Date` = '2012-08-25'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1387,
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`\n  FROM member AS T1\n  INNER JOIN expense AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T2.`link_to_budget` = (\n    SELECT `budget_id`\n    FROM budget\n    WHERE `link_to_event` = (\n      SELECT `event_id`\n      FROM event\n      WHERE `event_name` = 'Yearly Kickoff'\n    )\n  )\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1149,
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "predicted_sql": "SELECT \n    ((COUNT(CASE WHEN `Admission` = '+' THEN 1 END) * 100.0 / \n     COUNT(CASE WHEN `Admission` = '-' THEN 1 END)) - 100) AS deviation_percentage\nFROM Patient\nWHERE `SEX` = 'M'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 253,
    "question": "List the elements of all the triple bonds.",
    "predicted_sql": "SELECT DISTINCT T1.`element`\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id` OR T1.`atom_id` = T2.`atom_id2`\n  WHERE T2.`bond_id` IN (\n    SELECT `bond_id`\n    FROM bond\n    WHERE `bond_type` = '#'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 48,
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*)\n   FROM schools\n   WHERE `StatusType` = 'Merged'\n   AND `DOCType` = 'Unified School District'\n   AND `County` = 'Orange') * 1.0 /\n  (SELECT COUNT(*)\n   FROM schools\n   WHERE `StatusType` = 'Merged'\n   AND `DOCType` = 'Elementary School District'\n   AND `County` = 'Orange') AS ratio",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 137,
    "question": "How many accounts have running contracts in Branch location 1?",
    "predicted_sql": "SELECT COUNT(DISTINCT L.`account_id`)\n  FROM loan AS L\n  INNER JOIN account AS A\n  ON L.`account_id` = A.`account_id`\n  WHERE A.`district_id` = 1\n  AND L.`status` IN ('C', 'D')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 555,
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "predicted_sql": "SELECT AVG(`Score`)\n  FROM posts\n  WHERE `OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    WHERE `DisplayName` = 'csgillespie'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1322,
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "predicted_sql": "SELECT COUNT(*) AS meeting_count\n  FROM (\n    SELECT T1.`event_id`, COUNT(T2.`link_to_member`) AS attendance_count\n    FROM event AS T1\n    INNER JOIN attendance AS T2\n    ON T1.`event_id` = T2.`link_to_event`\n    WHERE T1.`type` = 'Meeting'\n    GROUP BY T1.`event_id`\n    HAVING attendance_count > 10\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 884,
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "predicted_sql": "SELECT `name`\nFROM races\nWHERE strftime('%Y', `date`) = (SELECT strftime('%Y', MIN(`date`)) FROM races)\n  AND strftime('%m', `date`) = (SELECT strftime('%m', MIN(`date`)) FROM races)",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 880,
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "predicted_sql": "SELECT \n  ((T1.`fastestLapSpeed` - T2.`fastestLapSpeed`) * 100.0 / T1.`fastestLapSpeed`) AS percentage_faster\nFROM \n  (SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 853 AND `driverId` = (\n    SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta'\n  )) AS T1,\n  (SELECT `fastestLapSpeed` FROM results WHERE `raceId` = 854 AND `driverId` = (\n    SELECT `driverId` FROM drivers WHERE `forename` = 'Paul' AND `surname` = 'di Resta'\n  )) AS T2",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 208,
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "predicted_sql": "SELECT `label`\n  FROM (\n    SELECT T3.`label`, COUNT(*) AS count\n    FROM atom AS T1\n    INNER JOIN molecule AS T3\n    ON T1.`molecule_id` = T3.`molecule_id`\n    WHERE T1.`element` = 'h'\n    GROUP BY T3.`label`\n  )\n  ORDER BY count DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 717,
    "question": "Please list all the superpowers of 3-D Man.",
    "predicted_sql": "SELECT T3.`power_name`\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN superpower AS T3\n  ON T2.`power_id` = T3.`id`\n  WHERE T1.`superhero_name` = '3-D Man'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 765,
    "question": "How many heroes have stealth power?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`hero_id`)\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  WHERE T2.`power_name` = 'stealth'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1025,
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "predicted_sql": "SELECT L.`name`\n  FROM `League` AS L\n  INNER JOIN (\n    SELECT M.`league_id`\n    FROM `Match` AS M\n    WHERE M.`season` = '2015/2016'\n    GROUP BY M.`league_id`\n    ORDER BY SUM(M.`home_team_goal` + M.`away_team_goal`) DESC\n    LIMIT 1\n  ) AS T\n  ON L.`id` = T.`league_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 791,
    "question": "Calculate the average height for all superhero.",
    "predicted_sql": "SELECT AVG(`height_cm`) AS average_height\n  FROM superhero",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1480,
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "predicted_sql": "SELECT SUBSTR(T1.`Date`, 5, 2) AS peak_month\n  FROM yearmonth AS T1\n  INNER JOIN customers AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T2.`Segment` = 'SME'\n  AND SUBSTR(T1.`Date`, 1, 4) = '2013'\n  AND T1.`Consumption` = (\n    SELECT MAX(`Consumption`)\n    FROM yearmonth AS T3\n    INNER JOIN customers AS T4\n    ON T3.`CustomerID` = T4.`CustomerID`\n    WHERE T4.`Segment` = 'SME'\n    AND SUBSTR(T3.`Date`, 1, 4) = '2013'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1390,
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "predicted_sql": "SELECT \n  (SUM(CASE WHEN EV.`event_name` = 'Yearly Kickoff' THEN E.`cost` ELSE 0 END) * 100.0 / SUM(E.`cost`)) AS percentage\n  FROM expense AS E\n  INNER JOIN budget AS B ON E.`link_to_budget` = B.`budget_id`\n  INNER JOIN event AS EV ON B.`link_to_event` = EV.`event_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 282,
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) FROM atom WHERE `molecule_id` = 'TR006' AND `element` = 'h') * 1.0 / \n  (SELECT COUNT(*) FROM atom WHERE `molecule_id` = 'TR006') AS hydrogen_ratio,\n  T2.`label`\nFROM molecule AS T2\nWHERE T2.`molecule_id` = 'TR006'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 207,
    "question": "What elements are in a double type bond?",
    "predicted_sql": "SELECT DISTINCT T1.`element`\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id` OR T1.`atom_id` = T2.`atom_id2`\n  WHERE T2.`bond_id` IN (\n    SELECT `bond_id`\n    FROM bond\n    WHERE `bond_type` = '='\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 639,
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "predicted_sql": "SELECT \n    (CAST(COUNT(CASE WHEN t.`TagName` = 'r' THEN 1 END) AS REAL) / \n    COUNT(*)) * 100 AS percentage\nFROM posts p\nLEFT JOIN tags t ON p.`Tags` LIKE CONCAT('%<', t.`TagName`, '>%')\nWHERE p.`OwnerDisplayName` = 'Community'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 45,
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "predicted_sql": "SELECT T2.`sname`, T2.`AvgScrWrite`\n  FROM schools AS T1\n  INNER JOIN satscores AS T2\n  ON T1.`CDSCode` = T2.`cds`\n  WHERE (T1.`AdmFName1` = 'Ricci' AND T1.`AdmLName1` = 'Ulrich') \n     OR (T1.`AdmFName2` = 'Ricci' AND T1.`AdmLName2` = 'Ulrich')\n  AND T2.`AvgScrWrite` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 192,
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "predicted_sql": "SELECT AVG(T2.`amount`)\n  FROM account AS T1\n  INNER JOIN loan AS T2\n  ON T1.`account_id` = T2.`account_id`\n  WHERE T1.`frequency` = 'POPLATEK PO OBRATU'\n  AND T2.`status` IN ('C', 'D')",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 260,
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`atom_id`)\n  FROM atom AS T1\n  INNER JOIN bond AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`bond_type` = '#'\n  AND (T1.`element` = 'p' OR T1.`element` = 'br')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 951,
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "predicted_sql": "SELECT COUNT(*) AS japanese_constructors_with_zero_points_in_2_races\n  FROM (\n    SELECT T1.`constructorId`\n      FROM constructors AS T1\n      INNER JOIN constructorResults AS T2\n      ON T1.`constructorId` = T2.`constructorId`\n      WHERE T1.`nationality` = 'Japanese'\n      AND T2.`points` = 0\n      GROUP BY T1.`constructorId`\n      HAVING COUNT(T2.`raceId`) = 2\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1152,
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(`ID`) FROM Patient WHERE `Diagnosis` = 'SLE' AND `Admission` = '+') * 1.0 /\n  (SELECT COUNT(`ID`) FROM Patient WHERE `Diagnosis` = 'SLE' AND `Admission` = '-') AS ratio",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 50,
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "predicted_sql": "SELECT T2.`MailStreet`, T1.`sname`\n  FROM satscores AS T1\n  INNER JOIN schools AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  WHERE T1.`AvgScrMath` IS NOT NULL\n  ORDER BY T1.`AvgScrMath` DESC\n  LIMIT 1 OFFSET 6",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1472,
    "question": "In 2012, who had the least consumption in LAM?",
    "predicted_sql": "SELECT *\n  FROM customers\n  WHERE `CustomerID` = (\n    SELECT T1.`CustomerID`\n    FROM customers AS T1\n    INNER JOIN yearmonth AS T2\n    ON T1.`CustomerID` = T2.`CustomerID`\n    WHERE T1.`Segment` = 'LAM'\n    AND T2.`Date` BETWEEN '201201' AND '201212'\n    ORDER BY T2.`Consumption` ASC\n    LIMIT 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 255,
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "predicted_sql": "SELECT ROUND((COUNT(CASE WHEN T2.`label` = '+' THEN 1 END) * 100.0 / COUNT(*)), 5) AS proportion\n  FROM bond AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`bond_type` = '-'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 738,
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN hero_attribute AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN attribute AS T3\n  ON T2.`attribute_id` = T3.`id`\n  WHERE T3.`attribute_name` = 'Durability'\n  AND T2.`attribute_value` < 50",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1175,
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "predicted_sql": "-- First find the patient(s) with the highest HGB value\nWITH MaxHGBPatient AS (\n    SELECT L.`ID`, L.`HGB`, L.`Date`\n    FROM Laboratory L\n    WHERE L.`HGB` = (SELECT MAX(`HGB`) FROM Laboratory WHERE `HGB` IS NOT NULL)\n    AND L.`ID` IS NOT NULL\n)\n\n-- Then get their age and diagnosis at the time of examination\nSELECT \n    (strftime('%Y', E.`Examination Date`) - strftime('%Y', P.`Birthday`)) AS age,\n    E.`Diagnosis` AS doctor_diagnosis\nFROM MaxHGBPatient M\nJOIN Patient P ON M.`ID` = P.`ID`\nJOIN Examination E ON M.`ID` = E.`ID`\nWHERE P.`Birthday` IS NOT NULL\nAND E.`Examination Date` IS NOT NULL\n-- Find the examination that occurred closest to the lab test date\nAND E.`Examination Date` = (\n    SELECT E2.`Examination Date`\n    FROM Examination E2\n    WHERE E2.`ID` = M.`ID`\n    AND E2.`Examination Date` IS NOT NULL\n    ORDER BY ABS(julianday(E2.`Examination Date`) - julianday(M.`Date`))\n    LIMIT 1\n)",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 743,
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN T2.`alignment` = 'Bad' THEN 1 END) * 100.0 / COUNT(*)) AS percentage,\n    COUNT(CASE WHEN T2.`alignment` = 'Bad' AND T3.`publisher_name` = 'Marvel Comics' THEN 1 END) AS marvel_bad_count\nFROM superhero AS T1\nINNER JOIN alignment AS T2 ON T1.`alignment_id` = T2.`id`\nLEFT JOIN publisher AS T3 ON T1.`publisher_id` = T3.`id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1380,
    "question": "What is the total amount of money spent for food?",
    "predicted_sql": "SELECT SUM(`spent`)\n  FROM budget\n  WHERE `category` = 'Food'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1092,
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "predicted_sql": "SELECT L.`name`\n  FROM `League` AS L\n  INNER JOIN (\n    SELECT M.`league_id`\n    FROM `Match` AS M\n    WHERE M.`season` = '2008/2009'\n    GROUP BY M.`league_id`\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  ) AS T\n  ON L.`id` = T.`league_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 587,
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "predicted_sql": "SELECT T1.`Title`, T3.`Text`, T1.`ViewCount`, \n       (SELECT AVG(T4.`ViewCount`)\n        FROM posts AS T4\n        INNER JOIN tags AS T5\n        ON T4.`Tags` LIKE '%<humor>%'\n        WHERE T5.`TagName` = 'humor') AS AvgViewCount\n  FROM posts AS T1\n  INNER JOIN tags AS T2\n  ON T1.`Tags` LIKE '%<humor>%'\n  INNER JOIN comments AS T3\n  ON T1.`Id` = T3.`PostId`\n  WHERE T2.`TagName` = 'humor'\n  AND T3.`Text` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 197,
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "predicted_sql": "SELECT AVG(oxygen_count) AS avg_oxygen_count\n  FROM (\n    SELECT T1.`molecule_id`, COUNT(*) AS oxygen_count\n    FROM atom AS T1\n    INNER JOIN bond AS T2\n    ON T1.`molecule_id` = T2.`molecule_id`\n    WHERE T2.`bond_type` = '-' AND T1.`element` = 'o'\n    GROUP BY T1.`molecule_id`\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 98,
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "predicted_sql": "SELECT COUNT(*) FROM loan WHERE date LIKE '1997-%';",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 341,
    "question": "What are the borderless cards available without powerful foils?",
    "predicted_sql": "SELECT T1.`id`\n  FROM cards AS T1\n  WHERE T1.`borderColor` = 'borderless'\n  AND (T1.`cardKingdomFoilId` IS NULL OR T1.`cardKingdomId` IS NULL)",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 872,
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "predicted_sql": "SELECT `code`\n  FROM drivers\n  WHERE `driverId` = (\n    SELECT `driverId`\n    FROM qualifying\n    WHERE `raceId` = 45\n    AND `q3` LIKE '1:33%'\n  )\n  AND `code` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1155,
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "predicted_sql": "SELECT T1.`ID`, T1.`SEX`, T1.`Birthday`\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`LDH` > 500\n  AND T1.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 779,
    "question": "How many powers does Amazo hero have?",
    "predicted_sql": "SELECT COUNT(*) AS power_count\n  FROM hero_power\n  WHERE `hero_id` = (\n    SELECT `id`\n    FROM superhero\n    WHERE `superhero_name` = 'Amazo'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 766,
    "question": "What is the hero's full name with the highest attribute in strength?",
    "predicted_sql": "SELECT T1.`full_name`\n  FROM superhero AS T1\n  INNER JOIN hero_attribute AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN attribute AS T3\n  ON T2.`attribute_id` = T3.`id`\n  WHERE T3.`attribute_name` = 'Strength'\n  ORDER BY T2.`attribute_value` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1471,
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) FROM customers WHERE `Currency` = 'EUR') * 1.0 /\n  (SELECT COUNT(*) FROM customers WHERE `Currency` = 'CZK') AS ratio",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 557,
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "predicted_sql": "SELECT (\n  (SELECT COUNT(*) \n   FROM posts AS T1\n   INNER JOIN users AS T2\n   ON T1.`OwnerUserId` = T2.`Id`\n   WHERE T1.`Score` > 5\n   AND T2.`Age` > 65) * 100.0 / \n  (SELECT COUNT(*) \n   FROM posts\n   WHERE `Score` > 5)\n) AS percentage",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1122,
    "question": "State the name of the most strongest player.",
    "predicted_sql": "SELECT T2.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`overall_rating` = (\n    SELECT MAX(`overall_rating`)\n    FROM Player_Attributes\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 728,
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "predicted_sql": "SELECT T2.`colour`, COUNT(T1.`id`) AS count\n  FROM superhero AS T1\n  INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN publisher AS T3 ON T1.`publisher_id` = T3.`id`\n  WHERE T3.`publisher_name` = 'Marvel Comics'\n  GROUP BY T2.`colour`\n  ORDER BY count DESC",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1484,
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "predicted_sql": "SELECT (\n  (SELECT COUNT(*) FROM gasstations WHERE `Country` = 'CZE' AND `Segment` = 'Discount') - \n  (SELECT COUNT(*) FROM gasstations WHERE `Country` = 'SVK' AND `Segment` = 'Discount')\n) AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 665,
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "predicted_sql": "SELECT COUNT(T1.`Id`) / 12.0\n  FROM postLinks AS T1\n  INNER JOIN posts AS T2\n  ON T1.`PostId` = T2.`Id`\n  WHERE strftime('%Y', T1.`CreationDate`) = '2010'\n  AND T2.`AnswerCount` <= 2",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 358,
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "predicted_sql": "SELECT `borderColor`\n  FROM cards\n  WHERE `name` = 'Ancestor''s Chosen'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1103,
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "predicted_sql": "SELECT T1.`overall_rating`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`player_name` = 'Aaron Mooy'\n  AND T1.`date` LIKE '2016-02-04%'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1265,
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Admission` = '+'\n  AND T2.`RNP` IN ('-', '+-', '0', 'negative')",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1533,
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "predicted_sql": "SELECT T1.`CustomerID`, T2.`Consumption`\n  FROM transactions_1k AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`ProductID` = 5\n  AND (T1.`Price` / T1.`Amount`) > 29.00\n  AND T2.`Date` = '201208'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1267,
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Examination AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Admission` IN ('-', '+-')\n  AND T2.`Thrombosis` = 0",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 427,
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "predicted_sql": "SELECT DISTINCT T2.`language`\n  FROM sets AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`code` = T2.`setCode`\n  WHERE T1.`mcmName` = 'Archenemy'\n  AND T1.`code` = 'ARC'\n  AND T2.`language` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 232,
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "predicted_sql": "SELECT DISTINCT T1.`molecule_id`\n  FROM molecule AS T1\n  INNER JOIN bond AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`label` = '-'\n  AND T2.`bond_type` = '-'\n  ORDER BY T1.`molecule_id` ASC\n  LIMIT 3",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1352,
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T2.`major_name` = 'Business'\n  AND T1.`t_shirt_size` = 'Medium'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 724,
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2 ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN colour AS T3 ON T1.`hair_colour_id` = T3.`id`\n  WHERE T2.`colour` = 'Blue'\n  AND T3.`colour` = 'Blond'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 243,
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "predicted_sql": "SELECT B.`bond_id`, B.`bond_type`\n  FROM bond AS B\n  WHERE B.`bond_id` IN (\n    SELECT DISTINCT C.`bond_id`\n    FROM connected AS C\n    INNER JOIN atom AS A1 ON C.`atom_id` = A1.`atom_id`\n    INNER JOIN atom AS A2 ON C.`atom_id2` = A2.`atom_id`\n    WHERE (A1.`element` = 'p' AND A2.`element` = 'n')\n       OR (A1.`element` = 'n' AND A2.`element` = 'p')\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 769,
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id`\n  INNER JOIN hero_attribute AS T3 ON T1.`id` = T3.`hero_id`\n  INNER JOIN attribute AS T4 ON T3.`attribute_id` = T4.`id`\n  WHERE T2.`publisher_name` = 'Dark Horse Comics'\n  AND T4.`attribute_name` = 'Durability'\n  ORDER BY T3.`attribute_value` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1403,
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed'\n  AND b.remaining < 0\nGROUP BY e.event_id, e.event_name\nORDER BY MIN(b.remaining) ASC\nLIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1404,
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "predicted_sql": "SELECT `expense_description`, SUM(`cost`) AS total_value\n  FROM expense\n  WHERE `approved` = 'true'\n  AND `link_to_budget` IN (\n    SELECT `budget_id`\n    FROM budget\n    WHERE `link_to_event` = (\n      SELECT `event_id`\n      FROM event\n      WHERE `event_name` = 'October Meeting'\n    )\n  )\n  GROUP BY `expense_description`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1003,
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "predicted_sql": "SELECT COUNT(*) as accident_count\n  FROM results AS T1\n  INNER JOIN races AS T2 ON T1.`raceId` = T2.`raceId`\n  WHERE T2.`name` = 'Canadian Grand Prix'\n  AND T1.`statusId` = 3\n  AND T1.`driverId` = (\n    SELECT T3.`driverId`\n    FROM results AS T3\n    INNER JOIN races AS T4 ON T3.`raceId` = T4.`raceId`\n    WHERE T4.`name` = 'Canadian Grand Prix'\n    AND T3.`statusId` = 3\n    GROUP BY T3.`driverId`\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 788,
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "predicted_sql": "SELECT \n    (CAST(female_marvel_count AS REAL) / total_marvel_count) * 100 AS percentage\nFROM \n    (SELECT COUNT(*) AS female_marvel_count\n     FROM superhero AS T1\n     INNER JOIN gender AS T2 ON T1.gender_id = T2.id\n     INNER JOIN publisher AS T3 ON T1.publisher_id = T3.id\n     WHERE T2.gender = 'Female' AND T3.publisher_name = 'Marvel Comics'),\n    (SELECT COUNT(*) AS total_marvel_count\n     FROM superhero AS T1\n     INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id\n     WHERE T2.publisher_name = 'Marvel Comics')",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1157,
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "predicted_sql": "SELECT T1.`ID`, T2.`SEX`, T2.`Diagnosis`\n  FROM Examination AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Thrombosis` = 2",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 405,
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM set_translations AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  WHERE T2.`block` = 'Commander'\n  AND T1.`language` = 'Portuguese (Brazil)'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 685,
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "predicted_sql": "SELECT p.`ViewCount`, u.`DisplayName`\nFROM posts AS p\nJOIN users AS u ON p.`LastEditorUserId` = u.`Id`\nWHERE p.`Text` = 'Computer Game Datasets'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 710,
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM comments\n  WHERE `Score` = 0\n  AND `PostId` IN (\n    SELECT `Id`\n    FROM posts\n    WHERE `CommentCount` = 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 416,
    "question": "What percentage of cards without power are in French?",
    "predicted_sql": "SELECT (\n  (SELECT COUNT(*) \n   FROM cards AS T1\n   INNER JOIN foreign_data AS T2\n   ON T1.`uuid` = T2.`uuid`\n   WHERE (T1.`power` IS NULL OR T1.`power` = '*')\n   AND T2.`language` = 'French') * 100.0 /\n  (SELECT COUNT(*) \n   FROM cards\n   WHERE `power` IS NULL OR `power` = '*')\n) AS percentage",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 568,
    "question": "Provide the display name of the user who made the vote No.6347.",
    "predicted_sql": "SELECT `DisplayName`\n  FROM users\n  WHERE `Id` = (\n    SELECT `UserId`\n    FROM votes\n    WHERE `Id` = 6347\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1209,
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "predicted_sql": "SELECT T2.`Diagnosis`, T2.`Birthday`\n  FROM Patient AS T2\n  INNER JOIN (\n    SELECT DISTINCT T1.`ID`\n    FROM Laboratory AS T1\n    WHERE T1.`GPT` > 60\n  ) AS T3\n  ON T2.`ID` = T3.`ID`\n  WHERE T2.`Birthday` IS NOT NULL\n  ORDER BY T2.`Birthday` ASC",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1107,
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "predicted_sql": "SELECT T1.`date`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`player_name` = 'Kevin Constant'\n  AND T1.`crossing` = (\n    SELECT MAX(T3.`crossing`)\n    FROM Player_Attributes AS T3\n    INNER JOIN Player AS T4\n    ON T3.`player_api_id` = T4.`player_api_id`\n    WHERE T4.`player_name` = 'Kevin Constant'\n  )\n  ORDER BY T1.`date` ASC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 366,
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "predicted_sql": "SELECT `format`, `status`\n  FROM legalities\n  WHERE `id` = (\n    SELECT `id`\n    FROM cards\n    WHERE `name` = 'Benalish Knight'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 572,
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "predicted_sql": "SELECT `ViewCount`\n  FROM posts\n  WHERE `Title` = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 955,
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "predicted_sql": "SELECT R.`year`, \n       AVG(\n           CAST(SUBSTR(RS.`time`, 1, 2) AS INTEGER) * 3600 + \n           CAST(SUBSTR(RS.`time`, 4, 2) AS INTEGER) * 60 + \n           CAST(SUBSTR(RS.`time`, 7, 2) AS INTEGER) + \n           CAST(SUBSTR(RS.`time`, 10, 3) AS REAL) / 1000\n       ) AS avg_time_seconds\nFROM races AS R\nJOIN results AS RS ON R.`raceId` = RS.`raceId`\nWHERE R.`year` < 1975\nAND RS.`positionText` = '1'\nAND RS.`time` IS NOT NULL\nGROUP BY R.`year`\nORDER BY R.`year`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 751,
    "question": "List down at least five superpowers of male superheroes.",
    "predicted_sql": "SELECT DISTINCT T3.`power_name`\n  FROM superhero AS T1\n  INNER JOIN gender AS T2\n  ON T1.`gender_id` = T2.`id`\n  INNER JOIN hero_power AS T4\n  ON T1.`id` = T4.`hero_id`\n  INNER JOIN superpower AS T3\n  ON T4.`power_id` = T3.`id`\n  WHERE T2.`gender` = 'Male'\n  LIMIT 5",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 971,
    "question": "Please state the reference name of the oldest German driver.",
    "predicted_sql": "SELECT `driverRef`\n  FROM drivers\n  WHERE `nationality` = 'German'\n  AND `dob` = (\n    SELECT MIN(`dob`)\n    FROM drivers\n    WHERE `nationality` = 'German'\n    AND `dob` IS NOT NULL\n  )\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1398,
    "question": "Name the event with the highest amount spent on advertisement.",
    "predicted_sql": "SELECT T1.`event_name`\n  FROM event AS T1\n  INNER JOIN budget AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  WHERE T2.`category` = 'Advertisement'\n  AND T2.`spent` = (\n    SELECT MAX(`spent`)\n    FROM budget\n    WHERE `category` = 'Advertisement'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 397,
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "predicted_sql": "SELECT `manaCost`\n  FROM cards\n  WHERE `layout` = 'normal'\n  AND `frameVersion` = '2003'\n  AND `borderColor` = 'black'\n  AND `availability` = 'mtgo,paper'\n  AND `manaCost` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1247,
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND T2.`WBC` > 3.5\n  AND T2.`WBC` < 9.0\n  AND (T2.`FG` <= 150 OR T2.`FG` >= 450)",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 705,
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "predicted_sql": "SELECT `Reputation`, `UpVotes`\n  FROM users\n  WHERE `Id` = (\n    SELECT `UserId`\n    FROM comments\n    WHERE `Text` = 'fine, you win :)'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1141,
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "predicted_sql": "SELECT `buildUpPlaySpeedClass`\n  FROM Team_Attributes\n  WHERE `team_api_id` = (\n    SELECT `team_api_id`\n    FROM Team\n    WHERE `team_long_name` = 'KSV Cercle Brugge'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1486,
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) FROM customers WHERE `Segment` = 'SME' AND `Currency` = 'CZK') - \n  (SELECT COUNT(*) FROM customers WHERE `Segment` = 'SME' AND `Currency` = 'EUR') AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 469,
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "predicted_sql": "SELECT CASE WHEN T2.`mtgoCode` IS NOT NULL THEN 'Yes' ELSE 'No' END AS appeared_on_mtgo\n  FROM cards AS T1\n  INNER JOIN sets AS T2\n  ON T1.`setCode` = T2.`code`\n  WHERE T1.`name` = 'Angel of Mercy'\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 356,
    "question": "How many cards have infinite power?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM cards\n  WHERE `power` = '*'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 72,
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "predicted_sql": "SELECT T1.`Enrollment (Ages 5-17)`\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE T2.`EdOpsCode` = 'SSS'\n  AND T2.`City` = 'Fremont'\n  AND T1.`Academic Year` = '2014-2015'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 198,
    "question": "On average how many carcinogenic molecules are single bonded?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) \n   FROM bond AS T1\n   INNER JOIN molecule AS T2\n   ON T1.`molecule_id` = T2.`molecule_id`\n   WHERE T1.`bond_type` = '-'\n   AND T2.`label` = '+') * 1.0 /\n  (SELECT COUNT(DISTINCT T1.`molecule_id`)\n   FROM molecule AS T1\n   WHERE T1.`label` = '+') AS average_single_bonds",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1312,
    "question": "What's Angela Sanders's major?",
    "predicted_sql": "SELECT T2.`major_name`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T1.`first_name` = 'Angela' AND T1.`last_name` = 'Sanders'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 761,
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN gender AS T2\n  ON T1.`gender_id` = T2.`id`\n  WHERE T2.`gender` = 'Male'\n  AND T1.`weight_kg` > (\n    SELECT AVG(`weight_kg`) * 0.79\n    FROM superhero\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1331,
    "question": "What is the amount of the funds that the Vice President received?",
    "predicted_sql": "SELECT SUM(T1.`amount`)\n  FROM income AS T1\n  INNER JOIN member AS T2\n  ON T1.`link_to_member` = T2.`member_id`\n  WHERE T2.`position` = 'Vice President'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 468,
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "predicted_sql": "SELECT `translation`\n  FROM set_translations\n  WHERE `setCode` = (\n    SELECT `code`\n    FROM sets\n    WHERE `name` = 'Eighth Edition'\n  )\n  AND `language` = 'Chinese Simplified'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1134,
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "predicted_sql": "SELECT (T1.`jumping` - T2.`jumping`) AS difference\n  FROM (SELECT `jumping` FROM Player_Attributes WHERE `id` = 6) AS T1,\n       (SELECT `jumping` FROM Player_Attributes WHERE `id` = 23) AS T2",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 753,
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE T1.`height_cm` BETWEEN 170 AND 190\n  AND T2.`colour` = 'No Colour'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1257,
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Patient AS T2\n  INNER JOIN (\n    SELECT DISTINCT T1.`ID`\n    FROM Laboratory AS T1\n    WHERE T1.`CRE` >= 1.5\n  ) AS T3\n  ON T2.`ID` = T3.`ID`\n  WHERE T2.`Birthday` IS NOT NULL\n  AND (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) < 70",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 12,
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "predicted_sql": "SELECT MAX(f.`Free Meal Count (Ages 5-17)` * 1.0 / f.`Enrollment (Ages 5-17)`) AS highest_eligible_free_rate\nFROM frpm AS f\nINNER JOIN satscores AS s ON f.`CDSCode` = s.`cds`\nWHERE (s.`NumGE1500` * 1.0 / s.`NumTstTakr`) > 0.3",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 824,
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "predicted_sql": "SELECT T3.`superhero_name`\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  INNER JOIN superhero AS T3\n  ON T1.`hero_id` = T3.`id`\n  WHERE T2.`power_name` = 'Wind Control'\n  ORDER BY T3.`superhero_name` ASC",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1235,
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "predicted_sql": "SELECT T2.`ID`, T2.`Diagnosis`, (strftime('%Y', 'now') - strftime('%Y', T2.`Birthday`)) AS age\n  FROM Patient AS T2\n  INNER JOIN Laboratory AS T1\n  ON T2.`ID` = T1.`ID`\n  WHERE T1.`RBC` < 3.5\n  AND T2.`Birthday` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 36,
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "predicted_sql": "SELECT \n    T1.`AdmFName1` || ' ' || T1.`AdmLName1` AS admin_full_name\nFROM schools AS T1\nINNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds`\nWHERE T2.`cds` = (\n    SELECT `cds`\n    FROM satscores\n    WHERE `NumGE1500` IS NOT NULL\n    ORDER BY `NumGE1500` DESC\n    LIMIT 1\n)\nAND T1.`AdmFName1` IS NOT NULL \nAND T1.`AdmLName1` IS NOT NULL\n\nUNION\n\nSELECT \n    T1.`AdmFName2` || ' ' || T1.`AdmLName2` AS admin_full_name\nFROM schools AS T1\nINNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds`\nWHERE T2.`cds` = (\n    SELECT `cds`\n    FROM satscores\n    WHERE `NumGE1500` IS NOT NULL\n    ORDER BY `NumGE1500` DESC\n    LIMIT 1\n)\nAND T1.`AdmFName2` IS NOT NULL \nAND T1.`AdmLName2` IS NOT NULL\n\nUNION\n\nSELECT \n    T1.`AdmFName3` || ' ' || T1.`AdmLName3` AS admin_full_name\nFROM schools AS T1\nINNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds`\nWHERE T2.`cds` = (\n    SELECT `cds`\n    FROM satscores\n    WHERE `NumGE1500` IS NOT NULL\n    ORDER BY `NumGE1500` DESC\n    LIMIT 1\n)\nAND T1.`AdmFName3` IS NOT NULL \nAND T1.`AdmLName3` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 152,
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "predicted_sql": "SELECT AVG(T1.`A15`) AS avg_crimes\n  FROM district AS T1\n  INNER JOIN account AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`A15` > 4000\n  AND T2.`date` >= '1997-01-01'\n  AND T1.`A3` IN (\n    SELECT DISTINCT T4.`A3`\n    FROM account AS T3\n    INNER JOIN district AS T4\n    ON T3.`district_id` = T4.`district_id`\n    WHERE T3.`date` >= '1997-01-01'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 137,
    "question": "How many accounts have running contracts in Branch location 1?",
    "predicted_sql": "SELECT COUNT(DISTINCT L.`account_id`)\n  FROM loan AS L\n  INNER JOIN account AS A\n  ON L.`account_id` = A.`account_id`\n  WHERE A.`district_id` = 1\n  AND L.`status` IN ('C', 'D')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 240,
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "predicted_sql": "SELECT `element`\n  FROM atom\n  WHERE `molecule_id` = 'TR004'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 959,
    "question": "What is the fastest lap number of the champion in 2009?",
    "predicted_sql": "SELECT T1.`fastestLap`\n  FROM results AS T1\n  INNER JOIN races AS T2\n  ON T1.`raceId` = T2.`raceId`\n  INNER JOIN driverStandings AS T3\n  ON T1.`driverId` = T3.`driverId` AND T1.`raceId` = T3.`raceId`\n  WHERE T2.`year` = 2009\n  ORDER BY T3.`points` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1078,
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "predicted_sql": "SELECT `player_name`\n  FROM Player\n  WHERE `player_name` IN ('Aaron Lennon', 'Abdelaziz Barrada')\n  ORDER BY `birthday` ASC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1079,
    "question": "Which player is the tallest?",
    "predicted_sql": "SELECT `player_name`\n  FROM Player\n  WHERE `height` = (\n    SELECT MAX(`height`)\n    FROM Player\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 115,
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN `gender` = 'M' THEN 1 END) * 100.0 / COUNT(*)) AS male_percentage\n  FROM client\n  WHERE `district_id` = (\n    SELECT `district_id`\n    FROM district\n    WHERE `A3` = 'south Bohemia'\n    ORDER BY CAST(`A4` AS INTEGER) DESC\n    LIMIT 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1399,
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "predicted_sql": "SELECT COUNT(*) > 0 AS did_attend\n  FROM attendance\n  WHERE `link_to_event` = (\n    SELECT `event_id`\n    FROM event\n    WHERE `event_name` = \"Women's Soccer\"\n  )\n  AND `link_to_member` = (\n    SELECT `member_id`\n    FROM member\n    WHERE `first_name` = 'Maya' AND `last_name` = 'Mclean'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 895,
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "predicted_sql": "SELECT AVG(`milliseconds`)\n  FROM lapTimes\n  WHERE `driverId` = (\n    SELECT `driverId`\n    FROM drivers\n    WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton'\n  )\n  AND `raceId` = (\n    SELECT `raceId`\n    FROM races\n    WHERE `year` = 2009 AND `name` = 'Malaysian Grand Prix'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 723,
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`id`)\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN hero_power AS T3\n  ON T1.`id` = T3.`hero_id`\n  INNER JOIN superpower AS T4\n  ON T3.`power_id` = T4.`id`\n  WHERE T2.`colour` = 'Blue'\n  AND T4.`power_name` = 'Agility'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 904,
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "predicted_sql": "SELECT T1.`name`, T1.`year`\n  FROM races AS T1\n  INNER JOIN results AS T2\n  ON T1.`raceId` = T2.`raceId`\n  WHERE T2.`driverId` = (\n    SELECT `driverId`\n    FROM drivers\n    WHERE `forename` = 'Michael' AND `surname` = 'Schumacher'\n  )\n  AND T2.`milliseconds` = (\n    SELECT MIN(`milliseconds`)\n    FROM results\n    WHERE `driverId` = (\n      SELECT `driverId`\n      FROM drivers\n      WHERE `forename` = 'Michael' AND `surname` = 'Schumacher'\n    )\n    AND `milliseconds` IS NOT NULL\n  )\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1225,
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "predicted_sql": "SELECT T1.`SEX`, GROUP_CONCAT(DISTINCT T1.`ID`) AS patient_list\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`T-BIL` >= 2.0\n  GROUP BY T1.`SEX`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1362,
    "question": "How many cities are there in Orange County, Virginia?",
    "predicted_sql": "SELECT COUNT(DISTINCT `city`)\n  FROM zip_code\n  WHERE `county` = 'Orange County'\n  AND `state` = 'Virginia'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 201,
    "question": "What is the percentage of carbon in double-bond molecules?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T1.`element` = 'c' THEN 1 END) * 100.0 / COUNT(T1.`atom_id`)) AS percentage\n  FROM atom AS T1\n  INNER JOIN bond AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`bond_type` = '='",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 994,
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "predicted_sql": "SELECT T3.`name`, T3.`nationality`, MAX(T4.total_points) AS score\n  FROM constructors AS T3\n  INNER JOIN (\n    SELECT T1.`constructorId`, SUM(T1.`points`) AS total_points\n    FROM constructorResults AS T1\n    INNER JOIN races AS T2\n    ON T1.`raceId` = T2.`raceId`\n    WHERE T2.`name` = 'Monaco Grand Prix'\n    AND T2.`year` BETWEEN 1980 AND 2010\n    GROUP BY T1.`constructorId`\n  ) AS T4\n  ON T3.`constructorId` = T4.`constructorId`\n  GROUP BY T3.`name`, T3.`nationality`\n  ORDER BY score DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1133,
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Player\n  WHERE `player_name` LIKE 'Aaron%'\n  AND `birthday` > '1990-12-31 00:00:00'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 39,
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "predicted_sql": "SELECT AVG(T2.`NumTstTakr`)\n  FROM schools AS T1\n  INNER JOIN satscores AS T2\n  ON T1.`CDSCode` = T2.`cds`\n  WHERE T1.`City` = 'Fresno'\n  AND T1.`OpenDate` BETWEEN '1980-01-01' AND '1980-12-31'\n  AND T2.`NumTstTakr` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1171,
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Examination AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE (strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) < 18\n  AND T1.`Birthday` IS NOT NULL\n  AND strftime('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993'\n  AND T2.`Examination Date` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 415,
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "predicted_sql": "SELECT (\n  SELECT COUNT(DISTINCT T1.`id`)\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`format` = 'commander'\n  AND T2.`status` = 'Legal'\n  AND T1.`hasContentWarning` = 0\n) * 100.0 / (\n  SELECT COUNT(DISTINCT T1.`id`)\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`format` = 'commander'\n  AND T2.`status` = 'Legal'\n) AS percentage",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1227,
    "question": "What is the average age of the male patient with high cholesterol?",
    "predicted_sql": "SELECT AVG(strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) AS average_age\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`SEX` = 'M'\n  AND T2.`T-CHO` >= 250\n  AND T1.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 231,
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "predicted_sql": "SELECT \n  (SELECT `bond_type`\n   FROM bond\n   WHERE `molecule_id` = 'TR010'\n   GROUP BY `bond_type`\n   ORDER BY COUNT(*) DESC\n   LIMIT 1) AS majority_bond_type,\n  (SELECT `label` = '+' \n   FROM molecule \n   WHERE `molecule_id` = 'TR010') AS is_carcinogenic",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 950,
    "question": "Please list the constructor names with 0 points at race 291.",
    "predicted_sql": "SELECT T2.`name`\n  FROM constructorResults AS T1\n  INNER JOIN constructors AS T2\n  ON T1.`constructorId` = T2.`constructorId`\n  WHERE T1.`raceId` = 291\n  AND T1.`points` = 0",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 219,
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "predicted_sql": "SELECT (COUNT(CASE WHEN T1.`bond_type` = '#' THEN 1 END) * 100.0 / COUNT(T1.`bond_id`)) AS percentage\n  FROM bond AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`label` = '+'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 100,
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`account_id`)\n  FROM account AS T1\n  INNER JOIN disp AS T2\n  ON T1.`account_id` = T2.`account_id`\n  INNER JOIN client AS T3\n  ON T2.`client_id` = T3.`client_id`\n  WHERE T3.`gender` = 'F'\n  AND T3.`birth_date` < '1950-01-01'\n  AND T3.`district_id` = (\n    SELECT `district_id`\n    FROM district\n    WHERE `A2` = 'Sokolov'\n  )\n  AND T2.`type` = 'OWNER'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 37,
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "predicted_sql": "SELECT s.`Street`, s.`City`, s.`Zip`, s.`State`\nFROM schools s\nJOIN (\n    SELECT sat.`cds` AS CDSCode\n    FROM satscores sat\n    WHERE sat.`NumTstTakr` > 0\n    GROUP BY sat.`cds`\n    ORDER BY CAST(sat.`NumGE1500` AS REAL) / sat.`NumTstTakr` ASC\n    LIMIT 1\n) AS lowest_rate\nON s.`CDSCode` = lowest_rate.`CDSCode`\nWHERE s.`Street` IS NOT NULL\nAND s.`City` IS NOT NULL\nAND s.`Zip` IS NOT NULL\nAND s.`State` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1130,
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "predicted_sql": "SELECT T2.`team_short_name`\n  FROM Team_Attributes AS T1\n  INNER JOIN Team AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE T1.`chanceCreationPassingClass` = 'Safe'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 563,
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "predicted_sql": "SELECT `FavoriteCount`\n  FROM posts\n  WHERE `Id` = (\n    SELECT `PostId`\n    FROM comments\n    WHERE `UserId` = 3025\n    AND `CreationDate` = '2014-04-23 20:29:39.0'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1526,
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "predicted_sql": "SELECT COUNT(*) FROM transactions_1k WHERE Amount = 634.8 AND Date = '2012-08-24';",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 125,
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "predicted_sql": "SELECT T3.`A2` AS district_name, \n       ((T3.`A13` - T3.`A12`) / T3.`A12`) * 100 AS unemployment_increment_rate\n  FROM loan AS T1\n  INNER JOIN account AS T2 ON T1.`account_id` = T2.`account_id`\n  INNER JOIN district AS T3 ON T2.`district_id` = T3.`district_id`\n  WHERE T1.`status` = 'D'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1220,
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "predicted_sql": "SELECT T2.`ID`, T2.`SEX`, T2.`Birthday`\n  FROM Laboratory AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`UN` = 29\n  AND T2.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 383,
    "question": "How many of the banned cards are white border?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T2.`status` = 'Banned'\n  AND T1.`borderColor` = 'white'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1164,
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Patient\n  WHERE `ID` IN (\n    SELECT `ID`\n    FROM Examination\n    WHERE `Thrombosis` = 1\n    AND `Examination Date` LIKE '1997%'\n  )\n  AND `SEX` = 'F'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 92,
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "predicted_sql": "SELECT COUNT(DISTINCT T3.`district_id`)\n  FROM client AS T1\n  INNER JOIN district AS T3\n  ON T1.`district_id` = T3.`district_id`\n  WHERE T1.`gender` = 'F'\n  AND T3.`A11` > 6000\n  AND T3.`A11` < 10000",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 948,
    "question": "What are the maximum points of British constructors?",
    "predicted_sql": "SELECT MAX(T1.`points`)\n  FROM constructorStandings AS T1\n  INNER JOIN constructors AS T2\n  ON T1.`constructorId` = T2.`constructorId`\n  WHERE T2.`nationality` = 'British'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1529,
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "predicted_sql": "SELECT SUM(`Consumption`) AS january_spent\n  FROM yearmonth\n  WHERE `CustomerID` = '38508'\n  AND `Date` = '201201'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 281,
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "predicted_sql": "SELECT T1.`element`, COUNT(*) as tally\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`label` = '+'\n  AND substr(T1.`atom_id`, 7, 1) = '4'\n  GROUP BY T1.`element`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 27,
    "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any.",
    "predicted_sql": "SELECT T2.`sname`, T2.`AvgScrWrite`, T1.`Phone`\nFROM schools AS T1\nINNER JOIN satscores AS T2 ON T1.`CDSCode` = T2.`cds`\nWHERE (T1.`OpenDate` > '1991-12-31' OR T1.`ClosedDate` < '2000-01-01')\nAND T2.`sname` IS NOT NULL\nAND T2.`AvgScrWrite` IS NOT NULL\nORDER BY T2.`AvgScrWrite` DESC",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1001,
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "predicted_sql": "SELECT T1.`forename`, T1.`surname`\n  FROM drivers AS T1\n  WHERE T1.`driverId` = (\n    SELECT `driverId`\n    FROM qualifying\n    WHERE `raceId` = (\n      SELECT `raceId`\n      FROM races\n      WHERE `year` = 2008\n      AND `circuitId` = (\n        SELECT `circuitId`\n        FROM circuits\n        WHERE `name` = 'Marina Bay Street Circuit'\n      )\n    )\n    AND `q3` IS NOT NULL\n    ORDER BY `q3` ASC\n    LIMIT 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 462,
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "predicted_sql": "SELECT T2.`translation`\n  FROM sets AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`code` = T2.`setCode`\n  WHERE T2.`language` = 'Italian'\n  AND T1.`code` = (\n    SELECT `setCode`\n    FROM cards\n    WHERE `name` = 'Ancestor''s Chosen'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 168,
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T1.`gender` = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage_female\n  FROM client AS T1\n  INNER JOIN account AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`district_id` IN (\n    SELECT `district_id`\n    FROM district\n    WHERE `A11` > 10000\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 822,
    "question": "How many green-skinned villains are there in the superhero universe?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM superhero AS T1\n  INNER JOIN alignment AS T2 ON T1.`alignment_id` = T2.`id`\n  INNER JOIN colour AS T3 ON T1.`skin_colour_id` = T3.`id`\n  WHERE T2.`alignment` = 'Bad'\n  AND T3.`colour` = 'Green'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 327,
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "predicted_sql": "SELECT T1.`molecule_id`\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`label` = '-'\n  GROUP BY T1.`molecule_id`\n  HAVING COUNT(T1.`atom_id`) > 5",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 474,
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM sets AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`code` = T2.`setCode`\n  WHERE T2.`language` = 'Italian'\n  AND T2.`translation` IS NOT NULL\n  AND T1.`baseSetSize` < 100",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 402,
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN `isStorySpotlight` = 1 AND `isTextless` = 0 THEN 1 END) * 100.0 / COUNT(*)) AS percentage,\n    GROUP_CONCAT(`id`) AS story_spotlight_ids_without_text\nFROM cards\nWHERE `isStorySpotlight` = 1 AND `isTextless` = 0",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1254,
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`First Date` >= '1990-01-01'\n  AND T2.`IGA` > 80\n  AND T2.`IGA` < 500",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 944,
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "predicted_sql": "WITH race_info AS (\n    SELECT raceId \n    FROM races \n    WHERE name = 'Australian Grand Prix' AND year = 2008\n),\nchampion_result AS (\n    SELECT milliseconds\n    FROM results\n    WHERE raceId = (SELECT raceId FROM race_info) \n    AND position = 1\n    AND time IS NOT NULL\n),\nlast_driver_result AS (\n    SELECT milliseconds\n    FROM results\n    WHERE raceId = (SELECT raceId FROM race_info)\n    AND position = (SELECT MAX(position) FROM results WHERE raceId = (SELECT raceId FROM race_info) AND time IS NOT NULL)\n    AND time IS NOT NULL\n)\nSELECT \n    ((last_driver_result.milliseconds - champion_result.milliseconds) * 100.0 / last_driver_result.milliseconds) AS percentage_faster\nFROM champion_result, last_driver_result;",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1509,
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T2.`Country` = 'CZE'\n  AND T1.`Date` > '2012-01-01'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1242,
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "predicted_sql": "SELECT DISTINCT T1.`ID`\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`Birthday` IS NOT NULL\n  AND (strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) < 50\n  AND strftime('%Y', T2.`Date`) = '1984'\n  AND T2.`PLT` BETWEEN 100 AND 400",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 173,
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "predicted_sql": "SELECT `k_symbol`\n  FROM `order`\n  WHERE `amount` = 3539\n  AND `k_symbol` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 960,
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "predicted_sql": "SELECT AVG(`fastestLapSpeed`)\n  FROM results\n  WHERE `raceId` = (\n    SELECT `raceId`\n    FROM races\n    WHERE `name` = 'Spanish Grand Prix' AND `year` = 2009\n  )\n  AND `fastestLapSpeed` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 189,
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "predicted_sql": "SELECT COUNT(*) \nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nWHERE c.gender = 'F' AND d.type = 'OWNER';",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 473,
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "predicted_sql": "SELECT CASE WHEN `isForeignOnly` = 1 THEN 'Yes' ELSE 'No' END AS is_only_available_outside_US\n  FROM sets\n  WHERE `code` = (\n    SELECT `setCode`\n    FROM cards\n    WHERE `name` = 'Adarkar Valkyrie'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 736,
    "question": "Who is the dumbest superhero?",
    "predicted_sql": "SELECT T3.`superhero_name`\n  FROM hero_attribute AS T1\n  INNER JOIN attribute AS T2\n  ON T1.`attribute_id` = T2.`id`\n  INNER JOIN superhero AS T3\n  ON T1.`hero_id` = T3.`id`\n  WHERE T2.`attribute_name` = 'Intelligence'\n  ORDER BY T1.`attribute_value` ASC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 758,
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "predicted_sql": "SELECT T2.`colour`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`hair_colour_id` = T2.`id`\n  WHERE T1.`race_id` = (\n    SELECT `id`\n    FROM race\n    WHERE `race` = 'Human'\n  )\n  AND T1.`height_cm` = 185",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 242,
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "predicted_sql": "SELECT DISTINCT T1.`molecule_id`\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE SUBSTR(T1.`atom_id`, 7, 2) BETWEEN '21' AND '25'\n  AND T2.`label` = '+'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 875,
    "question": "Show me the season page of year when the race No. 901 took place.",
    "predicted_sql": "SELECT T1.`url`\n  FROM seasons AS T1\n  INNER JOIN races AS T2\n  ON T1.`year` = T2.`year`\n  WHERE T2.`raceId` = 901",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1394,
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM member\n  WHERE `link_to_major` = (\n    SELECT `major_id`\n    FROM major\n    WHERE `major_name` = 'Physics Teaching'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1351,
    "question": "What was Brent Thomason's major?",
    "predicted_sql": "SELECT T2.`major_name`\n  FROM member AS T1\n  INNER JOIN major AS T2\n  ON T1.`link_to_major` = T2.`major_id`\n  WHERE T1.`first_name` = 'Brent' AND T1.`last_name` = 'Thomason'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1002,
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "predicted_sql": "SELECT \n  d.`forename` || ' ' || d.`surname` as full_name,\n  d.`nationality`,\n  (SELECT r.`name` as race_name\n   FROM results res\n   INNER JOIN races r ON res.`raceId` = r.`raceId`\n   WHERE res.`driverId` = d.`driverId`\n   ORDER BY r.`date` ASC\n   LIMIT 1) as first_race\nFROM drivers d\nWHERE d.`dob` IS NOT NULL\nORDER BY d.`dob` DESC\nLIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1270,
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  LEFT JOIN Examination AS T3\n  ON T1.`ID` = T3.`ID`\n  WHERE T2.`SC170` IN ('negative', '0')\n  AND T1.`SEX` = 'F'\n  AND T3.`Symptoms` IS NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 47,
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "predicted_sql": "SELECT COUNT(*) / 12.0\n  FROM schools\n  WHERE `County` = 'Alameda'\n  AND `DOC` = '52'\n  AND `OpenDate` LIKE '1980%'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 586,
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "predicted_sql": "SELECT `DisplayName`\n  FROM users\n  WHERE `Id` IN (\n    SELECT `UserId`\n    FROM votes\n    WHERE `BountyAmount` = 50\n    AND `PostId` IN (\n      SELECT `Id`\n      FROM posts\n      WHERE `Title` LIKE '%variance%'\n    )\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 798,
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "predicted_sql": "SELECT T2.`publisher_name`\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2\n  ON T1.`publisher_id` = T2.`id`\n  WHERE T1.`superhero_name` IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 694,
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "predicted_sql": "SELECT C.`Text`, U.`DisplayName`\n  FROM comments AS C\n  INNER JOIN users AS U\n  ON C.`UserId` = U.`Id`\n  WHERE C.`PostId` = (\n    SELECT `Id`\n    FROM posts\n    WHERE `Title` = 'Analysing wind data with R'\n  )\n  ORDER BY C.`CreationDate` DESC\n  LIMIT 10",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 881,
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "predicted_sql": "SELECT \n    (SELECT COUNT(DISTINCT T2.`driverId`) \n     FROM races AS T1\n     INNER JOIN results AS T2 ON T1.`raceId` = T2.`raceId`\n     WHERE T1.`date` = '1983-07-16' AND T2.`time` IS NOT NULL) * 100.0 /\n    (SELECT COUNT(DISTINCT T2.`driverId`)\n     FROM races AS T1\n     INNER JOIN results AS T2 ON T1.`raceId` = T2.`raceId`\n     WHERE T1.`date` = '1983-07-16') AS completion_rate",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1195,
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "predicted_sql": "SELECT AVG(T1.`ALB`)\n  FROM Laboratory AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`SEX` = 'F'\n  AND T2.`Diagnosis` = 'SLE'\n  AND T1.`PLT` > 400\n  AND T1.`ALB` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 112,
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "predicted_sql": "SELECT `A2`\n  FROM district\n  WHERE `district_id` = (\n    SELECT `district_id`\n    FROM account\n    WHERE `account_id` IN (\n      SELECT `account_id`\n      FROM disp\n      WHERE `client_id` = (\n        SELECT `client_id`\n        FROM client\n        WHERE `gender` = 'F'\n        AND `birth_date` = '1976-01-29'\n      )\n      AND `type` = 'OWNER'\n    )\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1201,
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "predicted_sql": "SELECT (COUNT(CASE WHEN `SEX` = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM Patient\n  WHERE strftime('%Y', `Birthday`) = '1980'\n  AND `Diagnosis` = 'RA'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1409,
    "question": "Mention the total expense used on 8/20/2019.",
    "predicted_sql": "SELECT SUM(`cost`) \n  FROM expense \n  WHERE `expense_date` = '2019-08-20'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 239,
    "question": "How many connections does the atom 19 have?",
    "predicted_sql": "SELECT COUNT(`bond_id`)\n  FROM connected\n  WHERE `atom_id` LIKE '%_19' OR `atom_id2` LIKE '%_19'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 95,
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "predicted_sql": "SELECT d.account_id\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN district ds ON c.district_id = ds.district_id\nWHERE d.type = 'OWNER'\nORDER BY c.birth_date DESC, ds.A11 DESC\nLIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 928,
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "predicted_sql": "SELECT `driverRef`\n  FROM drivers\n  WHERE `driverId` = (\n    SELECT `driverId`\n    FROM results\n    WHERE `raceId` = (\n      SELECT `raceId`\n      FROM races\n      WHERE `name` = 'Canadian Grand Prix' AND `year` = 2007\n    )\n    AND `positionOrder` = 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1148,
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN P.height < 180 AND PA.overall_rating > 70 THEN 1 END) * 100.0 / \n    COUNT(*)) AS percentage\nFROM Player AS P\nINNER JOIN Player_Attributes AS PA ON P.player_api_id = PA.player_api_id",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 739,
    "question": "What are the names of the superheroes with the power of death touch?",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  WHERE T2.`power_id` = (\n    SELECT `id`\n    FROM superpower\n    WHERE `power_name` = 'Death Touch'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 62,
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE T2.`County` = 'Los Angeles'\n  AND T2.`Charter` = 0\n  AND (T1.`Free Meal Count (K-12)` * 100.0 / T1.`Enrollment (K-12)`) < 0.18",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 486,
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN c.`convertedManaCost` = 7 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM cards c\nJOIN sets s ON c.`setCode` = s.`code`\nWHERE s.`name` = 'Coldsnap' \n  AND c.`convertedManaCost` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1344,
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "predicted_sql": "SELECT `notes`\n  FROM income\n  WHERE `source` = 'Fundraising'\n  AND `date_received` = '2019-09-14'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 792,
    "question": "What is Abomination's superpower?",
    "predicted_sql": "SELECT T2.`power_name`\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  WHERE T1.`hero_id` = (\n    SELECT `id`\n    FROM superhero\n    WHERE `superhero_name` = 'Abomination'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1457,
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`, T1.`phone`\n  FROM member AS T1\n  INNER JOIN expense AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T2.`cost` > (\n    SELECT AVG(`cost`) \n    FROM expense\n    WHERE `cost` IS NOT NULL\n  )\n  AND T1.`phone` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1381,
    "question": "List the name of students that have attended more than 7 events.",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`\n  FROM member AS T1\n  INNER JOIN (\n    SELECT `link_to_member`, COUNT(`link_to_event`) AS event_count\n    FROM attendance\n    GROUP BY `link_to_member`\n    HAVING event_count > 7\n  ) AS T2\n  ON T1.`member_id` = T2.`link_to_member`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1500,
    "question": "Please list the product description of the products consumed in September, 2013.",
    "predicted_sql": "SELECT DISTINCT T3.`Description`\n  FROM transactions_1k AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  INNER JOIN products AS T3\n  ON T1.`ProductID` = T3.`ProductID`\n  WHERE substr(T2.`Date`, 1, 4) = '2013' AND substr(T2.`Date`, 5, 2) = '09'\n  AND T3.`Description` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 234,
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM connected\n  WHERE (`atom_id` = 'TR009_12' OR `atom_id2` = 'TR009_12')\n  AND `bond_id` IN (\n    SELECT `bond_id`\n    FROM bond\n    WHERE `molecule_id` = (\n      SELECT `molecule_id`\n      FROM molecule\n      WHERE `label` = 'TR009'\n    )\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 896,
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "predicted_sql": "SELECT \n  (COUNT(DISTINCT CASE WHEN T1.`position` > 1 THEN T1.`raceId` END) * 100.0) / \n  COUNT(DISTINCT T1.`raceId`) AS percentage\nFROM results AS T1\nINNER JOIN drivers AS T2\nON T1.`driverId` = T2.`driverId`\nINNER JOIN races AS T3\nON T1.`raceId` = T3.`raceId`\nWHERE T2.`surname` = 'Hamilton'\nAND T3.`year` >= 2010",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 869,
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "predicted_sql": "SELECT T1.`url`\n  FROM constructors AS T1\n  INNER JOIN constructorResults AS T2\n  ON T1.`constructorId` = T2.`constructorId`\n  WHERE T2.`raceId` = 9\n  ORDER BY T2.`points` DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 195,
    "question": "What is the most common bond type?",
    "predicted_sql": "SELECT `bond_type`\n  FROM (\n    SELECT `bond_type`, COUNT(*) as count\n    FROM bond\n    WHERE `bond_type` IS NOT NULL\n    GROUP BY `bond_type`\n  )\n  ORDER BY count DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 479,
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM cards\n  WHERE `setCode` = (\n    SELECT `code`\n    FROM sets\n    WHERE `name` = 'Coldsnap'\n  )\n  AND `convertedManaCost` > 5\n  AND (`power` IS NULL OR `power` = '*')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 898,
    "question": "How old is the youngest Japanese driver? What is his name?",
    "predicted_sql": "SELECT strftime('%Y', CURRENT_TIMESTAMP) - strftime('%Y', `dob`) AS age\n  FROM drivers\n  WHERE `nationality` = 'Japanese'\n  AND `dob` IS NOT NULL\n  ORDER BY `dob` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1084,
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`player_api_id`)\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE strftime('%Y', T1.`birthday`) < '1986'\n  AND T2.`defensive_work_rate` = 'high'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 539,
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "predicted_sql": "SELECT u.`DisplayName`\n  FROM posts AS p\n  INNER JOIN users AS u ON p.`OwnerUserId` = u.`Id`\n  WHERE p.`Title` = 'Eliciting priors from experts'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 683,
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN u.`Reputation` > 1000 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\nFROM posts AS p\nINNER JOIN users AS u ON p.`OwnerUserId` = u.`Id`\nINNER JOIN postHistory AS ph ON p.`Id` = ph.`PostId`\nWHERE strftime('%Y', ph.`CreationDate`) = '2011'\n  AND ph.`PostHistoryTypeId` = 2  -- Assuming 2 means initial creation (check actual value in your schema)",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 796,
    "question": "State all of 3-D Man's attributes along with their values.",
    "predicted_sql": "SELECT T2.`attribute_name`, T1.`attribute_value`\n  FROM hero_attribute AS T1\n  INNER JOIN attribute AS T2 ON T1.`attribute_id` = T2.`id`\n  WHERE T1.`hero_id` = (\n    SELECT `id`\n    FROM superhero\n    WHERE `superhero_name` = '3-D Man'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 829,
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "predicted_sql": "SELECT (\n  (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'DC Comics') -\n  (SELECT COUNT(*) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id` WHERE T2.`publisher_name` = 'Marvel Comics')\n) AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 990,
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "predicted_sql": "SELECT T1.`constructorRef`, T1.`url`\n  FROM constructors AS T1\n  WHERE T1.`constructorId` = (\n    SELECT `constructorId`\n    FROM results\n    WHERE `raceId` = (\n      SELECT `raceId`\n      FROM races\n      WHERE `name` = 'Singapore Grand Prix' AND `year` = 2009\n    )\n    AND `driverId` = (\n      SELECT `driverId`\n      FROM results\n      WHERE `raceId` = (\n        SELECT `raceId`\n        FROM races\n        WHERE `name` = 'Singapore Grand Prix' AND `year` = 2009\n      )\n      AND `time` IS NOT NULL\n      ORDER BY `time` ASC\n      LIMIT 1\n    )\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1029,
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "predicted_sql": "SELECT T1.`team_long_name`, T2.`buildUpPlaySpeed`\n  FROM Team AS T1\n  INNER JOIN Team_Attributes AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  ORDER BY T2.`buildUpPlaySpeed` DESC\n  LIMIT 4",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1514,
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "predicted_sql": "SELECT T1.`Currency`\n  FROM customers AS T1\n  INNER JOIN transactions_1k AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T2.`Date` = '2012-08-24' AND T2.`Time` = '16:25:00'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 31,
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "predicted_sql": "WITH ranked_schools AS (\n    SELECT \n        satscores.`cds`,\n        satscores.`enroll12`,\n        ROW_NUMBER() OVER (ORDER BY satscores.`enroll12` DESC) AS rank\n    FROM satscores\n    WHERE satscores.`enroll12` IS NOT NULL\n    AND satscores.`rtype` = 'S'  -- Only include schools (not districts)\n)\nSELECT \n    frpm.`Free Meal Count (K-12)` * 1.0 / frpm.`Enrollment (K-12)` AS eligible_free_rate\nFROM frpm\nJOIN ranked_schools ON frpm.`CDSCode` = ranked_schools.`cds`\nWHERE ranked_schools.rank BETWEEN 10 AND 11\nAND frpm.`Enrollment (K-12)` > 0  -- Avoid division by zero",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1506,
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "predicted_sql": "SELECT DISTINCT T3.`Description`\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  INNER JOIN products AS T3\n  ON T1.`ProductID` = T3.`ProductID`\n  WHERE T2.`Country` = 'CZE'\n  AND T3.`Description` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 584,
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "predicted_sql": "SELECT `Text`\n  FROM comments\n  WHERE `UserId` IN (\n    SELECT DISTINCT `UserId`\n    FROM postHistory\n    WHERE `PostId` = (\n      SELECT `Id`\n      FROM posts\n      WHERE `Title` = 'Why square the difference instead of taking the absolute value in standard deviation?'\n    )\n  )\n  AND `Text` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 83,
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "predicted_sql": "SELECT `City`, COUNT(*) AS school_count\n  FROM schools\n  WHERE `GSserved` = 'K-8'\n  AND `City` IS NOT NULL\n  GROUP BY `City`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 704,
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "predicted_sql": "SELECT `ExcerptPostId`, `WikiPostId`\n  FROM tags\n  WHERE `TagName` = 'sample'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 781,
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "predicted_sql": "SELECT `height_cm`\n  FROM superhero\n  WHERE `eye_colour_id` = (\n    SELECT `id`\n    FROM colour\n    WHERE `colour` = 'Amber'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 263,
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T1.`element` = 'cl' THEN 1 END) * 100.0 / COUNT(*)) AS chlorine_percentage\n  FROM atom AS T1\n  INNER JOIN bond AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`bond_type` = '-'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1076,
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "predicted_sql": "SELECT \n  (SELECT AVG(`ball_control`)\n    FROM Player_Attributes AS T1\n    INNER JOIN Player AS T2\n    ON T1.`player_api_id` = T2.`player_api_id`\n    WHERE T2.`player_name` = 'Abdou Diallo') -\n  (SELECT AVG(`ball_control`)\n    FROM Player_Attributes AS T1\n    INNER JOIN Player AS T2\n    ON T1.`player_api_id` = T2.`player_api_id`\n    WHERE T2.`player_name` = 'Aaron Appindangoye') AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 909,
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T2.country = 'Germany' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM races AS T1\n  INNER JOIN circuits AS T2\n  ON T1.circuitId = T2.circuitId\n  WHERE T1.name = 'European Grand Prix'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 85,
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "predicted_sql": "SELECT T1.`Percent (%) Eligible Free (K-12)`, T1.`District Code`\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE T2.`AdmFName1` = 'Alusine' OR T2.`AdmFName2` = 'Alusine'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 764,
    "question": "What are the superpowers of heroes with ID 1?",
    "predicted_sql": "SELECT T2.`power_name`\n  FROM hero_power AS T1\n  INNER JOIN superpower AS T2\n  ON T1.`power_id` = T2.`id`\n  WHERE T1.`hero_id` = 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 786,
    "question": "How many heroes have the highest attribute value in strength?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`hero_id`)\n  FROM hero_attribute AS T1\n  INNER JOIN attribute AS T2\n  ON T1.`attribute_id` = T2.`id`\n  WHERE T2.`attribute_name` = 'Strength'\n  AND T1.`attribute_value` = (\n    SELECT MAX(`attribute_value`)\n    FROM hero_attribute AS T3\n    INNER JOIN attribute AS T4\n    ON T3.`attribute_id` = T4.`id`\n    WHERE T4.`attribute_name` = 'Strength'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 212,
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "predicted_sql": "SELECT `element`\n  FROM (\n    SELECT T1.`element`, COUNT(*) AS element_count\n    FROM atom AS T1\n    INNER JOIN molecule AS T2\n    ON T1.`molecule_id` = T2.`molecule_id`\n    WHERE T2.`label` = '-'\n    GROUP BY T1.`element`\n  )\n  ORDER BY element_count ASC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1068,
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "predicted_sql": "SELECT AVG(T2.`overall_rating`)\n  FROM Player AS T1\n  INNER JOIN Player_Attributes AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`height` > 170\n  AND strftime('%Y', T2.`date`) BETWEEN '2010' AND '2015'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1032,
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "predicted_sql": "SELECT L.`name`, M.match_count\n  FROM `League` AS L\n  INNER JOIN (\n    SELECT `league_id`, COUNT(*) AS match_count\n    FROM `Match`\n    GROUP BY `league_id`\n    ORDER BY match_count DESC\n    LIMIT 1\n  ) AS M\n  ON L.`id` = M.`league_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 846,
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "predicted_sql": "SELECT T3.`driverRef`\n  FROM qualifying AS T1\n  INNER JOIN races AS T2\n  ON T1.`raceId` = T2.`raceId`\n  INNER JOIN drivers AS T3\n  ON T1.`driverId` = T3.`driverId`\n  WHERE T2.`round` = 20\n  AND T1.`q1` IS NOT NULL\n  ORDER BY T1.`q1` DESC\n  LIMIT 5",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1405,
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "predicted_sql": "SELECT `category`, `amount`\n  FROM budget\n  WHERE `link_to_event` = (\n    SELECT `event_id`\n    FROM event\n    WHERE `event_name` = 'April Speaker'\n  )\n  ORDER BY `amount` ASC",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 32,
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "predicted_sql": "SELECT T1.`School Name`, (CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)`) AS eligible_rate\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE T2.`SOC` = '66'\n  ORDER BY T1.`FRPM Count (K-12)` DESC\n  LIMIT 5",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1058,
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "predicted_sql": "SELECT T2.`player_name`, AVG(T1.`finishing`) AS avg_finishing\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`height` = (\n    SELECT MAX(`height`)\n    FROM Player\n  ) OR T2.`height` = (\n    SELECT MIN(`height`)\n    FROM Player\n  )\n  GROUP BY T2.`player_name`\n  ORDER BY avg_finishing DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 94,
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "predicted_sql": "SELECT \n  T3.`account_id`,\n  (SELECT MAX(`A11`) FROM district) - (SELECT MIN(`A11`) FROM district) AS salary_gap\nFROM \n  client AS T1\n  INNER JOIN district AS T2 ON T1.`district_id` = T2.`district_id`\n  INNER JOIN disp AS T3 ON T1.`client_id` = T3.`client_id`\nWHERE \n  T1.`gender` = 'F'\n  AND T2.`A11` = (\n    SELECT MIN(T5.`A11`)\n    FROM client AS T4\n    INNER JOIN district AS T5 ON T4.`district_id` = T5.`district_id`\n    WHERE T4.`gender` = 'F'\n    ORDER BY T4.`birth_date` ASC\n    LIMIT 1\n  )\nORDER BY \n  T1.`birth_date` ASC\nLIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 347,
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "predicted_sql": "SELECT c.`id`, c.`name`, r.`text` AS ruling_text,\n       CASE WHEN c.`hasContentWarning` = 1 THEN 'Yes' ELSE 'No' END AS has_missing_or_degraded_properties\nFROM cards AS c\nINNER JOIN rulings AS r ON c.`uuid` = r.`uuid`\nWHERE c.`artist` = 'Stephen Daniele' AND c.`artist` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 576,
    "question": "Name the user that commented 'thank you user93!'",
    "predicted_sql": "SELECT `DisplayName`\n  FROM users\n  WHERE `Id` = (\n    SELECT `UserId`\n    FROM comments\n    WHERE `Text` = 'thank you user93!'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 733,
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id`\n  INNER JOIN colour AS T3 ON T1.`eye_colour_id` = T3.`id`\n  WHERE T2.`publisher_name` = 'Marvel Comics'\n  AND T3.`colour` = 'Gold'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1460,
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`, T2.`cost`\n  FROM member AS T1\n  INNER JOIN expense AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T2.`expense_description` = 'Water, Veggie tray, supplies'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 750,
    "question": "What is the average weight of all female superheroes?",
    "predicted_sql": "SELECT AVG(T1.`weight_kg`)\n  FROM superhero AS T1\n  INNER JOIN gender AS T2\n  ON T1.`gender_id` = T2.`id`\n  WHERE T2.`gender` = 'Female'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 138,
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'M'\n  AND T2.`district_id` = (\n    SELECT `district_id`\n    FROM district\n    ORDER BY `A15` DESC\n    LIMIT 1 OFFSET 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1507,
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "predicted_sql": "SELECT DISTINCT T1.`Time`\n  FROM transactions_1k AS T1\n  INNER JOIN gasstations AS T2\n  ON T1.`GasStationID` = T2.`GasStationID`\n  WHERE T2.`ChainID` = 11\n  ORDER BY T1.`Time`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1473,
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "predicted_sql": "SELECT AVG(`Consumption`) / 12\n  FROM yearmonth AS T1\n  INNER JOIN customers AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Date` BETWEEN '201301' AND '201312'\n  AND T2.`Segment` = 'SME'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 598,
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "predicted_sql": "SELECT \n    ((COUNT(CASE WHEN strftime('%Y', `Date`) = '2010' THEN `Name` END) * 100.0 / COUNT(`Name`)) - \n    (COUNT(CASE WHEN strftime('%Y', `Date`) = '2011' THEN `Name` END) * 100.0 / COUNT(`Name`))) AS percentage_difference\nFROM badges \nWHERE `Name` = 'Student'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 629,
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "predicted_sql": "SELECT \n  (SELECT COUNT(`Id`) FROM votes WHERE strftime('%Y', `CreationDate`) = '2010') * 1.0 /\n  (SELECT COUNT(`Id`) FROM votes WHERE strftime('%Y', `CreationDate`) = '2011') AS ratio",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1031,
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "predicted_sql": "SELECT T1.`player_name`, \n       CAST((julianday('now') - julianday(T1.`birthday`)) / 365.25 AS INTEGER) AS age\nFROM Player AS T1\nINNER JOIN Player_Attributes AS T2 ON T1.`player_api_id` = T2.`player_api_id`\nINNER JOIN Match AS T3 ON \n    (T1.`player_api_id` = T3.`home_player_1` OR\n     T1.`player_api_id` = T3.`home_player_2` OR\n     T1.`player_api_id` = T3.`home_player_3` OR\n     T1.`player_api_id` = T3.`home_player_4` OR\n     T1.`player_api_id` = T3.`home_player_5` OR\n     T1.`player_api_id` = T3.`home_player_6` OR\n     T1.`player_api_id` = T3.`home_player_7` OR\n     T1.`player_api_id` = T3.`home_player_8` OR\n     T1.`player_api_id` = T3.`home_player_9` OR\n     T1.`player_api_id` = T3.`home_player_10` OR\n     T1.`player_api_id` = T3.`home_player_11` OR\n     T1.`player_api_id` = T3.`away_player_1` OR\n     T1.`player_api_id` = T3.`away_player_2` OR\n     T1.`player_api_id` = T3.`away_player_3` OR\n     T1.`player_api_id` = T3.`away_player_4` OR\n     T1.`player_api_id` = T3.`away_player_5` OR\n     T1.`player_api_id` = T3.`away_player_6` OR\n     T1.`player_api_id` = T3.`away_player_7` OR\n     T1.`player_api_id` = T3.`away_player_8` OR\n     T1.`player_api_id` = T3.`away_player_9` OR\n     T1.`player_api_id` = T3.`away_player_10` OR\n     T1.`player_api_id` = T3.`away_player_11`)\nWHERE T2.`sprint_speed` >= 97\nAND strftime('%Y', T3.`date`) BETWEEN '2013' AND '2015'\nGROUP BY T1.`player_api_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 892,
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "predicted_sql": "SELECT d.forename, d.surname, ds.points\nFROM drivers d\nJOIN driverStandings ds ON d.driverId = ds.driverId\nWHERE ds.points = (SELECT MAX(points) FROM driverStandings)",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 806,
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "predicted_sql": "SELECT T1.`colour`\n  FROM colour AS T1\n  INNER JOIN superhero AS T2\n  ON T1.`id` = T2.`eye_colour_id`\n  WHERE T2.`full_name` = 'Karen Beecher-Duncan'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 200,
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "predicted_sql": "SELECT DISTINCT T1.`molecule_id`\n  FROM bond AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`bond_type` = '#'\n  AND T2.`label` = '+'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 745,
    "question": "Give the publisher ID of Star Trek.",
    "predicted_sql": "SELECT `id`\n  FROM publisher\n  WHERE `publisher_name` = 'Star Trek'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 977,
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM results\n  WHERE `raceId` > 50 AND `raceId` < 100\n  AND `time` IS NOT NULL\n  AND `statusId` = 2",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 138,
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM client AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T1.`gender` = 'M'\n  AND T2.`district_id` = (\n    SELECT `district_id`\n    FROM district\n    ORDER BY `A15` DESC\n    LIMIT 1 OFFSET 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 760,
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 END) * 100.0 / \n  COUNT(*)) AS percentage\nFROM superhero AS T1\nLEFT JOIN publisher AS T2\nON T1.publisher_id = T2.id\nWHERE T1.height_cm BETWEEN 150 AND 180",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1483,
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "predicted_sql": "SELECT SUM(`Consumption`)\n  FROM yearmonth\n  WHERE `CustomerID` = 6\n  AND `Date` BETWEEN '201308' AND '201311'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1011,
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "predicted_sql": "SELECT T1.`forename`, T1.`surname`\n  FROM drivers AS T1\n  INNER JOIN lapTimes AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`time` = (\n    SELECT MIN(`time`)\n    FROM lapTimes\n  )\n  LIMIT 20",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1317,
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM attendance AS T1\n  INNER JOIN member AS T2\n  ON T1.`link_to_member` = T2.`member_id`\n  INNER JOIN event AS T3\n  ON T1.`link_to_event` = T3.`event_id`\n  WHERE T3.`event_name` = \"Women's Soccer\"\n  AND T2.`t_shirt_size` = 'Medium'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1105,
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "predicted_sql": "SELECT T1.`attacking_work_rate`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`player_name` = 'Francesco Migliore'\n  AND T1.`date` LIKE '2015-05-01%'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 249,
    "question": "What are the elements of the atoms of TR144_8_19?",
    "predicted_sql": "SELECT T1.`element`\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id` OR T1.`atom_id` = T2.`atom_id2`\n  WHERE T2.`bond_id` = 'TR144_8_19'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 145,
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "predicted_sql": "SELECT DISTINCT T2.`client_id`\n  FROM disp AS T2\n  INNER JOIN (\n    SELECT `account_id`\n    FROM trans\n    WHERE `operation` = 'VYBER KARTOU'\n    AND `date` LIKE '1998%'\n    AND `amount` < (\n      SELECT AVG(`amount`)\n      FROM trans\n      WHERE `operation` = 'VYBER KARTOU'\n      AND `date` LIKE '1998%'\n    )\n  ) AS T1\n  ON T2.`account_id` = T1.`account_id`\n  WHERE T2.`type` = 'OWNER'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 344,
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "predicted_sql": "SELECT T1.`name`, T1.`printings`\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`rarity` = 'mythic'\n  AND T2.`format` = 'gladiator'\n  AND T2.`status` = 'Banned'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1229,
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Patient AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`TG` >= 200\n  AND (strftime('%Y', 'now') - strftime('%Y', T1.`Birthday`)) > 50\n  AND T1.`Birthday` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1411,
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "predicted_sql": "SELECT T1.`expense_description`\n  FROM expense AS T1\n  INNER JOIN member AS T2\n  ON T1.`link_to_member` = T2.`member_id`\n  WHERE T2.`first_name` = 'Sacha' AND T2.`last_name` = 'Harrison'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 487,
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN `cardKingdomFoilId` IS NOT NULL AND `cardKingdomId` IS NOT NULL THEN 1 END) * 100.0 / \n   COUNT(*)) AS percentage\nFROM cards\nWHERE `setCode` = 'Coldsnap' AND `setCode` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1340,
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "predicted_sql": "SELECT (\n  (SELECT SUM(T1.`spent`)\n    FROM budget AS T1\n    INNER JOIN event AS T2\n    ON T1.`link_to_event` = T2.`event_id`\n    WHERE T2.`event_date` LIKE '2019%')\n  -\n  (SELECT SUM(T3.`spent`)\n    FROM budget AS T3\n    INNER JOIN event AS T4\n    ON T3.`link_to_event` = T4.`event_id`\n    WHERE T4.`event_date` LIKE '2020%')\n) AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 573,
    "question": "Write the contents of comments with a score of 17.",
    "predicted_sql": "SELECT `Text`\n  FROM comments\n  WHERE `Score` = 17",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1094,
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "predicted_sql": "SELECT \n  ((A.rating - B.rating) / B.rating) * 100 AS percentage_higher\nFROM\n  (SELECT `overall_rating` AS rating\n   FROM Player_Attributes\n   INNER JOIN Player\n   ON Player_Attributes.`player_api_id` = Player.`player_api_id`\n   WHERE Player.`player_name` = 'Ariel Borysiuk') AS A,\n  (SELECT `overall_rating` AS rating\n   FROM Player_Attributes\n   INNER JOIN Player\n   ON Player_Attributes.`player_api_id` = Player.`player_api_id`\n   WHERE Player.`player_name` = 'Paulin Puel') AS B",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 518,
    "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition.",
    "predicted_sql": "WITH banned_counts AS (\n    SELECT \n        format,\n        COUNT(*) as banned_count\n    FROM \n        legalities\n    WHERE \n        status = 'Banned'\n    GROUP BY \n        format\n    ORDER BY \n        banned_count DESC\n    LIMIT 1\n)\n\nSELECT \n    l.format,\n    c.asciiName\nFROM \n    cards c\nJOIN \n    legalities l ON c.uuid = l.uuid\nJOIN \n    banned_counts bc ON l.format = bc.format\nWHERE \n    l.status = 'Banned'\n    AND c.asciiName IS NOT NULL\nGROUP BY \n    l.format, c.asciiName\nORDER BY \n    l.format, c.asciiName;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1136,
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Player_Attributes\n  WHERE `preferred_foot` = 'left'\n  AND `crossing` = (\n    SELECT MAX(`crossing`)\n    FROM Player_Attributes\n    WHERE `crossing` IS NOT NULL\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 604,
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "predicted_sql": "SELECT AVG(T2.`UpVotes`) AS avg_upvotes, AVG(T2.`Age`) AS avg_age\n  FROM (\n    SELECT `OwnerUserId`, COUNT(*) AS post_count\n    FROM posts\n    GROUP BY `OwnerUserId`\n    HAVING COUNT(*) > 10\n  ) AS T1\n  INNER JOIN users AS T2\n  ON T1.`OwnerUserId` = T2.`Id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1162,
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Patient\n  WHERE `SEX` = 'F'\n  AND `Description` LIKE '1997%'\n  AND `Admission` = '-'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 352,
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "predicted_sql": "SELECT (CAST((SELECT COUNT(*) FROM foreign_data WHERE `language` = 'Chinese Simplified') AS REAL) / \n        (SELECT COUNT(*) FROM cards)) * 100 AS percentage",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 989,
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "predicted_sql": "SELECT T1.`forename`, T1.`surname`, T2.`time`\n  FROM drivers AS T1\n  INNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`raceId` = (\n    SELECT `raceId`\n    FROM races\n    WHERE `name` = 'Canadian Grand Prix'\n    AND `year` = 2008\n  )\n  AND T2.`position` = 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 391,
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "predicted_sql": "SELECT T1.`name`\n  FROM cards AS T1\n  INNER JOIN foreign_data AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`originalType` = 'Artifact'\n  AND T1.`colors` = 'B'\n  AND T2.`language` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 967,
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "predicted_sql": "SELECT COUNT(*) AS netherlandic_drivers_count\nFROM (\n    SELECT `driverId`, `code`, `dob`, `nationality`\n    FROM drivers\n    WHERE `dob` IS NOT NULL\n    ORDER BY `dob` DESC\n    LIMIT 3\n) AS youngest_drivers\nWHERE `nationality` = 'Dutch'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1098,
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "predicted_sql": "SELECT MAX(T1.`chanceCreationPassing`), T1.`chanceCreationPassingClass`\n  FROM Team_Attributes AS T1\n  INNER JOIN Team AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE T2.`team_long_name` = 'Ajax'\n  GROUP BY T1.`chanceCreationPassingClass`\n  ORDER BY MAX(T1.`chanceCreationPassing`) DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 522,
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "predicted_sql": "SELECT T1.`name`, T2.`format`\n  FROM cards AS T1\n  INNER JOIN legalities AS T2\n  ON T1.`uuid` = T2.`uuid`\n  WHERE T1.`edhrecRank` = 1\n  AND T2.`status` = 'Banned'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 236,
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "predicted_sql": "SELECT b.`bond_type`, c.`atom_id`, c.`atom_id2`\nFROM bond AS b\nINNER JOIN connected AS c ON b.`bond_id` = c.`bond_id`\nWHERE b.`bond_id` = 'TR001_6_9'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1205,
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "predicted_sql": "SELECT \n  CASE \n    WHEN (P.`SEX` = 'M' AND L.`UA` > 8.0) OR (P.`SEX` = 'F' AND L.`UA` > 6.5) THEN 'Yes'\n    ELSE 'No'\n  END AS `Within_Normal_Range`\nFROM Patient AS P\nINNER JOIN Laboratory AS L\nON P.`ID` = L.`ID`\nWHERE P.`ID` = 57266",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1189,
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM Examination\n  WHERE `Thrombosis` = 2\n  AND `ANA Pattern` = 'S'\n  AND `aCL IgM` > (\n    SELECT AVG(`aCL IgM`) * 1.2\n    FROM Examination\n    WHERE `aCL IgM` IS NOT NULL\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 854,
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "predicted_sql": "SELECT T1.`lat`, T1.`lng`\n  FROM circuits AS T1\n  INNER JOIN races AS T2\n  ON T1.`circuitId` = T2.`circuitId`\n  WHERE T2.`name` = 'Australian Grand Prix'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 906,
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "predicted_sql": "SELECT T2.`points`\n  FROM races AS T1\n  INNER JOIN results AS T2\n  ON T1.`raceId` = T2.`raceId`\n  WHERE T2.`driverId` = (\n    SELECT `driverId`\n    FROM drivers\n    WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton'\n  )\n  AND T1.`year` = (\n    SELECT MIN(T3.`year`)\n    FROM races AS T3\n    INNER JOIN results AS T4\n    ON T3.`raceId` = T4.`raceId`\n    WHERE T4.`driverId` = (\n      SELECT `driverId`\n      FROM drivers\n      WHERE `forename` = 'Lewis' AND `surname` = 'Hamilton'\n    )\n  )\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 747,
    "question": "What is the total number of superheroes without full name?",
    "predicted_sql": "SELECT COUNT(*) \n  FROM superhero\n  WHERE `full_name` IS NULL",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 859,
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "predicted_sql": "SELECT T1.`q1`\n  FROM qualifying AS T1\n  INNER JOIN drivers AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`forename` = 'Bruno' AND T2.`surname` = 'Senna'\n  AND T1.`raceId` = 354",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1464,
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`, T2.`amount`\n  FROM member AS T1\n  INNER JOIN income AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T2.`date_received` = '2019-09-09'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1528,
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN `Segment` = 'Premium' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM gasstations\n  WHERE `Country` = 'SVK'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 247,
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "predicted_sql": "SELECT DISTINCT T1.`element`\n  FROM atom AS T1\n  WHERE T1.`atom_id` NOT IN (SELECT `atom_id` FROM connected)\n  AND T1.`atom_id` NOT IN (SELECT `atom_id2` FROM connected)\n  GROUP BY T1.`element`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1169,
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*)\n   FROM Patient AS T1\n   INNER JOIN Laboratory AS T2\n   ON T1.`ID` = T2.`ID`\n   WHERE T1.`SEX` = 'M'\n   AND T2.`UA` <= 8.0) * 1.0 /\n  (SELECT COUNT(*)\n   FROM Patient AS T1\n   INNER JOIN Laboratory AS T2\n   ON T1.`ID` = T2.`ID`\n   WHERE T1.`SEX` = 'F'\n   AND T2.`UA` <= 6.5) AS male_to_female_ratio",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 716,
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "predicted_sql": "SELECT (\n    SELECT COUNT(DISTINCT T1.`UserId`)\n    FROM comments AS T1\n    INNER JOIN users AS T2\n    ON T1.`UserId` = T2.`Id`\n    WHERE T1.`Score` BETWEEN 5 AND 10\n    AND T2.`UpVotes` = 0\n  ) * 100.0 / (\n    SELECT COUNT(DISTINCT `UserId`)\n    FROM comments\n    WHERE `Score` BETWEEN 5 AND 10\n  ) AS percentage",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 245,
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "predicted_sql": "SELECT AVG(bond_count) AS average_bonds\n  FROM (\n    SELECT COUNT(C.`bond_id`) AS bond_count\n    FROM atom AS A\n    LEFT JOIN connected AS C\n    ON A.`atom_id` = C.`atom_id`\n    WHERE A.`element` = 'i'\n    GROUP BY A.`atom_id`\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 529,
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "predicted_sql": "SELECT DISTINCT s.name\nFROM sets s\nJOIN set_translations st_kr ON s.code = st_kr.setCode AND st_kr.language = 'Korean'\nLEFT JOIN set_translations st_jp ON s.code = st_jp.setCode AND st_jp.language = 'Japanese'\nWHERE st_jp.setCode IS NULL;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 719,
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM superhero AS T1\n  INNER JOIN hero_power AS T2\n  ON T1.`id` = T2.`hero_id`\n  INNER JOIN superpower AS T3\n  ON T2.`power_id` = T3.`id`\n  WHERE T3.`power_name` = 'Super Strength'\n  AND T1.`height_cm` > 200",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 23,
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "predicted_sql": "SELECT T1.`School Name`, T2.`Street`, T2.`City`, T2.`Zip`, T2.`State`\n  FROM frpm AS T1\n  INNER JOIN schools AS T2\n  ON T1.`CDSCode` = T2.`CDSCode`\n  WHERE ABS(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > 30\n  AND T2.`Street` IS NOT NULL\n  AND T2.`City` IS NOT NULL\n  AND T2.`Zip` IS NOT NULL\n  AND T2.`State` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1481,
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "predicted_sql": "WITH lowest_consumption_customers_per_segment AS (\n    SELECT \n        c.`Segment`,\n        c.`CustomerID`,\n        SUM(ym.`Consumption`) AS total_consumption\n    FROM \n        customers AS c\n    INNER JOIN \n        yearmonth AS ym ON c.`CustomerID` = ym.`CustomerID`\n    WHERE \n        c.`Currency` = 'CZK'\n        AND ym.`Date` BETWEEN '201301' AND '201312'\n        AND ym.`Consumption` IS NOT NULL\n    GROUP BY \n        c.`Segment`, c.`CustomerID`\n    ORDER BY \n        c.`Segment`, total_consumption ASC\n),\nsegment_min_consumption AS (\n    SELECT \n        `Segment`,\n        `CustomerID`,\n        total_consumption\n    FROM (\n        SELECT \n            `Segment`,\n            `CustomerID`,\n            total_consumption,\n            ROW_NUMBER() OVER (PARTITION BY `Segment` ORDER BY total_consumption ASC) AS rn\n        FROM \n            lowest_consumption_customers_per_segment\n    ) ranked\n    WHERE rn = 1\n),\nsegment_consumption_stats AS (\n    SELECT \n        s.`Segment`,\n        COUNT(DISTINCT s.`CustomerID`) AS customer_count,\n        SUM(ym.`Consumption`) AS total_consumption\n    FROM \n        segment_min_consumption AS s\n    INNER JOIN \n        yearmonth AS ym ON s.`CustomerID` = ym.`CustomerID`\n    WHERE \n        ym.`Date` BETWEEN '201301' AND '201312'\n        AND ym.`Consumption` IS NOT NULL\n    GROUP BY \n        s.`Segment`\n),\nsegment_averages AS (\n    SELECT \n        `Segment`,\n        total_consumption / customer_count AS avg_consumption\n    FROM \n        segment_consumption_stats\n    WHERE \n        customer_count > 0\n)\nSELECT \n    (SELECT avg_consumption FROM segment_averages WHERE `Segment` = 'SME') - \n    (SELECT avg_consumption FROM segment_averages WHERE `Segment` = 'LAM') AS diff_SME_LAM,\n    (SELECT avg_consumption FROM segment_averages WHERE `Segment` = 'LAM') - \n    (SELECT avg_consumption FROM segment_averages WHERE `Segment` = 'KAM') AS diff_LAM_KAM,\n    (SELECT avg_consumption FROM segment_averages WHERE `Segment` = 'KAM') - \n    (SELECT avg_consumption FROM segment_averages WHERE `Segment` = 'SME') AS diff_KAM_SME\nFROM \n    segment_averages\nLIMIT 1;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1490,
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "predicted_sql": "SELECT (\n    (SELECT COUNT(DISTINCT T1.`CustomerID`)\n    FROM customers AS T1\n    INNER JOIN yearmonth AS T2\n    ON T1.`CustomerID` = T2.`CustomerID`\n    WHERE T1.`Segment` = 'LAM'\n    AND T2.`Consumption` > 46.73)\n    * 100.0 / \n    (SELECT COUNT(*)\n    FROM customers\n    WHERE `Segment` = 'LAM')\n) AS percentage",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1302,
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Examination AS T1\n  INNER JOIN Laboratory AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`CPK` < 250\n  AND (T1.`KCT` = '+' OR T1.`RVVT` = '+' OR T1.`LAC` = '+')",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 930,
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "predicted_sql": "SELECT T1.`name`\n  FROM races AS T1\n  INNER JOIN results AS T2\n  ON T1.`raceId` = T2.`raceId`\n  INNER JOIN drivers AS T3\n  ON T2.`driverId` = T3.`driverId`\n  WHERE T3.`forename` = 'Lewis' AND T3.`surname` = 'Hamilton'\n  ORDER BY T2.`rank` ASC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 678,
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "predicted_sql": "SELECT `Id`, `Title`\n  FROM posts\n  WHERE `OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    WHERE `DisplayName` = 'Harvey Motulsky'\n  )\n  ORDER BY `ViewCount` DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 865,
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "predicted_sql": "SELECT T2.`driverId`, T2.`forename`, T2.`surname`\n  FROM drivers AS T2\n  WHERE T2.`driverId` IN (\n    SELECT T1.`driverId`\n    FROM results AS T1\n    WHERE T1.`raceId` = 592\n    AND T1.`time` IS NOT NULL\n  )\n  AND T2.`dob` IS NOT NULL\n  ORDER BY T2.`dob` ASC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 215,
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`atom_id`)\n  FROM atom AS T1\n  INNER JOIN bond AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`bond_type` = '-'\n  AND (T1.`element` = 'i' OR T1.`element` = 's')",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 213,
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "predicted_sql": "SELECT T1.`bond_type`\n  FROM bond AS T1\n  INNER JOIN connected AS T2\n  ON T1.`bond_id` = T2.`bond_id`\n  WHERE (T2.`atom_id` = 'TR004_8' AND T2.`atom_id2` = 'TR004_20') \n     OR (T2.`atom_id` = 'TR004_20' AND T2.`atom_id2` = 'TR004_8')",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 701,
    "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50.",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN `Score` > 50 THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM posts\n  WHERE `OwnerUserId` = (\n    SELECT `Id`\n    FROM users\n    ORDER BY `Reputation` DESC\n    LIMIT 1\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 819,
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "predicted_sql": "SELECT (\n  SELECT COUNT(*)\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE (T1.`weight_kg` = 0 OR T1.`weight_kg` IS NULL)\n  AND T2.`id` = 7\n) - (\n  SELECT COUNT(*)\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  WHERE (T1.`weight_kg` = 0 OR T1.`weight_kg` IS NULL)\n  AND T2.`id` = 1\n) AS difference",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 89,
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`account_id`)\n  FROM account AS T1\n  INNER JOIN district AS T2\n  ON T1.`district_id` = T2.`district_id`\n  WHERE T2.`A3` = 'east Bohemia'\n  AND T1.`frequency` = 'POPLATEK PO OBRATU'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1187,
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "predicted_sql": "SELECT DISTINCT T1.`ID`\n  FROM Laboratory AS T1\n  INNER JOIN Examination AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31'\n  AND T2.`Examination Date` IS NOT NULL\n  AND T1.`GPT` > 30\n  AND T1.`ALB` < 4\n  ORDER BY T1.`ID`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 40,
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "predicted_sql": "SELECT T2.`Phone`\n  FROM satscores AS T1\n  INNER JOIN schools AS T2\n  ON T1.`cds` = T2.`CDSCode`\n  WHERE T1.`dname` = 'Fresno Unified'\n  AND T2.`Phone` IS NOT NULL\n  ORDER BY T1.`AvgScrRead` ASC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 424,
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "predicted_sql": "SELECT \n    (COUNT(CASE WHEN `isTextless` = 1 AND `layout` = 'normal' THEN 1 END) * 100.0 / \n    COUNT(CASE WHEN `layout` = 'normal' THEN 1 END)) AS proportion\nFROM cards",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 866,
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "predicted_sql": "SELECT `url`\n  FROM drivers\n  WHERE `driverId` = (\n    SELECT `driverId`\n    FROM lapTimes\n    WHERE `raceId` = 161\n    AND `time` LIKE '1:27%'\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 549,
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "predicted_sql": "SELECT `Body`\n  FROM posts\n  WHERE `Id` = (\n    SELECT `ExcerptPostId`\n    FROM tags\n    WHERE `TagName` = 'bayesian'\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1185,
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "predicted_sql": "SELECT \n  (Nov.`T-CHO` - Dec.`T-CHO`) / Nov.`T-CHO` * 100 AS DecreaseRate\nFROM\n  (SELECT `T-CHO`\n   FROM Laboratory\n   WHERE `ID` IN (\n     SELECT `ID`\n     FROM Patient\n     WHERE `Birthday` = '1959-02-18'\n   )\n   AND `Date` LIKE '1981-11-%') AS Nov,\n  (SELECT `T-CHO`\n   FROM Laboratory\n   WHERE `ID` IN (\n     SELECT `ID`\n     FROM Patient\n     WHERE `Birthday` = '1959-02-18'\n   )\n   AND `Date` LIKE '1981-12-%') AS Dec",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1479,
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "predicted_sql": "SELECT SUBSTR(T2.`Date`, 1, 4) AS year\n  FROM customers AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Currency` = 'CZK'\n  GROUP BY year\n  ORDER BY SUM(T2.`Consumption`) DESC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1110,
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "predicted_sql": "SELECT T1.`buildUpPlayPassingClass`\n  FROM Team_Attributes AS T1\n  INNER JOIN Team AS T2\n  ON T1.`team_api_id` = T2.`team_api_id`\n  WHERE T2.`team_long_name` = 'FC Lorient'\n  AND T1.`date` LIKE '2010-02-22%'\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1339,
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "predicted_sql": "SELECT AVG(`cost`)\n  FROM expense\n  WHERE `link_to_member` = (\n    SELECT `member_id`\n    FROM member\n    WHERE `first_name` = 'Elijah' AND `last_name` = 'Allen'\n  )\n  AND (SUBSTR(`expense_date`, 6, 2) = '09' OR SUBSTR(`expense_date`, 6, 2) = '10')",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 414,
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "predicted_sql": "SELECT DISTINCT `language`\n  FROM set_translations\n  WHERE `setCode` = (\n    SELECT `code`\n    FROM sets\n    WHERE `baseSetSize` = 180\n    AND `block` = 'Ravnica'\n  )\n  AND `language` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 847,
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "predicted_sql": "SELECT T1.`surname`\n  FROM drivers AS T1\n  INNER JOIN qualifying AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T2.`raceId` = 19\n  AND T2.`q2` = (\n    SELECT MIN(`q2`)\n    FROM qualifying\n    WHERE `raceId` = 19\n    AND `q2` IS NOT NULL\n  )\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 371,
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "predicted_sql": "SELECT (\n    (SELECT COUNT(T1.`id`)\n     FROM cards AS T1\n     INNER JOIN foreign_data AS T2\n     ON T1.`uuid` = T2.`uuid`\n     WHERE T1.`isStorySpotlight` = 1\n     AND T2.`language` = 'French') * 100.0 /\n    (SELECT COUNT(`id`)\n     FROM cards\n     WHERE `isStorySpotlight` = 1)\n) AS percentage;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1256,
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`ID`)\n  FROM Laboratory AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T1.`CRP` = '+'\n  AND T2.`Description` IS NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1030,
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "predicted_sql": "SELECT L.`name`\n  FROM `League` AS L\n  INNER JOIN (\n    SELECT M.`league_id`\n    FROM `Match` AS M\n    WHERE M.`season` = '2015/2016'\n    AND M.`home_team_goal` = M.`away_team_goal`\n    GROUP BY M.`league_id`\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n  ) AS T\n  ON L.`id` = T.`league_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 531,
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "predicted_sql": "SELECT `DisplayName`, `Reputation`\n  FROM users\n  WHERE `DisplayName` IN ('Harlan', 'Jarrod Dixon')\n  ORDER BY `Reputation` DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 894,
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "predicted_sql": "SELECT T1.`forename`, T1.`surname`, T3.`name`\n  FROM drivers AS T1\n  INNER JOIN lapTimes AS T2 ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3 ON T2.`raceId` = T3.`raceId`\n  WHERE T2.`milliseconds` = (\n    SELECT MIN(`milliseconds`)\n    FROM lapTimes\n  )",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1371,
    "question": "How many members attended the \"Women's Soccer\" event?",
    "predicted_sql": "SELECT COUNT(DISTINCT T2.`link_to_member`)\n  FROM event AS T1\n  INNER JOIN attendance AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  WHERE T1.`event_name` = \"Women's Soccer\"",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 547,
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "predicted_sql": "SELECT COUNT(*)\n  FROM posts\n  WHERE `OwnerUserId` IN (\n    SELECT `Id`\n    FROM users\n    WHERE `Age` > 65\n  )\n  AND `Score` >= 20",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 11,
    "question": "Please list the codes of the schools with a total enrollment of over 500.",
    "predicted_sql": "SELECT `CDSCode`\n  FROM frpm\n  WHERE (`Enrollment (K-12)` + `Enrollment (Ages 5-17)`) > 500",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1192,
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "predicted_sql": "SELECT DISTINCT P.`ID`\n  FROM Patient AS P\n  INNER JOIN Laboratory AS L\n  ON P.`ID` = L.`ID`\n  WHERE P.`Admission` = '-'\n  AND L.`Date` LIKE '1991-10%'\n  AND L.`T-BIL` < 2.0",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1168,
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "predicted_sql": "SELECT T1.`Date`, (strftime('%Y', T2.`First Date`) - strftime('%Y', T2.`Birthday`)) AS age\n  FROM Laboratory AS T1\n  INNER JOIN Patient AS T2\n  ON T1.`ID` = T2.`ID`\n  WHERE T2.`Diagnosis` LIKE '%SJS%'\n  ORDER BY T2.`Birthday` ASC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1135,
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "predicted_sql": "SELECT `player_api_id`\n  FROM Player_Attributes\n  WHERE `preferred_foot` = 'right'\n  AND `potential` = (\n    SELECT MIN(`potential`)\n    FROM Player_Attributes\n    WHERE `preferred_foot` = 'right'\n  )\n  LIMIT 5",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1145,
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "predicted_sql": "SELECT T2.`name`, COUNT(T1.`id`) AS game_count\n  FROM `Match` AS T1\n  INNER JOIN `League` AS T2\n  ON T1.`league_id` = T2.`id`\n  WHERE T1.`season` = '2015/2016'\n  GROUP BY T2.`name`\n  ORDER BY game_count DESC\n  LIMIT 4",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 634,
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "predicted_sql": "SELECT `DisplayName`, MAX(total_views) AS max_views\n  FROM (\n    SELECT T1.`DisplayName`, SUM(T2.`ViewCount`) AS total_views\n    FROM users AS T1\n    INNER JOIN posts AS T2\n    ON T1.`Id` = T2.`OwnerUserId`\n    WHERE T1.`DisplayName` IN ('Harvey Motulsky', 'Noah Snyder')\n    GROUP BY T1.`DisplayName`\n  )\n  GROUP BY `DisplayName`\n  ORDER BY max_views DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1048,
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "predicted_sql": "SELECT T1.`overall_rating`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`player_name` = 'Gabriel Tamas'\n  AND strftime('%Y', T1.`date`) = '2011'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1042,
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "predicted_sql": "SELECT L.`name`\nFROM `League` AS L\nINNER JOIN (\n    SELECT M.`league_id`, AVG(M.`home_team_goal`) AS avg_home_goals\n    FROM `Match` AS M\n    WHERE M.`season` = '2009/2010'\n    GROUP BY M.`league_id`\n) AS Home ON L.`id` = Home.`league_id`\nINNER JOIN (\n    SELECT M.`league_id`, AVG(M.`away_team_goal`) AS avg_away_goals\n    FROM `Match` AS M\n    WHERE M.`season` = '2009/2010'\n    GROUP BY M.`league_id`\n) AS Away ON L.`id` = Away.`league_id`\nWHERE Home.avg_home_goals > Away.avg_away_goals",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 530,
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "predicted_sql": "SELECT c.name, c.frameVersion\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.artist = 'Allen Williams'\n  AND l.status = 'Banned'\nGROUP BY c.name, c.frameVersion;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1147,
    "question": "Please name one player whose overall strength is the greatest.",
    "predicted_sql": "SELECT T2.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`overall_rating` = (\n    SELECT MAX(`overall_rating`)\n    FROM Player_Attributes\n  )\n  LIMIT 1",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1096,
    "question": "Calculate the average overall rating of Pietro Marino.",
    "predicted_sql": "SELECT AVG(T1.`overall_rating`)\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`player_name` = 'Pietro Marino'\n  AND T1.`overall_rating` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 940,
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`driverId`)\n  FROM results AS T1\n  INNER JOIN (\n    SELECT `driverId`\n    FROM results\n    WHERE `raceId` = (\n      SELECT `raceId`\n      FROM races\n      WHERE `name` = 'Chinese Grand Prix' AND `year` = 2008\n    )\n    AND `time` IS NOT NULL\n  ) AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T1.`raceId` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 412,
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "predicted_sql": "SELECT fd.name AS foreign_name\nFROM foreign_data AS fd\nINNER JOIN cards AS c ON fd.uuid = c.uuid\nWHERE fd.language = 'French'\n  AND c.type LIKE '%Creature%'\n  AND c.layout = 'normal'\n  AND c.borderColor = 'black'\n  AND (c.artist LIKE '%Matthew%Wilson%' OR c.artist LIKE '%Matt%Wilson%');",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1091,
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "predicted_sql": "SELECT COUNT(*) AS match_count\n  FROM Match\n  WHERE `league_id` = (\n    SELECT `id`\n    FROM League\n    WHERE `name` = 'Belgium Jupiler League'\n  )\n  AND SUBSTR(`date`, 1, 7) = '2009-04'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 962,
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "predicted_sql": "SELECT \n  (COUNT(DISTINCT CASE WHEN T1.`dob` < '1985-01-01' AND T2.`laps` > 50 THEN T1.`driverId` END) * 100.0 / \n  COUNT(DISTINCT T1.`driverId`)) AS percentage\nFROM drivers AS T1\nINNER JOIN results AS T2\n  ON T1.`driverId` = T2.`driverId`\nINNER JOIN races AS T3\n  ON T2.`raceId` = T3.`raceId`\nWHERE T3.`year` BETWEEN 2000 AND 2005",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1410,
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "predicted_sql": "SELECT T1.`first_name`, T1.`last_name`, SUM(T2.`cost`) AS total_cost\n  FROM member AS T1\n  INNER JOIN expense AS T2\n  ON T1.`member_id` = T2.`link_to_member`\n  WHERE T1.`member_id` = 'rec4BLdZHS2Blfp4v'\n  GROUP BY T1.`first_name`, T1.`last_name`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 273,
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "predicted_sql": "SELECT \n  (COUNT(CASE WHEN T1.`element` = 'cl' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T2.`label` = '+'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1515,
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "predicted_sql": "SELECT T1.`Segment`\n  FROM customers AS T1\n  INNER JOIN transactions_1k AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T2.`Date` = '2012-08-23' AND T2.`Time` = '21:20:00'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 782,
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`\n  INNER JOIN colour AS T3\n  ON T1.`hair_colour_id` = T3.`id`\n  WHERE T2.`colour` = 'Black'\n  AND T3.`colour` = 'Black'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1350,
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "predicted_sql": "SELECT `status`\n  FROM event\n  WHERE `event_id` = (\n    SELECT `link_to_event`\n    FROM budget\n    WHERE `budget_id` = (\n      SELECT `link_to_budget`\n      FROM expense\n      WHERE `expense_description` = 'Post Cards, Posters'\n      AND `expense_date` = '2019-08-20'\n    )\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 954,
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "predicted_sql": "SELECT \n  (COUNT(DISTINCT CASE WHEN T2.`time` IS NOT NULL THEN T1.`driverId` END) * 100.0 / \n  COUNT(DISTINCT T1.`driverId`)) AS completion_percentage\n  FROM drivers AS T1\n  INNER JOIN results AS T2 ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3 ON T2.`raceId` = T3.`raceId`\n  WHERE T1.`nationality` = 'Japanese'\n  AND T3.`year` BETWEEN 2007 AND 2009",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1114,
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "predicted_sql": "SELECT AVG(T1.`overall_rating`)\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T2.`player_name` = 'Marko Arnautovic'\n  AND SUBSTR(T1.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1028,
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "predicted_sql": "SELECT T1.`team_long_name`\n  FROM Team AS T1\n  INNER JOIN (\n    SELECT `away_team_api_id`, COUNT(*) as wins\n    FROM Match\n    WHERE `league_id` = (\n      SELECT `id`\n      FROM League\n      WHERE `name` = 'Scotland Premier League'\n    )\n    AND `season` = '2009/2010'\n    AND `away_team_goal` > `home_team_goal`\n    GROUP BY `away_team_api_id`\n    ORDER BY wins DESC\n    LIMIT 1\n  ) AS T2\n  ON T1.`team_api_id` = T2.`away_team_api_id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 915,
    "question": "Which country is the oldest driver from?",
    "predicted_sql": "SELECT `nationality`\n  FROM drivers\n  WHERE `dob` = (\n    SELECT `dob`\n    FROM drivers\n    WHERE `dob` IS NOT NULL\n    ORDER BY `dob` ASC\n    LIMIT 1\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1014,
    "question": "Please list the lap records for the circuits in Italy.",
    "predicted_sql": "SELECT T3.`name` AS circuit_name, MIN(T1.`time`) AS fastest_lap_time\n  FROM lapTimes AS T1\n  INNER JOIN races AS T2\n  ON T1.`raceId` = T2.`raceId`\n  INNER JOIN circuits AS T3\n  ON T2.`circuitId` = T3.`circuitId`\n  WHERE T3.`country` = 'Italy'\n  GROUP BY T3.`name`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 963,
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`driverId`)\n  FROM drivers AS T1\n  INNER JOIN lapTimes AS T2\n  ON T1.`driverId` = T2.`driverId`\n  WHERE T1.`nationality` = 'French'\n  AND T2.`milliseconds` < 120000",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 726,
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "predicted_sql": "SELECT T1.`superhero_name`, T1.`height_cm`\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2\n  ON T1.`publisher_id` = T2.`id`\n  WHERE T2.`publisher_name` = 'Marvel Comics'\n  ORDER BY T1.`height_cm` DESC",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 77,
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "predicted_sql": "SELECT T1.`School`, \n       (T2.`FRPM Count (Ages 5-17)` / T2.`Enrollment (Ages 5-17)`) * 100 AS `Percent Eligible FRPM`\nFROM schools AS T1\nINNER JOIN frpm AS T2\nON T1.`CDSCode` = T2.`CDSCode`\nWHERE T1.`County` = 'Los Angeles'\nAND T1.`GSserved` = 'K-9'\nAND T1.`School` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1482,
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "predicted_sql": "WITH consumption_2012 AS (\n  SELECT T1.`Segment`, SUM(T2.`Consumption`) AS consumption_2012\n  FROM customers AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Currency` = 'EUR'\n  AND T2.`Date` LIKE '2012%'\n  GROUP BY T1.`Segment`\n),\nconsumption_2013 AS (\n  SELECT T1.`Segment`, SUM(T2.`Consumption`) AS consumption_2013\n  FROM customers AS T1\n  INNER JOIN yearmonth AS T2\n  ON T1.`CustomerID` = T2.`CustomerID`\n  WHERE T1.`Currency` = 'EUR'\n  AND T2.`Date` LIKE '2013%'\n  GROUP BY T1.`Segment`\n),\npercentage_increase AS (\n  SELECT \n    c2012.`Segment`,\n    ((c2013.`consumption_2013` - c2012.`consumption_2012`) / c2013.`consumption_2013`) * 100 AS percentage_increase\n  FROM consumption_2012 AS c2012\n  INNER JOIN consumption_2013 AS c2013\n  ON c2012.`Segment` = c2013.`Segment`\n)\nSELECT * FROM (\n  SELECT \n    'Highest Increase' AS result_type,\n    `Segment`,\n    `percentage_increase`\n  FROM percentage_increase\n  ORDER BY `percentage_increase` DESC\n  LIMIT 1\n) AS highest\n\nUNION ALL\n\nSELECT * FROM (\n  SELECT \n    'Lowest Increase' AS result_type,\n    `Segment`,\n    `percentage_increase`\n  FROM percentage_increase\n  ORDER BY `percentage_increase` ASC\n  LIMIT 1\n) AS lowest;",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 483,
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "predicted_sql": "SELECT T3.`text`\n  FROM cards AS T1\n  INNER JOIN sets AS T2 ON T1.`setCode` = T2.`code`\n  INNER JOIN rulings AS T3 ON T1.`uuid` = T3.`uuid`\n  INNER JOIN foreign_data AS T4 ON T1.`uuid` = T4.`uuid`\n  WHERE T2.`name` = 'Coldsnap'\n  AND T4.`language` = 'Italian'\n  AND T3.`text` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 800,
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "predicted_sql": "SELECT (COUNT(CASE WHEN T2.`colour` = 'Blue' THEN 1 END) * 100.0 / COUNT(*)) AS percentage\n  FROM superhero AS T1\n  LEFT JOIN colour AS T2\n  ON T1.`eye_colour_id` = T2.`id`",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 592,
    "question": "How many users are awarded with more than 5 badges?",
    "predicted_sql": "SELECT COUNT(DISTINCT `UserId`) AS user_count\n  FROM badges\n  GROUP BY `UserId`\n  HAVING COUNT(`Name`) > 5",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 24,
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "predicted_sql": "SELECT T1.`School Name`\n  FROM frpm AS T1\n  INNER JOIN satscores AS T2\n  ON T1.`CDSCode` = T2.`cds`\n  WHERE CAST(T1.`Free Meal Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` > 0.1\n  AND T2.`NumGE1500` > 0\n  AND T2.`sname` IS NOT NULL",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 730,
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "predicted_sql": "SELECT T1.`superhero_name`\n  FROM superhero AS T1\n  INNER JOIN publisher AS T2 ON T1.`publisher_id` = T2.`id`\n  INNER JOIN hero_power AS T3 ON T1.`id` = T3.`hero_id`\n  INNER JOIN superpower AS T4 ON T3.`power_id` = T4.`id`\n  WHERE T2.`publisher_name` = 'Marvel Comics'\n  AND T4.`power_name` = 'Super Strength'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 912,
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "predicted_sql": "SELECT `circuitRef`\n  FROM circuits\n  WHERE `name` = 'Marina Bay Street Circuit'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1115,
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "predicted_sql": "SELECT ((LD.`overall_rating` - JB.`overall_rating`) / LD.`overall_rating`) * 100 AS percentage_higher\n  FROM \n    (SELECT T1.`overall_rating`\n     FROM Player_Attributes AS T1\n     INNER JOIN Player AS T2\n     ON T1.`player_api_id` = T2.`player_api_id`\n     WHERE T2.`player_name` = 'Landon Donovan'\n     AND T1.`date` = '2013-07-12 00:00:00') AS LD,\n    (SELECT T1.`overall_rating`\n     FROM Player_Attributes AS T1\n     INNER JOIN Player AS T2\n     ON T1.`player_api_id` = T2.`player_api_id`\n     WHERE T2.`player_name` = 'Jordan Bowery'\n     AND T1.`date` = '2013-07-12 00:00:00') AS JB",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 409,
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`id`)\n  FROM cards AS T1\n  INNER JOIN legalities AS T2 ON T1.`uuid` = T2.`uuid`\n  INNER JOIN rulings AS T3 ON T1.`uuid` = T3.`uuid`\n  WHERE T2.`format` = 'premodern'\n  AND T3.`text` = 'This is a triggered mana ability.'\n  AND T1.`side` IS NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1392,
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "predicted_sql": "SELECT `source`, SUM(`amount`) AS total_amount\n  FROM income\n  WHERE `date_received` BETWEEN '2019-09-01' AND '2019-09-30'\n  GROUP BY `source`\n  ORDER BY total_amount DESC\n  LIMIT 1",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 117,
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "predicted_sql": "SELECT (\n  (SELECT SUM(`amount`) FROM loan WHERE `status` = 'A') * 100.0 / \n  (SELECT SUM(`amount`) FROM loan)\n) AS percentage_paid_without_issue",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 933,
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "predicted_sql": "SELECT T1.`positionOrder`\n  FROM results AS T1\n  INNER JOIN drivers AS T2 ON T1.`driverId` = T2.`driverId`\n  INNER JOIN races AS T3 ON T1.`raceId` = T3.`raceId`\n  WHERE T2.`forename` = 'Lewis' AND T2.`surname` = 'Hamilton'\n  AND T3.`year` = 2008 AND T3.`name` = 'Chinese Grand Prix'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1179,
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "predicted_sql": "SELECT `aCL IgM`\n  FROM Examination\n  WHERE `ID` = (\n    SELECT `ID`\n    FROM Patient\n    WHERE `Diagnosis` = 'SLE'\n    AND `Description` = '1994-02-19'\n  )\n  AND `Examination Date` = '1993-11-12'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 230,
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "predicted_sql": "SELECT T1.`element`, T2.`label`\n  FROM atom AS T1\n  INNER JOIN molecule AS T2\n  ON T1.`molecule_id` = T2.`molecule_id`\n  WHERE T1.`molecule_id` = 'TR060'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 206,
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "predicted_sql": "SELECT DISTINCT T1.`element`\n  FROM atom AS T1\n  INNER JOIN connected AS T2\n  ON T1.`atom_id` = T2.`atom_id` OR T1.`atom_id` = T2.`atom_id2`\n  WHERE T2.`bond_id` = 'TR004_8_9'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 672,
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "predicted_sql": "SELECT COUNT(DISTINCT `OwnerUserId`)\n  FROM posts\n  WHERE `OwnerUserId` IN (\n    SELECT `Id`\n    FROM users\n    WHERE `Location` = 'United Kingdom'\n  )\n  AND `FavoriteCount` >= 4",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1435,
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "predicted_sql": "SELECT `event_name`\n  FROM event\n  WHERE `type` = 'Game'\n  AND `status` = 'Closed'\n  AND `event_date` BETWEEN '2019-03-15' AND '2020-03-20'",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 910,
    "question": "What's the location coordinates of Silverstone Circuit?",
    "predicted_sql": "SELECT `lat`, `lng`\n  FROM circuits\n  WHERE `name` = 'Silverstone Circuit'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 578,
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "predicted_sql": "SELECT T2.`Reputation`\n  FROM posts AS T1\n  INNER JOIN users AS T2\n  ON T1.`OwnerUserId` = T2.`Id`\n  WHERE T1.`Title` = 'Understanding what Dassault iSight is doing?'",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1427,
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "predicted_sql": "SELECT T2.`category`\n  FROM event AS T1\n  INNER JOIN budget AS T2\n  ON T1.`event_id` = T2.`link_to_event`\n  WHERE T1.`location` = 'MU 215'\n  AND T1.`type` = 'Guest Speaker'\n  AND T2.`spent` = 0",
    "ex": 0,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1378,
    "question": "What is the highest amount of budget spend for an event?",
    "predicted_sql": "SELECT MAX(`spent`)\n  FROM budget",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1102,
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "predicted_sql": "SELECT T2.`player_name`\n  FROM Player_Attributes AS T1\n  INNER JOIN Player AS T2\n  ON T1.`player_api_id` = T2.`player_api_id`\n  WHERE T1.`overall_rating` = 77\n  AND T1.`date` LIKE '2016-06-23%'\n  ORDER BY T2.`birthday` ASC\n  LIMIT 1",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 1357,
    "question": "State the date Connor Hilton paid his/her dues.",
    "predicted_sql": "SELECT T1.`date_received`\n  FROM income AS T1\n  INNER JOIN member AS T2\n  ON T1.`link_to_member` = T2.`member_id`\n  WHERE T2.`first_name` = 'Connor' AND T2.`last_name` = 'Hilton'\n  AND T1.`source` = 'Dues'",
    "ex": 1,
    "usefulness": 1.0,
    "eval_path": "ETM"
  },
  {
    "question_id": 472,
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.`code`)\n  FROM sets AS T1\n  INNER JOIN set_translations AS T2\n  ON T1.`code` = T2.`setCode`\n  WHERE T1.`block` = 'Ice Age'\n  AND T2.`language` = 'Italian'\n  AND T2.`translation` IS NOT NULL",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  },
  {
    "question_id": 1116,
    "question": "List down most tallest players' name.",
    "predicted_sql": "SELECT `player_name`\n  FROM Player\n  WHERE `height` = (\n    SELECT MAX(`height`)\n    FROM Player\n  )",
    "ex": 1,
    "usefulness": 0.0,
    "eval_path": "Exception"
  }
]