[
  {
    "question_id": 952,
    "db_id": "formula_1",
    "question": "Which constructors have been ranked 1?",
    "predicted_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.position = 1",
    "gold_sql": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
    "label": false,
    "reason_1": "Should use DISTINCT to return a unique list",
    "reason_2": "The position in predsql refers to the competition position rather than the ranking",
    "evidence": ""
  },
  {
    "question_id": 898,
    "db_id": "formula_1",
    "question": "How old is the youngest Japanese driver? What is his name?",
    "predicted_sql": "SELECT drivers.forename, drivers.surname, CAST(STRFTIME('%Y', CURRENT_TIMESTAMP) AS INTEGER) - CAST(STRFTIME('%Y', drivers.dob) AS INTEGER) AS age FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob DESC LIMIT 1",
    "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);"
  },
  {
    "question_id": 1249,
    "db_id": "thrombosis_prediction",
    "question": "Please list the disease names of the patients that have a proteinuria level higher than normal.",
    "predicted_sql": "SELECT DISTINCT patient.diagnosis FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.\"U-PRO\" >= 30",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30",
    "label": true,
    "reason_1": "",
    "reason_2": "GOLD FALSE: missing DISTINCT keyword",
    "evidence": "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;"
  },
  {
    "question_id": 1241,
    "db_id": "thrombosis_prediction",
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "predicted_sql": "SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) FROM Laboratory",
    "gold_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "label": false,
    "reason_1": "wrong condition, evidence require >= and <=",
    "reason_2": "GOLD FALSE",
    "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;"
  },
  {
    "question_id": 970,
    "db_id": "formula_1",
    "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
    "predicted_sql": "SELECT d.forename, d.surname FROM drivers d JOIN laptimes l ON d.driverId = l.driverId WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1990-12-31' ORDER BY l.time ASC LIMIT 3",
    "gold_sql": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
    "label": false,
    "reason_1": "GOLD FALSE. gold sql uses the wrong table, laptime instend of pitStops, and is lack of ASC.",
    "reason_2": "GOLD FALSE",
    "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);"
  },
  {
    "question_id": 138,
    "db_id": "financial",
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "predicted_sql": "SELECT COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY a15 DESC LIMIT 1 OFFSET 1) AND gender = 'M'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995"
  },
  {
    "question_id": 1391,
    "db_id": "student_club",
    "question": "What is the ratio between students majored in finance and physics?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.major_name = 'Physics' THEN 1 ELSE 0 END) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major",
    "gold_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "label": true,
    "reason_1": "GOLD FALSE",
    "reason_2": "",
    "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))"
  },
  {
    "question_id": 174,
    "db_id": "financial",
    "question": "What year was account owner number 130 born?",
    "predicted_sql": "SELECT strftime('%Y', T1.birth_date) FROM client AS T1 WHERE T1.client_id = 130",
    "gold_sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
    "label": false,
    "reason_1": "wrong column, account id is required.",
    "reason_2": "GOLD FALSE",
    "evidence": ""
  },
  {
    "question_id": 399,
    "db_id": "card_games",
    "question": "Lists all types of cards available in arena.",
    "predicted_sql": "SELECT subtypes, supertypes FROM cards WHERE availability = 'arena'",
    "gold_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'"
  },
  {
    "question_id": 1492,
    "db_id": "debit_card_specializing",
    "question": "What percentage of KAM customers pay in euros?",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE Segment = 'KAM'",
    "gold_sql": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%."
  },
  {
    "question_id": 1118,
    "db_id": "european_football_2",
    "question": "List down the name of players who are 35 years old and above.",
    "predicted_sql": "SELECT T1.player_name FROM Player AS T1 WHERE (strftime('%Y', 'now') - strftime('%Y', T1.birthday)) >= 35",
    "gold_sql": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35",
    "label": false,
    "reason_1": "The predicted SQL uses year subtraction and can overestimate ages",
    "reason_2": "GOLD FALSE",
    "evidence": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34"
  },
  {
    "question_id": 505,
    "db_id": "card_games",
    "question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
    "predicted_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'",
    "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'"
  },
  {
    "question_id": 913,
    "db_id": "formula_1",
    "question": "In which country can I find the circuit with the highest altitude?",
    "predicted_sql": "SELECT circuits.country, circuits.name FROM circuits ORDER BY circuits.alt DESC LIMIT 1",
    "gold_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "highest altitude refers to max(alt)"
  },
  {
    "question_id": 1480,
    "db_id": "debit_card_specializing",
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "predicted_sql": "SELECT T2.Date FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption DESC LIMIT 1",
    "gold_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month."
  },
  {
    "question_id": 1087,
    "db_id": "european_football_2",
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "predicted_sql": "SELECT COUNT(*) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 AND pa.volleys > 70",
    "gold_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "label": false,
    "reason_1": "Missing DISTINCT keyword",
    "reason_2": "DISTINCT needs to be used to remove duplicate data.",
    "evidence": "height > 180; volley score refers to volleys; volleys > 70;"
  },
  {
    "question_id": 1285,
    "db_id": "thrombosis_prediction",
    "question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "predicted_sql": "SELECT MAX(`Date`) AS latest_date FROM Laboratory WHERE ID IN ( SELECT ID FROM Patient ORDER BY `First Date` DESC LIMIT 1 ) AND LDH >= 500",
    "gold_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
    "label": false,
    "reason_1": "Predicted SQL first identifies the latest patient and then looks for anomalies, but the latest patient is not necessarily abnormal",
    "reason_2": "Error MAX function",
    "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;"
  },
  {
    "question_id": 1122,
    "db_id": "european_football_2",
    "question": "State the name of the most strongest player.",
    "predicted_sql": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 10;",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "label": false,
    "reason_1": "Should use MAX(overall_rating) rather than ORDER BY overall_rating DESC LIMIT 10; Should use DISTINCT to remove duplicates",
    "reason_2": "The strongest player should only return one result, which should be limit 1.",
    "evidence": "strongest players refers to player has MAX(overall_rating)"
  },
  {
    "question_id": 167,
    "db_id": "financial",
    "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "predicted_sql": "SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'",
    "gold_sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "After 1996 means date > = '1997-01-01"
  },
  {
    "question_id": 507,
    "db_id": "card_games",
    "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.uuid) AS percentage FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Portuguese (Brazil)'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
    "label": false,
    "reason_1": "wrong condition",
    "reason_2": "do not operate on sets",
    "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100"
  },
  {
    "question_id": 20,
    "db_id": "california_schools",
    "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "predicted_sql": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'",
    "gold_sql": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": ""
  },
  {
    "question_id": 916,
    "db_id": "formula_1",
    "question": "Please list the surnames of all the Italian drivers.",
    "predicted_sql": "SELECT DISTINCT drivers.surname FROM drivers WHERE drivers.nationality = 'Italian'",
    "gold_sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "Italian refers to nationality = 'italian'"
  },
  {
    "question_id": 1034,
    "db_id": "european_football_2",
    "question": "List the players' api id who had the highest above average overall ratings in 2010.",
    "predicted_sql": "SELECT player_api_id FROM Player_Attributes WHERE date LIKE '2010%' AND overall_rating > ( SELECT AVG(overall_rating) FROM Player_Attributes WHERE date LIKE '2010%' )",
    "gold_sql": "SELECT p.player_api_id FROM Player_Attributes AS p WHERE SUBSTR(p.date, 1, 4) = '2010' AND p.overall_rating = (SELECT MAX(pa.overall_rating) FROM Player_Attributes AS pa WHERE SUBSTR(pa.date, 1, 4) = '2010')",
    "label": false,
    "reason_1": "Wrong filter condition, should use max(overall_rating) as provided in the evidence",
    "reason_2": "do not use max",
    "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';"
  },
  {
    "question_id": 927,
    "db_id": "formula_1",
    "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": ""
  },
  {
    "question_id": 170,
    "db_id": "financial",
    "question": "How many credit card withdrawals were recorded after 1995?",
    "predicted_sql": "SELECT COUNT(*) FROM trans WHERE trans.operation = 'VYBER KARTOU' AND trans.date > '1995-01-01';",
    "gold_sql": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
    "label": false,
    "reason_1": "wrong date euqation",
    "reason_2": "GOLD FALSE",
    "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals"
  },
  {
    "question_id": 999,
    "db_id": "formula_1",
    "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "predicted_sql": "SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId ORDER BY T1.fastestLapTime ASC LIMIT 1",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "label": false,
    "reason_1": "dataset typo",
    "reason_2": "Missing NOT NULL",
    "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n"
  },
  {
    "question_id": 1126,
    "db_id": "european_football_2",
    "question": "State the name of players who came from Belgium.",
    "predicted_sql": "SELECT DISTINCT p.player_name FROM Player p JOIN Match m ON p.player_api_id = m.home_player_1 OR p.player_api_id = m.home_player_2 OR p.player_api_id = m.home_player_3 OR p.player_api_id = m.home_player_4 OR p.player_api_id = m.home_player_5 OR p.player_api_id = m.home_player_6 OR p.player_api_id = m.home_player_7 OR p.player_api_id = m.home_player_8 OR p.player_api_id = m.home_player_9 OR p.player_api_id = m.home_player_10 OR p.player_api_id = m.home_player_11 OR p.player_api_id = m.away_player_1 OR p.player_api_id = m.away_player_2 OR p.player_api_id = m.away_player_3 OR p.player_api_id = m.away_player_4 OR p.player_api_id = m.away_player_5 OR p.player_api_id = m.away_player_6 OR p.player_api_id = m.away_player_7 OR p.player_api_id = m.away_player_8 OR p.player_api_id = m.away_player_9 OR p.player_api_id = m.away_player_10 OR p.player_api_id = m.away_player_11",
    "gold_sql": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
    "label": false,
    "reason_1": "Error WHERE condition",
    "reason_2": "The names are different.",
    "evidence": "name of players refers to player_name; Belgium is name of country"
  },
  {
    "question_id": 275,
    "db_id": "toxicology",
    "question": "Give me the molecule ID of the double bond type.",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_type = '='",
    "gold_sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "double bond refers to bond_type = ' = ';"
  },
  {
    "question_id": 2,
    "db_id": "california_schools",
    "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "predicted_sql": "SELECT schools.Zip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Fresno County Office of Education' AND frpm.`Charter School (Y/N)` = 1",
    "gold_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
    "label": false,
    "reason_1": "\"Fresno County Office of Education\" means `District Name` not County. Maybe GOLD FALSE.",
    "reason_2": "WHERE condition",
    "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm"
  },
  {
    "question_id": 340,
    "db_id": "card_games",
    "question": "Which are the cards that have incredibly powerful foils.",
    "predicted_sql": "SELECT cards.name FROM cards WHERE cards.cardKingdomId IS NOT NULL AND cards.cardKingdomFoilId = cards.cardKingdomId;",
    "gold_sql": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL",
    "label": false,
    "reason_1": "In Predicted SQL, cardKingdomFoilId and cardKingdomId must be equal, but they just need not be empty",
    "reason_2": "Wrong filter condition\nAmbiguous question (output format)",
    "evidence": "incredibly poweful foils refers to cardKingdomFoilId is not null AND cardKingdomId is not null"
  },
  {
    "question_id": 425,
    "db_id": "card_games",
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
    "predicted_sql": "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'",
    "gold_sql": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
    "label": true,
    "reason_1": "",
    "reason_2": "",
    "evidence": "don't have multiple faces on a single card side is null"
  }
]