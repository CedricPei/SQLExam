[
  {
    "question_id": 500,
    "db_id": "card_games",
    "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "predicted_sql": "SELECT DISTINCT st.translation FROM cards AS c INNER JOIN set_translations AS st ON c.setcode = st.setcode WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese'",
    "gold_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "label": true,
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1440,
    "db_id": "student_club",
    "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "predicted_sql": "SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'",
    "gold_sql": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
    "label": true,
    "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1261,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal RF don't have thrombosis?",
    "predicted_sql": "SELECT COUNT(*) FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0",
    "label": false,
    "evidence": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';",
    "reason_1": "no distinct count",
    "reason_2": "should use distinct"
  },
  {
    "question_id": 67,
    "db_id": "california_schools",
    "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
    "predicted_sql": "SELECT COUNT(*)  FROM schools  WHERE schools.City = 'San Francisco'  AND schools.DOCType = 'Community College District'  AND strftime('%Y', schools.ClosedDate) = '1989'",
    "gold_sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
    "label": true,
    "evidence": "",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 397,
    "db_id": "card_games",
    "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?",
    "predicted_sql": "SELECT manacost FROM cards WHERE layout = 'normal' AND frameversion = '2003' AND bordercolor = 'black' AND availability LIKE '%mtgo,paper%'",
    "gold_sql": "SELECT manaCost FROM cards WHERE availability = 'mtgo,paper' AND borderColor = 'black' AND frameVersion = 2003 AND layout = 'normal'",
    "label": true,
    "evidence": "available in paper and mtgo refers to availability = 'mtgo,paper'; frameVersion = 2003;borderColor = 'black'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 853,
    "db_id": "formula_1",
    "question": "Please give the names of the races held on the circuits in Spain.",
    "predicted_sql": "SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain'",
    "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "label": true,
    "evidence": "Spain is a name of country;",
    "reason_1": "",
    "reason_2": "no distinc"
  },
  {
    "question_id": 1133,
    "db_id": "european_football_2",
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "predicted_sql": "SELECT COUNT(*) FROM Player WHERE player_name LIKE 'Aaron%' AND birthday > '1990-12-31 00:00:00'",
    "gold_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "label": false,
    "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
    "reason_1": "wrong condition.",
    "reason_2": "1990 not 1990-12-31"
  },
  {
    "question_id": 597,
    "db_id": "codebase_community",
    "question": "How many users from India have the teacher badges?",
    "predicted_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u INNER JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher' AND u.Location = 'India'",
    "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "label": true,
    "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 916,
    "db_id": "formula_1",
    "question": "Please list the surnames of all the Italian drivers.",
    "predicted_sql": "SELECT DISTINCT drivers.surname FROM drivers WHERE drivers.nationality = 'Italian'",
    "gold_sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "label": true,
    "evidence": "Italian refers to nationality = 'italian'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 801,
    "db_id": "superhero",
    "question": "Find the ratio between male superheroes and female superheroes.",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN superhero.gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) as ratio FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "label": true,
    "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 50,
    "db_id": "california_schools",
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "predicted_sql": "SELECT T2.Street, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 5, 1",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "label": false,
    "evidence": "Postal street and mailing street are synonyms.",
    "reason_1": "offset 6",
    "reason_2": "Should use LIMIT 6, 1"
  },
  {
    "question_id": 522,
    "db_id": "card_games",
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "predicted_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
    "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "label": true,
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 751,
    "db_id": "superhero",
    "question": "List down at least five superpowers of male superheroes.",
    "predicted_sql": "SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T2.gender = 'Male' LIMIT 5",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "label": true,
    "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1129,
    "db_id": "european_football_2",
    "question": "List down the long name for slow speed class team.",
    "predicted_sql": "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Slow';",
    "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
    "label": true,
    "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name",
    "reason_1": "",
    "reason_2": "no distinct"
  },
  {
    "question_id": 1509,
    "db_id": "debit_card_specializing",
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "predicted_sql": "SELECT COUNT(*) FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "label": true,
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 306,
    "db_id": "toxicology",
    "question": "Which molecules have triple bonds and list all the elements they contain.",
    "predicted_sql": "SELECT atom.element, atom.molecule_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' GROUP BY atom.molecule_id, atom.element",
    "gold_sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "label": false,
    "evidence": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "reason_1": "Only selected the atoms in the triple bonds instead of all the elements in the molecule",
    "reason_2": "participate vs include"
  },
  {
    "question_id": 1160,
    "db_id": "thrombosis_prediction",
    "question": "What is the percentage of female patient had total protein not within the normal range?",
    "predicted_sql": "SELECT CAST(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Patient.SEX = 'F') AS REAL) as percentage FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.5);",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "label": false,
    "evidence": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100",
    "reason_1": "one patient may have different records",
    "reason_2": "Predicted SQL miss DISTINCT in the count function. GOLD FALSE: COUNT(*) is the total number of female patient lab records, but we should use the total number of female patients as the denominator"
  },
  {
    "question_id": 1179,
    "db_id": "thrombosis_prediction",
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "predicted_sql": "SELECT examination.\"aCL IgM\" FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.\"Examination Date\" = '1993-11-12'",
    "gold_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "label": false,
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
    "reason_1": "Predicted SQL does not use the filtering condition Diagnosis = 'SLE'",
    "reason_2": "Missing SLE condition"
  },
  {
    "question_id": 1148,
    "db_id": "european_football_2",
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "predicted_sql": "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM Player WHERE height < 180) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "label": false,
    "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
    "reason_1": "Predicted SQL: Missing DISTINCT keyword. GOLD FALSE: Missing DISTINCT keyword",
    "reason_2": "wrong"
  },
  {
    "question_id": 507,
    "db_id": "card_games",
    "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.uuid) AS percentage FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Portuguese (Brazil)'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
    "label": false,
    "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100",
    "reason_1": "Pred operates on cards instead of sets",
    "reason_2": "wrong granularity"
  },
  {
    "question_id": 1433,
    "db_id": "student_club",
    "question": "Which countries have zip codes with post office boxes?",
    "predicted_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box'",
    "gold_sql": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL",
    "label": true,
    "evidence": "zip codes that have post office boxes refers to type = 'PO Box'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1271,
    "db_id": "thrombosis_prediction",
    "question": "How many patients with a normal anti-SSA came to the hospital before 2000?",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('0', '+') AND STRFTIME('%Y', T1.`First Date`) < '2000'",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
    "label": false,
    "evidence": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones",
    "reason_1": "wrong condition, negative 0 +",
    "reason_2": "do not use negative"
  },
  {
    "question_id": 1267,
    "db_id": "thrombosis_prediction",
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 1",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "label": false,
    "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
    "reason_1": "Predicted SQL used the wrong filtering condition. T1.Thrombosis = 1 should be T1.Thrombosis = 0.",
    "reason_2": "Error WHERE condition"
  },
  {
    "question_id": 552,
    "db_id": "codebase_community",
    "question": "Please list the names of the badges obtained by csgillespie.",
    "predicted_sql": "SELECT DISTINCT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie'",
    "gold_sql": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "label": true,
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1359,
    "db_id": "student_club",
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "predicted_sql": "SELECT SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) AS budget_ratio FROM event AS e INNER JOIN budget AS b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "label": false,
    "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
    "reason_1": "miss condition \"meeting\"",
    "reason_2": "Missing WHERE condition"
  },
  {
    "question_id": 72,
    "db_id": "california_schools",
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "predicted_sql": "SELECT SUM(frpm.\"Enrollment (Ages 5-17)\") FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"Academic Year\" = '2014-2015' AND schools.city = 'Fremont' AND schools.edopscode = 'SSS'",
    "gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "label": true,
    "evidence": "State Special School means EdOpsCode = 'SSS'",
    "reason_1": "",
    "reason_2": "GOLD FALSE: Wrong return format, should return total number"
  },
  {
    "question_id": 1,
    "db_id": "california_schools",
    "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "predicted_sql": "SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS EligibleFreeRate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOCType = 'Continuation School' ORDER BY EligibleFreeRate ASC LIMIT 3",
    "gold_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
    "label": false,
    "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "reason_1": "schools.SOCType wrong column",
    "reason_2": "Should use school.EdOpsCode='CON' or frpm.Educational Option Type = 'Continuation School' as the filter condition"
  },
  {
    "question_id": 1244,
    "db_id": "thrombosis_prediction",
    "question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
    "predicted_sql": "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE STRFTIME('%Y', patient.\"First Date\") > '1992' AND laboratory.pt < 14",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14",
    "label": true,
    "evidence": "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 868,
    "db_id": "formula_1",
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "predicted_sql": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "label": true,
    "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 213,
    "db_id": "toxicology",
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "predicted_sql": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20'",
    "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "label": false,
    "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
    "reason_1": "Should consider both directions",
    "reason_2": "Pred do not consider another direction"
  },
  {
    "question_id": 1285,
    "db_id": "thrombosis_prediction",
    "question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "predicted_sql": "SELECT MAX(`Date`) AS latest_date FROM Laboratory WHERE ID IN ( SELECT ID FROM Patient ORDER BY `First Date` DESC LIMIT 1 ) AND LDH >= 500",
    "gold_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
    "label": false,
    "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;",
    "reason_1": "Predicted SQL first identifies the latest patient and then looks for anomalies, but the latest patient is not necessarily abnormal",
    "reason_2": "Error MAX function"
  },
  {
    "question_id": 116,
    "db_id": "financial",
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "predicted_sql": "SELECT (t2.balance - t1.balance) / t1.balance * 100 AS increase_rate FROM trans t1 JOIN trans t2 ON t1.account_id = t2.account_id JOIN loan l ON t1.account_id = l.account_id JOIN client c ON l.account_id = c.client_id WHERE l.`date` = '1993-07-05' AND t1.`date` = '1993-03-22' AND t2.`date` = '1998-12-27' ORDER BY l.`date` LIMIT 1",
    "gold_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "label": false,
    "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
    "reason_1": "wrong aggrestion",
    "reason_2": "account_id ≠ client_id"
  },
  {
    "question_id": 1399,
    "db_id": "student_club",
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "predicted_sql": "SELECT COUNT(T1.link_to_member) > 0 FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
    "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "label": true,
    "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 452,
    "db_id": "card_games",
    "question": "Please list the names of the cards that have a text box.",
    "predicted_sql": "SELECT name FROM cards WHERE isTextless = 0",
    "gold_sql": "SELECT DISTINCT name FROM cards WHERE isTextless = 0",
    "label": true,
    "evidence": "have a text box refers to isTextless = 0",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1367,
    "db_id": "student_club",
    "question": "Which college do most of the members go to?",
    "predicted_sql": "SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.college ORDER BY COUNT(T2.member_id) DESC LIMIT 1",
    "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
    "label": true,
    "evidence": "college most members go refers to MAX(COUNT(major.college))",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 218,
    "db_id": "toxicology",
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "predicted_sql": "SELECT (100 - (CAST(COUNT(DISTINCT CASE WHEN T2.element = 'f' THEN T1.molecule_id END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id))) AS percentage FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "label": true,
    "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
    "reason_1": "",
    "reason_2": "GOLD FALSE"
  },
  {
    "question_id": 418,
    "db_id": "card_games",
    "question": "What kind of printing is on the card that Daren Bader created?",
    "predicted_sql": "SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader';",
    "gold_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "label": true,
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 357,
    "db_id": "card_games",
    "question": "What type of promotion is of card 'Duress'?",
    "predicted_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress'",
    "gold_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "label": true,
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 40,
    "db_id": "california_schools",
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "predicted_sql": "SELECT t2.Phone FROM satscores AS t1 INNER JOIN schools AS t2 ON t1.dname = t2.District AND t1.sname = t2.School WHERE t1.dname = 'Fresno Unified' ORDER BY t1.AvgScrRead ASC LIMIT 1",
    "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "label": false,
    "evidence": "Fresno Unified is a name of district;",
    "reason_1": "In Predicted SQL ,if AvgScrRead IS NULL then the result is incorrect.",
    "reason_2": "Error JOIN condition"
  },
  {
    "question_id": 894,
    "db_id": "formula_1",
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "predicted_sql": "SELECT T2.forename, T2.surname, T3.name, T1.milliseconds FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1",
    "gold_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "label": true,
    "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 275,
    "db_id": "toxicology",
    "question": "Give me the molecule ID of the double bond type.",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_type = '='",
    "gold_sql": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
    "label": true,
    "evidence": "double bond refers to bond_type = ' = ';",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 318,
    "db_id": "toxicology",
    "question": "What is the molecule id of bond id TR001_1_7?",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
    "label": true,
    "evidence": "",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 761,
    "db_id": "superhero",
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "label": true,
    "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1187,
    "db_id": "thrombosis_prediction",
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.`Examination Date` BETWEEN '1987-07-06' AND '1996-01-31' AND T2.GPT > 30 AND T2.ALB < 4",
    "gold_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "label": false,
    "evidence": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4",
    "reason_1": "There is no need to join with table Examination. And it is necessary to return the id instead of the count.",
    "reason_2": "GOLD FALSE"
  },
  {
    "question_id": 440,
    "db_id": "card_games",
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "predicted_sql": "SELECT set_translations.language FROM set_translations WHERE set_translations.translation = 'A Pedra Fellwar';",
    "gold_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "label": false,
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "reason_1": "Wrong filter condition",
    "reason_2": "Predicted SQL uses incorrect tables and columns"
  },
  {
    "question_id": 865,
    "db_id": "formula_1",
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "label": true,
    "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 359,
    "db_id": "card_games",
    "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "predicted_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
    "label": true,
    "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 197,
    "db_id": "toxicology",
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "predicted_sql": "SELECT AVG(oxygen_count) FROM (SELECT COUNT(CASE WHEN T2.element = 'o' THEN 1 ELSE NULL END) AS oxygen_count FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' GROUP BY T1.molecule_id)",
    "gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "label": false,
    "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
    "reason_1": "include the atoms without o",
    "reason_2": "Predicted SQL: Repeated Counting\nGOLD FALSE: Repeated Counting"
  },
  {
    "question_id": 907,
    "db_id": "formula_1",
    "question": "List all races in 2017 and the hosting country order by date of the event.",
    "predicted_sql": "SELECT races.name, circuits.country, races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date",
    "gold_sql": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
    "label": true,
    "evidence": "",
    "reason_1": "",
    "reason_2": ""
  },
  {
    "question_id": 1168,
    "db_id": "thrombosis_prediction",
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "predicted_sql": "SELECT t2.date, STRFTIME('%Y', t1.\"First Date\") - STRFTIME('%Y', t1.birthday) AS age FROM patient AS t1 INNER JOIN laboratory AS t2 ON t1.id = t2.id WHERE t1.diagnosis = 'SJS' ORDER BY t1.birthday ASC LIMIT 1",
    "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "label": true,
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "reason_1": "",
    "reason_2": ""
  }
]