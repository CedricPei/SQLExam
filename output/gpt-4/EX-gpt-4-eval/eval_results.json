[
  {
    "question_id": 1471,
    "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
    "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
    "gold_sql": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
    "predicted_sql": "SELECT \n    COUNT(DISTINCT CASE WHEN c.Currency = 'EUR' THEN c.CustomerID ELSE NULL END) * 1.0 / \n    NULLIF(COUNT(DISTINCT CASE WHEN c.Currency = 'CZK' THEN c.CustomerID ELSE NULL END), 0) AS EUR_CZK_Ratio\nFROM customers c;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1472,
    "question": "In 2012, who had the least consumption in LAM?",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "predicted_sql": "SELECT c.CustomerID \nFROM customers c \nJOIN yearmonth ym ON c.CustomerID = ym.CustomerID \nWHERE SUBSTR(ym.Date, 1, 4) = '2012' AND c.Segment = 'LAM'\nORDER BY ym.Consumption ASC \nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1473,
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "predicted_sql": "SELECT AVG(Consumption) / 12 AS Average_Monthly_Consumption\nFROM yearmonth \nINNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE customers.Segment = 'SME' \nAND substr(yearmonth.Date, 1, 4) = '2013';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1476,
    "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
    "gold_sql": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
    "predicted_sql": "SELECT SUM(CZ.Consumption) - SUM(EU.Consumption) AS Difference\nFROM yearmonth ym\nINNER JOIN customers c ON ym.CustomerID = c.CustomerID\nLEFT JOIN (\n    SELECT ym.CustomerID, ym.Consumption\n    FROM yearmonth ym\n    INNER JOIN customers c ON ym.CustomerID = c.CustomerID\n    WHERE c.Currency = 'CZK' AND SUBSTR(ym.Date, 1, 4) = '2012'\n) CZ ON ym.CustomerID = CZ.CustomerID\nLEFT JOIN (\n    SELECT ym.CustomerID, ym.Consumption\n    FROM yearmonth ym\n    INNER JOIN customers c ON ym.CustomerID = c.CustomerID\n    WHERE c.Currency = 'EUR' AND SUBSTR(ym.Date, 1, 4) = '2012'\n) EU ON ym.CustomerID = EU.CustomerID\nWHERE SUBSTR(ym.Date, 1, 4) = '2012';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1479,
    "question": "Which year recorded the most consumption of gas paid in CZK?",
    "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "predicted_sql": "SELECT SUBSTR(ym.Date, 1, 4) AS Year, SUM(ym.Consumption) AS TotalConsumption\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'CZK'\nGROUP BY Year\nORDER BY TotalConsumption DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1480,
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "gold_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "predicted_sql": "SELECT SUBSTR(Date, 5, 2) AS PeakMonth\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Segment = 'SME' AND SUBSTR(Date, 1, 4) = '2013'\nGROUP BY PeakMonth\nORDER BY SUM(Consumption) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1481,
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
    "predicted_sql": "WITH MinConsumption AS (\n  SELECT y.CustomerID, c.Segment, MIN(y.Consumption) AS MinConsumption\n  FROM yearmonth y\n  JOIN customers c ON y.CustomerID = c.CustomerID\n  WHERE c.Currency = 'CZK' AND SUBSTR(y.Date, 1, 4) = '2013'\n  GROUP BY c.Segment\n),\nAvgConsumption AS (\n  SELECT mc.Segment, AVG(y.Consumption) AS AvgConsumption\n  FROM MinConsumption mc\n  JOIN yearmonth y ON mc.CustomerID = y.CustomerID AND SUBSTR(y.Date, 1, 4) = '2013'\n  GROUP BY mc.Segment\n)\nSELECT \n  AVGCSME.AvgConsumption - AVGCLAM.AvgConsumption AS Diff_SME_LAM,\n  AVGCLAM.AvgConsumption - AVGCKAM.AvgConsumption AS Diff_LAM_KAM,\n  AVGCKAM.AvgConsumption - AVGCSME.AvgConsumption AS Diff_KAM_SME\nFROM \n  AvgConsumption AVGCSME,\n  AvgConsumption AVGCLAM,\n  AvgConsumption AVGCKAM\nWHERE \n  AVGCSME.Segment = 'SME' AND\n  AVGCLAM.Segment = 'LAM' AND\n  AVGCKAM.Segment = 'KAM';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1482,
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
    "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "predicted_sql": "SELECT \n    ym1.Segment,\n    ((ym2.Consumption - ym1.Consumption) / ym2.Consumption * 100.0) AS PercentageIncrease\nFROM\n    (SELECT c.Segment, SUM(ym.Consumption) AS Consumption\n     FROM yearmonth ym\n     INNER JOIN customers c ON ym.CustomerID = c.CustomerID\n     WHERE c.Currency = 'EUR' AND substr(ym.Date, 1, 4) = '2012'\n     GROUP BY c.Segment) ym1\nJOIN\n    (SELECT c.Segment, SUM(ym.Consumption) AS Consumption\n     FROM yearmonth ym\n     INNER JOIN customers c ON ym.CustomerID = c.CustomerID\n     WHERE c.Currency = 'EUR' AND substr(ym.Date, 1, 4) = '2013'\n     GROUP BY c.Segment) ym2\nON ym1.Segment = ym2.Segment\nORDER BY PercentageIncrease DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1483,
    "question": "How much did customer 6 consume in total between August and November 2013?",
    "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
    "predicted_sql": "SELECT SUM(Consumption) AS TotalConsumption\nFROM yearmonth\nWHERE CustomerID = 6 AND\n      (substr(Date, 1, 6) BETWEEN '201308' AND '201311');",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1484,
    "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
    "evidence": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
    "gold_sql": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
    "predicted_sql": "SELECT \n  (SELECT COUNT(DISTINCT g.GasStationID)\n   FROM gasstations g\n   WHERE g.Country = 'CZE' AND g.Segment = 'discount') \n  -\n  (SELECT COUNT(DISTINCT g.GasStationID)\n   FROM gasstations g\n   WHERE g.Country = 'SVK' AND g.Segment = 'discount') AS MoreDiscountStationsCZEThanSVK;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1486,
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
    "gold_sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
    "predicted_sql": "SELECT \n    COUNT(DISTINCT czk.CustomerID) - COUNT(DISTINCT eur.CustomerID) AS Difference\nFROM\n    customers czk\nLEFT JOIN\n    customers eur ON czk.CustomerID = eur.CustomerID AND eur.Currency = 'EUR'\nWHERE\n    czk.Currency = 'CZK';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1490,
    "question": "How many percent of LAM customer consumed more than 46.73?",
    "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
    "predicted_sql": "SELECT ROUND(100.0 * COUNT(DISTINCT y.CustomerID) / NULLIF(COUNT(DISTINCT c.CustomerID), 0), 2) AS Percentage\nFROM customers c\nLEFT JOIN yearmonth y ON c.CustomerID = y.CustomerID AND y.Consumption > 46.73\nWHERE c.Segment = 'LAM';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1493,
    "question": "In February 2012, what percentage of customers consumed more than 528.3?",
    "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "gold_sql": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
    "predicted_sql": "SELECT\n    ROUND(100.0 * COUNT(DISTINCT ym.CustomerID) / NULLIF(TOTAL(DISTINCT ym_all.CustomerID), 0), 2) AS PercentageOver528_3\nFROM\n    yearmonth AS ym\nLEFT JOIN\n    yearmonth AS ym_all ON ym.CustomerID = ym_all.CustomerID\nWHERE\n    ym.Date = '201202' AND ym.Consumption > 528.3\nAND\n    ym_all.Date = '201202';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1498,
    "question": "What is the highest monthly consumption in the year 2012?",
    "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "gold_sql": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(Consumption) AS HighestMonthlyConsumption\nFROM yearmonth\nWHERE substr(Date, 1, 4) = '2012';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1500,
    "question": "Please list the product description of the products consumed in September, 2013.",
    "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "gold_sql": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
    "predicted_sql": "SELECT DISTINCT p.Description\nFROM transactions_1k AS t\nJOIN products AS p ON t.ProductID = p.ProductID\nWHERE SUBSTR(t.Date, 1, 6) = '201309';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1501,
    "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
    "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
    "gold_sql": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
    "predicted_sql": "SELECT DISTINCT g.Country\nFROM gasstations g\nJOIN transactions_1k t ON g.GasStationID = t.GasStationID\nWHERE SUBSTR(t.Date, 1, 6) = '201306';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1505,
    "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
    "evidence": "Pays in euro = Currency = 'EUR'.",
    "gold_sql": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
    "predicted_sql": "SELECT COUNT(DISTINCT ym.CustomerID)\nFROM yearmonth ym\nJOIN customers c ON ym.CustomerID = c.CustomerID\nWHERE c.Currency = 'EUR' AND ym.Consumption > 1000.0;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1506,
    "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; ",
    "gold_sql": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
    "predicted_sql": "SELECT p.Description\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN products p ON t.ProductID = p.ProductID\nWHERE g.Country = 'CZE';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1507,
    "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
    "evidence": "",
    "gold_sql": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
    "predicted_sql": "SELECT DISTINCT t.Time\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE g.ChainID = 11;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1509,
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "predicted_sql": "SELECT COUNT(*) FROM transactions_1k\nJOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID\nWHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1514,
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
    "gold_sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "predicted_sql": "SELECT c.Currency\nFROM transactions_1k t\nINNER JOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24' AND t.Time = '16:25:00';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1515,
    "question": "What segment did the customer have at 2012/8/23 21:20:00?",
    "evidence": "'2012/8/23' can be represented by '2012-08-23'",
    "gold_sql": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
    "predicted_sql": "SELECT c.Segment\nFROM customers c\nJOIN transactions_1k t ON c.CustomerID = t.CustomerID\nWHERE t.Date = '2012-08-23' AND time(t.Time) = time('21:20:00');",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1521,
    "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
    "predicted_sql": "SELECT COUNT(*) AS Number_of_Transactions\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.Date = '2012-08-26' AND t.Time BETWEEN '08:00:00' AND '09:00:00' AND g.Country = 'CZE';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1524,
    "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'",
    "gold_sql": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
    "predicted_sql": "SELECT c.Country\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nJOIN customers c ON t.CustomerID = c.CustomerID\nWHERE t.Date = '2012-08-24'\nGROUP BY t.CustomerID\nHAVING SUM(t.Amount * t.Price) = 548.4;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1525,
    "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
    "evidence": "'2012/8/25' can be represented by '2012-08-25'",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
    "predicted_sql": "SELECT (100.0 * COUNT(DISTINCT t.CustomerID) / COUNT(DISTINCT c.CustomerID)) AS Percentage\nFROM customers c\nLEFT JOIN transactions_1k t ON c.CustomerID = t.CustomerID AND t.Date = '2012-08-25' AND c.Currency = 'EUR'\nWHERE c.Currency = 'EUR';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1526,
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
    "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "predicted_sql": "SELECT 100.0 * (C1.Consumption - C2.Consumption) / NULLIF(C1.Consumption, 0) AS ConsumptionDecreaseRate\nFROM yearmonth C1\nJOIN yearmonth C2 ON C1.CustomerID = C2.CustomerID\nJOIN (\n  SELECT T1.CustomerID\n  FROM transactions_1k T1\n  WHERE T1.Date = '2012-08-25' AND ROUND(T1.Amount * T1.Price, 1) = 634.8\n) AS Temp ON C1.CustomerID = Temp.CustomerID\nWHERE C1.Date LIKE '2012%' AND C2.Date LIKE '2013%';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1528,
    "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
    "evidence": "",
    "gold_sql": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN c.Segment = 'premium' THEN 1 ELSE 0 END) / COUNT(*) AS Percentage_Premium\nFROM customers c\nJOIN gasstations g ON c.CustomerID = g.GasStationID\nWHERE g.Country = 'SVK';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1529,
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "evidence": "January 2012 refers to the Date value = '201201'",
    "gold_sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "predicted_sql": "SELECT SUM(t.Amount) AS TotalSpent\nFROM transactions_1k t\nJOIN gasstations g ON t.GasStationID = g.GasStationID\nWHERE t.CustomerID = 38508 AND substr(t.Date, 1, 6) = '201201';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1531,
    "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
    "evidence": "average price per single item = Total(price) / Total(amount)",
    "gold_sql": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
    "predicted_sql": "WITH CustomerSpend AS (\n    SELECT \n        t.CustomerID,\n        SUM(t.Price) AS TotalSpent,\n        SUM(t.Amount) AS TotalItems\n    FROM \n        transactions_1k t\n    GROUP BY \n        t.CustomerID\n),\nTopCustomer AS (\n    SELECT\n        c.CustomerID,\n        cs.TotalSpent / cs.TotalItems AS AvgPricePerItem,\n        c.Currency\n    FROM\n        customers c\n    JOIN\n        CustomerSpend cs ON c.CustomerID = cs.CustomerID\n    ORDER BY \n        cs.TotalSpent DESC\n    LIMIT 1\n)\nSELECT\n    tc.CustomerID,\n    tc.AvgPricePerItem,\n    tc.Currency\nFROM\n    TopCustomer tc;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1533,
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
    "gold_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "predicted_sql": "SELECT y.CustomerID, y.Date, y.Consumption\nFROM transactions_1k AS t\nJOIN yearmonth AS y ON t.CustomerID = y.CustomerID\nWHERE t.ProductID = 5\nAND (t.Price / t.Amount) > 29.0\nAND y.Date = '201208';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1312,
    "question": "What's Angela Sanders's major?",
    "evidence": "Angela Sanders is the full name; full name refers to first_name, last_name; major refers to major_name.",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'",
    "predicted_sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Angela' AND mb.last_name = 'Sanders';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1317,
    "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?",
    "evidence": "Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
    "gold_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
    "predicted_sql": "SELECT COUNT(DISTINCT a.link_to_member)\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nJOIN member m ON a.link_to_member = m.member_id\nWHERE e.event_name = 'Women's Soccer'\nAND m.t_shirt_size = 'Medium';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1322,
    "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?",
    "evidence": "meetings events refers to type = 'Meeting'; attended by more than 10 members refers to COUNT(event_id) > 10",
    "gold_sql": "SELECT T1.event_name FROM event AS T1  INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id  HAVING COUNT(T2.link_to_event) > 10 EXCEPT SELECT T1.event_name  FROM event AS T1  WHERE T1.type = 'Meeting'",
    "predicted_sql": "WITH EventAttendance AS (\n    SELECT a.link_to_event, COUNT(DISTINCT a.link_to_member) AS member_count\n    FROM attendance a\n    GROUP BY a.link_to_event\n    HAVING member_count > 10\n)\n\nSELECT COUNT(DISTINCT e.event_id) \nFROM event e\nJOIN EventAttendance ea ON e.event_id = ea.link_to_event\nWHERE e.type = 'Meeting';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1323,
    "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers.",
    "evidence": "name of events refers to event_name; attendance of over 20 students COUNT(event_id) > 20.",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_id HAVING COUNT(T2.link_to_event) > 20 EXCEPT SELECT T1.event_name FROM event AS T1  WHERE T1.type = 'Fundraiser'",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nJOIN attendance a ON e.event_id = a.link_to_event\nGROUP BY e.event_id, e.event_name\nHAVING COUNT(DISTINCT a.link_to_member) > 20 AND e.type != 'fundraiser';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1331,
    "question": "What is the amount of the funds that the Vice President received?",
    "evidence": "'Vice President' is a position of Student Club; funds received refers to amount.",
    "gold_sql": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'",
    "predicted_sql": "SELECT SUM(i.amount) AS total_funds_received\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.position = 'Vice President';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1334,
    "question": "List the full name of the Student_Club members that grew up in Illinois state.",
    "evidence": "full name of member refers to first_name, last_name",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM member m\nJOIN zip_code z ON m.zip = z.zip_code\nWHERE z.state = 'Illinois';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1338,
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
    "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "predicted_sql": "SELECT e.event_id, ex.expense_id, ex.approved\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON b.budget_id = ex.link_to_budget\nWHERE e.event_name = 'October Meeting' AND e.event_date = '2019-10-08';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1339,
    "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October.",
    "evidence": "Elijah Allen is the full name; full name refers to first_name, last_name; The 5th and 6th string of the expense_date in the expense table can refer to month; events in September and October refers to month(expense_date) = 9 OR month(expense_date) = 10",
    "gold_sql": "SELECT AVG(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.last_name = 'Allen' AND T1.first_name = 'Elijah' AND (SUBSTR(T2.expense_date, 6, 2) = '09' OR SUBSTR(T2.expense_date, 6, 2) = '10')",
    "predicted_sql": "SELECT AVG(e.cost)\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE (SUBSTR(e.expense_date, 6, 2) = '09' OR SUBSTR(e.expense_date, 6, 2) = '10')\nAND m.first_name = 'Elijah' AND m.last_name = 'Allen';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1340,
    "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020.",
    "evidence": "The first 4 strings of the event_date values in the event table can represent year; The difference of the total amount spent = SUBTRACT(spent where YEAR(event_date) = 2019, spent where YEAR(event_date) = 2020)",
    "gold_sql": "SELECT SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2019' THEN T2.spent ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.event_date, 1, 4) = '2020' THEN T2.spent ELSE 0 END) AS num FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event",
    "predicted_sql": "SELECT \n    (SELECT SUM(b.spent)\n     FROM budget b\n     JOIN event e ON b.link_to_event = e.event_id\n     WHERE SUBSTR(e.event_date, 1, 4) = '2019') -\n    (SELECT SUM(b.spent)\n     FROM budget b\n     JOIN event e ON b.link_to_event = e.event_id\n     WHERE SUBSTR(e.event_date, 1, 4) = '2020') AS spent_difference;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1344,
    "question": "What was the notes of the fundraising on 2019/9/14?",
    "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'",
    "gold_sql": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'",
    "predicted_sql": "SELECT notes\nFROM income\nWHERE source = 'Fundraising' AND date_received = '2019-09-14';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1346,
    "question": "Tell the phone number of \"Carlo Jacobs\".",
    "evidence": "Carlo Jacobs is the full name; full name refers to first_name, last_name;",
    "gold_sql": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'",
    "predicted_sql": "SELECT m.phone\nFROM member m\nWHERE m.first_name = 'Carlo' AND m.last_name = 'Jacobs';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1350,
    "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?",
    "evidence": "'Post Cards, Posters' is an expense description; on 2019/8/20 refers to expense_date = '2019-8-20'; status of event refers to event_status",
    "gold_sql": "SELECT T1.event_status FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget WHERE T2.expense_description = 'Post Cards, Posters' AND T2.expense_date = '2019-08-20'",
    "predicted_sql": "SELECT e.status\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nJOIN expense ex ON ex.link_to_budget = b.budget_id\nWHERE ex.expense_description = 'Post Cards, Posters' AND ex.expense_date = '2019-08-20';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1351,
    "question": "What was Brent Thomason's major?",
    "evidence": "Brent Thomason is the full name; full name refers to first_name, last_name; major refers to major_name",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'",
    "predicted_sql": "SELECT m.major_name\nFROM member mb\nJOIN major m ON mb.link_to_major = m.major_id\nWHERE mb.first_name = 'Brent' AND mb.last_name = 'Thomason';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1352,
    "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?",
    "evidence": "'Business' is a major name; wear medium size t-shirt refers to t_shirt_size = 'Medium'",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Business' AND T1.t_shirt_size = 'Medium'",
    "predicted_sql": "SELECT COUNT(DISTINCT m.member_id) AS count_medium_size\nFROM member m\nINNER JOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Business' AND m.t_shirt_size = 'Medium';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1356,
    "question": "Which department was the President of the club in?",
    "evidence": "'President' is a position of Student Club",
    "gold_sql": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'",
    "predicted_sql": "SELECT m.major_name \nFROM member AS mem \nJOIN major AS m ON mem.link_to_major = m.major_id \nWHERE mem.position = 'President' \nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1357,
    "question": "State the date Connor Hilton paid his/her dues.",
    "evidence": "Connor Hilton is the full name; full name refers to first_name, last_name; date the dues was paid refers to date_received where source = 'Dues';",
    "gold_sql": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'",
    "predicted_sql": "SELECT i.date_received\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE m.first_name = 'Connor' AND m.last_name = 'Hilton' AND i.source = 'Dues';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1359,
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "predicted_sql": "SELECT COUNT(*)\nFROM (\n  SELECT e.event_id,\n         SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) AS kickoff_budget,\n         SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) AS october_budget\n  FROM budget b\n  JOIN event e ON b.link_to_event = e.event_id\n  WHERE b.category = 'Advertisement'\n  GROUP BY e.event_id\n)\nWHERE kickoff_budget > october_budget;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1361,
    "question": "What is the total cost of the pizzas for all the events?",
    "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'",
    "predicted_sql": "SELECT SUM(e.cost) AS total_pizza_cost\nFROM expense e\nWHERE e.expense_description = 'Pizza';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1362,
    "question": "How many cities are there in Orange County, Virginia?",
    "evidence": "Orange County is the county name, Virginia is the state name",
    "gold_sql": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'",
    "predicted_sql": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange' AND state = 'Virginia';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1368,
    "question": "What does the person with the phone number \"809-555-3360\" major in?",
    "evidence": "major in refers to major_name",
    "gold_sql": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'",
    "predicted_sql": "SELECT m.major_name\nFROM member me\nJOIN major m ON me.link_to_major = m.major_id\nWHERE me.phone = '809-555-3360';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1371,
    "question": "How many members attended the \"Women's Soccer\" event?",
    "evidence": "'Women's Soccer' is the event name;",
    "gold_sql": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "predicted_sql": "SELECT COUNT(DISTINCT a.link_to_member) AS number_of_attendees\nFROM attendance a\nJOIN event e ON a.link_to_event = e.event_id\nWHERE e.event_name = 'Women''s Soccer';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1375,
    "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department.",
    "evidence": "list all members means to list all the full name; full name refers to first_name, last_name;",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'School of Applied Sciences, Technology and Education'",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.department = 'School of Applied Sciences, Technology and Education';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1376,
    "question": "Among all the closed events, which event has the highest spend-to-budget ratio?",
    "evidence": "closed events refers to event_name where status = 'Closed'; highest spend-to budget ratio refers to MAX(DIVIDE(spent, amount))",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.status = 'Closed' ORDER BY T1.spent / T1.amount DESC LIMIT 1",
    "predicted_sql": "SELECT e.event_name, MAX(b.spent / b.amount) AS spend_to_budget_ratio\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed' AND b.amount != 0\nGROUP BY e.event_id\nORDER BY spend_to_budget_ratio DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1378,
    "question": "What is the highest amount of budget spend for an event?",
    "evidence": "highest amount of budget spend refers to MAX(spent)",
    "gold_sql": "SELECT MAX(spent) FROM budget",
    "predicted_sql": "SELECT MAX(spent) FROM budget;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1380,
    "question": "What is the total amount of money spent for food?",
    "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'",
    "gold_sql": "SELECT SUM(spent) FROM budget WHERE category = 'Food'",
    "predicted_sql": "SELECT SUM(b.spent) AS total_spent_for_food\nFROM budget b\nWHERE b.category = 'Food';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1381,
    "question": "List the name of students that have attended more than 7 events.",
    "evidence": "name of students means the full name; full name refers to first_name, last_name; attended more than 7 events refers to COUNT(link_to_event) > 7",
    "gold_sql": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member GROUP BY T2.link_to_member HAVING COUNT(T2.link_to_event) > 7",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM attendance a\nJOIN member m ON m.member_id = a.link_to_member\nGROUP BY m.member_id\nHAVING COUNT(*) > 7;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1387,
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
    "gold_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nJOIN member m ON b.budget_id = m.member_id\nWHERE e.event_name = 'Yearly Kickoff' AND b.event_status = 'Managed';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1389,
    "question": "Which event has the lowest cost?",
    "evidence": "event refers to event_name; lowest cost means MIN(cost)",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T3.cost = (SELECT MIN(T6.cost) FROM event AS T4 INNER JOIN budget AS T5 ON T4.event_id = T5.link_to_event INNER JOIN expense AS T6 ON T5.budget_id = T6.link_to_budget)",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nORDER BY b.amount\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1390,
    "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?",
    "evidence": "percentage = DIVIDE(SUM(cost where event_name = 'Yearly Kickoff'), SUM(cost)) * 100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.event_name = 'Yearly Kickoff' THEN T3.cost ELSE 0 END) AS REAL) * 100 / SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget",
    "predicted_sql": "SELECT\n    ROUND(100.0 * (SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN ex.cost ELSE 0 END)) / NULLIF(SUM(ex.cost), 0), 2) AS percentage_cost_for_yearly_kickoff\nFROM\n    expense ex\nJOIN\n    budget b ON ex.link_to_budget = b.budget_id\nJOIN\n    event e ON b.link_to_event = e.event_id;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1392,
    "question": "Indicate the top source of funds received in September 2019 based on their amount.",
    "evidence": "top source funds refers to MAX(source); September 2019 means date_received BETWEEN '2019-09-01' and '2019-09-30'",
    "gold_sql": "SELECT source FROM income WHERE date_received BETWEEN '2019-09-01' and '2019-09-30' ORDER BY source DESC LIMIT 1",
    "predicted_sql": "SELECT source\nFROM income\nWHERE date_received BETWEEN '2019-09-01' AND '2019-09-30'\nGROUP BY source\nORDER BY SUM(amount) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1394,
    "question": "How many members of the Student_Club have major in 'Physics Teaching'?",
    "evidence": "'Physics Teaching' is the major_name;",
    "gold_sql": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'",
    "predicted_sql": "SELECT COUNT(DISTINCT m.member_id)\nFROM member m\nJOIN major ma ON m.link_to_major = ma.major_id\nWHERE ma.major_name = 'Physics Teaching';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1398,
    "question": "Name the event with the highest amount spent on advertisement.",
    "evidence": "Name of event refers to event_name; highest amount spent on advertisement refers to MAX(spent) where category = 'Advertisement'",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' ORDER BY T1.spent DESC LIMIT 1",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE b.category = 'Advertisement'\nORDER BY b.spent DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1399,
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
    "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "predicted_sql": "SELECT EXISTS(\n    SELECT 1\n    FROM attendance a\n    JOIN event e ON a.link_to_event = e.event_id\n    JOIN member m ON a.link_to_member = m.member_id\n    WHERE e.event_name = 'Women''s Soccer'\n      AND m.first_name = 'Maya'\n      AND m.last_name = 'Mclean'\n) as attended;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1401,
    "question": "Indicate the cost of posters for 'September Speaker' event.",
    "evidence": "'Posters' is the expense description; 'September Speaker' is an event name",
    "gold_sql": "SELECT T3.cost FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'September Speaker' AND T3.expense_description = 'Posters'",
    "predicted_sql": "SELECT SUM(e.cost) AS total_poster_cost\nFROM expense e\nJOIN budget b ON e.link_to_budget = b.budget_id\nJOIN event ev ON b.link_to_event = ev.event_id\nWHERE e.expense_description = 'Posters' AND ev.event_name = 'September Speaker';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1403,
    "question": "Indicate the name of the closed event whose cost has exceeded the budget the most.",
    "evidence": "closed events refers to event_name where status = 'Closed'; exceed the budget the most refers to MIN(remaining) where remaining < 0",
    "gold_sql": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T2.event_id = T1.link_to_event WHERE T1.event_status = 'Closed' AND T1.remaining < 0 ORDER BY T1.remaining LIMIT 1",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nINNER JOIN budget b ON e.event_id = b.link_to_event\nWHERE e.status = 'Closed' AND b.remaining < 0\nORDER BY b.remaining ASC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1404,
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
    "gold_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "predicted_sql": "SELECT b.category, SUM(e.cost) as total_value\nFROM budget b\nJOIN event ev ON b.link_to_event = ev.event_id\nJOIN expense e ON e.link_to_budget = b.budget_id\nWHERE ev.event_name = 'October Meeting' AND e.approved = 'Yes'\nGROUP BY b.category;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1405,
    "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted.",
    "evidence": "'April Speaker' is an event name; amount budgeted refers to SUM(amount); budget categories refers to category",
    "gold_sql": "SELECT T2.category, SUM(T2.amount) FROM event AS T1 JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'April Speaker' GROUP BY T2.category ORDER BY SUM(T2.amount) ASC",
    "predicted_sql": "SELECT category, SUM(amount) AS total_amount_budgeted\nFROM budget\nJOIN event ON budget.link_to_event = event.event_id\nWHERE event_name = 'April Speaker'\nGROUP BY category\nORDER BY total_amount_budgeted ASC;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1409,
    "question": "Mention the total expense used on 8/20/2019.",
    "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'",
    "gold_sql": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'",
    "predicted_sql": "SELECT SUM(cost) AS total_expense\nFROM expense\nWHERE expense_date = '2019-08-20';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1410,
    "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?",
    "evidence": "full name refers to first_name, last name",
    "gold_sql": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, SUM(e.cost) AS total_cost\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nWHERE m.member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY m.first_name, m.last_name;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1411,
    "question": "State what kind of expenses that Sacha Harrison incurred?",
    "evidence": "kind of expenses refers to expense_description; Sacha Harrison is the full name; full name refers to first_name, last_name;",
    "gold_sql": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'",
    "predicted_sql": "SELECT DISTINCT e.expense_description\nFROM expense e\nJOIN member m ON e.link_to_member = m.member_id\nWHERE m.first_name = 'Sacha' AND m.last_name = 'Harrison';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1422,
    "question": "State the category of events were held at MU 215.",
    "evidence": "'MU 215' is the location of event; ",
    "gold_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "predicted_sql": "SELECT DISTINCT b.category\nFROM event e\nJOIN budget b ON e.event_id = b.link_to_event\nWHERE e.location = 'MU 215';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1426,
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "evidence": "'Environmental Engineering' is the major_name;",
    "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "predicted_sql": "SELECT m.last_name, mj.department, mj.college\nFROM member AS m\nJOIN major AS mj ON m.link_to_major = mj.major_id\nWHERE mj.major_name = 'Environmental Engineering';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1427,
    "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?",
    "evidence": "budget category refers to category; events located at refers to location; type = 'Guest Speaker'; 0 budget spent refers to spent = 0; ",
    "gold_sql": "SELECT DISTINCT T2.category, T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215' AND T2.spent = 0 AND T1.type = 'Guest Speaker'",
    "predicted_sql": "SELECT DISTINCT b.category\nFROM budget b\nJOIN event e ON b.link_to_event = e.event_id\nWHERE e.location = 'MU 215' AND e.type = 'Guest Speaker' AND b.spent = 0;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1432,
    "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?",
    "evidence": "t_shirt_size = 'Medium' where position = 'Member'; percentage = DIVIDE(COUNT(amount = 50), COUNT(member_id)) * 100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.amount = 50 THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.income_id) FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Member' AND T1.t_shirt_size = 'Medium'",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN i.amount = 50 THEN i.link_to_member ELSE NULL END) / COUNT(DISTINCT m.member_id) AS percentage_received_50\nFROM member m\nLEFT JOIN income i ON m.member_id = i.link_to_member\nWHERE m.t_shirt_size = 'Medium' AND m.position = 'Member';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1435,
    "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020.",
    "evidence": "name of events refers event_name; game event that was closed refers to type = 'Game' where status = 'Closed'; event_date BETWEEN '2019-03-15' and '2020-03-20'; ",
    "gold_sql": "SELECT DISTINCT event_name FROM event WHERE type = 'Game' AND date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-03-15' AND '2020-03-20' AND status = 'Closed'",
    "predicted_sql": "SELECT e.event_name\nFROM event e\nWHERE e.type = 'Game' AND e.status = 'Closed' AND e.event_date BETWEEN '2019-03-15' AND '2020-03-20';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1457,
    "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
    "evidence": "full name refers to first_name, last_name; contact number refers to phone; had spent more than average on each expense refers to cost > AVG(cost)",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, m.phone AS contact_number\nFROM member m\nJOIN expense e ON m.member_id = e.link_to_member\nGROUP BY m.member_id\nHAVING MIN(e.cost) > (SELECT AVG(cost) FROM expense);",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1460,
    "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it.",
    "evidence": "full name refers to first_name, last name; spent money for refers expense description; expense_description = 'Water, Veggie tray, supplies'",
    "gold_sql": "SELECT T2.first_name, T2.last_name, T1.cost FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.expense_description = 'Water, Veggie tray, supplies'",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, e.cost\nFROM member m\nJOIN expense e ON e.link_to_member = m.member_id\nWHERE e.expense_description = 'Water, Veggie tray, supplies';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1464,
    "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
    "evidence": "full name refers to first_name, last_name, amount of funds received refers to amount, received funds on date refers to date_received",
    "gold_sql": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
    "predicted_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, i.amount\nFROM income i\nJOIN member m ON i.link_to_member = m.member_id\nWHERE i.date_received = '9/9/2019';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1149,
    "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?",
    "evidence": "male refers to SEX = 'M'; in-patient refers to Admission = '+'; outpatient refers to Admission = '-'; percentage = DIVIDE(COUNT(ID) where SEX = 'M' and Admission = '+', COUNT(ID) where SEX  = 'M' and Admission = '-')",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE SEX = 'M'",
    "predicted_sql": "WITH PatientStats AS (\n    SELECT \n        Admission,\n        COUNT(ID) AS Count\n    FROM Patient\n    WHERE SEX = 'M'\n    GROUP BY Admission\n)\n\nSELECT\n    100.0 * MAX(CASE WHEN Admission = '+' THEN Count END) / NULLIF(MAX(CASE WHEN Admission = '-' THEN Count END), 0) AS InPatientRatio,\n    100.0 * MAX(CASE WHEN Admission = '-' THEN Count END) / NULLIF(MAX(CASE WHEN Admission = '+' THEN Count END), 0) AS OutPatientRatio\nFROM PatientStats;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1150,
    "question": "What is the percentage of female patient were born after 1930?",
    "evidence": "female refers to Sex = 'F'; patient who were born after 1930 refers to year(Birthday) > '1930'; calculation = DIVIDE(COUNT(ID) where year(Birthday) > '1930' and SEX = 'F'), (COUNT(ID) where SEX = 'F')",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', Birthday) > '1930' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient WHERE SEX = 'F'",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN strftime('%Y', P.Birthday) > '1930' THEN 1 ELSE 0 END) / NULLIF(COUNT(P.ID), 0), 2) AS Percentage_Female_After_1930\nFROM Patient P\nWHERE P.SEX = 'F';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1152,
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
    "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN Admission = '+' THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END), 0) AS Ratio_Outpatient_to_Inpatient\nFROM Patient\nWHERE Diagnosis = 'SLE';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1153,
    "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.",
    "evidence": "'30609' is the Patient ID; disease means Diagnosis",
    "gold_sql": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609",
    "predicted_sql": "SELECT e.Diagnosis, l.Date\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE e.ID = '30609';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1155,
    "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.",
    "evidence": "LDH beyond normal range refers to LDH > '500';",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500",
    "predicted_sql": "SELECT P.ID, P.SEX, P.Birthday\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE L.LDH > 500;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1156,
    "question": "State the ID and age of patient with positive degree of coagulation.",
    "evidence": "age refers to SUBTRACT(year(current_timestamp), year(Birthday)); positive degree of coagulation refers to RVVT = '+';",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.RVVT = '+'",
    "predicted_sql": "SELECT p.ID, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS age\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE e.RVVT = '+';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1157,
    "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with.",
    "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis;",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2",
    "predicted_sql": "SELECT P.ID, P.SEX, P.Diagnosis\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nWHERE E.Thrombosis = 2;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1162,
    "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?",
    "evidence": "female refers to sex = 'F'; came at the hospital in 1997 refers to year(Description) = '1997'; immediately followed at the outpatient clinic refers to Admission = '-'",
    "gold_sql": "SELECT COUNT(*) FROM Patient WHERE STRFTIME('%Y', Description) = '1997' AND SEX = 'F' AND Admission = '-'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nWHERE p.SEX = 'F' \n  AND p.Description LIKE '1997%'\n  AND p.Admission = '-';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1164,
    "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?",
    "evidence": "the most serious thrombosis refers to Thrombosis = '1' (the most severe one); women refers to sex = 'F'",
    "gold_sql": "SELECT  COUNT(*) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND STRFTIME('%Y', T2.`Examination Date`) = '1997' AND T2.Thrombosis = 1",
    "predicted_sql": "SELECT COUNT(*)\nFROM (\n    SELECT p.ID\n    FROM Examination e\n    INNER JOIN Patient p ON e.ID = p.ID\n    WHERE e.Thrombosis = 1 AND e.\"Examination Date\" LIKE '1997%' AND p.SEX = 'F'\n    GROUP BY p.ID\n);",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1166,
    "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; symptoms observed refers to the symptoms is not NULL",
    "gold_sql": "SELECT T2.Symptoms, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1",
    "predicted_sql": "SELECT e.Symptoms, e.Diagnosis\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nORDER BY p.Birthday DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1168,
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "predicted_sql": "SELECT MIN(L.Date) AS ExaminationDate, strftime('%Y', P.`First Date`) - strftime('%Y', P.Birthday) AS InitialAge\nFROM Patient P\nJOIN Examination E ON P.ID = E.ID\nJOIN Laboratory L ON P.ID = L.ID\nWHERE P.Diagnosis = 'SJS'\nGROUP BY P.ID\nORDER BY P.Birthday\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1169,
    "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?",
    "evidence": "male refers to SEX = 'M'; female refers to SEX = 'F'; abnormal uric acid refers to UA < = '8.0' where SEX = 'M', UA < = '6.5' where SEX = 'F'; calculation = DIVIDE(SUM(UA <= '8.0' and SEX = 'M'), SUM(UA <= '6.5 and SEX = 'F'))",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.UA <= 8.0 AND T1.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.UA <= 6.5 AND T1.SEX = 'F' THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN SEX = 'M' AND UA <= 8.0 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN SEX = 'F' AND UA <= 6.5 THEN 1 ELSE 0 END), 0) AS Male_to_Female_Ratio\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1171,
    "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?",
    "evidence": "underage patients refers to year(Birthday) < 18; three-year period from 1990 to 1993 refers to year(`Examination Date`) between '1990' and '1993'",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T2.`Examination Date`) BETWEEN '1990' AND '1993' AND STRFTIME('%Y', T2.`Examination Date`) - STRFTIME('%Y', T1.Birthday) < 18",
    "predicted_sql": "SELECT COUNT(DISTINCT e.ID) \nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE strftime('%Y', e.`Examination Date`) BETWEEN '1990' AND '1993'\nAND strftime('%Y', p.Birthday) <= strftime('%Y', e.`Examination Date`) - 18;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1175,
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
    "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "predicted_sql": "SELECT \n    strftime('%Y', e.`Examination Date`) - strftime('%Y', p.Birthday) AS Age,\n    e.Diagnosis\nFROM \n    Laboratory l\nINNER JOIN \n    Examination e ON l.ID = e.ID\nINNER JOIN\n    Patient p ON e.ID = p.ID\nWHERE \n    l.HGB = (SELECT MAX(HGB) FROM Laboratory)\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1179,
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
    "gold_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "predicted_sql": "SELECT e.aCL_IgM\nFROM Examination e\nJOIN Patient p ON e.ID = p.ID\nWHERE p.Diagnosis = 'SLE' AND p.Description = '1994-02-19' AND e.Examination_Date = '1993-11-12';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1185,
    "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?",
    "evidence": "born on 1959/2/18 refers to Birthday = '1959-02-18'; calculation = DIVISION(SUBTRACT(SUM(Birthday = '1959-02-18' and Date like '1981-11-%' THEN `T-CHO`), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`)), SUM(Birthday = '1959-02-18' and Date like '1981-12-%' THEN `T-CHO`))",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.Date LIKE '1981-11-%' THEN T2.`T-CHO` ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END)) AS REAL) / SUM(CASE WHEN T2.Date LIKE '1981-12-%' THEN T2.`T-CHO` ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-02-18'",
    "predicted_sql": "SELECT \n  100.0 * (SUM(CASE WHEN l.Date LIKE '1981-11-%' THEN l.`T-CHO` END) - SUM(CASE WHEN l.Date LIKE '1981-12-%' THEN l.`T-CHO` END)) \n  / NULLIF(SUM(CASE WHEN l.Date LIKE '1981-11-%' THEN l.`T-CHO` END), 0) as Cholesterol_Decrease_Rate\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE p.Birthday = '1959-02-18';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1187,
    "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID.",
    "evidence": "examined between 1987/7/6 and 1996/1/31 refers to Date BETWEEN '1987-07-06' AND '1996-01-31'; GPT level greater than 30 refers to GPT > 30; ALB level less than 4 ALB < 4",
    "gold_sql": "SELECT DISTINCT ID FROM Laboratory WHERE Date BETWEEN '1987-07-06' AND '1996-01-31' AND GPT > 30 AND ALB < 4",
    "predicted_sql": "SELECT DISTINCT e.ID\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID AND e.\"Examination Date\" = l.Date\nWHERE e.\"Examination Date\" BETWEEN '1987-07-06' AND '1996-01-31'\nAND l.GPT > 30\nAND l.ALB < 4\nORDER BY e.ID;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1189,
    "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?",
    "evidence": "thrombosis level 2 refers to Thrombosis = 2; ANA pattern of only S refers to ANA = 'S'; average anti-Cardiolip in antibody (IgM) refers to AVG(`aCL IgM`); calculation = MULTIPLY(AVG + AVG, 0.2)",
    "gold_sql": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S' AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination WHERE Thrombosis = 2 AND `ANA Pattern` = 'S')",
    "predicted_sql": "SELECT COUNT(DISTINCT e.ID) AS numberOfPatients\nFROM Examination e\nWHERE e.Thrombosis = 2\n    AND e.`ANA Pattern` = 'S'\n    AND e.`aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination);",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1192,
    "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range.",
    "evidence": "followed up at the outpatient clinic refers to Admission = '-'; laboratory test in April 1981 refers to Date like '1991-10%'; blood bilirubin level within the normal range refers to T-BIL < 2.0; ",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Admission = '-' AND T2.`T-BIL` < 2.0 AND T2.Date LIKE '1991-10-%'",
    "predicted_sql": "SELECT DISTINCT p.ID\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.Admission = '-'\n   AND l.Date LIKE '1991-10%'\n   AND l.`T-BIL` < 2.0;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1195,
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'",
    "gold_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "predicted_sql": "SELECT AVG(l.ALB) AS Average_ALB\nFROM Laboratory l\nJOIN Examination e ON l.ID = e.ID\nJOIN Patient p ON l.ID = p.ID\nWHERE p.SEX = 'F' AND l.PLT > 400 AND e.Diagnosis = 'SLE';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1198,
    "question": "How many female patients were given an APS diagnosis?",
    "evidence": "female refers to SEX = 'F'; APS diagnosis refers to Diagnosis='APS'",
    "gold_sql": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE p.SEX = 'F' AND e.Diagnosis = 'APS';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1201,
    "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?",
    "evidence": "born in 1980 refers to YEAR(BIRTHDAY) = '1980'; 'RA' refers to Diagnosis='RA' ; women refers to SEX = 'F'; calculation = DIVIDE(SUM(SEX = 'F'), COUNT(SEX)) * 100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(ID) FROM Patient WHERE Diagnosis = 'RA' AND STRFTIME('%Y', Birthday) = '1980'",
    "predicted_sql": "SELECT (100.0 * SUM(CASE WHEN p.SEX = 'F' THEN 1 ELSE 0 END) / COUNT(*)) AS Female_RA_Percentage\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nWHERE strftime('%Y', p.Birthday) = '1980' AND e.Diagnosis = 'RA';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1205,
    "question": "Was the patient with the number 57266's uric acid within a normal range?",
    "evidence": "uric acid within a normal range refers to UA > 8.0 and SEX = 'M'OR UA > 6.5 and SEX = 'F'",
    "gold_sql": "SELECT CASE WHEN (T1.SEX = 'F' AND T2.UA > 6.5) OR (T1.SEX = 'M' AND T2.UA > 8.0) THEN true ELSE false END FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 57266",
    "predicted_sql": "SELECT\n  CASE\n    WHEN (p.SEX = 'M' AND l.UA > 8.0) OR (p.SEX = 'F' AND l.UA > 6.5) THEN 'Yes'\n    ELSE 'No'\n  END AS Is_Uric_Acid_Normal\nFROM\n  Patient p\n  JOIN Laboratory l ON p.ID = l.ID\nWHERE\n  p.ID = 57266;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1208,
    "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range.",
    "evidence": "male refers to SEX = 'M'; ALT glutamic pylvic transaminase (GPT) exceed the normal range refers to GPT > = 60",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND T2.GPT >= 60",
    "predicted_sql": "SELECT p.ID \nFROM Patient p\nINNER JOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.GPT >= 60\nGROUP BY p.ID;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1209,
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; ",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "predicted_sql": "SELECT p.Diagnosis, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GPT > 60\nORDER BY p.Birthday ASC;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1220,
    "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?",
    "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29; ",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29",
    "predicted_sql": "SELECT p.ID, p.SEX, p.Birthday\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.UN = 29;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1225,
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "evidence": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
    "gold_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "predicted_sql": "SELECT p.SEX, GROUP_CONCAT(DISTINCT p.ID) AS Patient_IDs\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.`T-BIL` >= 2.0\nGROUP BY p.SEX;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1227,
    "question": "What is the average age of the male patient with high cholesterol?",
    "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
    "gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
    "predicted_sql": "SELECT AVG(CAST((strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS REAL)) AS AverageAge\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.T-CHO >= 250;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1229,
    "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?",
    "evidence": "triglyceride (TG) level beyond the normal range refers to TG > = 200; more than 50 years of age = SUBTRACT(year(current_timestamp), year(Birthday)) > 50; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200 AND STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 50",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID) AS Patients_Over_50_With_High_TG\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.TG >= 200 AND (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) > 50;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1231,
    "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?",
    "evidence": "born between 1936-1956 refers to year(Birthday) BETWEEN '1936' AND '1956'; male patients refers to sex = 'M'; creatinine phosphokinase beyond the normal range refers to CPK > = 250; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) BETWEEN '1936' AND '1956' AND T1.SEX = 'M' AND T2.CPK >= 250",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M'\nAND strftime('%Y', p.Birthday) BETWEEN '1936' AND '1956'\nAND l.CPK >= 250;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1232,
    "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range.",
    "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); blood glucose (GLU) not within normal range refers to GLU > = 180; total cholesterol(T-CHO) within normal range refers to `T-CHO` < 250; ",
    "gold_sql": "SELECT DISTINCT T1.ID, T1.SEX , STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU >= 180 AND T2.`T-CHO` < 250",
    "predicted_sql": "SELECT p.ID, p.SEX, CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS Age\nFROM Laboratory l\nJOIN Patient p ON l.ID = p.ID\nWHERE l.GLU >= 180 AND l.`T-CHO` < 250;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1235,
    "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age.",
    "evidence": "patient's diagnosis refers to Diagnosis; lower red blood cell refers to RBC < 3.5; age = SUBTRACT(year(current_timestamp), year(Birthday)); ",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis, T1.ID , STRFTIME('%Y', CURRENT_TIMESTAMP) -STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RBC < 3.5",
    "predicted_sql": "SELECT DISTINCT e.ID, \n       CAST(strftime('%Y', 'now') AS INTEGER) - CAST(strftime('%Y', p.Birthday) AS INTEGER) AS Age \nFROM Examination e \nJOIN Patient p ON e.ID = p.ID \nJOIN Laboratory l ON e.ID = l.ID \nWHERE l.RBC < 3.5;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1238,
    "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex.",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; The larger the birthday value, the younger the person is, and vice versa; normal hemoglobin level refers to 10 < HGB < 17;",
    "gold_sql": "SELECT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.HGB > 10 AND T2.HGB < 17 ORDER BY T1.Birthday ASC LIMIT 1",
    "predicted_sql": "SELECT p.ID, p.SEX\nFROM Patient p\nJOIN Examination e ON p.ID = e.ID\nJOIN Laboratory l ON p.ID = l.ID\nWHERE e.Diagnosis = 'SLE' AND l.HGB > 10 AND l.HGB < 17\nORDER BY p.Birthday ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1239,
    "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range.",
    "evidence": "age = SUBTRACT(year(current_timestamp), year(Birthday)); patient with two or more laboratory examinations refers to COUNT(ID) > 2; hematoclit level exceeded the normal range refers to HCT > = 52;",
    "gold_sql": "SELECT DISTINCT T1.ID, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID IN ( SELECT ID FROM Laboratory WHERE HCT >= 52 GROUP BY ID HAVING COUNT(ID) >= 2 )",
    "predicted_sql": "SELECT p.ID, (strftime('%Y', 'now') - strftime('%Y', p.Birthday)) AS age\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.HCT > 52.0\nGROUP BY p.ID, p.Birthday\nHAVING COUNT(*) >= 2;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1241,
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
    "gold_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "predicted_sql": "SELECT\n  (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT < 100) -\n  (SELECT COUNT(DISTINCT ID) FROM Laboratory WHERE PLT > 400) AS Difference\nFROM Laboratory\nWHERE PLT < 100 OR PLT > 400;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1242,
    "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level.",
    "evidence": "laboratory examinations take in 1984 refers to YEAR(Date) = '1984'; below 50 years old = SUBTRACT(year(current_timestamp), year(Birthday)) < 50; normal platelet level refers to PLT between 100 and 400; ",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT BETWEEN 100 AND 400 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) < 50 AND STRFTIME('%Y', T2.Date) = '1984'",
    "predicted_sql": "SELECT Patient.ID, Patient.Birthday, Laboratory.PLT\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nWHERE STRFTIME('%Y', Laboratory.Date) = '1984'\nAND STRFTIME('%Y', 'now') - STRFTIME('%Y', Patient.Birthday) < 50\nAND Laboratory.PLT BETWEEN 100 AND 400;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1243,
    "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?",
    "evidence": "older than 55 years old = SUBTRACT(year(current_timestamp), year(Birthday)) > 55; abnormal prothrombin time (PT) refers to PT > = 14; percentage = DIVIDE(SUM(PT > = 14 AND SEX = 'F'), SUM(PT > = 14)) * 100; female refers to sex = 'F'; ",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.PT >= 14 AND T1.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) > 55",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN P.SEX = 'F' AND L.PT >= 14 THEN 1 ELSE 0 END) / NULLIF(SUM(CASE WHEN L.PT >= 14 THEN 1 ELSE 0 END), 0), 2) AS Percentage_Female_Abnormal_PT\nFROM Patient P\nJOIN Laboratory L ON P.ID = L.ID\nWHERE (strftime('%Y','now') - strftime('%Y', P.Birthday)) > 55;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1247,
    "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?",
    "evidence": "male patients refers to Sex = 'M'; normal level of white blood cells refers to WBC > 3.5 and WBC <9.0; abnormal fibrinogen level refers to FG < = 150 or FG > = 450; Don't compute repetitive ones.",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.FG <= 150 OR T2.FG >= 450 AND T2.WBC > 3.5 AND T2.WBC < 9.0 AND T1.SEX = 'M'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.WBC > 3.5 AND l.WBC < 9.0 AND (l.FG <= 150 OR l.FG >= 450);",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1251,
    "question": "How many patients with an Ig G higher than normal?",
    "evidence": "Ig G higher than normal refers to IGG >= 2000; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG >= 2000",
    "predicted_sql": "SELECT COUNT(DISTINCT L.ID)\nFROM Laboratory L\nWHERE L.IGG >= 2000;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1252,
    "question": "Among the patients with a normal Ig G level, how many of them have symptoms?",
    "evidence": "normal Ig G level refers to IGG > 900 and IGG < 2000; have symptoms refers to Symptoms IS NOT NULL;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T2.IGG BETWEEN 900 AND 2000 AND T3.Symptoms IS NOT NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT Examination.ID)\nFROM Examination\nJOIN Laboratory ON Examination.ID = Laboratory.ID\nWHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Examination.Symptoms IS NOT NULL;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1254,
    "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
    "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.IGA > 80 AND l.IGA < 500 AND strftime('%Y', p.`First Date`) >= '1990';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1255,
    "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?",
    "evidence": "abnormal Ig M level refers to IGM <=40 OR IGM >= 400; most common disease refers to MAX(COUNT(Diagnosis));",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGM NOT BETWEEN 40 AND 400 GROUP BY T1.Diagnosis ORDER BY COUNT(T1.Diagnosis) DESC LIMIT 1",
    "predicted_sql": "SELECT e.Diagnosis, COUNT(*) AS Count\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.IGM <= 40 OR l.IGM >= 400 \nGROUP BY e.Diagnosis\nORDER BY Count DESC \nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1256,
    "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
    "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.CRP = '+' AND p.Description IS NULL;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1257,
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
    "predicted_sql": "SELECT COUNT(DISTINCT Patient.ID)\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) < 70;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1265,
    "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?",
    "evidence": "normal level of anti-ribonuclear protein refers to RNP = '-', '+-'; And'-' means 'negative'; '+-' refers to '0'; admitted to the hospital refers to Admission = '+'; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RNP = 'negative' OR T2.RNP = '0' AND T1.Admission = '+'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient AS p\nJOIN Laboratory AS l ON p.ID = l.ID\nWHERE RNP IN ('-', '+-')\nAND p.Admission = '+';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1267,
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "predicted_sql": "SELECT COUNT(DISTINCT e.ID)\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.SM IN ('-', '+-')\nAND e.Thrombosis = 0;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1270,
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nLEFT JOIN Examination e ON p.ID = e.ID\nWHERE l.SC170 IN ('negative', '0')\nAND p.SEX = 'F'\nAND e.Symptoms IS NULL;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1275,
    "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?",
    "evidence": "normal level of anti-centromere refers to CENTROMEA IN('-', '+-'); normal level of anti-SSB refers to SSB IN('-', '+-'); male refers to Sex = 'M'; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CENTROMEA IN ('negative', '0') AND T2.SSB IN ('negative', '0') AND T1.SEX = 'M'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.ID)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE p.SEX = 'M' AND l.CENTROMEA IN ('-', '+-') AND l.SSB IN ('-', '+-');",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1281,
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(p.Birthday)\nFROM Patient p\nJOIN Laboratory l ON p.ID = l.ID\nWHERE l.GOT >= 60;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1302,
    "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?",
    "evidence": "normal range of creatinine phosphokinase refers to CPK < 250; positive measure of degree of coagulation refers to KCT = '+' or RVVT = '+' or LAC = '+' ;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.CPK < 250 AND (T3.KCT = '+' OR T3.RVVT = '+' OR T3.LAC = '+')",
    "predicted_sql": "SELECT COUNT(DISTINCT e.ID)\nFROM Examination e\nJOIN Laboratory l ON e.ID = l.ID\nWHERE l.CPK < 250\n  AND (e.KCT = '+' OR e.RVVT = '+' OR e.LAC = '+');",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1025,
    "question": "Give the name of the league had the most goals in the 2016 season?",
    "evidence": "league that had the most goals refers to MAX(SUM(home_team_goal, away_team_goal)); 2016 season refers to season = '2015/2016';",
    "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' GROUP BY t2.name ORDER BY SUM(t1.home_team_goal + t1.away_team_goal) DESC LIMIT 1",
    "predicted_sql": "SELECT l.name\nFROM League l\nJOIN Match m ON l.id = m.league_id\nWHERE m.season = '2015/2016'\nGROUP BY l.id\nORDER BY SUM(m.home_team_goal + m.away_team_goal) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1028,
    "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
    "evidence": "Final result should return the Team.team_long_name; Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010'; won the most refers to MAX(COUNT(*));",
    "gold_sql": "SELECT t3.team_long_name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id INNER JOIN Team AS t3 ON t2.away_team_api_id = t3.team_api_id WHERE t1.name = 'Scotland Premier League' AND t2.season = '2009/2010' AND t2.away_team_goal - t2.home_team_goal > 0 GROUP BY t2.away_team_api_id HAVING COUNT(*) = (SELECT MAX(won_matches_count) FROM (SELECT away_team_api_id, COUNT(*) AS won_matches_count FROM Match AS m INNER JOIN League AS l ON m.league_id = l.id WHERE l.name = 'Scotland Premier League' AND m.season = '2009/2010' AND m.away_team_goal - m.home_team_goal > 0 GROUP BY m.away_team_api_id))",
    "predicted_sql": "SELECT Team.team_long_name\nFROM Match\nJOIN League ON Match.league_id = League.id\nJOIN Team ON Match.away_team_api_id = Team.team_api_id\nWHERE League.name = 'Scotland Premier League' AND Match.season = '2009/2010' AND Match.away_team_goal > Match.home_team_goal\nGROUP BY Team.team_api_id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1029,
    "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?",
    "evidence": "speed in which attacks are put together refers to buildUpPlaySpeed;highest build up play speed refers to MAX(buildUpPlaySpeed)",
    "gold_sql": "SELECT t1.buildUpPlaySpeed FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id ORDER BY t1.buildUpPlaySpeed ASC LIMIT 4",
    "predicted_sql": "SELECT t.team_long_name, ta.buildUpPlaySpeed\nFROM Team t\nJOIN Team_Attributes ta ON ta.team_api_id = t.team_api_id\nORDER BY ta.buildUpPlaySpeed DESC\nLIMIT 4;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1030,
    "question": "Give the name of the league had the most matches end as draw in the 2016 season?",
    "evidence": "most matches end as draw refers to MAX(SUM(home_team_goal = away_team_goal)); 2016 season refers to season = '2015/2016';",
    "gold_sql": "SELECT t2.name FROM Match AS t1 INNER JOIN League AS t2 ON t1.league_id = t2.id WHERE t1.season = '2015/2016' AND t1.home_team_goal = t1.away_team_goal GROUP BY t2.name ORDER BY COUNT(t1.id) DESC LIMIT 1",
    "predicted_sql": "SELECT l.name\nFROM League l\nJOIN Match m ON l.id = m.league_id\nWHERE m.season = '2015/2016' AND m.home_team_goal = m.away_team_goal\nGROUP BY l.id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1031,
    "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015.",
    "evidence": "players age at present = SUBTRACT((DATETIME(), birthday)); sprint speed of no less than 97 refers to sprint_speed > = 97; between 2013 to 2015 refers to YEAR(date) > = '2013' AND YEAR(date) < = '2015'; ",
    "gold_sql": "SELECT DISTINCT DATETIME() - T2.birthday age FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.`date`) >= '2013' AND STRFTIME('%Y',t1.`date`) <= '2015' AND t1.sprint_speed >= 97",
    "predicted_sql": "SELECT MAX(strftime('%Y', DATE('now')) - strftime('%Y', p.birthday)) AS age\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.sprint_speed >= 97\nAND strftime('%Y', pa.date) BETWEEN '2013' AND '2015';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1032,
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "evidence": " league with highest matches of all time refers to MAX(COUNT(league_id));",
    "gold_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
    "predicted_sql": "SELECT l.name AS league_name, COUNT(m.id) AS match_count\nFROM League l\nJOIN Match m ON m.league_id = l.id\nGROUP BY l.id\nORDER BY match_count DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1035,
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; ",
    "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "predicted_sql": "SELECT DISTINCT TA.team_fifa_api_id\nFROM Team_Attributes TA\nWHERE TA.buildUpPlaySpeed > 50 AND TA.buildUpPlaySpeed < 60;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1036,
    "question": "List the long name of teams with above-average build-up play passing in 2012.",
    "evidence": "long name of teams refers to team_long_name; build-up play passing refers to buildUpPlayPassing; above-average build-up play passing = buildUpPlayPassing > DIVIDE(SUM(buildUpPlayPassing), COUNT(team_long_name) WHERE buildUpPlayPassing IS NOT NULL); in 2012 refers to strftime('%Y', date) = '2012'; ",
    "gold_sql": "SELECT DISTINCT t4.team_long_name FROM Team_Attributes AS t3 INNER JOIN Team AS t4 ON t3.team_api_id = t4.team_api_id WHERE SUBSTR(t3.`date`, 1, 4) = '2012' AND t3.buildUpPlayPassing > ( SELECT CAST(SUM(t2.buildUpPlayPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE STRFTIME('%Y',t2.`date`) = '2012')",
    "predicted_sql": "WITH YearlyAttributes AS (\n    SELECT \n        team_api_id, \n        buildUpPlayPassing\n    FROM \n        Team_Attributes\n    WHERE\n        strftime('%Y', date) = '2012' AND\n        buildUpPlayPassing IS NOT NULL\n),\nAverageBuildUpPlay AS (\n    SELECT \n        AVG(buildUpPlayPassing) AS avgPassing\n    FROM \n        YearlyAttributes\n),\nAboveAverageTeams AS (\n    SELECT \n        t.team_long_name\n    FROM \n        Team t\n        INNER JOIN YearlyAttributes ya ON t.team_api_id = ya.team_api_id\n        CROSS JOIN AverageBuildUpPlay\n    WHERE\n        ya.buildUpPlayPassing > AverageBuildUpPlay.avgPassing\n)\n\nSELECT DISTINCT\n    team_long_name\nFROM \n    AboveAverageTeams\nORDER BY\n    team_long_name;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1037,
    "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992.",
    "evidence": "players who prefer left foot refers to preferred_foot = 'left'; percentage of players who prefer left foot = DIVIDE(MULTIPLY((SUM(preferred_foot = 'left'), 100)), COUNT(player_fifa_api_id)); born between 1987 and 1992 refers to YEAR(birthday) BETWEEN '1987' AND '1992';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.preferred_foot = 'left' THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t1.birthday, 1, 4) BETWEEN '1987' AND '1992'",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN pa.preferred_foot = 'left' THEN 1 ELSE 0 END) / COUNT(DISTINCT pa.player_fifa_api_id), 2) AS percentage_left_footed\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_fifa_api_id = p.player_fifa_api_id\nWHERE strftime('%Y', p.birthday) BETWEEN '1987' AND '1992';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1039,
    "question": "Find the average number of long-shot done by Ahmed Samir Farag.",
    "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));",
    "gold_sql": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'",
    "predicted_sql": "SELECT AVG(pa.long_shots) AS average_long_shots\nFROM Player p\nJOIN Player_Attributes pa ON p.player_fifa_api_id = pa.player_fifa_api_id\nWHERE p.player_name = 'Ahmed Samir Farag';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1040,
    "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy.",
    "evidence": "heights are above 180 refers to Player.height > 180; average heading accuracy = DIVIDE(SUM(heading_accuracy), COUNT(player_fifa_api_id));",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 GROUP BY t1.id ORDER BY CAST(SUM(t2.heading_accuracy) AS REAL) / COUNT(t2.`player_fifa_api_id`) DESC LIMIT 10",
    "predicted_sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.height > 180\nGROUP BY p.player_api_id\nORDER BY AVG(pa.heading_accuracy) DESC\nLIMIT 10;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1042,
    "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season.",
    "evidence": "name of league refers to League.name; average goals by the home team is higher than the away team = AVG(home_team_goal) > AVG(away_team_goal); AVG(xx_goal) = SUM(xx_goal) / COUNT(DISTINCT Match.id); 2009/2010 season refers to season = '2009/2010'",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2009/2010' GROUP BY t1.name HAVING (CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) - (CAST(SUM(t2.away_team_goal) AS REAL) / COUNT(DISTINCT t2.id)) > 0",
    "predicted_sql": "SELECT L.name\nFROM Match M\nJOIN League L ON M.league_id = L.id\nWHERE M.season = '2009/2010'\nGROUP BY L.id\nHAVING AVG(M.home_team_goal) > AVG(M.away_team_goal);",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1044,
    "question": "List the football players with a birthyear of 1970 and a birthmonth of October.",
    "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,7) AS 'year-month',WHERE year = '1970' AND month = '10';",
    "gold_sql": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'",
    "predicted_sql": "SELECT player_name\nFROM Player\nWHERE strftime('%Y', birthday) = '1970' AND strftime('%m', birthday) = '10';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1048,
    "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?",
    "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';",
    "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND strftime('%Y', t2.date) = '2011'",
    "predicted_sql": "SELECT AVG(pa.overall_rating) AS average_rating\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Gabriel Tamas' AND strftime('%Y', pa.date) = '2011';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1057,
    "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland.",
    "evidence": "average home team goal = AVG(home_team_goal)= SUM(home_team_goal) / COUNT(DISTINCT Match.id) WHERE name = 'Poland' and season = '2010/2011';",
    "gold_sql": "SELECT CAST(SUM(t2.home_team_goal) AS REAL) / COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Poland' AND t2.season = '2010/2011'",
    "predicted_sql": "SELECT AVG(m.home_team_goal) AS avg_home_team_goal\nFROM Match m\nJOIN Country c ON m.country_id = c.id\nWHERE c.name = 'Poland' AND m.season = '2010/2011';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1058,
    "question": "Who has the highest average finishing rate between the highest and shortest football player?",
    "evidence": "finishing rate refers to finishing; highest average finishing rate = MAX(AVG(finishing)); highest football player refers to MAX(height); shortest football player refers to MIN(height);",
    "gold_sql": "SELECT A FROM ( SELECT AVG(finishing) result, 'Max' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MAX(height) FROM Player ) UNION SELECT AVG(finishing) result, 'Min' A FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height = ( SELECT MIN(height) FROM Player ) ) ORDER BY result DESC LIMIT 1",
    "predicted_sql": "WITH HeightStats AS (\n    SELECT\n        MIN(height) AS min_height,\n        MAX(height) AS max_height\n    FROM Player\n),\nPlayerFinishing AS (\n    SELECT\n        p.player_name,\n        p.height,\n        AVG(pa.finishing) AS average_finishing\n    FROM Player p\n    JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\n    GROUP BY p.player_api_id\n),\nSelectedPlayers AS (\n    SELECT\n        pf.player_name,\n        pf.average_finishing\n    FROM PlayerFinishing pf\n    JOIN HeightStats hs ON pf.height = hs.min_height OR pf.height = hs.max_height\n)\nSELECT\n    player_name\nFROM SelectedPlayers\nORDER BY average_finishing DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1068,
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
    "predicted_sql": "SELECT AVG(pa.overall_rating) AS average_rating\nFROM Player_Attributes pa\nJOIN Player p ON p.player_api_id = pa.player_api_id\nWHERE p.height > 170\nAND strftime('%Y', pa.date) BETWEEN '2010' AND '2015';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1076,
    "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?",
    "evidence": "difference of the average ball control = SUBTRACT(AVG(ball_control WHERE player_name = 'Abdou Diallo'), AVG(ball_control WHERE player_name = 'Aaron Appindangoye')); AVG(ball_control WHERE player_name = 'XX XX') = SUM(CASE WHEN player_name = 'XX XX' THEN ball_control ELSE 0 END) / COUNT(CASE WHEN player_name = 'XX XX' THEN id ELSE NULL END)",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Abdou Diallo' THEN t2.id ELSE NULL END) - CAST(SUM(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.ball_control ELSE 0 END) AS REAL) / COUNT(CASE WHEN t1.player_name = 'Aaron Appindangoye' THEN t2.id ELSE NULL END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "predicted_sql": "SELECT AVG(CASE WHEN p.player_name = 'Abdou Diallo' THEN pa.ball_control ELSE NULL END) - AVG(CASE WHEN p.player_name = 'Aaron Appindangoye' THEN pa.ball_control ELSE NULL END) AS difference_in_average_ball_control\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name IN ('Abdou Diallo', 'Aaron Appindangoye');",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1078,
    "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1",
    "predicted_sql": "SELECT player_name\nFROM Player\nWHERE birthday = (\n    SELECT MIN(birthday)\n    FROM Player\n    WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada')\n);",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1079,
    "question": "Which player is the tallest?",
    "evidence": "tallest player refers to MAX(height);",
    "gold_sql": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
    "predicted_sql": "SELECT p.player_name\nFROM Player p\nWHERE p.height = (SELECT MAX(height) FROM Player);",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1080,
    "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?",
    "evidence": "preferred foot when attacking was the left refers to preferred_foot = 'left'; players who would remain in his position when the team attacked refers to attacking_work_rate = 'low';",
    "gold_sql": "SELECT COUNT(player_api_id) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.player_api_id)\nFROM Player_Attributes p\nWHERE p.preferred_foot = 'left' AND p.attacking_work_rate = 'low';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1084,
    "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?",
    "evidence": "players born before the year 1986 refers to strftime('%Y', birthday)<'1986'; players who would remain in his position and defense while the team attacked refers to defensive_work_rate = 'high'; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT t1.player_name) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE STRFTIME('%Y',t1.birthday) < '1986' AND t2.defensive_work_rate = 'high'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.player_api_id)\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE strftime('%Y', p.birthday) < '1986'\nAND pa.defensive_work_rate = 'high';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1091,
    "question": "How many matches were held in the Belgium Jupiler League in April, 2009?",
    "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League'; in April, 2009 refers to SUBSTR(`date`, 1, 7);",
    "gold_sql": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND SUBSTR(t2.`date`, 1, 7) = '2009-04'",
    "predicted_sql": "SELECT COUNT(*) AS match_count\nFROM Match m\nJOIN League l ON m.league_id = l.id\nWHERE l.name = 'Belgium Jupiler League' AND SUBSTR(m.date, 1, 7) = '2009-04';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1092,
    "question": "Give the name of the league had the most matches in the 2008/2009 season?",
    "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_name WHERE season = '2008/2009');",
    "gold_sql": "SELECT t1.name FROM League AS t1 JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name HAVING COUNT(t2.id) = (SELECT MAX(match_count) FROM (SELECT COUNT(t2.id) AS match_count FROM Match AS t2 WHERE t2.season = '2008/2009' GROUP BY t2.league_id))",
    "predicted_sql": "SELECT l.name \nFROM League l\nJOIN Match m ON l.id = m.league_id\nWHERE m.season = '2008/2009'\nGROUP BY l.id\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1094,
    "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?",
    "evidence": "how much higher in percentage = MULTIPLY(DIVIDE(SUBTRACT(overall_rating WHERE player_name = 'Ariel Borysiuk', overall_rating WHERE player_name = 'Paulin Puel'), overall_rating WHERE player_name = 'Paulin Puel'), 100);",
    "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Ariel Borysiuk' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Paulin Puel' THEN t2.overall_rating ELSE 0 END) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id",
    "predicted_sql": "SELECT (100.0 * (pa_ar.overall_rating - pa_pp.overall_rating)) / pa_pp.overall_rating AS percentage_difference\nFROM Player p\nJOIN Player_Attributes pa_ar ON pa_ar.player_api_id = p.player_api_id AND p.player_name = 'Ariel Borysiuk'\nJOIN Player_Attributes pa_pp ON pa_pp.player_api_id = p.player_api_id AND p.player_name = 'Paulin Puel';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1096,
    "question": "Calculate the average overall rating of Pietro Marino.",
    "evidence": "Pietro Marino refers to player_name = 'Pietro Marino'; average overall rating AVG(T1.overall_rating)",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Pietro Marino'",
    "predicted_sql": "SELECT AVG(pa.overall_rating) AS average_rating\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Pietro Marino';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1098,
    "question": "What is Ajax's highest chance creation passing score and what is it classified as?",
    "evidence": "Ajax's refers to team_long_name = 'Ajax'; chance creation passing score refers to MAX(chanceCreationPassing); classified refer to chanceCreationPassingClass",
    "gold_sql": "SELECT t2.chanceCreationPassing, t2.chanceCreationPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Ajax' ORDER BY t2.chanceCreationPassing DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(ta.chanceCreationPassing) AS highest_chance_creation_passing, ta.chanceCreationPassingClass AS classification\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'Ajax';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1102,
    "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player.",
    "evidence": "77 points overall rating refers to overall_rating = 77; on 2016/6/23 refers to date LIKE '2016-06-23%'; The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-06-23' AND t2.overall_rating = 77 ORDER BY t1.birthday ASC LIMIT 1",
    "predicted_sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.overall_rating = 77 AND pa.date LIKE '2016-06-23%'\nORDER BY p.birthday ASC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1103,
    "question": "What was the overall rating for Aaron Mooy on 2016/2/4?",
    "evidence": "Aaron Mooy refers to player_name = 'Aaron Mooy'; on 2016/2/4 refers to date LIKE '2016-02-04%';",
    "gold_sql": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2016-02-04' AND t1.player_name = 'Aaron Mooy'",
    "predicted_sql": "SELECT PA.overall_rating\nFROM Player P\nJOIN Player_Attributes PA ON P.player_api_id = PA.player_api_id\nWHERE P.player_name = 'Aaron Mooy' AND PA.date LIKE '2016-02-04%';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1105,
    "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?",
    "evidence": "Francesco Migliore refers to player_name = 'Francesco Migliore'; on 2015/5/1 refers to date LIKE '2015-05-01%';",
    "gold_sql": "SELECT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.`date` LIKE '2015-05-01%' AND t1.player_name = 'Francesco Migliore'",
    "predicted_sql": "SELECT pa.attacking_work_rate\nFROM Player p\nJOIN Player_Attributes pa ON pa.player_api_id = p.player_api_id\nWHERE p.player_name = 'Francesco Migliore' AND pa.date LIKE '2015-05-01%'\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1107,
    "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date.",
    "evidence": "Kevin Constant refers to player_name = 'Kevin Constant'; highest crossing score refers to MAX(crossing)",
    "gold_sql": "SELECT `date` FROM ( SELECT t2.crossing, t2.`date` FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Kevin Constant' ORDER BY t2.crossing DESC) ORDER BY date DESC LIMIT 1",
    "predicted_sql": "SELECT MIN(date) AS first_highest_crossing_date\nFROM Player_Attributes\nWHERE crossing = (SELECT MAX(crossing) FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Kevin Constant') AND player_api_id IN (SELECT player_api_id FROM Player WHERE player_name = 'Kevin Constant');",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1110,
    "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22.",
    "evidence": "\"FC Lorient\" refers to team_long_name = 'FC Lorient'; on 2010/2/22 refers to date LIKE '2010-02-22%';",
    "gold_sql": "SELECT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'FC Lorient' AND t2.`date` LIKE '2010-02-22%'",
    "predicted_sql": "SELECT ta.buildUpPlayPassingClass\nFROM Team_Attributes AS ta\nJOIN Team AS t ON ta.team_api_id = t.team_api_id\nWHERE t.team_long_name = 'FC Lorient' AND ta.date LIKE '2010-02-22%';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1113,
    "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?",
    "evidence": "\"Hannover 96\" refers to team_long_name = 'Hannover 96'; on 2015/9/10 refers to date LIKE '2015-09-10%';",
    "gold_sql": "SELECT t2.chanceCreationShootingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_long_name = 'Hannover 96' AND t2.`date` LIKE '2015-09-10%'",
    "predicted_sql": "SELECT ta.defenceAggressionClass\nFROM Team t\nINNER JOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'Hannover 96' AND ta.date LIKE '2015-09-10%';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1114,
    "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?",
    "evidence": "average overall rating refers to avg(overall_rating); Marko Arnautovic refers to player_name = 'Marko Arnautovic'; from 2007/2/22 to 2016/4/21 refers to the first 10 characters of date BETWEEN '2007-02-22' and '2016-04-21'",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE t1.player_name = 'Marko Arnautovic' AND SUBSTR(t2.`date`, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21'",
    "predicted_sql": "SELECT AVG(pa.overall_rating) AS average_overall_rating\nFROM Player_Attributes pa\nJOIN Player p ON p.player_api_id = pa.player_api_id\nWHERE p.player_name = 'Marko Arnautovic'\nAND SUBSTR(pa.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1115,
    "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?",
    "evidence": "Landon Donovan's refers to player_name = 'Landon Donovan'; Jordan Bowery refers to player_name = 'Jordan Bowery'; percentage refers to DIVIDE(SUBTRACT(player_name = 'Landon Donovan' overall_rating; player_name = 'Jordan Bowery' overall_rating), player_name = 'Landon Donovan' overall_rating)*100",
    "gold_sql": "SELECT (SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) * 1.0 - SUM(CASE WHEN t1.player_name = 'Jordan Bowery' THEN t2.overall_rating ELSE 0 END)) * 100 / SUM(CASE WHEN t1.player_name = 'Landon Donovan' THEN t2.overall_rating ELSE 0 END) LvsJ_percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_fifa_api_id = t2.player_fifa_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2013-07-12'",
    "predicted_sql": "WITH player_attributes_on_date AS (\n    SELECT pa.player_api_id, pa.overall_rating\n    FROM Player_Attributes pa\n    JOIN Player p ON p.player_api_id = pa.player_api_id\n    WHERE pa.date <= '2013-07-12'\n    ORDER BY pa.date DESC\n)\n\n, selected_player_ratings AS (\n    SELECT\n        p.player_name,\n        MAX(pad.overall_rating) AS overall_rating\n    FROM player_attributes_on_date pad\n    JOIN Player p ON p.player_api_id = pad.player_api_id\n    WHERE p.player_name IN ('Landon Donovan', 'Jordan Bowery')\n    GROUP BY p.player_name\n)\n\n, ratings_comparison AS (\n    SELECT \n        (SELECT overall_rating FROM selected_player_ratings WHERE player_name = 'Landon Donovan') AS landon_rating,\n        (SELECT overall_rating FROM selected_player_ratings WHERE player_name = 'Jordan Bowery') AS jordan_rating\n)\n\nSELECT\n    100.0 * (landon_rating - jordan_rating) / jordan_rating AS percentage_difference\nFROM ratings_comparison;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1116,
    "question": "List down most tallest players' name.",
    "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 ",
    "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
    "predicted_sql": "SELECT player_name\nFROM Player\nWHERE height = (SELECT MAX(height) FROM Player);",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1122,
    "question": "State the name of the most strongest player.",
    "evidence": "strongest players refers to player has MAX(overall_rating)",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "predicted_sql": "SELECT Player.player_name\nFROM Player\nJOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id\nGROUP BY Player.player_api_id\nORDER BY MAX(Player_Attributes.overall_rating) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1124,
    "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name.",
    "evidence": "tend to be attacking when their mates were doing attack moves refers to attacking_work_rate = 'high';",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.attacking_work_rate = 'high'",
    "predicted_sql": "SELECT DISTINCT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nWHERE pa.attacking_work_rate = 'high';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1130,
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "predicted_sql": "SELECT DISTINCT t.team_short_name\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE ta.chanceCreationPassingClass = 'Safe';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1133,
    "question": "How many football players born after the 1990s have the first name \"Aaron\"?",
    "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'",
    "gold_sql": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'",
    "predicted_sql": "SELECT COUNT(DISTINCT p.id) AS player_count\nFROM Player p\nWHERE p.player_name LIKE 'Aaron%' AND p.birthday > '1990-12-31';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1134,
    "question": "What is the difference between players 6 and 23's jumping scores?",
    "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 23)",
    "gold_sql": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1",
    "predicted_sql": "SELECT ABS(j6.jumping - j23.jumping) AS difference\nFROM (SELECT jumping FROM Player_Attributes WHERE player_api_id = 6) AS j6,\n     (SELECT jumping FROM Player_Attributes WHERE player_api_id = 23) AS j23;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1135,
    "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking.",
    "evidence": "lowest potential players refers to MIN(potential); prefer to use the right foot when attacking refers to preferred_foot = 'right'",
    "gold_sql": "SELECT id FROM Player_Attributes WHERE preferred_foot = 'right' ORDER BY potential DESC LIMIT 5",
    "predicted_sql": "SELECT P.player_api_id\nFROM Player_Attributes P\nWHERE P.preferred_foot = 'right'\nGROUP BY P.player_api_id\nHAVING MIN(P.potential)\nORDER BY P.potential ASC, P.player_api_id ASC\nLIMIT 4;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1136,
    "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?",
    "evidence": "highest potential score for crossing refers to MAX(crossing); preferred to use their left foots while attacking refers to preferred_foot = 'left'",
    "gold_sql": "SELECT COUNT(t1.id) FROM Player_Attributes AS t1 WHERE t1.preferred_foot = 'left' AND t1.crossing = ( SELECT MAX(crossing) FROM Player_Attributes)",
    "predicted_sql": "SELECT COUNT(DISTINCT pa.player_api_id)\nFROM Player_Attributes pa\nJOIN (\n  SELECT MAX(crossing) AS max_crossing\n  FROM Player_Attributes\n) m ON pa.crossing = m.max_crossing\nWHERE pa.preferred_foot = 'left';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1139,
    "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?",
    "evidence": "September 24, 2008 refers to date like '2008-09-24%'; in the Belgian Jupiler League refers to League.name = 'Belgium Jupiler League'; final score for home team refers to home_team_goal; final score for away team refers to away_team_goal",
    "gold_sql": "SELECT t2.home_team_goal, t2.away_team_goal FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Belgium Jupiler League' AND t2.`date` LIKE '2008-09-24%'",
    "predicted_sql": "SELECT M.home_team_goal, M.away_team_goal\nFROM Match M\nJOIN League L ON M.league_id = L.id\nWHERE L.name = 'Belgium Jupiler League' AND M.date LIKE '2008-09-24%';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1141,
    "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?",
    "evidence": "KSV Cercle Brugge refers to team_long_name = 'KSV Cercle Brugge'; speed class refers to buildUpPlaySpeedClass",
    "gold_sql": "SELECT DISTINCT t1.buildUpPlaySpeedClass FROM Team_Attributes AS t1 INNER JOIN Team AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.team_long_name = 'KSV Cercle Brugge'",
    "predicted_sql": "SELECT ta.buildUpPlaySpeedClass\nFROM Team t\nJOIN Team_Attributes ta ON t.team_api_id = ta.team_api_id\nWHERE t.team_long_name = 'KSV Cercle Brugge'\nORDER BY ta.date DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1144,
    "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.",
    "evidence": "finishing rate refer to finishing; curve score refer to curve; heaviest weight refers to MAX(weight)",
    "gold_sql": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1",
    "predicted_sql": "SELECT pa.finishing AS finishing_rate, pa.curve AS curve_score\nFROM Player_Attributes pa\nJOIN Player p ON pa.player_api_id = p.player_api_id\nWHERE p.weight = (SELECT MAX(weight) FROM Player);",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1145,
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "evidence": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "predicted_sql": "SELECT L.name AS league_name, COUNT(M.id) AS total_games\nFROM League L\nJOIN Match M ON L.id = M.league_id\nWHERE M.season = '2015/2016'\nGROUP BY L.id, L.name\nORDER BY total_games DESC\nLIMIT 4;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1146,
    "question": "Please provide the full name of the away team that scored the most goals.",
    "evidence": "full name refers to team_long_name; away team refers to away_team_api_id; scored the most goals refers to MAX(away_team_goal)",
    "gold_sql": "SELECT t2.team_long_name FROM Match AS t1 INNER JOIN Team AS t2 ON t1.away_team_api_id = t2.team_api_id ORDER BY t1.away_team_goal DESC LIMIT 1",
    "predicted_sql": "SELECT t.team_long_name\nFROM Team t\nJOIN Match m ON t.team_api_id = m.away_team_api_id\nGROUP BY t.team_api_id\nORDER BY SUM(m.away_team_goal) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1147,
    "question": "Please name one player whose overall strength is the greatest.",
    "evidence": "overall strength is the greatest refers to MAX(overall_rating)",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)",
    "predicted_sql": "SELECT p.player_name\nFROM Player p\nJOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id\nGROUP BY p.player_api_id\nORDER BY MAX(pa.overall_rating) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 1148,
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "predicted_sql": "SELECT \n  100.0 * SUM(CASE WHEN p.height < 180 AND pa.strength > 70 THEN 1 ELSE 0 END) / COUNT(DISTINCT p.id) AS percentage_under_180_strength_over_70\nFROM \n  Player p \nJOIN \n  Player_Attributes pa \nON \n  p.player_api_id = pa.player_api_id;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 846,
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
    "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "predicted_sql": "SELECT d.driverRef\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 20 AND (CAST(q.q1 AS INTEGER) = (\n    SELECT MIN(CAST(q1 AS INTEGER))\n    FROM qualifying\n    WHERE raceId = 20 AND q1 IS NOT NULL\n))\nLIMIT 5;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 847,
    "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
    "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
    "gold_sql": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 AND T1.q2 IS NOT NULL AND T1.q2 = (SELECT MIN(q2) AS min_q2 FROM qualifying WHERE raceId = 19 AND q2 IS NOT NULL)",
    "predicted_sql": "SELECT d.surname\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 19 AND q.q2 IS NOT NULL\nORDER BY q.q2 ASC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 850,
    "question": "Please give the name of the race held on the circuits in Germany.",
    "evidence": "Germany is a name of country;",
    "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
    "predicted_sql": "SELECT DISTINCT r.name\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE c.country = 'Germany';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 854,
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "predicted_sql": "SELECT c.lat, c.lng\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nWHERE r.name = 'Australian Grand Prix';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 857,
    "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
    "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
    "predicted_sql": "SELECT c.lat, c.lng\nFROM circuits c\nJOIN races r ON c.circuitId = r.circuitId\nWHERE r.name = 'Abu Dhabi Grand Prix';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 859,
    "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
    "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "gold_sql": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
    "predicted_sql": "SELECT q.q1\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE d.forename = 'Bruno' AND d.surname = 'Senna' AND q.raceId = 354;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 861,
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
    "gold_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "predicted_sql": "SELECT d.number\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nWHERE q.raceId = 903 AND q.q3 LIKE '0:01:54%';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 862,
    "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
    "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
    "gold_sql": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT r.driverId) AS num_drivers_not_finished\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Bahrain Grand Prix' AND ra.year = 2007 AND r.time IS NULL;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 865,
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "predicted_sql": "SELECT d.driverId, d.forename, d.surname, d.dob\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nWHERE r.raceId = 592 AND r.time IS NOT NULL\nORDER BY d.dob\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 866,
    "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
    "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
    "gold_sql": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
    "predicted_sql": "SELECT d.url\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE l.raceId = 161 AND l.time LIKE '1:27%';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 868,
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "predicted_sql": "SELECT circuits.lat, circuits.lng FROM circuits JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Malaysian Grand Prix';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 869,
    "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
    "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
    "gold_sql": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
    "predicted_sql": "SELECT c.url \nFROM constructorResults cr \nJOIN constructors c ON cr.constructorId = c.constructorId \nWHERE cr.raceId = 9 \nORDER BY cr.points DESC \nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 872,
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
    "gold_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "predicted_sql": "SELECT d.code\nFROM qualifying q\nJOIN drivers d ON q.driverId = d.driverId\nJOIN races r ON q.raceId = r.raceId\nWHERE r.raceId = 45 AND q.q3 LIKE '1:33%';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 875,
    "question": "Show me the season page of year when the race No. 901 took place.",
    "evidence": "the season page refers to url; race number refers to raceId;",
    "gold_sql": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
    "predicted_sql": "SELECT s.url\nFROM seasons s\nJOIN races r ON s.year = r.year\nWHERE r.raceId = 901;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 877,
    "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
    "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
    "predicted_sql": "SELECT d.forename, d.surname, d.dob\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nWHERE r.raceId = 872 AND r.time IS NOT NULL\nORDER BY d.dob DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 879,
    "question": "For the driver who set the fastest lap speed, what is his nationality?",
    "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;",
    "gold_sql": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "predicted_sql": "SELECT d.nationality\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nORDER BY CAST(r.fastestLapSpeed AS REAL) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 880,
    "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
    "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
    "gold_sql": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
    "predicted_sql": "SELECT 100.0 * (CAST(r1.fastestLapSpeed AS REAL) - CAST(r2.fastestLapSpeed AS REAL)) / CAST(r1.fastestLapSpeed AS REAL) AS percent_faster\nFROM results r1\nJOIN drivers d ON d.driverId = r1.driverId\nJOIN results r2 ON r2.driverId = d.driverId AND r2.raceId = 854\nWHERE d.forename = 'Paul' AND d.surname = 'di Resta' AND r1.raceId = 853;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 881,
    "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
    "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
    "predicted_sql": "SELECT \n    ROUND(100.0 * SUM(CASE WHEN r.time IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*), 2) as completion_rate\nFROM \n    results r\nJOIN \n    races rc ON r.raceId = rc.raceId\nWHERE \n    rc.date = '1983-07-16';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 884,
    "question": "List the names of all races that occurred in the earliest recorded year and month.",
    "evidence": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));",
    "gold_sql": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
    "predicted_sql": "WITH MinDate AS (\n    SELECT MIN(date) AS earliest_date\n    FROM races\n)\nSELECT r.name\nFROM races r\nJOIN MinDate md ON r.date = md.earliest_date;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 892,
    "question": "State the driver with the most points scored. Find his full name with that points.",
    "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
    "gold_sql": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
    "predicted_sql": "SELECT d.forename || ' ' || d.surname AS full_name, MAX(r.points) AS points\nFROM results r\nJOIN drivers d ON d.driverId = r.driverId\nGROUP BY r.driverId\nORDER BY points DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 894,
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
    "gold_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "predicted_sql": "SELECT MIN(lt.milliseconds) AS best_lap_time, d.forename || ' ' || d.surname AS driver_name, r.name AS race_name\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nJOIN races r ON lt.raceId = r.raceId\nGROUP BY lt.driverId, lt.raceId\nORDER BY best_lap_time ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 895,
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
    "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "predicted_sql": "SELECT AVG(lt.milliseconds) AS average_lap_time\nFROM lapTimes lt\nJOIN drivers d ON lt.driverId = d.driverId\nJOIN races r ON lt.raceId = r.raceId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND r.name = 'Malaysian Grand Prix'\nAND r.year = 2009;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 896,
    "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
    "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN r.position > 1 THEN r.raceId END) / NULLIF(COUNT(DISTINCT r.raceId), 0) AS not_first_percentage\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.surname = 'Hamilton'\nAND ra.year >= 2010;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 897,
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "predicted_sql": "SELECT d.forename || ' ' || d.surname AS fullName, d.nationality, MAX(ds.points) AS maxPoints\nFROM drivers AS d\nJOIN driverStandings AS ds ON d.driverId = ds.driverId\nGROUP BY d.driverId\nORDER BY SUM(ds.wins) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 898,
    "question": "How old is the youngest Japanese driver? What is his name?",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "predicted_sql": "SELECT MIN(strftime('%Y', 'now') - strftime('%Y', dob)) AS age, MIN(forename || ' ' || surname) AS fullName\nFROM drivers\nWHERE nationality = 'Japanese'\nORDER BY dob DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 901,
    "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
    "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
    "gold_sql": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
    "predicted_sql": "SELECT r.name AS race_name, c.name AS circuit_name, c.location\nFROM races r\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE strftime('%Y', r.date) = '2005' AND strftime('%m', r.date) = '09';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 902,
    "question": "Which race was Alex Yoong in when he was in track number less than 20?",
    "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
    "predicted_sql": "SELECT r.name AS race_name\nFROM races r\nJOIN results rs ON r.raceId = rs.raceId\nJOIN drivers d ON rs.driverId = d.driverId\nWHERE d.forename = 'Alex' AND d.surname = 'Yoong' AND rs.position < 20;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 904,
    "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
    "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "gold_sql": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
    "predicted_sql": "SELECT r.year, r.name\nFROM lapTimes lt\nJOIN drivers d ON d.driverId = lt.driverId\nJOIN races r ON r.raceId = lt.raceId\nWHERE d.forename = 'Michael' AND d.surname = 'Schumacher'\nORDER BY lt.milliseconds ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 906,
    "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
    "evidence": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "gold_sql": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = (SELECT MIN(T4.year) FROM races AS T4 INNER JOIN driverStandings AS T5 ON T5.raceId = T4.raceId INNER JOIN drivers AS T6 ON T6.driverId = T5.driverId WHERE T6.forename = 'Lewis' AND T6.surname = 'Hamilton')",
    "predicted_sql": "SELECT r.name AS race_name, MIN(r.year) AS year, res.points AS points\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nGROUP BY d.driverId, r.raceId\nORDER BY r.year ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 909,
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "predicted_sql": "SELECT \n  100.0 * COUNT(CASE WHEN c.country = 'Germany' THEN 1 END) / NULLIF(COUNT(*), 0) AS percentage\nFROM \n  races r\nJOIN \n  circuits c ON r.circuitId = c.circuitId\nWHERE \n  r.name = 'European Grand Prix';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 910,
    "question": "What's the location coordinates of Silverstone Circuit?",
    "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
    "gold_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
    "predicted_sql": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 912,
    "question": "What's the reference name of Marina Bay Street Circuit?",
    "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
    "gold_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
    "predicted_sql": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 915,
    "question": "Which country is the oldest driver from?",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
    "predicted_sql": "SELECT nationality FROM drivers WHERE dob = (SELECT MIN(dob) FROM drivers);",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 928,
    "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
    "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
    "gold_sql": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
    "predicted_sql": "SELECT d.driverRef\nFROM drivers d\nJOIN results r ON d.driverId = r.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2007 AND r.positionOrder = 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 930,
    "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
    "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
    "gold_sql": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
    "predicted_sql": "SELECT r.name, r.year\nFROM results res\nJOIN races r ON res.raceId = r.raceId\nJOIN drivers d ON res.driverId = d.driverId\nWHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'\nORDER BY res.positionOrder ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 931,
    "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
    "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
    "gold_sql": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(CAST(r.fastestLapSpeed AS REAL)) AS max_speed\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.name = 'Spanish Grand Prix' AND ra.year = 2009;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 933,
    "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
    "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
    "gold_sql": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
    "predicted_sql": "SELECT r.positionOrder\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nJOIN drivers d ON r.driverId = d.driverId\nWHERE rc.name = 'Chinese Grand Prix'\nAND d.forename = 'Lewis' AND d.surname = 'Hamilton'\nAND rc.year = 2008;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 937,
    "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
    "evidence": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
    "predicted_sql": "SELECT results.time\nFROM results\nJOIN races ON results.raceId = races.raceId\nWHERE races.year = 2008 AND races.name = 'Chinese Grand Prix' AND results.positionOrder = 2;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 940,
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "predicted_sql": "SELECT COUNT(DISTINCT r.driverId)\nFROM results r\nJOIN races rc ON r.raceId = rc.raceId\nWHERE rc.year = 2008 AND rc.name = 'Chinese Grand Prix' AND r.time IS NOT NULL;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 944,
    "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
    "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
    "predicted_sql": "SELECT (CAST(last.milliseconds AS REAL) - CAST(champion.milliseconds AS REAL)) / CAST(champion.milliseconds AS REAL) * 100.0 AS percentage_faster\nFROM results AS champion\nJOIN results AS last ON champion.raceId = last.raceId\nJOIN races ON champion.raceId = races.raceId\nWHERE races.year = 2008 AND races.name = 'Australian Grand Prix' AND champion.positionOrder = 1 AND last.positionOrder = (SELECT MAX(positionOrder) FROM results WHERE raceId = champion.raceId);",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 945,
    "question": "How many circuits are there in Adelaide, Australia?",
    "evidence": "Australia is the country; Melbourne is the location of circuit;",
    "gold_sql": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
    "predicted_sql": "SELECT COUNT(DISTINCT circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 948,
    "question": "What are the maximum points of British constructors?",
    "evidence": "maximum points = MAX(points); British is a nationality",
    "gold_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "predicted_sql": "SELECT MAX(c.points) AS maximum_points\nFROM constructorStandings c\nJOIN constructors ct ON c.constructorId = ct.constructorId\nWHERE ct.nationality = 'British';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 950,
    "question": "Please list the constructor names with 0 points at race 291.",
    "evidence": "race at 291 refers to raceID = 291;",
    "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
    "predicted_sql": "SELECT c.name\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE cr.raceId = 291 AND cr.points = 0.0;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 951,
    "question": "How many Japanese constructors have 0 points in 2 races?",
    "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
    "gold_sql": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
    "predicted_sql": "SELECT COUNT(DISTINCT c.constructorId)\nFROM constructors c\nJOIN constructorResults cr ON c.constructorId = cr.constructorId\nWHERE c.nationality = 'Japanese' AND cr.points = 0.0\nGROUP BY c.constructorId\nHAVING COUNT(DISTINCT cr.raceId) = 2;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 954,
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN r.time IS NOT NULL THEN r.driverId END) / COUNT(DISTINCT r.driverId) AS race_completion_percentage\nFROM results r\nJOIN drivers d ON r.driverId = d.driverId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE d.nationality = 'Japanese'\nAND ra.year BETWEEN 2007 AND 2009;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 955,
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "predicted_sql": "SELECT r.year, AVG(CAST(SUBSTR(res.time, 1, 2) AS INTEGER) * 3600 + CAST(SUBSTR(res.time, 4, 2) AS INTEGER) * 60 + CAST(SUBSTR(res.time, 7, 2) AS INTEGER) + CAST(SUBSTR(res.time, 10, 3) AS REAL) / 1000) AS average_seconds\nFROM races r\nJOIN results res ON r.raceId = res.raceId\nWHERE r.year < 1975 AND res.positionOrder = 1 AND res.time IS NOT NULL\nGROUP BY r.year;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 959,
    "question": "What is the fastest lap number of the champion in 2009?",
    "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
    "gold_sql": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "predicted_sql": "WITH ChampionDriver AS (\n    SELECT ds.driverId\n    FROM driverStandings ds\n    JOIN races r ON ds.raceId = r.raceId\n    WHERE r.year = 2009\n    ORDER BY ds.points DESC, ds.wins DESC\n    LIMIT 1\n)\n\nSELECT MIN(lt.lap) AS fastest_lap_number\nFROM lapTimes lt\nJOIN ChampionDriver cd ON lt.driverId = cd.driverId\nJOIN races r ON lt.raceId = r.raceId\nWHERE r.year = 2009\nORDER BY lt.time\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 960,
    "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
    "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
    "gold_sql": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
    "predicted_sql": "SELECT AVG(CAST(r.fastestLapSpeed AS REAL)) AS avg_fastest_lap_speed\nFROM results r\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2009 AND ra.name = 'Spanish Grand Prix';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 962,
    "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
    "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
    "predicted_sql": "WITH RelevantDrivers AS (\n    SELECT DISTINCT d.driverId\n    FROM drivers AS d\n    WHERE d.dob < '1985-01-01'\n), RelevantLaps AS (\n    SELECT DISTINCT lt.driverId\n    FROM lapTimes AS lt\n    JOIN races AS r ON lt.raceId = r.raceId\n    WHERE r.year BETWEEN 2000 AND 2005 AND lt.lap > 50\n), Before1985AndOver50 AS (\n    SELECT lt.driverId\n    FROM lapTimes AS lt\n    JOIN races AS r ON lt.raceId = r.raceId\n    JOIN RelevantDrivers AS rd ON lt.driverId = rd.driverId\n    WHERE r.year BETWEEN 2000 AND 2005 AND lt.lap > 50\n)\n\nSELECT 100.0 * COUNT(DISTINCT bao.driverId) / COUNT(DISTINCT rl.driverId) AS percentage\nFROM RelevantLaps AS rl\nLEFT JOIN Before1985AndOver50 AS bao ON rl.driverId = bao.driverId;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 963,
    "question": "How many French drivers who obtain the laptime less than 02:00.00?",
    "evidence": "lap time less than 02:00.00 refers to seconds < 120;",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
    "predicted_sql": "SELECT COUNT(DISTINCT l.driverId)\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nWHERE d.nationality = 'French'\nAND l.milliseconds < 120000;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 964,
    "question": "List out the code for drivers who have nationality in American.",
    "evidence": "nationality = 'American'",
    "gold_sql": "SELECT code FROM drivers WHERE Nationality = 'American'",
    "predicted_sql": "SELECT d.code\nFROM drivers d\nWHERE d.nationality = 'American';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 967,
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "predicted_sql": "SELECT COUNT(*) AS count_netherlandic\nFROM (\n  SELECT d.driverId, d.nationality\n  FROM drivers d\n  ORDER BY d.dob DESC\n  LIMIT 3\n) youngest_drivers\nWHERE youngest_drivers.nationality = 'Dutch';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 971,
    "question": "Please state the reference name of the oldest German driver.",
    "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
    "gold_sql": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
    "predicted_sql": "SELECT driverRef\nFROM drivers\nWHERE nationality = 'German'\nORDER BY dob\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 972,
    "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
    "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
    "gold_sql": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
    "predicted_sql": "WITH FastestLap AS (\n    SELECT driverId, MIN(CAST(fastestLapTime AS REAL)) AS FastestLapTime\n    FROM results\n    WHERE fastestLapTime IS NOT NULL\n    GROUP BY driverId\n)\n\nSELECT d.driverId, d.code\nFROM drivers d\nINNER JOIN FastestLap fl ON d.driverId = fl.driverId\nWHERE strftime('%Y', d.dob) = '1971'\nORDER BY fl.FastestLapTime ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 977,
    "question": "From race no. 50 to 100, how many finishers have been disqualified?",
    "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
    "gold_sql": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
    "predicted_sql": "SELECT COUNT(DISTINCT driverId) AS disqualified_finishers\nFROM results\nWHERE raceId BETWEEN 50 AND 100\nAND statusId = 2\nAND time IS NOT NULL;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 978,
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "predicted_sql": "SELECT COUNT(*), c.location, c.lat, c.lng \nFROM circuits c\nWHERE c.country = 'Austria';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 981,
    "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
    "gold_sql": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
    "predicted_sql": "WITH FirstRace AS (\n    SELECT d.driverId, MIN(r.date) AS first_race_date\n    FROM drivers d\n    JOIN qualifying q ON d.driverId = q.driverId\n    JOIN races r ON q.raceId = r.raceId\n    GROUP BY d.driverId\n)\n\nSELECT r.year, d.forename || ' ' || d.surname AS DriverName, r.date, r.time\nFROM FirstRace fr\nJOIN drivers d ON fr.driverId = d.driverId\nJOIN races r ON r.date = fr.first_race_date\nORDER BY d.dob DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 988,
    "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980<= year(dob) <=1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
    "gold_sql": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
    "predicted_sql": "WITH GermanDrivers AS (\n    SELECT d.driverId, d.forename, d.surname\n    FROM drivers d\n    WHERE d.nationality = 'German'\n      AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985'\n),\nPitStopDurations AS (\n    SELECT ps.driverId, AVG(CAST(ps.milliseconds AS REAL)) AS avgDuration\n    FROM pitStops ps\n    GROUP BY ps.driverId\n)\nSELECT gd.forename || ' ' || gd.surname AS fullName\nFROM GermanDrivers gd\nJOIN PitStopDurations psd ON gd.driverId = psd.driverId\nORDER BY psd.avgDuration ASC\nLIMIT 3;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 989,
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "predicted_sql": "SELECT dr.forename || ' ' || dr.surname AS champion, re.time AS finish_time\nFROM results re\nJOIN races ra ON re.raceId = ra.raceId\nJOIN circuits ci ON ra.circuitId = ci.circuitId\nJOIN drivers dr ON re.driverId = dr.driverId\nWHERE ra.year = 2008 AND ci.country = 'Canada' AND re.position = 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 990,
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
    "gold_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "predicted_sql": "SELECT c.constructorRef, c.url\nFROM constructors c\nJOIN results r ON c.constructorId = r.constructorId\nJOIN races ra ON r.raceId = ra.raceId\nWHERE ra.year = 2009 AND ra.name = 'Singapore Grand Prix'\nORDER BY r.positionOrder ASC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 717,
    "question": "Please list all the superpowers of 3-D Man.",
    "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "predicted_sql": "SELECT sp.power_name\nFROM superhero sh\nJOIN hero_power hp ON sh.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sh.superhero_name = '3-D Man';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 994,
    "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
    "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
    "gold_sql": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(c.points) AS total_points, ct.name, ct.nationality\nFROM constructorResults c\nJOIN constructors ct ON c.constructorId = ct.constructorId\nJOIN races r ON c.raceId = r.raceId\nJOIN circuits ci ON r.circuitId = ci.circuitId\nWHERE r.year BETWEEN 1980 AND 2010 \nAND ci.name LIKE '%Monaco%'\nGROUP BY ct.constructorId\nORDER BY total_points DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1001,
    "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
    "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
    "gold_sql": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
    "predicted_sql": "SELECT d.forename || ' ' || d.surname AS FullName\nFROM drivers d\nJOIN qualifying q ON d.driverId = q.driverId\nJOIN races r ON q.raceId = r.raceId\nJOIN circuits c ON r.circuitId = c.circuitId\nWHERE r.year = 2008 AND c.name = 'Marina Bay Street Circuit' AND r.round = 3 AND q.position = 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1002,
    "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
    "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
    "predicted_sql": "SELECT (d.forename || ' ' || d.surname) AS FullName, d.nationality, r.name AS RaceName\nFROM drivers AS d\nJOIN results AS res ON d.driverId = res.driverId\nJOIN races AS r ON res.raceId = r.raceId\nWHERE d.dob = (SELECT MAX(dob) FROM drivers)\nORDER BY r.date ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1003,
    "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
    "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(accidents_count) AS max_accidents\nFROM (\n    SELECT r.driverId, COUNT(*) AS accidents_count\n    FROM results r\n    JOIN races ra ON r.raceId = ra.raceId\n    WHERE r.statusId = 3 AND ra.name = 'Canadian Grand Prix'\n    GROUP BY r.driverId\n) as AccidentCounts;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 1011,
    "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
    "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
    "gold_sql": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
    "predicted_sql": "SELECT d.forename || ' ' || d.surname AS full_name\nFROM lapTimes l\nJOIN drivers d ON l.driverId = d.driverId\nORDER BY l.time\nLIMIT 20;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 1014,
    "question": "Please list the lap records for the circuits in Italy.",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "predicted_sql": "SELECT c.name AS circuit_name, MIN(r.milliseconds) AS record_time_milliseconds\nFROM circuits c\nJOIN races rc ON c.circuitId = rc.circuitId\nJOIN results r ON rc.raceId = r.raceId\nWHERE c.country = 'Italy'\nGROUP BY c.circuitId\nORDER BY c.name;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 719,
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id) \nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Super Strength' AND s.height_cm > 200;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 723,
    "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id)\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE c.colour = 'Blue' AND sp.power_name = 'Agility';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 724,
    "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair.",
    "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; blond hair refers to colour = 'Blond' and hair_colour_id = colour.id; super power of \"Agility\" refers to power_name = 'Agility'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Blond'",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour eye ON s.eye_colour_id = eye.id AND eye.colour = 'Blue'\nJOIN colour hair ON s.hair_colour_id = hair.id AND hair.colour = 'Blond';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 726,
    "question": "Rank heroes published by Marvel Comics by their height in descending order.",
    "evidence": "name refers to superhero_name; the tallest hero refers to MAX(height_cm); published by Marvel Comics refers to publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT superhero_name, height_cm, RANK() OVER (ORDER BY height_cm DESC) AS HeightRank FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics'",
    "predicted_sql": "SELECT s.superhero_name, s.height_cm\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE p.publisher_name = 'Marvel Comics'\nORDER BY s.height_cm DESC, s.superhero_name ASC;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 728,
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "predicted_sql": "SELECT c.colour AS EyeColor, COUNT(s.id) AS PopularityCount\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE p.publisher_name = 'Marvel Comics'\nGROUP BY c.colour\nORDER BY PopularityCount DESC, c.colour ASC;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 730,
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE p.publisher_name = 'Marvel Comics' AND sp.power_name = 'Super Strength';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 732,
    "question": "Which publisher published the slowest superhero?",
    "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
    "predicted_sql": "SELECT p.publisher_name\nFROM publisher p\nJOIN superhero s ON p.id = s.publisher_id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed'\nORDER BY ha.attribute_value ASC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 733,
    "question": "How many gold-eyed superheroes did Marvel Comics publish?",
    "evidence": "gold-eyed refers to colour = 'Gold' where eye_colour_id = colour.id; superheroes that Marvel Comics published refers to publisher_name = 'Marvel Comics'",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Gold'",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS gold_eyed_heroes_count\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nJOIN publisher p ON s.publisher_id = p.id\nWHERE c.colour = 'Gold' AND p.publisher_name = 'Marvel Comics';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 736,
    "question": "Who is the dumbest superhero?",
    "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Intelligence')",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero AS s\nJOIN hero_attribute AS ha ON s.id = ha.hero_id\nJOIN attribute AS a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Intelligence'\nORDER BY ha.attribute_value ASC, s.superhero_name ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 737,
    "question": "What is Copycat's race?",
    "evidence": "Copycat is the superhero_name;",
    "gold_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
    "predicted_sql": "SELECT r.race\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nWHERE s.superhero_name = 'Copycat';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 738,
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Durability' AND ha.attribute_value < 50;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 739,
    "question": "What are the names of the superheroes with the power of death touch?",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower p ON hp.power_id = p.id\nWHERE p.power_name = 'Death Touch';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 740,
    "question": "How many female superheroes have a strength value of 100?",
    "evidence": "female refers to gender = 'Female'; strength value of 100 refers to attribute_name = 'Strength' AND attribute_value = 100",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS num_female_superheroes_with_strength_100\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE g.gender = 'Female' AND a.attribute_name = 'Strength' AND ha.attribute_value = 100;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 743,
    "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics.",
    "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'; superheroes who act in their own self-interest or make decisions based on their own moral code refers to alignment = 'Bad'; calculation = MULTIPLY(DIVIDE(SUM(alignment = 'Bad); count(id)), 100)",
    "gold_sql": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero)), CAST(SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) AS REAL) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T3.id = T1.alignment_id WHERE T3.alignment = 'Bad'",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS marvel_bad_heros\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nJOIN alignment a ON s.alignment_id = a.id\nWHERE a.alignment = 'Bad' AND p.publisher_name = 'Marvel Comics';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 744,
    "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published.",
    "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = SUBTRACT(SUM(publisher_name = 'Marvel Comics'), SUM(publisher_name = 'DC Comics'))",
    "gold_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "predicted_sql": "SELECT ABS(SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END)) AS difference_in_superheroes\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 745,
    "question": "Give the publisher ID of Star Trek.",
    "evidence": "Star Trek is the publisher_name;",
    "gold_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
    "predicted_sql": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 747,
    "question": "What is the total number of superheroes without full name?",
    "evidence": "superheroes without full name refers to full_name IS NULL",
    "gold_sql": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL",
    "predicted_sql": "SELECT COUNT(*) AS total_no_fullname_heroes FROM superhero WHERE full_name IS NULL;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 750,
    "question": "What is the average weight of all female superheroes?",
    "evidence": "female refers to gender = 'Female'; average weight refers to AVG(weight_kg)",
    "gold_sql": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'",
    "predicted_sql": "SELECT AVG(s.weight_kg) AS average_weight\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Female';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 751,
    "question": "List down at least five superpowers of male superheroes.",
    "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "predicted_sql": "SELECT DISTINCT sp.power_name\nFROM superhero sh\nJOIN gender g ON g.id = sh.gender_id\nJOIN hero_power hp ON hp.hero_id = sh.id\nJOIN superpower sp ON sp.id = hp.power_id\nWHERE g.gender = 'Male'\nLIMIT 5;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 753,
    "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color.",
    "evidence": "height from 170 to 190 refers to height_cm BETWEEN 170 AND 190; no eye color refers to colour = 'No Colour'",
    "gold_sql": "SELECT DISTINCT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.height_cm BETWEEN 170 AND 190 AND T2.colour = 'No Colour'",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN colour c ON s.eye_colour_id = c.id\nWHERE s.height_cm BETWEEN 170 AND 190 AND c.colour = 'No Colour';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 758,
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "gold_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "predicted_sql": "SELECT c.colour\nFROM superhero s\nJOIN race r ON s.race_id = r.id\nJOIN colour c ON s.hair_colour_id = c.id\nWHERE s.height_cm = 185 AND r.race = 'human';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 760,
    "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?",
    "evidence": "height between 150 to 180 refers to height_cm BETWEEN 150 AND 180; heroes published by Marvel Comics refers to publisher_name = 'Marvel Comics'; calculation = MULTIPLY(DIVIDE(SUM(publisher.id = 13)), COUNT(publisher.id), 100)",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.height_cm BETWEEN 150 AND 180",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN s.publisher_id = 13 THEN s.id END) / COUNT(DISTINCT s.id) AS percentage_marvel\nFROM superhero s\nWHERE s.height_cm BETWEEN 150 AND 180;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 761,
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nWHERE g.gender = 'Male' AND s.weight_kg > (SELECT 0.79 * AVG(weight_kg) FROM superhero);",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 764,
    "question": "What are the superpowers of heroes with ID 1?",
    "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;",
    "gold_sql": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1",
    "predicted_sql": "SELECT sp.power_name\nFROM hero_power hp\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE hp.hero_id = 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 765,
    "question": "How many heroes have stealth power?",
    "evidence": "stealth power refers to power_name = 'Stealth';",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'",
    "predicted_sql": "SELECT COUNT(DISTINCT superhero.id) \nFROM superhero\nJOIN hero_power ON hero_power.hero_id = superhero.id\nJOIN superpower ON superpower.id = hero_power.power_id\nWHERE superpower.power_name = 'Stealth';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 766,
    "question": "What is the hero's full name with the highest attribute in strength?",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')",
    "predicted_sql": "SELECT sh.full_name \nFROM superhero sh\nJOIN hero_attribute ha ON sh.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'strength'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 769,
    "question": "Which superhero has the most durability published by Dark Horse Comics?",
    "evidence": "which superhero refers to superhero_name; most durability refers to MAX(attribute_value) WHERE attribute_name = 'durability'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T2.attribute_value = (SELECT MAX(T5.attribute_value) FROM superhero AS T6 INNER JOIN hero_attribute AS T5 ON T6.id = T5.hero_id INNER JOIN publisher AS T7 ON T7.id = T6.publisher_id WHERE T7.publisher_name = 'Dark Horse Comics')",
    "predicted_sql": "SELECT super.superhero_name\nFROM superhero super\nJOIN hero_attribute h_attr ON super.id = h_attr.hero_id\nJOIN attribute attr ON h_attr.attribute_id = attr.id\nJOIN publisher pub ON super.publisher_id = pub.id\nWHERE attr.attribute_name = 'durability' AND pub.publisher_name = 'Dark Horse Comics'\nORDER BY h_attr.attribute_value DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 772,
    "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics.",
    "evidence": "eyes refers to eye_colour_id; hair refers to hair_colour_id; skin colour refers to skin_colour_id; female superheroes refers to gender = 'Female'; published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';",
    "gold_sql": "SELECT T1.eye_colour_id, T1.hair_colour_id, T1.skin_colour_id FROM superhero AS T1 INNER JOIN publisher AS T2 ON T2.id = T1.publisher_id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T2.publisher_name = 'Dark Horse Comics' AND T3.gender = 'Female'",
    "predicted_sql": "SELECT c_eye.colour AS eye_colour, c_hair.colour AS hair_colour, c_skin.colour AS skin_colour\nFROM superhero AS s\nJOIN gender AS g ON s.gender_id = g.id\nJOIN publisher AS p ON s.publisher_id = p.id\nJOIN colour AS c_eye ON s.eye_colour_id = c_eye.id\nJOIN colour AS c_hair ON s.hair_colour_id = c_hair.id\nJOIN colour AS c_skin ON s.skin_colour_id = c_skin.id\nWHERE g.gender = 'Female' AND p.publisher_name = 'Dark Horse Comics';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 773,
    "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero.",
    "evidence": "which superhero refers to superhero_name; the same eyes, hair and skin colour refers to hair_colour_id = skin_colour_id AND hair_colour_id = eye_colour_id; publisher refers to publisher_name;",
    "gold_sql": "SELECT T1.superhero_name, T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.eye_colour_id = T1.hair_colour_id AND T1.eye_colour_id = T1.skin_colour_id",
    "predicted_sql": "SELECT s.superhero_name, p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.hair_colour_id = s.skin_colour_id AND s.hair_colour_id = s.eye_colour_id;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 775,
    "question": "What is the percentage of blue female superheroes among all female superheroes?",
    "evidence": "percentage = MULTIPLY(DIVIDE(SUM(colour = 'Blue' WHERE gender = 'Female'), COUNT(gender = 'Female')), 100); blue refers to the color = 'Blue' WHERE skin_colour_id = colour.id; female refers to gender = 'Female';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.colour = 'Blue' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.gender = 'Female'",
    "predicted_sql": "SELECT\n  100.0 * SUM(CASE WHEN colour.id = skin_colour_id THEN 1 ELSE 0 END) / COUNT(*) AS percentage_blue_female\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nLEFT JOIN colour ON superhero.skin_colour_id = colour.id AND colour.colour = 'Blue'\nWHERE gender.gender = 'Female';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 779,
    "question": "How many powers does Amazo hero have?",
    "evidence": "Amazo hero refers to superhero_name = 'Amazo';",
    "gold_sql": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'",
    "predicted_sql": "SELECT COUNT(DISTINCT hp.power_id) AS number_of_powers\nFROM superhero h\nJOIN hero_power hp ON h.id = hp.hero_id\nWHERE h.superhero_name = 'Amazo';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 781,
    "question": "Provide the heights of the heroes whose eye colours are amber.",
    "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;",
    "gold_sql": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'",
    "predicted_sql": "SELECT sh.height_cm\nFROM superhero sh\nJOIN colour c ON sh.eye_colour_id = c.id\nWHERE c.colour = 'Amber';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 782,
    "question": "List the heroes' names whose eyes and hair colours are both black.",
    "evidence": "heroes' names refers to superhero_name; eyes and hair colours are both black refers to eye_colour_id AND hair_colour_id WHERE colour.colour = 'Black';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id AND T1.hair_colour_id = T2.id WHERE T2.colour = 'Black'",
    "predicted_sql": "SELECT sh.superhero_name\nFROM superhero sh\nJOIN colour c1 ON sh.eye_colour_id = c1.id\nJOIN colour c2 ON sh.hair_colour_id = c2.id\nWHERE c1.colour = 'Black' AND c2.colour = 'Black';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 785,
    "question": "Describe the names of neutral alignment superheroes.",
    "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'",
    "predicted_sql": "SELECT sh.superhero_name\nFROM superhero sh\nJOIN alignment a ON sh.alignment_id = a.id\nWHERE a.alignment = 'Neutral';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 786,
    "question": "How many heroes have the highest attribute value in strength?",
    "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "predicted_sql": "SELECT COUNT(DISTINCT ha.hero_id) \nFROM hero_attribute ha \nJOIN attribute a ON ha.attribute_id = a.id \nWHERE a.attribute_name = 'Strength' AND ha.attribute_value = (\n    SELECT MAX(attribute_value) \n    FROM hero_attribute ha \n    JOIN attribute a ON ha.attribute_id = a.id \n    WHERE a.attribute_name = 'Strength'\n);",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 788,
    "question": "How many percent of female heroes were published by Marvel Comics?",
    "evidence": "percent = MULTIPLY(DIVIDE(SUM(gender = 'Female' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100); female heroes refers to gender = 'Female'; Marvel Comics refers to publisher_name = 'Marvel Comics';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T3.gender = 'Female'",
    "predicted_sql": "SELECT \n    100.0 * SUM(CASE WHEN g.gender = 'Female' THEN 1 ELSE 0 END) / NULLIF(COUNT(s.publisher_id), 0) AS percentage_female_marvel\nFROM \n    superhero s\nJOIN \n    gender g ON s.gender_id = g.id\nJOIN \n    publisher p ON s.publisher_id = p.id\nWHERE \n    p.publisher_name = 'Marvel Comics';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 790,
    "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight.",
    "evidence": "difference = SUBTRACT(SUM(weight_kg WHERE full_name = 'Emil Blonsky'), SUM(weight_kg WHERE full_name = 'Charles Chandler')); Emil Blonsky is the full name of superhero; Charles Chandler is the full name of superhero;",
    "gold_sql": "SELECT ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Emil Blonsky' ) - ( SELECT weight_kg FROM superhero WHERE full_name LIKE 'Charles Chandler' ) AS CALCULATE",
    "predicted_sql": "SELECT (SELECT s.weight_kg FROM superhero s WHERE s.full_name = 'Emil Blonsky') - (SELECT s.weight_kg FROM superhero s WHERE s.full_name = 'Charles Chandler') AS weight_difference;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 791,
    "question": "Calculate the average height for all superhero.",
    "evidence": "average = DIVIDE(SUM(height_cm), COUNT(all heros));",
    "gold_sql": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(id) FROM superhero",
    "predicted_sql": "SELECT AVG(height_cm) AS average_height FROM superhero;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 792,
    "question": "What is Abomination's superpower?",
    "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'",
    "predicted_sql": "SELECT sp.power_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE s.superhero_name = 'Abomination';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 794,
    "question": "Which hero was the fastest?",
    "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE a.attribute_name = 'Speed'\nORDER BY ha.attribute_value DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 796,
    "question": "State all of 3-D Man's attributes along with their values.",
    "evidence": "3-D Man is the superhero_name. attributes refers to attribute_name; values refers to attribute_value;",
    "gold_sql": "SELECT T3.attribute_name, T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T1.superhero_name = '3-D Man'",
    "predicted_sql": "SELECT a.attribute_name, ha.attribute_value\nFROM superhero s\nJOIN hero_attribute ha ON s.id = ha.hero_id\nJOIN attribute a ON ha.attribute_id = a.id\nWHERE s.superhero_name = '3-D Man';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 797,
    "question": "Which superheroes have blue eyes with brown hair?",
    "evidence": "which superheroes refers to superhero_name; blue eyes refers to color = 'Blue' and color.id = eye_colour_id; brown hair refers to color = 'Brown' and color.id = hair_colour_id;",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T2.colour = 'Blue' AND T3.colour = 'Brown'",
    "predicted_sql": "SELECT superhero_name\nFROM superhero\nJOIN colour AS eye ON superhero.eye_colour_id = eye.id\nJOIN colour AS hair ON superhero.hair_colour_id = hair.id\nWHERE eye.colour = 'Blue' AND hair.colour = 'Brown';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 798,
    "question": "What is the publisher for Hawkman, Karate Kid and Speedy?",
    "evidence": "publisher refers to publisher_name; Hawkman refers to superhero_name = 'Hawkman'; Karate Kid refers to superhero_name = 'Karate Kid'; Speedy refers to superhero_name = 'Speedy';",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')",
    "predicted_sql": "SELECT DISTINCT p.publisher_name\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id\nWHERE s.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 800,
    "question": "Calculate the percentage of superheroes with blue eyes.",
    "evidence": "percentage = MULTIPLY(DIVIDE(SUM(superhero_name WHERE color = 'Blue'), COUNT(superhero_name)), 100.0); blue eyes refers to color = 'Blue' and color.id =  eye_colour_id = 7;",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.colour = 'Blue' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN s.eye_colour_id = 7 THEN s.id ELSE NULL END) / COUNT(DISTINCT s.id) AS percentage_with_blue_eyes\nFROM superhero s;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 801,
    "question": "Find the ratio between male superheroes and female superheroes.",
    "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "predicted_sql": "SELECT SUM(CASE WHEN gender_id = 2 THEN 1 ELSE 0 END) * 1.0 / NULLIF(SUM(CASE WHEN gender_id = 1 THEN 1 ELSE 0 END), 0) AS ratio\nFROM superhero;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 806,
    "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.",
    "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;",
    "gold_sql": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'",
    "predicted_sql": "SELECT colour.colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE superhero.full_name = 'Karen Beecher-Duncan';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 819,
    "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color.",
    "evidence": "missing weight data refers to weight_kg = 0 OR T1.weight_kg = NULL; difference = SUBTRACT(SUM(colour.id = 7), SUM(colour.id = 1)); blue eyes refers to eye_colour_id WHERE colour.id = 7; no eye color refers to eye_colour_id WHERE colour.id = 1;",
    "gold_sql": "SELECT SUM(CASE WHEN T2.id = 7 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg = 0 OR T1.weight_kg is NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT CASE WHEN s.eye_colour_id = 7 THEN s.id END) -\n       COUNT(DISTINCT CASE WHEN s.eye_colour_id = 1 THEN s.id END) AS eye_color_difference\nFROM superhero s\nWHERE s.weight_kg IS NULL OR s.weight_kg = 0;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 822,
    "question": "How many green-skinned villains are there in the superhero universe?",
    "evidence": "green-skinned refers to colour.colour = 'Green' WHERE skin_colour_id = colour.id; villains refers to alignment = 'Bad';",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN colour AS T3 ON T1.skin_colour_id = T3.id WHERE T2.alignment = 'Bad' AND T3.colour = 'Green'",
    "predicted_sql": "SELECT COUNT(DISTINCT s.id) AS green_skinned_villains\nFROM superhero s\nJOIN alignment a ON s.alignment_id = a.id\nJOIN colour c ON s.skin_colour_id = c.id\nWHERE a.alignment = 'Bad' AND c.colour = 'Green';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 824,
    "question": "Identify superheroes who can control wind and list their names in alphabetical order.",
    "evidence": "superheroes refers to superhero_name; can control wind refers to power_name = 'Wind Control';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Wind Control' ORDER BY T1.superhero_name",
    "predicted_sql": "SELECT s.superhero_name\nFROM superhero s\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Wind Control'\nORDER BY s.superhero_name ASC;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 825,
    "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
    "evidence": "ability of Phoenix Force refers to power_name = 'Phoenix Force';",
    "gold_sql": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
    "predicted_sql": "SELECT g.gender\nFROM superhero s\nJOIN gender g ON s.gender_id = g.id\nJOIN hero_power hp ON s.id = hp.hero_id\nJOIN superpower sp ON hp.power_id = sp.id\nWHERE sp.power_name = 'Phoenix Force';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 829,
    "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes.",
    "evidence": "DC refers to publisher_name = 'DC Comics'; Marvel Comics refers to publisher_name = 'Marvel Comics'; difference = SUBTRACT(SUM(publisher_name = 'DC Comics'), SUM(publisher_name = 'Marvel Comics'));",
    "gold_sql": "SELECT SUM(CASE WHEN T2.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id",
    "predicted_sql": "SELECT ABS(SUM(CASE WHEN p.publisher_name = 'DC Comics' THEN 1 ELSE 0 END) - SUM(CASE WHEN p.publisher_name = 'Marvel Comics' THEN 1 ELSE 0 END)) AS difference_in_superheroes\nFROM superhero s\nJOIN publisher p ON s.publisher_id = p.id;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 531,
    "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?",
    "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)",
    "gold_sql": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )",
    "predicted_sql": "SELECT u.DisplayName, u.Reputation\nFROM users u\nWHERE DisplayName IN ('Harlan', 'Jarrod Dixon')\nORDER BY Reputation DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 532,
    "question": "Please list the display names of all the users whose accounts were created in the year 2011.",
    "evidence": "account created in the year 2011 refers to year(CreationDate) = 2011",
    "gold_sql": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2011'",
    "predicted_sql": "SELECT u.DisplayName\nFROM users u\nWHERE strftime('%Y', u.CreationDate) = '2011';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 533,
    "question": "How many users last accessed the website after 2014/9/1?",
    "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01'",
    "gold_sql": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'",
    "predicted_sql": "SELECT COUNT(DISTINCT u.Id)\nFROM users u\nWHERE u.LastAccessDate > '2014-09-01';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 539,
    "question": "Who is the owner of the post \"Eliciting priors from experts\"?",
    "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors from experts'",
    "predicted_sql": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = \"Eliciting priors from experts\";",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 537,
    "question": "How many posts does the user csgillespie own?",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "gold_sql": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "predicted_sql": "SELECT COUNT(*) AS post_count\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 544,
    "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?",
    "evidence": "\"Examples for teaching: Correlation does not mean causation\" is the Title of post; user who last edited refers to LastEditorUserId",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.LastEditorUserId = T2.Id WHERE T1.Title = 'Examples for teaching: Correlation does not mean causation'",
    "predicted_sql": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.LastEditorUserId = u.Id\nWHERE p.Title = 'Examples for teaching: Correlation does not mean causation';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 547,
    "question": "Among the posts owned by an elder user, how many of them have a score of over 19?",
    "evidence": "elder users refers to Age > 65; Score of over 19 refers to Score > = 20",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65",
    "predicted_sql": "SELECT COUNT(DISTINCT p.Id) AS NumHighScoringPosts\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Age > 65 AND p.Score >= 20;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 549,
    "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.",
    "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId",
    "gold_sql": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'",
    "predicted_sql": "SELECT posts.Body\nFROM tags\nJOIN posts ON tags.ExcerptPostId = posts.Id\nWHERE tags.TagName = 'bayesian';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 555,
    "question": "What is the average score of the posts owned by the user csgillespie?",
    "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)",
    "gold_sql": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "predicted_sql": "SELECT AVG(p.Score) AS AverageScore\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'csgillespie';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 557,
    "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?",
    "evidence": "score of over 5 refers to Score > 5; elder user refers to Age > 65; percentage = Divide (Count(Id where Age>65), Count(Id)) * 100",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Age > 65, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score > 5",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN u.Age > 65 THEN p.Id END) / NULLIF(COUNT(DISTINCT p.Id), 0) AS PercentageElderUserPosts\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Score > 5;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 563,
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
    "gold_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "predicted_sql": "SELECT p.FavoriteCount\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE c.UserId = 3025 AND c.CreationDate = '2014/4/23 20:29:39.0';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 565,
    "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?",
    "evidence": "user no. 23853 refers to UserId = '23853'; at 9:08:18 on 2013/7/12 refers to CreationDate = '2013-07-12 09:08:18.0'; not well-finished refers to ClosedDate IS NULL and vice versa",
    "gold_sql": "SELECT IIF(T2.ClosedDate IS NULL, 'NOT well-finished', 'well-finished') AS resylt FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 23853 AND T1.CreationDate = '2013-07-12 09:08:18.0'",
    "predicted_sql": "SELECT CASE WHEN p.ClosedDate IS NULL THEN 'No' ELSE 'Yes' END AS WellFinished\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE c.UserId = 23853 AND c.CreationDate = '2013-07-12 09:08:18.0';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 567,
    "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?",
    "evidence": "\"Tiago Pasqualini\" is the DisplayName;",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'",
    "predicted_sql": "SELECT COUNT(*) AS NumberOfPosts\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Tiago Pasqualini';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 568,
    "question": "Provide the display name of the user who made the vote No.6347.",
    "evidence": "vote no. 6347 refers to Id = '6347'",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 6347",
    "predicted_sql": "SELECT u.DisplayName\nFROM votes v JOIN users u ON v.UserId = u.Id\nWHERE v.Id = 6347;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 571,
    "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?",
    "evidence": "user no. 24 refers to UserId = OwnerUserId = '24'; times of his/her post than votes = Divide (Count(post.Id), Count(votes.Id))",
    "gold_sql": "SELECT CAST(COUNT(T2.Id) AS REAL) / COUNT(DISTINCT T1.Id) FROM votes AS T1 INNER JOIN posts AS T2 ON T1.UserId = T2.OwnerUserId WHERE T1.UserId = 24",
    "predicted_sql": "SELECT COUNT(DISTINCT p.Id) / NULLIF(COUNT(DISTINCT v.Id), 0) AS times_posts_compared_to_votes\nFROM posts p\nLEFT JOIN votes v ON p.Id = v.PostId AND p.OwnerUserId = v.UserId\nWHERE p.OwnerUserId = 24;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 572,
    "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
    "evidence": "\"Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer\" is the Title of post; views refers to ViewCount",
    "gold_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
    "predicted_sql": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 573,
    "question": "Write the contents of comments with a score of 17.",
    "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text",
    "gold_sql": "SELECT Text FROM comments WHERE Score = 17",
    "predicted_sql": "SELECT Text FROM comments WHERE Score = 17;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 576,
    "question": "Name the user that commented 'thank you user93!'",
    "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'",
    "predicted_sql": "SELECT u.DisplayName\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Text = 'thank you user93!';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 578,
    "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?",
    "evidence": "\"Understanding what Dassault iSight is doing?\" is the Title of post; user refers to DisplayName;",
    "gold_sql": "SELECT T1.DisplayName, T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Title = 'Understanding what Dassault iSight is doing?'",
    "predicted_sql": "SELECT u.DisplayName, u.Reputation\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Understanding what Dassault iSight is doing?';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 581,
    "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'",
    "evidence": "'Open source tools for visualizing multi-dimensional data' is the Title of Post; owner refers to DisplayName;",
    "gold_sql": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Open source tools for visualizing multi-dimensional data?'",
    "predicted_sql": "SELECT u.DisplayName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Open source tools for visualizing multi-dimensional data';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 584,
    "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "evidence": "\"Why square the difference instead of taking the absolute value in standard deviation?\" is the Title of post;",
    "gold_sql": "SELECT T2.Comment FROM posts AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'",
    "predicted_sql": "SELECT c.Text\nFROM comments c\nINNER JOIN posts p ON c.PostId = p.Id\nWHERE p.Title = 'Why square the difference instead of taking the absolute value in standard deviation?';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 586,
    "question": "Which user added a bounty amount of 50 to the post title mentioning variance?",
    "evidence": "bounty amount of 50 refers to BountyAmount = 50; user refers to DisplayName; title mentioning variance refers to Title include 'variance'",
    "gold_sql": "SELECT T3.DisplayName, T1.Title FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId INNER JOIN users AS T3 ON T3.Id = T2.UserId WHERE T2.BountyAmount = 50 AND T1.Title LIKE '%variance%'",
    "predicted_sql": "SELECT u.DisplayName\nFROM votes v\nJOIN posts p ON v.PostId = p.Id\nJOIN users u ON v.UserId = u.Id\nWHERE p.Title LIKE '%variance%'\nAND v.BountyAmount = 50;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 587,
    "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post.",
    "evidence": "tagged as  'humor' refers to tag = '<humor>'; comment of the post refers to Text; average view count = AVG(ViewCount)",
    "gold_sql": "SELECT AVG(T2.ViewCount), T2.Title, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.PostId  WHERE T2.Tags = '<humor>' GROUP BY T2.Title, T1.Text ",
    "predicted_sql": "SELECT p.Title, c.Text\nFROM posts p\nJOIN comments c ON p.Id = c.PostId\nWHERE p.Tags LIKE '%<humor>%'\nGROUP BY p.Id, c.Id, p.Title, c.Text\nHAVING AVG(p.ViewCount);",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 592,
    "question": "How many users are awarded with more than 5 badges?",
    "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId",
    "gold_sql": "SELECT COUNT(UserId) FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5",
    "predicted_sql": "SELECT COUNT(DISTINCT b.UserId)\nFROM badges b\nGROUP BY b.UserId\nHAVING COUNT(b.Name) > 5;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 595,
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
    "gold_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "predicted_sql": "SELECT p.OwnerUserId\nFROM posts p\nJOIN (\n    SELECT ph.PostId, ph.UserId\n    FROM postHistory ph\n    GROUP BY ph.PostId, ph.UserId\n    HAVING COUNT(*) = 1\n) ph ON p.Id = ph.PostId\nWHERE p.ViewCount >= 1000 AND p.OwnerUserId = ph.UserId\nGROUP BY p.OwnerUserId\nHAVING COUNT(DISTINCT p.Id) > 0;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 598,
    "question": "What is the percentage difference of student badges given during 2010 and 2011?",
    "evidence": "student badges refers to badge's name = 'Student'; during 2010 refers to Year(Date) = 2010; during 2011 refers to Year(Date) = 2011; percentage difference = Subtract (Divide(Count(Name where Year(Date) = 2010), Count (Name)) *100, Divide(Count(Name where Year(Date) = 2011), Count(Name)) * 100)",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', Date) = '2010', 1, 0)) AS REAL) * 100 / COUNT(Id) - CAST(SUM(IIF(STRFTIME('%Y', Date) = '2011', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges WHERE Name = 'Student'",
    "predicted_sql": "WITH YearlyBadgeCounts AS (\n    SELECT \n        strftime('%Y', Date) AS Year, \n        COUNT(*) AS Count\n    FROM badges\n    WHERE Name = 'Student'\n    AND strftime('%Y', Date) IN ('2010', '2011')\n    GROUP BY strftime('%Y', Date)\n)\nSELECT\n    100.0 * (MAX(CASE WHEN Year = '2010' THEN Count ELSE 0 END) - MAX(CASE WHEN Year = '2011' THEN Count ELSE 0 END))\n    / MAX(CASE WHEN Year = '2010' THEN Count ELSE 1 END) AS PercentageDifference\nFROM YearlyBadgeCounts;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 604,
    "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?",
    "evidence": "creating more than 10 post refers to Count (UserId) > 10; average of the up votes = Divide (Sum(UpVotes), Count (UserId)); average age = Divide (Sum(Age), Count(UserId))",
    "gold_sql": "SELECT AVG(T1.UpVotes), AVG(T1.Age) FROM users AS T1 INNER JOIN ( SELECT OwnerUserId, COUNT(*) AS post_count FROM posts GROUP BY OwnerUserId HAVING post_count > 10) AS T2 ON T1.Id = T2.OwnerUserId",
    "predicted_sql": "SELECT AVG(u.UpVotes) AS AvgUpVotes, AVG(u.Age) AS AvgAge\nFROM users u\nJOIN (\n  SELECT OwnerUserId, COUNT(*) AS PostCount\n  FROM posts\n  GROUP BY OwnerUserId\n  HAVING COUNT(*) > 10\n) p ON u.Id = p.OwnerUserId;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 629,
    "question": "Calculate the ratio of votes in 2010 and 2011.",
    "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes",
    "predicted_sql": "SELECT \n  (SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2010') * 1.0 / \n  NULLIF((SELECT COUNT(*) FROM votes WHERE strftime('%Y', CreationDate) = '2011'), 0) AS ratio_2010_2011;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 633,
    "question": "Which post by slashnick has the most answers count? State the post ID.",
    "evidence": "most answers count refers to MAX(AnswerCount); post by slashnick refers to DisplayName = 'slashnick';",
    "gold_sql": "SELECT T2.PostId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'slashnick' ORDER BY T3.AnswerCount DESC LIMIT 1",
    "predicted_sql": "SELECT p.Id\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'slashnick' AND p.PostTypeId = 1\nORDER BY p.AnswerCount DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 634,
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "predicted_sql": "SELECT OwnerDisplayName, MAX(TotalViewCount) AS Popularity\nFROM (\n  SELECT p.OwnerDisplayName, SUM(p.ViewCount) AS TotalViewCount\n  FROM posts p\n  JOIN users u ON p.OwnerUserId = u.Id\n  WHERE u.DisplayName IN ('Harvey Motulsky', 'Noah Snyder')\n  GROUP BY p.OwnerDisplayName\n) AS PopularityData\nGROUP BY OwnerDisplayName\nORDER BY Popularity DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 637,
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "evidence": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
    "gold_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "predicted_sql": "SELECT DISTINCT t.TagName\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nLEFT JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%'\nWHERE u.DisplayName = 'Mark Meckes'\nAND p.CommentCount = 0\nAND t.TagName IS NOT NULL;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 639,
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
    "gold_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "predicted_sql": "WITH CommunityPosts AS (\n    SELECT p.Id\n    FROM posts p\n    JOIN users u ON p.OwnerUserId = u.Id\n    WHERE u.DisplayName = 'Community'\n),\nRPosts AS (\n    SELECT p.Id\n    FROM posts p\n    JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%'\n    WHERE t.TagName = 'r'\n),\nCommunityRPosts AS (\n    SELECT cp.Id\n    FROM CommunityPosts cp\n    JOIN RPosts rp ON cp.Id = rp.Id\n)\nSELECT 100.0 * COUNT(DISTINCT crp.Id) / NULLIF(COUNT(DISTINCT cp.Id), 0) AS percentage\nFROM CommunityPosts cp\nLEFT JOIN CommunityRPosts crp ON cp.Id = crp.Id;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 640,
    "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos.",
    "evidence": "calculation = SUBTRACT(SUM(ViewCount where DisplayName = 'Mornington'), SUM(ViewCount where DisplayName = 'Amos'));",
    "gold_sql": "SELECT SUM(IIF(T1.DisplayName = 'Mornington', T3.ViewCount, 0)) - SUM(IIF(T1.DisplayName = 'Amos', T3.ViewCount, 0)) AS diff FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId",
    "predicted_sql": "SELECT\n  (SELECT SUM(p.ViewCount)\n   FROM posts p\n   JOIN users u ON p.OwnerUserId = u.Id\n   WHERE u.DisplayName = 'Mornington')\n  -\n  (SELECT SUM(p.ViewCount)\n   FROM posts p\n   JOIN users u ON p.OwnerUserId = u.Id\n   WHERE u.DisplayName = 'Amos') AS DifferenceInViewCount;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 665,
    "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?",
    "evidence": "calculation = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010 and AnswerCount < = 2), 12)",
    "gold_sql": "SELECT CAST(COUNT(T1.Id) AS REAL) / 12 FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.AnswerCount <= 2 AND STRFTIME('%Y', T1.CreationDate) = '2010'",
    "predicted_sql": "WITH EligiblePosts AS (\n  SELECT p.Id AS PostId\n  FROM posts p\n  WHERE p.CreaionDate BETWEEN '2010-01-01' AND '2010-12-31'\n    AND p.AnswerCount <= 2\n)\n\nSELECT AVG(LinkCount) AS AverageMonthlyLinks\nFROM (\n  SELECT COUNT(DISTINCT pl.Id) AS LinkCount\n  FROM postLinks pl\n  INNER JOIN EligiblePosts e ON pl.PostId = e.PostId\n  WHERE strftime('%Y', pl.CreationDate) = '2010'\n  GROUP BY strftime('%m', pl.CreationDate)\n);",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 669,
    "question": "When did 'chl' cast its first vote in a post?",
    "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
    "gold_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
    "predicted_sql": "SELECT MIN(v.CreationDate) AS FirstVoteDate\nFROM votes v\nJOIN users u ON v.UserId = u.Id\nWHERE u.DisplayName = 'chl';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 671,
    "question": "What is the display name of the user who acquired the first Autobiographer badge?",
    "evidence": "Autobiographer is the name of the badge; acquired the first refers to MIN(Date);",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Autobiographer' ORDER BY T2.Date LIMIT 1",
    "predicted_sql": "SELECT u.DisplayName\nFROM users u\nJOIN badges b ON u.Id = b.UserId\nWHERE b.Name = 'Autobiographer'\nORDER BY b.Date\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 672,
    "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?",
    "evidence": "favorite amount of 4 or more refers to FavoriteCount > = 4; Location = 'United Kingdom';",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Location = 'United Kingdom' AND T2.FavoriteCount >= 4",
    "predicted_sql": "SELECT COUNT(DISTINCT p.OwnerUserId) AS UserCount\nFROM posts p\nINNER JOIN users u ON p.OwnerUserId = u.Id\nWHERE u.Location = 'United Kingdom' AND p.FavoriteCount >= 4;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 678,
    "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.",
    "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);",
    "gold_sql": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1",
    "predicted_sql": "SELECT p.Id, p.Title\nFROM posts AS p\nJOIN users AS u ON p.OwnerUserId = u.Id\nWHERE u.DisplayName = 'Harvey Motulsky'\nORDER BY p.ViewCount DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 682,
    "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name.",
    "evidence": "the most valuable post in 2010 refers to MAX(FavoriteCount) where year(CreationDate) = 2010;",
    "gold_sql": "SELECT T2.OwnerUserId, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' ORDER BY T2.FavoriteCount DESC LIMIT 1",
    "predicted_sql": "SELECT p.Id AS PostId, u.DisplayName\nFROM posts AS p\nJOIN users AS u ON p.OwnerUserId = u.Id\nWHERE p.FavoriteCount = (\n    SELECT MAX(FavoriteCount)\n    FROM posts\n    WHERE strftime('%Y', CreaionDate) = '2010'\n) AND strftime('%Y', p.CreaionDate) = '2010';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 683,
    "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?",
    "evidence": "percentage = DIVIDE(COUNT(Id where YEAR(CreationDate) = 2011 and Reputation > 1000), COUNT(Id) ) * 100;",
    "gold_sql": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T2.CreaionDate) = '2011' AND T1.Reputation > 1000, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId",
    "predicted_sql": "WITH RelevantPosts2011 AS (\n    SELECT P.Id, P.OwnerUserId FROM posts P\n    WHERE strftime('%Y', P.CreaionDate) = '2011'\n),\nRelevantUsers AS (\n    SELECT U.Id FROM users U\n    WHERE U.Reputation > 1000\n),\nQualifiedPosts AS (\n    SELECT COUNT(DISTINCT RP.Id) AS CountQualified FROM RelevantPosts2011 RP\n    JOIN RelevantUsers U ON RP.OwnerUserId = U.Id\n),\nTotalPosts2011 AS (\n    SELECT COUNT(*) AS CountTotal FROM RelevantPosts2011\n)\n\nSELECT (100.0 * QP.CountQualified / TP.CountTotal) AS PercentWithHighReputation\nFROM QualifiedPosts QP, TotalPosts2011 TP;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 685,
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "gold_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "predicted_sql": "SELECT u.DisplayName, p.ViewCount\nFROM posts p\nJOIN users u ON p.OwnerUserId = u.Id\nWHERE p.Title = 'Computer Game Datasets';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 687,
    "question": "How many comments were added to the post with the highest score?",
    "evidence": "the highest score refers to MAX(Score);",
    "gold_sql": "SELECT COUNT(T2.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1",
    "predicted_sql": "SELECT COUNT(*) AS CommentCount\nFROM comments\nWHERE PostId = (\n    SELECT Id\n    FROM posts\n    ORDER BY Score DESC\n    LIMIT 1\n);",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 694,
    "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it.",
    "evidence": "the latest comment refers to MAX(CreationDate);",
    "gold_sql": "SELECT T3.Text, T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T2.Title = 'Analysing wind data with R' AND T3.CreationDate = (SELECT MAX(T4.CreationDate) FROM users AS T5 INNER JOIN posts AS T6 ON T5.Id = T6.OwnerUserId INNER JOIN comments AS T4 ON T6.Id = T4.PostId WHERE T6.Title = 'Analysing wind data with R')",
    "predicted_sql": "SELECT c.Text AS CommentText, COALESCE(u.DisplayName, c.UserDisplayName) AS Username\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nLEFT JOIN users u ON c.UserId = u.Id\nWHERE p.Title = 'Analysing wind data with R'\nORDER BY c.CreationDate DESC\nLIMIT 10;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 704,
    "question": "What is the excerpt post ID and wiki post ID of the tag named sample?",
    "evidence": "tag named sample refers to TagName = 'sample';",
    "gold_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'",
    "predicted_sql": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 705,
    "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
    "evidence": "Text = 'fine, you win :)';",
    "gold_sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
    "predicted_sql": "SELECT u.Reputation, u.UpVotes\nFROM comments c\nJOIN users u ON c.UserId = u.Id\nWHERE c.Text = 'fine, you win :)';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 707,
    "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?",
    "evidence": "views ranging from 100 to 150 refers to ViewCount BETWEEN 100 and 150; comment with the highest score refers to Text where MAX(Score);",
    "gold_sql": "SELECT Text FROM comments WHERE PostId IN ( SELECT Id FROM posts WHERE ViewCount BETWEEN 100 AND 150 ) ORDER BY Score DESC LIMIT 1",
    "predicted_sql": "SELECT c.Text\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.ViewCount BETWEEN 100 AND 150\nORDER BY c.Score DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 710,
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "evidence": "in posts with 1 comment refers to CommentCount = 1;",
    "gold_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "predicted_sql": "SELECT COUNT(*) AS ZeroScoreCommentCount\nFROM comments c\nJOIN posts p ON c.PostId = p.Id\nWHERE p.CommentCount = 1 AND c.Score = 0;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 716,
    "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?",
    "evidence": "percentage = DIVIDE(COUNT(UserId where UpVotes = 0 and Score BETWEEN 5 and 10))*100, (COUNT(UserId where Score BETWEEN 5 and 10));",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.UpVotes = 0, 1, 0)) AS REAL) * 100/ COUNT(T1.Id) AS per FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Score BETWEEN 5 AND 10",
    "predicted_sql": "WITH RelevantComments AS (\n    SELECT c.UserId\n    FROM comments c\n    WHERE c.Score BETWEEN 5 AND 10\n),\nUserVoteStats AS (\n    SELECT\n        r.UserId,\n        (CASE WHEN u.UpVotes = 0 THEN 1 ELSE 0 END) AS ZeroUpVotes\n    FROM RelevantComments r\n    JOIN users u ON r.UserId = u.Id\n)\nSELECT\n    100.0 * SUM(ZeroUpVotes) / COUNT(*) AS PercentageZeroUpVotes\nFROM UserVoteStats;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 341,
    "question": "What are the borderless cards available without powerful foils?",
    "evidence": "borderless' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
    "predicted_sql": "SELECT c.id, c.name\nFROM cards c\nWHERE c.borderColor = 'borderless' \nAND ((c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NULL) OR (c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NULL) OR (c.cardKingdomFoilId IS NULL AND c.cardKingdomId IS NOT NULL));",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 344,
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "gold_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "predicted_sql": "SELECT c.name\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.rarity = 'mythic' AND l.format = 'gladiator' AND l.status = 'Banned';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 345,
    "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format.",
    "evidence": "Artifact type of cards refers to types = 'Artifact'; card does not have multiple faces on the same card refers to side is NULL'; vintage play format refers to format = 'vintage';",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.type = 'Artifact' AND T2.format = 'vintage' AND T1.side IS NULL",
    "predicted_sql": "SELECT l.status\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.types = 'Artifact'\nAND c.side IS NULL\nAND l.format = 'vintage';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 347,
    "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values.",
    "evidence": "cards have missing or degraded properties and value refers to hasContentWarning = 1; 'Stephen Daniele' is artist; Find all cards refers to return card id",
    "gold_sql": "SELECT T1.id, T2.text, T1.hasContentWarning FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Stephen Daniele'",
    "predicted_sql": "SELECT \n    c.id AS card_id,\n    r.text AS ruling_text,\n    c.hasContentWarning AS has_missing_or_degraded_properties\nFROM \n    cards c\n    LEFT JOIN rulings r ON c.uuid = r.uuid\nWHERE \n    c.artist = 'Stephen Daniel' AND\n    c.hasContentWarning = 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 349,
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "evidence": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
    "gold_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
    "predicted_sql": "SELECT c.name AS card_name, c.artist AS artist_name, (c.isPromo = 1) AS is_promotional\nFROM cards c\nJOIN (\n    SELECT r.uuid, COUNT(*) as rulings_count\n    FROM rulings r\n    GROUP BY r.uuid\n    ORDER BY rulings_count DESC\n    LIMIT 1\n) max_rulings ON max_rulings.uuid = c.uuid;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 352,
    "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
    "evidence": "Chinese Simplified' is the language; percentage = Divide(Sum(id where language = 'Chinese Simplified'), Count(id)) *100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
    "predicted_sql": "SELECT \n  100.0 * COUNT(DISTINCT fd.id) / COUNT(DISTINCT c.id) AS percentage_chinese_simplified\nFROM \n  cards c\nLEFT JOIN \n  foreign_data fd ON c.uuid = fd.uuid AND fd.language = 'Chinese Simplified';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 356,
    "question": "How many cards have infinite power?",
    "evidence": "infinite power refers to power = '*';",
    "gold_sql": "SELECT COUNT(*) FROM cards WHERE power = '*'",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE power = '*';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 358,
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "evidence": "name of card  = 'Ancestor''s Chosen' ;",
    "gold_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "predicted_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 366,
    "question": "What is the rule of playing card \"Benalish Knight\"?",
    "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;",
    "gold_sql": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "predicted_sql": "SELECT text AS rule FROM cards WHERE asciiName = 'Benalish Knight';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 368,
    "question": "What is the percentage of borderless cards?",
    "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards",
    "predicted_sql": "SELECT\n  100.0 * COUNT(CASE WHEN borderColor = 'borderless' THEN 1 END) / COUNT(*) AS percentage_of_borderless_cards\nFROM\n  cards;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 371,
    "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?",
    "evidence": "Story Spotlight card refers to isStorySpotlight = 1; French is the language; Percentage = Divide(Count(id) where language = 'French' and isStorySpotlight = 1, Count(id) where isStorySpotlight = 1)*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.isStorySpotlight = 1",
    "predicted_sql": "WITH SpotlightCards AS (\n    SELECT c.id\n    FROM cards c\n    WHERE c.isStorySpotlight = 1\n),\nFrenchSpotlightCards AS (\n    SELECT fd.id\n    FROM foreign_data fd\n    JOIN SpotlightCards sc ON fd.uuid = sc.id\n    WHERE fd.language = 'French'\n)\n\nSELECT 100.0 * (SELECT COUNT(DISTINCT fsc.id) FROM FrenchSpotlightCards fsc) / NULLIF((SELECT COUNT(DISTINCT sc.id) FROM SpotlightCards sc), 0) AS PercentageFrenchStorySpotlight;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 377,
    "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?",
    "evidence": "subtype other than Angel refers to subtypes is not 'Angel';",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'",
    "predicted_sql": "SELECT COUNT(*) \nFROM cards \nWHERE originalType = 'Summon - Angel' AND subtypes != 'Angel';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 379,
    "question": "What are the cards belong to duel deck a? List the ID.",
    "evidence": "duel deck a refers to duelDeck = a;",
    "gold_sql": "SELECT id FROM cards WHERE duelDeck = 'a'",
    "predicted_sql": "SELECT id FROM cards WHERE duelDeck = 'a';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 383,
    "question": "How many of the banned cards are white border?",
    "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
    "predicted_sql": "SELECT COUNT(DISTINCT c.id)\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.status = 'Banned' AND c.borderColor = 'white';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 391,
    "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?",
    "evidence": "Artifact card refers to originalType = 'Artifact'; black color refers to colors = 'B'; foreign language refers to language in foreign_data",
    "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Artifact' AND T1.colors = 'B'",
    "predicted_sql": "SELECT c.name, fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.originalType = 'Artifact' AND c.colors = 'B' AND fd.language != 'English';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 402,
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "evidence": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "predicted_sql": "WITH TextlessStoryCards AS (\n    SELECT COUNT(*) AS TextlessStoryCount\n    FROM cards\n    WHERE isStorySpotlight = 1 AND isTextless = 1\n),\nTotalStoryCards AS (\n    SELECT COUNT(*) AS TotalStoryCount\n    FROM cards\n    WHERE isStorySpotlight = 1\n),\nPercentageCalc AS (\n    SELECT \n        (100.0 * TextlessStoryCards.TextlessStoryCount) / TotalStoryCards.TotalStoryCount AS PercentageTextless\n    FROM TextlessStoryCards, TotalStoryCards\n)\nSELECT id, PercentageCalc.PercentageTextless\nFROM cards, PercentageCalc\nWHERE isStorySpotlight = 1 AND isTextless = 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 405,
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "evidence": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "predicted_sql": "SELECT COUNT(DISTINCT st.setCode)\nFROM set_translations st\nJOIN sets s ON st.setCode = s.code\nWHERE s.block = 'Commander' AND st.language = 'Portuguese (Brasil)';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 409,
    "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces.",
    "evidence": "pre-modern format refers to format = 'premodern' ;do not have multiple faces refers to side IS NULL",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT c.id)\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'premodern'\nAND r.text = 'This is a triggered mana ability.'\nAND c.side IS NULL;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 412,
    "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
    "evidence": "in French refers to language = 'French'; black border color refers to borderColor = 'black'",
    "gold_sql": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
    "predicted_sql": "SELECT fd.name\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.artist = 'Matthew D. Wilson' AND c.layout = 'normal' AND c.borderColor = 'black' AND c.types LIKE '%Creature%' AND fd.language = 'French';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 414,
    "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
    "evidence": "set of 180 cards refers to baseSetSize = 180",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
    "predicted_sql": "SELECT DISTINCT st.language\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.baseSetSize = 180 AND s.block = 'Ravnica';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 415,
    "question": "What percentage of cards with format commander and legal status do not have a content warning?",
    "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN c.hasContentWarning = 0 THEN 1 ELSE 0 END) / COUNT(c.id) AS PercentageNoWarning\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE l.format = 'commander' AND l.status = 'legal';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 416,
    "question": "What percentage of cards without power are in French?",
    "evidence": "in French refers to language = 'French'; cards without power refers to power IS NULL OR power = '*'; percentage = DIVIDE(COUNT(language = 'French' and power is NULL or power = '*'), COUNT( power is NULL or power = '*'))*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'French' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.power IS NULL OR T1.power = '*'",
    "predicted_sql": "SELECT 100.0 * COUNT(DISTINCT CASE WHEN fd.language = 'French' THEN c.id END) / NULLIF(COUNT(DISTINCT c.id), 0)\nFROM cards c\nLEFT JOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE (c.power IS NULL OR c.power = '*');",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 422,
    "question": "What is the language of the card with the multiverse number 149934?",
    "evidence": "multiverse number 149934 refers to multiverseid = 149934;",
    "gold_sql": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
    "predicted_sql": "SELECT fd.language\nFROM foreign_data fd\nWHERE fd.multiverseid = 149934;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 424,
    "question": "What proportion of cards do not have a text box with a normal layout?",
    "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) / COUNT(*) AS ProportionOfTextlessNormal\nFROM cards;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 427,
    "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?",
    "evidence": "known as Archenemy refers to mcmName = 'Archenemy'; having the code ARC refers to setCode = 'ARC'",
    "gold_sql": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.mcmName = 'Archenemy' AND T2.setCode = 'ARC'",
    "predicted_sql": "SELECT DISTINCT fd.language\nFROM foreign_data fd\nJOIN cards c ON fd.uuid = c.uuid\nJOIN sets s ON s.code = c.setCode\nWHERE s.mcmName = 'Archenemy' AND s.code = 'ARC';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 440,
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "gold_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "predicted_sql": "SELECT fd.language\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'A Pedra Fellwar';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 459,
    "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?",
    "evidence": "\"Serra Angel\" refers to name = 'Serra Angel'; \"Shrine Keeper\" refers to name = 'Shrine Keeper'; card costs more converted mana when the value of convertedManaCost is greater",
    "gold_sql": "SELECT name FROM cards WHERE name IN ('Serra Angel', 'Shrine Keeper') ORDER BY convertedManaCost DESC LIMIT 1",
    "predicted_sql": "SELECT name, convertedManaCost\nFROM cards\nWHERE name IN ('Serra Angel', 'Shrine Keeper')\nORDER BY convertedManaCost DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 462,
    "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?",
    "evidence": "Italian is a language which refers to language = 'Italian'; with \"Ancestor's Chosen\" in the card set refers to name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Ancestor''s Chosen' ) AND language = 'Italian'",
    "predicted_sql": "SELECT st.translation\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nJOIN set_translations st ON s.code = st.setCode\nWHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 465,
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
    "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "predicted_sql": "SELECT EXISTS (\n    SELECT 1\n    FROM cards c\n    JOIN foreign_data fd ON c.uuid = fd.uuid\n    WHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Korean'\n) as has_korean_version;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 466,
    "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?",
    "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; designed by Adam refers to artist = 'Adam Rex'",
    "gold_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition' AND T1.artist = 'Adam Rex'",
    "predicted_sql": "SELECT COUNT(*) \nFROM cards \nJOIN sets ON cards.setCode = sets.code \nWHERE sets.name = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 468,
    "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?",
    "evidence": "Eighth Edition is the name of card set which refers to name = 'Eighth Edition'; Simplified Chinese refers to language = 'Chinese Simplified'; translation of the name refers to translation",
    "gold_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.name = 'Eighth Edition' AND T2.language = 'Chinese Simplified'",
    "predicted_sql": "SELECT st.translation\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.name = 'Eighth Edition' AND st.language = 'Chinese Simplified';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 469,
    "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?",
    "evidence": "card set \"Angel of Mercy\" refers to name = 'Angel of Mercy'; appear on Magic: The Gathering Online refers to mtgoCode is NOT NULL and vice versa",
    "gold_sql": "SELECT IIF(T2.mtgoCode IS NOT NULL, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Angel of Mercy'",
    "predicted_sql": "SELECT EXISTS(\n    SELECT 1 \n    FROM cards c \n    JOIN sets s ON c.setCode = s.code\n    WHERE c.name = 'Angel of Mercy' AND s.mtgoCode IS NOT NULL\n) as appeared_on_mtgo_online;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 472,
    "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?",
    "evidence": "sets in the block \"Ice Age\" refers to block = 'Ice Age'; Italian translation refers to language = 'Italian' and translation is not null",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block = 'Ice Age' AND T2.language = 'Italian' AND T2.translation IS NOT NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT st.setCode)\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE s.block = 'Ice Age' AND st.language = 'Italian' AND st.translation IS NOT NULL;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 473,
    "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?",
    "evidence": "card set Adarkar Valkyrie refers to name = 'Adarkar Valkyrie'; isForeignOnly = 1 means only available outside the United States;",
    "gold_sql": "SELECT IIF(isForeignOnly = 1, 'YES', 'NO') FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Adarkar Valkyrie'",
    "predicted_sql": "SELECT DISTINCT s.isForeignOnly \nFROM cards c \nJOIN sets s ON c.setCode = s.code\nWHERE c.name = 'Adarkar Valkyrie';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 474,
    "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?",
    "evidence": "Italian translation refers to language = 'Italian'; have a translation means translation is not null; base set number of under 100 refers to baseSetSize < 10",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation IS NOT NULL AND T1.baseSetSize < 100 AND T2.language = 'Italian'",
    "predicted_sql": "SELECT COUNT(DISTINCT s.code)\nFROM sets s\nJOIN set_translations st ON s.code = st.setCode\nWHERE st.language = 'Italian' AND s.baseSetSize < 100;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 477,
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "predicted_sql": "SELECT DISTINCT c.artist\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Coldsnap' AND c.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 479,
    "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; converted mana cost higher than 5 refers to convertedManaCost > 5; unknown power refers to power = '*' or T1.power is null",
    "gold_sql": "SELECT SUM(CASE WHEN T1.power LIKE '*' OR T1.power IS NULL THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.convertedManaCost > 5",
    "predicted_sql": "SELECT COUNT(*) AS unknown_power_count\nFROM cards\nJOIN sets ON cards.setCode = sets.code\nWHERE sets.name = 'Coldsnap'\n  AND cards.convertedManaCost > 5\n  AND (cards.power IS NULL OR cards.power = '*');",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 480,
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "predicted_sql": "SELECT fd.flavorText\nFROM cards c\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE c.name = 'Ancestor''s Chosen' AND fd.language = 'Italian';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 483,
    "question": "Please list the Italian text ruling of all the cards in the set Coldsnap.",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'",
    "gold_sql": "SELECT DISTINCT T1.text FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian'",
    "predicted_sql": "SELECT fd.text AS ItalianTextRuling\nFROM cards c\nJOIN rulings r ON c.uuid = r.uuid\nJOIN foreign_data fd ON c.uuid = fd.uuid\nWHERE fd.language = 'Italian' AND c.setCode = 'CSP';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 484,
    "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'; highest converted mana cost refers to MAX(convertedManaCost)",
    "gold_sql": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.convertedManaCost = (SELECT MAX(convertedManaCost) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian')",
    "predicted_sql": "SELECT fd.name\nFROM foreign_data AS fd\nJOIN cards AS c ON fd.uuid = c.uuid\nJOIN sets AS s ON c.setCode = s.code\nWHERE s.name = 'Coldsnap' AND fd.language = 'Italian'\nAND c.convertedManaCost = (\n  SELECT MAX(c2.convertedManaCost)\n  FROM cards AS c2\n  JOIN sets AS s2 ON c2.setCode = s2.code\n  WHERE s2.name = 'Coldsnap'\n);",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 486,
    "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?",
    "evidence": "converted mana cost of 7 refers to convertedManaCost = 7; card set Coldsnap refers to name = 'Coldsnap'; percentage = DIVIDE(SUM(convertedManaCost = 7), SUM(convertedManaCost))*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.convertedManaCost = 7 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "predicted_sql": "SELECT\n  100.0 * SUM(CASE WHEN c.convertedManaCost = 7 THEN 1 ELSE 0 END) / COUNT(c.id) AS percentage_of_cards_with_cmc_7\nFROM\n  cards c\nJOIN\n  sets s ON c.setCode = s.code\nWHERE\n  s.name = 'Coldsnap';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 487,
    "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; foil is incredibly powerful refers to cardKingdomFoilId is not null AND cardKingdomId is not null; the percentage of incredibly powerful cards in the set refers to DIVIDE(SUM(incredibly powerful), SUM(name = 'Coldsnap'))*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.cardKingdomFoilId IS NOT NULL AND T1.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN c.cardKingdomFoilId IS NOT NULL AND c.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) / COUNT(*) AS percentage_powerful\nFROM cards c\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Coldsnap';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 522,
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "predicted_sql": "SELECT c.name, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.edhrecRank = 1 AND l.status = 'Banned';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 528,
    "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal.",
    "evidence": "the set Hour of Devastation refers to set.name = 'Hour of Devastation'; names of all the cards in the set refers to cards.name; legal cards refers to status = 'Legal'; the formats refers to format",
    "gold_sql": "SELECT DISTINCT T2.name , CASE WHEN T1.status = 'Legal' THEN T1.format ELSE NULL END FROM legalities AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid WHERE T2.setCode IN ( SELECT code FROM sets WHERE name = 'Hour of Devastation' )",
    "predicted_sql": "SELECT c.name, l.format\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nJOIN sets s ON c.setCode = s.code\nWHERE s.name = 'Hour of Devastation' AND l.status = 'Legal';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 529,
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
    "gold_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "predicted_sql": "SELECT s.name\nFROM sets s\nJOIN set_translations st_korean ON s.code = st_korean.setCode AND st_korean.language = 'Korean'\nLEFT JOIN set_translations st_japanese ON s.code = st_japanese.setCode AND st_japanese.language LIKE '%Japanese%'\nWHERE st_japanese.id IS NULL\nGROUP BY s.name, s.id\nORDER BY s.name;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 530,
    "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any.",
    "evidence": "frame styles refers to frameVersion; cards Allen Williams worked on refers to artist = 'Allen Williams'; banned cards refers to status = 'Banned'",
    "gold_sql": "SELECT DISTINCT T1.frameVersion, T1.name , IIF(T2.status = 'Banned', T1.name, 'NO') FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Allen Williams'",
    "predicted_sql": "SELECT DISTINCT c.frameVersion, c.name\nFROM cards c\nJOIN legalities l ON c.uuid = l.uuid\nWHERE c.artist = 'Allen Williams' AND (l.status = 'Banned' OR l.status IS NULL)\nORDER BY c.frameVersion, c.name;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 195,
    "question": "What is the most common bond type?",
    "evidence": "most common bond type refers MAX(COUNT(bond_type))",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "predicted_sql": "SELECT bond_type\nFROM bond\nGROUP BY bond_type\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 197,
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
    "gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "predicted_sql": "SELECT AVG(oxygen_count) AS avg_oxygen_in_single_bonded\nFROM (\n    SELECT m.molecule_id, COUNT(DISTINCT a.atom_id) AS oxygen_count\n    FROM molecule AS m\n    JOIN bond AS b ON m.molecule_id = b.molecule_id AND b.bond_type = '-'\n    JOIN connected AS c ON c.bond_id = b.bond_id\n    JOIN atom AS a ON a.atom_id = c.atom_id AND a.element = 'O'\n    GROUP BY m.molecule_id\n);",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 198,
    "question": "On average how many carcinogenic molecules are single bonded?",
    "evidence": "carcinogenic molecules refers to label = '+'; single-bonded refers to bond_type = '-'; average = DIVIDE(SUM(bond_type = '-'), COUNT(atom_id))",
    "gold_sql": "SELECT AVG(single_bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS single_bond_count FROM bond AS T1  INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN molecule AS T3 ON T3.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T3.label = '+' GROUP BY T3.molecule_id) AS subquery",
    "predicted_sql": "SELECT AVG(single_bond_count) AS average_single_bonded\nFROM (\n  SELECT m.molecule_id, COUNT(DISTINCT b.bond_id) AS single_bond_count\n  FROM molecule m\n  JOIN bond b ON m.molecule_id = b.molecule_id\n  WHERE m.label = '+' AND b.bond_type = '-'\n  GROUP BY m.molecule_id\n) AS carr_single_bonds;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 200,
    "question": "Find the triple-bonded molecules which are carcinogenic.",
    "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'",
    "predicted_sql": "SELECT DISTINCT mo.molecule_id\nFROM molecule mo\nJOIN bond b ON mo.molecule_id = b.molecule_id\nWHERE b.bond_type = '#' AND mo.label = '+';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 201,
    "question": "What is the percentage of carbon in double-bond molecules?",
    "evidence": "carbon refers to element = 'c'; double-bond molecules refers to bond_type = '='; percentage = DIVIDE(SUM(element = 'c'), COUNT(atom_id))",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element = 'c' THEN T1.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T1.atom_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '='",
    "predicted_sql": "SELECT\n    100.0 * SUM(CASE WHEN a.element = 'c' THEN 1 ELSE 0 END) / COUNT(DISTINCT a.atom_id) AS percentage_carbon\nFROM\n    atom a\nJOIN\n    connected c ON a.atom_id = c.atom_id\nJOIN\n    bond b ON c.bond_id = b.bond_id\nWHERE\n    b.bond_type = '=';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 206,
    "question": "What elements are in the TR004_8_9 bond atoms?",
    "evidence": "TR004_8_9 bond atoms refers to bond_id = 'TR004_8_9';",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR004_8_9'",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nINNER JOIN connected c ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id\nWHERE c.bond_id = 'TR004_8_9';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 207,
    "question": "What elements are in a double type bond?",
    "evidence": "double type bond refers to bond_type = '=';",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id OR a.atom_id = c.atom_id2\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '=';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 208,
    "question": "Which type of label is the most numerous in atoms with hydrogen?",
    "evidence": "with hydrogen refers to element = 'h'; label most numerous in atoms refers to MAX(COUNT(label)); ",
    "gold_sql": "SELECT T.label FROM ( SELECT T2.label, COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'h' GROUP BY T2.label ORDER BY COUNT(T2.molecule_id) DESC LIMIT 1 ) t",
    "predicted_sql": "SELECT m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE a.element = 'h'\nGROUP BY m.label\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 212,
    "question": "Which element is the least numerous in non-carcinogenic molecules?",
    "evidence": "label = '-' means molecules are non-carcinogenic; least numerous refers to MIN(COUNT(element));",
    "gold_sql": "SELECT T.element FROM (SELECT T1.element, COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' GROUP BY T1.element ORDER BY COUNT(DISTINCT T1.molecule_id) ASC LIMIT 1) t",
    "predicted_sql": "SELECT a.element\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE m.label = '-'\nGROUP BY a.element\nORDER BY COUNT(a.atom_id) ASC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 213,
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
    "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "predicted_sql": "SELECT b.bond_type\nFROM bond AS b\nJOIN connected AS c ON b.bond_id = c.bond_id\nWHERE (c.atom_id = 'TR004_8' AND c.atom_id2 = 'TR004_20') OR (c.atom_id = 'TR004_20' AND c.atom_id2 = 'TR004_8');",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 215,
    "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
    "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
    "gold_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
    "predicted_sql": "SELECT COUNT(DISTINCT a.atom_id)\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE a.element IN ('i', 's')\nAND b.bond_type = '-';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 218,
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "predicted_sql": "WITH CarcinogenicMolecules AS (\n    SELECT m.molecule_id\n    FROM molecule m\n    WHERE m.label = '+'\n),\nFluorineInCarcinogenic AS (\n    SELECT DISTINCT a.molecule_id\n    FROM atom a\n    INNER JOIN CarcinogenicMolecules c ON a.molecule_id = c.molecule_id\n    WHERE a.element = 'f'\n),\nTotalNonFluorineCarcinogenic AS (\n    SELECT COUNT(*) AS count_non_fluorine\n    FROM CarcinogenicMolecules\n    WHERE molecule_id NOT IN (SELECT molecule_id FROM FluorineInCarcinogenic)\n)\n\nSELECT \n    100.0 * TotalNonFluorineCarcinogenic.count_non_fluorine / COUNT(DISTINCT c.molecule_id) AS percentage_non_fluorine\nFROM CarcinogenicMolecules c, TotalNonFluorineCarcinogenic;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 219,
    "question": "What is the percentage of carcinogenic molecules in triple type bonds?",
    "evidence": "label = '+' mean molecules are carcinogenic; triple bond refers to bond_type = '#'; percentage = DIVIDE(SUM(bond_type = '#') * 100, COUNT(bond_id)) as percent where label = '+'",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#'",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN b.bond_type = '#' THEN 1 ELSE 0 END) / COUNT(DISTINCT b.bond_id) AS percentage\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '+';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 220,
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "evidence": "TR000 is the molecule id;",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "predicted_sql": "SELECT element\nFROM atom\nWHERE molecule_id = 'TR000'\nGROUP BY element\nORDER BY element ASC\nLIMIT 3;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 226,
    "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places.",
    "evidence": "double bond refers to bond_type = '='; TR008 is the molecule id; percentage = DIVIDE(SUM(bond_type = '='), COUNT(bond_id)) as percent where molecule_id = 'TR008'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id),5) FROM bond AS T WHERE T.molecule_id = 'TR008'",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) / COUNT(bond_id), 5) AS percentage_double_bonds\nFROM bond\nWHERE molecule_id = 'TR008';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 227,
    "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places.",
    "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id),3) FROM molecule t",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) / NULLIF(COUNT(m.molecule_id), 0), 3) AS percentage_carcinogenic\nFROM molecule AS m;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 228,
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) / COUNT(a.atom_id), 4) AS hydrogen_percentage\nFROM atom a\nWHERE a.molecule_id = 'TR206';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 230,
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "evidence": "TR060 is the molecule id; ",
    "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "predicted_sql": "SELECT a.atom_id, a.element, m.label\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.molecule_id = 'TR060';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 231,
    "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?",
    "evidence": "TR010 is the molecule id; majority of the bond found refers to MAX(COUNT(bond_type)); ",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT T1.bond_type, COUNT(T1.molecule_id) FROM bond AS T1  WHERE T1.molecule_id = 'TR010' GROUP BY T1.bond_type ORDER BY COUNT(T1.molecule_id) DESC LIMIT 1 ) AS T",
    "predicted_sql": "SELECT b.bond_type, m.label AS carcinogenic_status\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.molecule_id = 'TR010'\nGROUP BY b.bond_type\nORDER BY COUNT(*) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 232,
    "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order.",
    "evidence": "label = '-' means molecules are not carcinogenic; single type bond refers to bond_type = '-'; list top three molecules refers to return molecule_id and order by molecule_id;",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' AND T2.label = '-' ORDER BY T2.molecule_id LIMIT 3",
    "predicted_sql": "SELECT m.molecule_id\nFROM molecule m\nJOIN bond b ON m.molecule_id = b.molecule_id\nWHERE m.label = '-' AND b.bond_type = '-'\nGROUP BY m.molecule_id\nORDER BY m.molecule_id ASC\nLIMIT 3;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 234,
    "question": "How many bonds which involved atom 12 does molecule TR009 have?",
    "evidence": "TR009 is the molecule id;  involved atom 12 refers to atom_id = 'TR009_12' or atom_id2 = 'TR009_12'",
    "gold_sql": "SELECT COUNT(T2.bond_id) FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.molecule_id = 'TR009' AND T2.atom_id = T1.molecule_id || '_1' AND T2.atom_id2 = T1.molecule_id || '_2'",
    "predicted_sql": "SELECT COUNT(DISTINCT b.bond_id) AS num_bonds\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.molecule_id = 'TR009'\nAND (c.atom_id = 'TR009_12' OR c.atom_id2 = 'TR009_12');",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 236,
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "evidence": "atoms refer to atom_id or atom_id2",
    "gold_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "predicted_sql": "SELECT b.bond_type, c.atom_id, c.atom_id2\nFROM bond b\nJOIN connected c ON b.bond_id = c.bond_id\nWHERE b.bond_id = 'TR001_6_9';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 239,
    "question": "How many connections does the atom 19 have?",
    "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';",
    "gold_sql": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'",
    "predicted_sql": "SELECT COUNT(DISTINCT c.bond_id) AS num_connections\nFROM connected c\nJOIN atom a ON c.atom_id = a.atom_id\nWHERE a.atom_id LIKE 'TR%_19';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 240,
    "question": "List all the elements of the toxicology of the molecule \"TR004\".",
    "evidence": "TR004 is the molecule id;",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR004'",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nWHERE a.molecule_id = 'TR004';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 242,
    "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic.",
    "evidence": "atoms from 21 to 25 refers to SUBSTR(atom_id, 7, 2) between '21' and '25'; label = '+' mean molecules are carcinogenic",
    "gold_sql": "SELECT DISTINCT T2.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE SUBSTR(T1.atom_id, -2) BETWEEN '21' AND '25' AND T2.label = '+'",
    "predicted_sql": "SELECT DISTINCT mo.molecule_id \nFROM molecule mo \nJOIN atom a ON mo.molecule_id = a.molecule_id \nWHERE mo.label = '+' \nAND SUBSTR(a.atom_id, 7, 2) BETWEEN '21' AND '25';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 243,
    "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?",
    "evidence": "have phosphorus as atom elements refers to element = 'p'; have nitrogen as atom elements refers to element = 'n'",
    "gold_sql": "SELECT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id IN ( SELECT T3.bond_id FROM connected AS T3 INNER JOIN atom AS T4 ON T3.atom_id = T4.atom_id WHERE T4.element = 'p' ) AND T1.element = 'n'",
    "predicted_sql": "WITH PhosphorusAtoms AS (\n    SELECT atom_id, molecule_id\n    FROM atom\n    WHERE element = 'p'\n),\nNitrogenAtoms AS (\n    SELECT atom_id, molecule_id\n    FROM atom\n    WHERE element = 'n'\n),\nBondsForElements AS (\n    SELECT c.bond_id\n    FROM connected c\n    JOIN PhosphorusAtoms p ON c.atom_id = p.atom_id\n    JOIN NitrogenAtoms n ON c.atom_id2 = n.atom_id\n    UNION\n    SELECT c.bond_id\n    FROM connected c\n    JOIN PhosphorusAtoms p ON c.atom_id2 = p.atom_id\n    JOIN NitrogenAtoms n ON c.atom_id = n.atom_id\n)\nSELECT DISTINCT b.bond_id\nFROM BondsForElements bfe\nJOIN bond b ON bfe.bond_id = b.bond_id;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 244,
    "question": "Is the molecule with the most double bonds carcinogenic?",
    "evidence": "double bond refers to bond_type = ' = '; label = '+' mean molecules are carcinogenic",
    "gold_sql": "SELECT T1.label FROM molecule AS T1 INNER JOIN (SELECT T.molecule_id, COUNT(T.bond_type) AS bond_count FROM bond AS T WHERE T.bond_type = '=' GROUP BY T.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT molecule_id, COUNT(bond_type) AS bond_count FROM bond WHERE bond_type = '=' GROUP BY molecule_id) AS subquery) ORDER BY bond_count DESC) AS T2 ON T1.molecule_id = T2.molecule_id",
    "predicted_sql": "SELECT molecule.label = '+' AS is_carcinogenic\nFROM (\n  SELECT molecule_id\n  FROM bond\n  WHERE bond_type = ' = '\n  GROUP BY molecule_id\n  ORDER BY COUNT(*) DESC\n  LIMIT 1\n) AS most_double_bonds\nJOIN molecule ON molecule.molecule_id = most_double_bonds.molecule_id;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 245,
    "question": "What is the average number of bonds the atoms with the element iodine have?",
    "evidence": "atoms with the element iodine refers to element = 'i'; average = DIVIDE(COUND(bond_id), COUNT(atom_id)) where element = 'i'",
    "gold_sql": "SELECT CAST(COUNT(T2.bond_id) AS REAL) / COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'i'",
    "predicted_sql": "SELECT AVG(bond_count) AS average_bonds_per_iodine\nFROM (\n  SELECT a.atom_id, COUNT(c.bond_id) AS bond_count\n  FROM atom a\n  LEFT JOIN connected c ON a.atom_id = c.atom_id\n  WHERE a.element = 'i'\n  GROUP BY a.atom_id\n);",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 247,
    "question": "List all the elements of atoms that can not bond with any other atoms.",
    "evidence": " atoms cannot bond with other atoms means atom_id NOT in connected table;",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.element NOT IN ( SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id )",
    "predicted_sql": "SELECT a.element\nFROM atom a \nLEFT JOIN connected c ON a.atom_id = c.atom_id\nWHERE c.atom_id IS NULL;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 248,
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "evidence": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "predicted_sql": "SELECT DISTINCT atom.element\nFROM atom\nJOIN connected ON atom.atom_id = connected.atom_id\nJOIN bond ON connected.bond_id = bond.bond_id\nWHERE bond.bond_type = '#' AND bond.molecule_id = 'TR041';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 249,
    "question": "What are the elements of the atoms of TR144_8_19?",
    "evidence": "TR144_8_19 is the bond id; ",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR144_8_19'",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE c.bond_id = 'TR144_8_19';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 253,
    "question": "List the elements of all the triple bonds.",
    "evidence": "triple bond refers to bond_type = '#';",
    "gold_sql": "SELECT DISTINCT T3.element FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T1.bond_type = '#'",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nJOIN bond b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '#';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 255,
    "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places.",
    "evidence": "single bond refers to bond_type = '-'; label = '+' mean molecules are carcinogenic; proportion = DIVIDE(SUM(label = '+') * 100, COUNT(bond_id)) where bond_type = '-'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T2.label = '+' THEN T1.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T1.bond_id),5) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-'",
    "predicted_sql": "SELECT ROUND(100.0 * SUM(CASE WHEN m.label = '+' THEN 1 ELSE 0 END) / NULLIF(COUNT(b.bond_id), 0), 5) AS carcinogenic_proportion_percentage\nFROM bond b\nJOIN molecule m ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '-';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 260,
    "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine.",
    "evidence": "triple bond refers to bond_type = '#'; phosphorus refers to element = 'p'; bromine refers to element = 'br'",
    "gold_sql": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '#' AND T1.element IN ('p', 'br')",
    "predicted_sql": "SELECT COUNT(DISTINCT a.atom_id) AS total_atoms\nFROM atom AS a\nJOIN molecule AS m ON a.molecule_id = m.molecule_id\nJOIN bond AS b ON b.molecule_id = m.molecule_id\nWHERE b.bond_type = '#' AND (a.element = 'p' OR a.element = 'br');",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 263,
    "question": "What is the composition of element chlorine in percentage among the single bond molecules?",
    "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN a.element = 'cl' THEN 1 ELSE 0 END) / COUNT(DISTINCT a.atom_id) AS chlorine_percentage\nFROM atom AS a\nJOIN connected AS c ON a.atom_id = c.atom_id\nJOIN bond AS b ON c.bond_id = b.bond_id\nWHERE b.bond_type = '-';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 268,
    "question": "What are the elements for bond id TR001_10_11?",
    "evidence": "TR001_10_11 is the bond id;",
    "gold_sql": "SELECT T2.element FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T1.bond_id = 'TR001_10_11'",
    "predicted_sql": "SELECT DISTINCT a.element\nFROM atom a\nJOIN connected c ON a.atom_id = c.atom_id\nWHERE c.bond_id = 'TR001_10_11';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 273,
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
    "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "predicted_sql": "WITH CarcinogenicMolecules AS (\n    SELECT mo.molecule_id\n    FROM molecule mo\n    WHERE mo.label = '+'\n),\nTotalCarcinogenicAtoms AS (\n    SELECT COUNT(*) AS total_atoms\n    FROM atom a\n    JOIN CarcinogenicMolecules cm ON a.molecule_id = cm.molecule_id\n),\nChlorineAtomsInCarcinogenic AS (\n    SELECT COUNT(*) AS chlorine_atoms\n    FROM atom a\n    JOIN CarcinogenicMolecules cm ON a.molecule_id = cm.molecule_id\n    WHERE a.element = 'cl'\n)\nSELECT 100.0 * ChlorineAtomsInCarcinogenic.chlorine_atoms / NULLIF(TotalCarcinogenicAtoms.total_atoms, 0) AS percentage\nFROM ChlorineAtomsInCarcinogenic, TotalCarcinogenicAtoms;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 281,
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
    "predicted_sql": "SELECT a.element, COUNT(*) AS count\nFROM molecule m\nJOIN atom a ON m.molecule_id = a.molecule_id\nWHERE m.label = '+'\nAND substr(a.atom_id, 7, 1) = '4'\nGROUP BY a.element;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 282,
    "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label.",
    "evidence": "hydrogen refers to element = 'h'; ratio = DIVIDE(SUM(element = 'h'), count(element)) where molecule_id = 'TR006' ; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "gold_sql": "WITH SubQuery AS (SELECT DISTINCT T1.atom_id, T1.element, T1.molecule_id, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR006') SELECT CAST(COUNT(CASE WHEN element = 'h' THEN atom_id ELSE NULL END) AS REAL) / (CASE WHEN COUNT(atom_id) = 0 THEN NULL ELSE COUNT(atom_id) END) AS ratio, label FROM SubQuery GROUP BY label",
    "predicted_sql": "SELECT label, 100.0 * SUM(CASE WHEN a.element = 'h' THEN 1 ELSE 0 END) / COUNT(*) AS hydrogen_ratio_percentage\nFROM atom a\nJOIN molecule m ON a.molecule_id = m.molecule_id\nWHERE a.molecule_id = 'TR006'\nGROUP BY m.label;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 327,
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
    "gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "predicted_sql": "SELECT mo.molecule_id\nFROM molecule mo\nJOIN atom a ON mo.molecule_id = a.molecule_id\nWHERE mo.label = '-'\nGROUP BY mo.molecule_id\nHAVING COUNT(DISTINCT a.atom_id) > 5;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 5,
    "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?",
    "evidence": "Exclusively virtual refers to Virtual = 'F'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath > 400",
    "predicted_sql": "SELECT COUNT(DISTINCT s.CDSCode)\nFROM schools s\nINNER JOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.AvgScrMath > 400 AND s.Virtual = 'F';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 12,
    "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
    "evidence": "Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "gold_sql": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
    "predicted_sql": "WITH SchoolsWithHighExcellence AS (\n    SELECT\n        satscores.cds AS CDSCode\n    FROM\n        satscores\n    WHERE\n        NumTstTakr > 0 AND (CAST(NumGE1500 AS REAL) / NumTstTakr) > 0.3\n)\n\nSELECT\n    MAX(CAST(frpm.`Free Meal Count (Ages 5-17)` AS REAL) / \n        NULLIF(frpm.`Enrollment (Ages 5-17)`, 0)) AS HighestEligibleFreeRate\nFROM\n    frpm\nJOIN\n    SchoolsWithHighExcellence ON frpm.CDSCode = SchoolsWithHighExcellence.CDSCode\nWHERE\n    frpm.`Enrollment (Ages 5-17)` > 0;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 17,
    "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers.",
    "evidence": "Valid charter number means the number is not null",
    "gold_sql": "SELECT CharterNum, AvgScrWrite, RANK() OVER (ORDER BY AvgScrWrite DESC) AS WritingScoreRank FROM schools AS T1  INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite > 499 AND CharterNum is not null",
    "predicted_sql": "SELECT s.CDSCode, s.CharterNum, AVG(w.AvgScrWrite) AS AvgWritingScore\nFROM schools s\nJOIN satscores w ON s.CDSCode = w.cds\nWHERE w.AvgScrWrite > 499 AND s.CharterNum IS NOT NULL\nGROUP BY s.CDSCode, s.CharterNum\nORDER BY AvgWritingScore DESC;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 23,
    "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools.",
    "evidence": "Diffrence in enrollement = `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "gold_sql": "SELECT T1.School, T1.Street FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` - T2.`Enrollment (Ages 5-17)` > 30",
    "predicted_sql": "SELECT s.School, s.Street\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE ABS(f.\"Enrollment (K-12)\" - f.\"Enrollment (Ages 5-17)\") > 30;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 24,
    "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?",
    "evidence": "Percent eligible for free meals = Free Meal Count (K-12) / Total (Enrollment (K-12)",
    "gold_sql": "SELECT T2.`School Name` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE CAST(T2.`Free Meal Count (K-12)` AS REAL) / T2.`Enrollment (K-12)` > 0.1 AND T1.NumGE1500 > 0",
    "predicted_sql": "SELECT s.School\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nJOIN satscores t ON s.CDSCode = t.cds\nWHERE f.`Percent (%) Eligible Free (K-12)` > 0.1 AND t.NumGE1500 > 0;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 25,
    "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?",
    "evidence": "Average of average math = sum(average math scores) / count(schools).",
    "gold_sql": "SELECT T1.sname, T2.`Charter Funding Type` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T2.`District Name` LIKE 'Riverside%' GROUP BY T1.sname, T2.`Charter Funding Type` HAVING CAST(SUM(T1.AvgScrMath) AS REAL) / COUNT(T1.cds) > 400",
    "predicted_sql": "SELECT sc.School, sc.FundingType\nFROM schools sc\nJOIN satscores ss ON sc.CDSCode = ss.cds\nWHERE sc.County = 'Riverside' AND ss.AvgScrMath > 400\nGROUP BY sc.School\nHAVING AVG(ss.AvgScrMath) > 400;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 26,
    "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?",
    "evidence": "Full communication address should include Street, City, State and zip code if any.",
    "gold_sql": "SELECT T1.`School Name`, T2.Street, T2.City, T2.State, T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Monterey' AND T1.`Free Meal Count (Ages 5-17)` > 800 AND T1.`School Type` = 'High Schools (Public)'",
    "predicted_sql": "SELECT s.School, s.Street || ', ' || s.City || ', ' || s.State || ' ' || s.Zip AS Address\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE f.County Name = 'Monterey' \nAND f.School Type = 'High School' \nAND f.Free Meal Count (Ages 5-17) > 800;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 28,
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "predicted_sql": "WITH EnrollmentDifferences AS (\n    SELECT \n        f.CDSCode,\n        (f.`Enrollment (K-12)` - f.`Enrollment (Ages 5-17)`) AS Difference\n    FROM \n        frpm AS f\n    INNER JOIN \n        schools AS s ON f.CDSCode = s.CDSCode\n    WHERE \n        s.FundingType = 'Locally Funded'\n),\n\nAverageDifference AS (\n    SELECT \n        AVG(Difference) AS AverageDiff\n    FROM \n        EnrollmentDifferences\n)\n\nSELECT \n    s.School,\n    s.DOCType\nFROM \n    EnrollmentDifferences AS e\nJOIN \n    schools AS s ON e.CDSCode = s.CDSCode\nJOIN \n    AverageDifference AS ad\nWHERE \n    e.Difference > ad.AverageDiff\nORDER BY \n    s.School ASC, \n    s.DOCType ASC;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 31,
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "gold_sql": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
    "predicted_sql": "WITH RankedSchools AS (\n    SELECT\n        fr.CDSCode,\n        fr.SchoolName,\n        fr.Enrollment,\n        fr.FreeMealCount,\n        ROW_NUMBER() OVER (ORDER BY fr.Enrollment DESC) AS rank\n    FROM\n        frpm fr\n    WHERE\n        fr.Enrollment IS NOT NULL AND fr.FreeMealCount IS NOT NULL\n)\n\nSELECT\n    rs.SchoolName,\n    100.0 * rs.FreeMealCount / rs.Enrollment AS EligibleFreeRate\nFROM\n    RankedSchools rs\nWHERE\n    rs.rank IN (10, 11);",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 32,
    "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?",
    "evidence": "grades 1-12 means K-12; Eligible free or reduced price meal rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`",
    "gold_sql": "SELECT CAST(T1.`FRPM Count (K-12)` AS REAL) / T1.`Enrollment (K-12)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.SOC = 66 ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 5",
    "predicted_sql": "SELECT s.CDSCode, s.School, (f.`FRPM Count (K-12)` / f.`Enrollment (K-12)`) * 100.0 AS Eligible_FRPM_Rate\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.SOC = '66' AND f.`Enrollment (K-12)` > 0\nORDER BY f.`FRPM Count (K-12)` DESC\nLIMIT 5;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 37,
    "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State.",
    "evidence": "Execellence Rate = NumGE1500 / NumTstTakr; complete address has Street, City, State, Zip code",
    "gold_sql": "SELECT T2.Street, T2.City, T2.Zip, T2.State FROM schools AS T2 INNER JOIN (SELECT cds, CAST(NumGE1500 AS REAL) / NumTstTakr AS rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) AS T1 ON T2.CDSCode = T1.cds WHERE T1.rate = (SELECT MIN(CAST(NumGE1500 AS REAL) / NumTstTakr) AS min_rate FROM satscores WHERE NumGE1500 IS NOT NULL AND NumTstTakr IS NOT NULL AND NumTstTakr != 0) ORDER BY T2.CDSCode",
    "predicted_sql": "SELECT s.Street, s.City, s.Zip, s.State\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE (ss.NumTstTakr > 0) -- Ensure non-zero test takers to avoid division by zero\nORDER BY (CAST(ss.NumGE1500 AS REAL) / ss.NumTstTakr) ASC -- Order by increasing Excellence Rate\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 36,
    "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names.",
    "evidence": "full name means first name, last name; There are at most 3 administrators for each school; SAT Scores are greater or equal to 1500 refers to NumGE1500",
    "gold_sql": "SELECT T2.AdmFName1, T2.AdmLName1, T2.AdmFName2, T2.AdmLName2, T2.AdmFName3, T2.AdmLName3 FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
    "predicted_sql": "SELECT s.AdmFName1 || ' ' || s.AdmLName1 AS Admin_Full_Name_1, s.AdmFName2 || ' ' || s.AdmLName2 AS Admin_Full_Name_2, s.AdmFName3 || ' ' || s.AdmLName3 AS Admin_Full_Name_3\nFROM satscores ss\nJOIN schools s ON s.CDSCode = ss.cds\nORDER BY ss.NumGE1500 DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 39,
    "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?",
    "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980",
    "gold_sql": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = '1980' AND T2.County = 'Fresno'",
    "predicted_sql": "SELECT AVG(s.NumTstTakr) as AvgNumTestTakers\nFROM schools sc\nJOIN satscores s ON s.cds = sc.CDSCode\nWHERE sc.OpenDate BETWEEN '1980-01-01' AND '1980-12-31' AND sc.City = 'Fresno';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 40,
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "evidence": "Fresno Unified is a name of district;",
    "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "predicted_sql": "SELECT s.Phone\nFROM schools s\nJOIN satscores ss ON s.CDSCode = ss.cds\nWHERE ss.dname = 'Fresno Unified'\nORDER BY ss.AvgScrRead\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 41,
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
    "gold_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "predicted_sql": "WITH RankedSchools AS (\n    SELECT \n        sc.School, \n        ss.cname, \n        ss.AvgScrRead,\n        RANK() OVER (PARTITION BY ss.cname ORDER BY ss.AvgScrRead DESC) AS rank\n    FROM schools sc\n    JOIN satscores ss ON sc.CDSCode = ss.cds\n    WHERE sc.Virtual = 'F'\n)\nSELECT rs.School, rs.cname\nFROM RankedSchools rs\nWHERE rs.rank <= 5;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 45,
    "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
    "evidence": "Usually, administrators manage the school stuff.",
    "gold_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
    "predicted_sql": "SELECT s.School, AVG(ss.AvgScrWrite) AS AverageWritingScore\nFROM schools AS s\nJOIN satscores AS ss ON s.CDSCode = ss.cds\nWHERE s.AdmLName1 = 'Ulrich' AND s.AdmFName1 = 'Ricci'\nGROUP BY s.School;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 46,
    "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?",
    "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12",
    "gold_sql": "SELECT T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1",
    "predicted_sql": "SELECT s.State, s.School, MAX(f.\"Enrollment (K-12)\")\nFROM schools s\nJOIN frpm f ON s.CDSCode = f.CDSCode\nWHERE s.DOC = '31' AND s.GSserved LIKE '%1%' AND s.GSserved LIKE '%12%'\nGROUP BY s.State, s.School\nORDER BY MAX(f.\"Enrollment (K-12)\") DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 47,
    "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?",
    "evidence": "Elementary School District refers to DOC = 52; Monthly average number of schools that opened in 1980 = count(schools that opened in 1980) / 12",
    "gold_sql": "SELECT CAST(COUNT(School) AS REAL) / 12 FROM schools WHERE DOC = 52 AND County = 'Alameda' AND strftime('%Y', OpenDate) = '1980'",
    "predicted_sql": "SELECT AVG(SchoolCount) AS MonthlyAverageSchools\nFROM (\n  SELECT strftime('%Y-%m', OpenDate) AS MonthYear, COUNT(*) AS SchoolCount\n  FROM schools\n  WHERE County = 'Alameda' AND DOC = '52' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31'\n  GROUP BY MonthYear\n)\nUNION ALL\nSELECT 0;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 48,
    "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?",
    "evidence": "Elementary School District refers to DOC = 52; Unified School District refers to DOC = 54.",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN DOC = 54 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN DOC = 52 THEN 1 ELSE 0 END) FROM schools WHERE StatusType = 'Merged' AND County = 'Orange'",
    "predicted_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN s.DOC = '54' AND s.StatusType = 'Merged' THEN s.CDSCode END) AS REAL) /\n       NULLIF(COUNT(DISTINCT CASE WHEN s.DOC = '52' AND s.StatusType = 'Merged' THEN s.CDSCode END), 0) AS Unified_to_Elementary_Ratio\nFROM schools s\nWHERE s.County = 'Orange';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 50,
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "evidence": "Postal street and mailing street are synonyms.",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "predicted_sql": "SELECT s.MailStreet AS PostalStreetAddress, s.School AS SchoolName\nFROM satscores ss\nJOIN schools s ON ss.cds = s.CDSCode\nORDER BY ss.AvgScrMath DESC\nLIMIT 1 OFFSET 6;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 62,
    "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?",
    "evidence": "non-chartered schools refer to schools whose Charter = 0; K-12 means grades 1 through 12; percent of eligible free rate for K-12 = `Free Meal Count (K-12)` * 100 / `Enrollment (K-12)`",
    "gold_sql": "SELECT COUNT(T2.School) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.Charter = 0 AND CAST(T1.`Free Meal Count (K-12)` AS REAL) * 100 / T1.`Enrollment (K-12)` < 0.18",
    "predicted_sql": "SELECT COUNT(*)\nFROM frpm\nWHERE \"Charter School (Y/N)\" = 0\nAND \"County Name\" = 'Los Angeles'\nAND \"Percent (%) Eligible Free (K-12)\" < 0.18;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 72,
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "evidence": "State Special School means EdOpsCode = 'SSS'",
    "gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "predicted_sql": "SELECT f.\"Enrollment (Ages 5-17)\" AS Number_of_Students\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.City = 'Fremont'\nAND s.EdOpsCode = 'SSS'\nAND f.\"Academic Year\" = '2014-2015';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 77,
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "evidence": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
    "gold_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "predicted_sql": "SELECT f.SchoolName, f.`Percent (%) Eligible FRPM (Ages 5-17)`\nFROM frpm f\nWHERE f.CountyName = 'Los Angeles' AND f.LowGrade = 'Kindergarten' AND f.HighGrade = '9th Grade';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 79,
    "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount.",
    "evidence": "'Does not offer physical building' means Virtual = F in the database.",
    "gold_sql": "SELECT County, COUNT(Virtual) FROM schools WHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY COUNT(Virtual) DESC LIMIT 1",
    "predicted_sql": "SELECT County, COUNT(*) AS NonPhysicalSchools\nFROM schools\nWHERE (County = 'San Diego' OR County = 'Santa Barbara') AND Virtual = 'F'\nGROUP BY County\nORDER BY NonPhysicalSchools DESC\nLIMIT 1;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 82,
    "question": "What is the grade span offered in the school with the highest longitude?",
    "evidence": "the highest longitude refers to the school with the maximum absolute longitude value.",
    "gold_sql": "SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools)",
    "predicted_sql": "SELECT s.GSoffered\nFROM schools s\nORDER BY ABS(s.Longitude) DESC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 83,
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
    "gold_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "predicted_sql": "WITH RelevantSchools AS (\n    SELECT s.CDSCode, s.City\n    FROM schools s\n    JOIN frpm f ON s.CDSCode = f.CDSCode\n    WHERE s.Magnet = 1 AND s.GSserved = 'K-8' AND f.`NSLP Provision Status` = 'Multiple Provision Types'\n)\n\nSELECT City, COUNT(DISTINCT CDSCode) AS SchoolsCount\nFROM RelevantSchools\nGROUP BY City\nORDER BY City;",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 85,
    "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school.",
    "evidence": "Percent (%) Eligible Free (K-12) = `Free Meal Count (K-12)` / `Enrollment (K-12)` * 100%",
    "gold_sql": "SELECT T1.`Free Meal Count (K-12)` * 100 / T1.`Enrollment (K-12)`, T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.AdmFName1 = 'Alusine'",
    "predicted_sql": "SELECT DISTINCT f.DistrictCode, 100.0 * f.`Free Meal Count (K-12)` / NULLIF(f.`Enrollment (K-12)`, 0) AS `Percent (%) Eligible Free (K-12)`\nFROM frpm f\nJOIN schools s ON f.CDSCode = s.CDSCode\nWHERE s.AdmFName1 = 'Alusine' OR s.AdmFName2 = 'Alusine' OR s.AdmFName3 = 'Alusine';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 87,
    "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?",
    "evidence": "Intermediate/Middle Schools refers to SOC = 62; Unified School refers to DOC = 54; years between 2009 and 2010 can refer to 'between 1/1/2009 to 12/31/2010'",
    "gold_sql": "SELECT T2.AdmEmail1, T2.AdmEmail2 FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'San Bernardino' AND T2.City = 'San Bernardino' AND T2.DOC = 54 AND strftime('%Y', T2.OpenDate) BETWEEN '2009' AND '2010' AND T2.SOC = 62",
    "predicted_sql": "SELECT DISTINCT s.AdmEmail1\nFROM schools s\nWHERE s.County = 'San Bernardino'\n  AND s.City = 'San Bernardino City Unified'\n  AND s.OpenDate BETWEEN '2009-01-01' AND '2010-12-31'\n  AND (s.SOC = '62' OR s.DOC = '54');",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 89,
    "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
    "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
    "gold_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
    "predicted_sql": "SELECT COUNT(DISTINCT a.account_id) \nFROM account AS a\nJOIN district AS d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU' AND d.A3 = 'East Bohemia';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 92,
    "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
    "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
    "gold_sql": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
    "predicted_sql": "SELECT COUNT(DISTINCT d.district_id)\nFROM district d\nWHERE d.A11 > 6000 AND d.A11 < 10000;",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 93,
    "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
    "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
    "predicted_sql": "SELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN district d ON c.district_id = d.district_id\nWHERE c.gender = 'M' AND d.A3 = 'North Bohemia' AND d.A11 > 8000;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 94,
    "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
    "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
    "gold_sql": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
    "predicted_sql": "WITH FemaleClientSalaries AS (\n    SELECT c.client_id, d.A11 AS average_salary, c.birth_date\n    FROM client c\n    INNER JOIN disp dp ON c.client_id = dp.client_id AND dp.type = 'OWNER'\n    INNER JOIN district d ON c.district_id = d.district_id\n    WHERE c.gender = 'F'\n),\nOldestAndLowestSalary AS (\n    SELECT MIN(average_salary) AS lowest_avg_salary, MAX(birth_date) AS oldest_birthdate\n    FROM FemaleClientSalaries\n),\nLowestSalaryClients AS (\n    SELECT dp.account_id\n    FROM FemaleClientSalaries fs\n    INNER JOIN disp dp ON fs.client_id = dp.client_id\n    INNER JOIN OldestAndLowestSalary ol ON fs.average_salary = ol.lowest_avg_salary AND fs.birth_date = ol.oldest_birthdate\n),\nAverageSalaryStats AS (\n    SELECT MIN(d.A11) AS min_avg_salary, MAX(d.A11) AS max_avg_salary\n    FROM district d\n)\n\nSELECT lc.account_id, (as_stats.max_avg_salary - as_stats.min_avg_salary) AS salary_gap\nFROM LowestSalaryClients lc, AverageSalaryStats as_stats\nJOIN disp dp ON lc.account_id = dp.account_id\nWHERE dp.type = 'OWNER';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 95,
    "question": "List out the account numbers of clients who are youngest and have highest average salary?",
    "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
    "gold_sql": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
    "predicted_sql": "WITH YoungestClients AS (\n    SELECT c.client_id\n    FROM client c\n    ORDER BY c.birth_date DESC\n    LIMIT 1\n),\nRichestDistricts AS (\n    SELECT d.district_id\n    FROM district d\n    ORDER BY d.A11 DESC\n    LIMIT 1\n),\nAccounts AS (\n    SELECT a.account_id, d.client_id\n    FROM disp d\n    JOIN client c ON c.client_id = d.client_id\n    JOIN account a ON a.account_id = d.account_id\n    WHERE c.client_id IN (SELECT client_id FROM YoungestClients)\n     AND c.district_id IN (SELECT district_id FROM RichestDistricts)\n)\n\nSELECT a.account_id\nFROM Accounts a;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 98,
    "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
    "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
    "gold_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
    "predicted_sql": "SELECT a.account_id\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE a.frequency = 'POPLATEK TYDNE' AND strftime('%Y', l.date) = '1997'\nAND l.amount = (\n    SELECT MIN(l2.amount)\n    FROM loan l2\n    JOIN account a2 ON l2.account_id = a2.account_id\n    WHERE a2.frequency = 'POPLATEK TYDNE' AND strftime('%Y', l2.date) = '1997'\n);",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 99,
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "evidence": "Loan validity more than 12 months refers to duration > 12",
    "gold_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "predicted_sql": "SELECT a.account_id, l.amount\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nWHERE l.duration > 12\nAND a.date LIKE '1993-%'\nORDER BY l.amount DESC, a.account_id ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 100,
    "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
    "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
    "gold_sql": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
    "predicted_sql": "SELECT COUNT(DISTINCT c.client_id)\nFROM client c\nJOIN disp d ON c.client_id = d.client_id\nJOIN account a ON a.account_id = d.account_id\nJOIN district dist ON c.district_id = dist.district_id\nWHERE c.gender = 'F' AND c.birth_date < '1950-01-01' AND dist.A2 = 'Sokolov';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 112,
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "evidence": "Female refers to gender = 'F'; A2 refers to district names",
    "gold_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "predicted_sql": "SELECT d.A2\nFROM client c\nJOIN disp dp ON c.client_id = dp.client_id\nJOIN account a ON dp.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE c.gender = 'F' AND c.birth_date = '1976-01-29';",
    "score": 1.0,
    "difficulty": "simple"
  },
  {
    "question_id": 115,
    "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
    "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
    "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
    "predicted_sql": "SELECT\n  100.0 * SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) / COUNT(c.client_id) AS percentage_of_male_clients\nFROM\n  district d\n  JOIN client c ON c.district_id = d.district_id\nWHERE\n  d.A3 = 'south Bohemia'\n  AND d.A4 = (\n    SELECT MAX(A4)\n    FROM district\n    WHERE A3 = 'south Bohemia'\n  );",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 116,
    "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
    "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
    "gold_sql": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
    "predicted_sql": "SELECT 100.0 * (b2.balance - b1.balance) / b1.balance AS increase_rate\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN trans b1 ON b1.account_id = a.account_id\nJOIN trans b2 ON b2.account_id = a.account_id\nWHERE l.date = (SELECT MIN(l2.date)\n                FROM loan l2\n                WHERE l2.date >= '1993-07-05' AND l2.date < '1993-07-06')\nAND b1.date >= '1993-03-22' AND b1.date < '1993-03-23'\nAND b2.date >= '1998-12-27' AND b2.date < '1998-12-28';",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 117,
    "question": "What is the percentage of loan amount that has been fully paid with no issue.",
    "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
    "gold_sql": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
    "predicted_sql": "SELECT 100.0 * SUM(CASE WHEN l.status = 'A' THEN l.amount ELSE 0 END) / NULLIF(SUM(l.amount), 0) AS percentage_fully_paid\nFROM loan l;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 118,
    "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
    "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
    "gold_sql": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
    "predicted_sql": "SELECT\n    100.0 * COUNT(DISTINCT CASE WHEN l.status = 'C' THEN l.account_id ELSE NULL END) / COUNT(DISTINCT l.account_id) AS percentage_running_no_issue\nFROM\n    loan l\nWHERE\n    l.amount < 100000;",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 125,
    "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
    "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
    "gold_sql": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
    "predicted_sql": "SELECT d.A2 AS district, ((d.A13 - d.A12) / d.A12 * 100.0) AS unemployment_rate_increment\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE l.status = 'D';",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 128,
    "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
    "evidence": "A2 refers to districts; Female refers to gender = 'F'",
    "gold_sql": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
    "predicted_sql": "SELECT d.A2, COUNT(DISTINCT c.client_id) AS num_female_account_holders\nFROM district d\nJOIN client c ON d.district_id = c.district_id\nJOIN disp ON disp.client_id = c.client_id\nJOIN account a ON a.account_id = disp.account_id\nWHERE c.gender = 'F' AND disp.type = 'OWNER'\nGROUP BY d.A2\nORDER BY num_female_account_holders DESC\nLIMIT 9;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 136,
    "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
    "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
    "predicted_sql": "SELECT COUNT(DISTINCT l.loan_id) AS approved_loans_count\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE a.frequency = 'POPLATEK MESICNE'\nAND l.amount >= 250000\nAND l.date BETWEEN '1995-01-01' AND '1997-12-31'\nAND l.status IN ('A', 'B');",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 129,
    "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
    "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
    "gold_sql": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
    "predicted_sql": "SELECT d.A2 AS district_name, SUM(t.amount) AS total_withdrawn\nFROM trans t\nJOIN account a ON t.account_id = a.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01%'\nGROUP BY d.district_id\nORDER BY total_withdrawn DESC\nLIMIT 10;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 137,
    "question": "How many accounts have running contracts in Branch location 1?",
    "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "predicted_sql": "SELECT COUNT(DISTINCT a.account_id)\nFROM account a\nJOIN loan l ON a.account_id = l.account_id\nJOIN district d ON a.district_id = d.district_id\nWHERE d.A2 = '1'\nAND l.status IN ('C', 'D');",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 138,
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "predicted_sql": "SELECT COUNT(DISTINCT client.client_id) AS male_client_count\nFROM district\nJOIN client ON client.district_id = district.district_id AND client.gender = 'M'\nWHERE district.district_id IN (\n  SELECT district_id\n  FROM district\n  ORDER BY A15 DESC\n  LIMIT 1 OFFSET 1\n);",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 145,
    "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
    "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
    "gold_sql": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
    "predicted_sql": "SELECT DISTINCT d.client_id\nFROM disp AS d\nJOIN card AS c ON d.disp_id = c.disp_id\nJOIN trans AS t ON d.account_id = t.account_id\nWHERE t.operation = 'VYBER KARTOU' AND strftime('%Y', t.date) = '1998'\nGROUP BY t.account_id\nHAVING t.amount < (SELECT AVG(t2.amount)\n                  FROM trans AS t2\n                  WHERE strftime('%Y', t2.date) = '1998' AND t2.operation = 'VYBER KARTOU');",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 149,
    "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
    "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
    "gold_sql": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
    "predicted_sql": "SELECT DISTINCT a.frequency, AVG(d.A11) AS average_income\nFROM account AS a\nJOIN district AS d ON a.district_id = d.district_id\nLEFT JOIN loan AS l ON a.account_id = l.account_id\nWHERE d.A11 > 8000 AND d.A11 <= 9000 AND l.loan_id IS NULL\nGROUP BY a.frequency\nHAVING average_income > 8000 AND average_income <= 9000;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 152,
    "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
    "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
    "gold_sql": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
    "predicted_sql": "SELECT AVG(d.A15) AS average_crimes\nFROM district d\nJOIN account a ON d.district_id = a.district_id\nWHERE d.A15 > 4000 AND strftime('%Y', a.date) >= '1997'\nGROUP BY d.district_id\nHAVING COUNT(DISTINCT a.account_id) > 0;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 159,
    "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
    "evidence": "operation = 'VYBER' refers to withdrawal in cash",
    "gold_sql": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
    "predicted_sql": "SELECT t.trans_id, t.date, t.amount, t.balance\nFROM trans t\nJOIN disp d ON t.account_id = d.account_id\nWHERE d.client_id = 3356 AND t.operation = 'VYBER';",
    "score": 0.0,
    "difficulty": "simple"
  },
  {
    "question_id": 168,
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
    "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "predicted_sql": "WITH RichDistricts AS (\n    SELECT district_id\n    FROM district\n    WHERE A11 > 10000\n),\nAccountOwners AS (\n    SELECT acc.account_id, cli.gender\n    FROM account acc\n    JOIN disp di ON acc.account_id = di.account_id\n    JOIN client cli ON di.client_id = cli.client_id\n    WHERE di.type = 'OWNER' AND acc.district_id IN (SELECT district_id FROM RichDistricts)\n),\nGenderCounts AS (\n    SELECT gender, COUNT(*) AS gender_count\n    FROM AccountOwners\n    GROUP BY gender\n)\nSELECT 100.0 * (SELECT gender_count FROM GenderCounts WHERE gender = 'F') / NULLIF((SELECT SUM(gender_count) FROM GenderCounts), 0) AS percentage_females;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 169,
    "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
    "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
    "predicted_sql": "SELECT \n  100.0 * (SUM(CASE WHEN strftime('%Y', lo.date) = '1997' THEN lo.amount ELSE 0 END) - SUM(CASE WHEN strftime('%Y', lo.date) = '1996' THEN lo.amount ELSE 0 END)) \n  / NULLIF(SUM(CASE WHEN strftime('%Y', lo.date) = '1996' THEN lo.amount ELSE 0 END), 0) AS growth_rate_percentage\nFROM \n  loan lo\n  JOIN disp di ON lo.account_id = di.account_id\n  JOIN client cl ON di.client_id = cl.client_id\nWHERE \n  cl.gender = 'M' \n  AND di.type = 'OWNER'\n  AND strftime('%Y', lo.date) IN ('1996', '1997');",
    "score": 1.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 173,
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "evidence": "k_symbol refers to the purpose of payments",
    "gold_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "predicted_sql": "SELECT COUNT(*) AS statement_requests, SUM(t.amount) AS total_debited\nFROM trans t\nWHERE t.account_id = 3 AND \n      t.k_symbol = 'SLUZBY' AND \n      t.operation = 'VYDAJ' AND\n      t.amount = 3539;",
    "score": 0.0,
    "difficulty": "challenging"
  },
  {
    "question_id": 186,
    "question": "What percentage of male clients request for weekly statements to be issued?",
    "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
    "gold_sql": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
    "predicted_sql": "SELECT\n  (100.0 * COUNT(DISTINCT CASE WHEN c.gender = 'M' THEN d.account_id ELSE NULL END)) / NULLIF(COUNT(DISTINCT d.account_id), 0) AS percentage_male_weekly_statements\nFROM\n  disp d\nJOIN\n  account a ON d.account_id = a.account_id\nJOIN\n  client c ON d.client_id = c.client_id\nWHERE\n  a.frequency = 'POPLATEK TYDNE';",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 189,
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
    "gold_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND T2.A11 = (SELECT MIN(T2.A11) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F'))",
    "predicted_sql": "SELECT DISTINCT d1.account_id\nFROM disp d1\nJOIN client c ON c.client_id = d1.client_id\nJOIN account a ON a.account_id = d1.account_id\nJOIN district dist ON dist.district_id = c.district_id\nWHERE d1.type = 'OWNER' AND c.gender = 'F'\nORDER BY c.birth_date DESC, dist.A11 ASC\nLIMIT 1;",
    "score": 0.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 192,
    "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
    "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "gold_sql": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
    "predicted_sql": "SELECT AVG(l.amount) AS avg_running_loan_amount\nFROM loan l\nJOIN account a ON l.account_id = a.account_id\nWHERE (l.status = 'C' OR l.status = 'D') AND a.frequency = 'POPLATEK PO OBRATU';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 194,
    "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
    "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
    "gold_sql": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
    "predicted_sql": "SELECT client.client_id, (strftime('%Y','now') - strftime('%Y', client.birth_date)) AS age\nFROM client\nJOIN disp ON client.client_id = disp.client_id\nJOIN card ON disp.disp_id = card.disp_id\nWHERE card.type = 'gold' AND disp.type = 'OWNER';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 119,
    "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
    "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
    "gold_sql": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
    "predicted_sql": "SELECT DISTINCT a.account_id, d.A2 AS district_name, d.A3 AS region\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nWHERE a.frequency = 'POPLATEK PO OBRATU'\n  AND strftime('%Y', a.date) = '1993';",
    "score": 1.0,
    "difficulty": "moderate"
  },
  {
    "question_id": 120,
    "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
    "evidence": "Accounts holder refers to the person who own this account.",
    "gold_sql": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
    "predicted_sql": "SELECT a.account_id, COUNT(t.trans_id) AS statement_frequency\nFROM account a\nJOIN district d ON a.district_id = d.district_id\nJOIN trans t ON a.account_id = t.account_id\nWHERE d.A2 = 'east Bohemia' AND strftime('%Y', a.date) BETWEEN '1995' AND '2000'\nGROUP BY a.account_id;",
    "score": 0.0,
    "difficulty": "moderate"
  }
]