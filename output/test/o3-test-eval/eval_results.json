[
  {
    "question_id": 41,
    "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores.",
    "evidence": "Exclusively virtual refers to Virtual = 'F'; respective counties means PARTITION BY County",
    "gold_sql": "SELECT School FROM (SELECT T2.School,T1.AvgScrRead, RANK() OVER (PARTITION BY T2.County ORDER BY T1.AvgScrRead DESC) AS rnk FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ) ranked_schools WHERE rnk <= 5",
    "predicted_sql": "SELECT schools.School, satscores.AvgScrRead FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.Virtual = 'F' ORDER BY satscores.AvgScrRead DESC LIMIT 5",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 30,
    "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?",
    "evidence": "K-12 refers to students in grades 1 through 12.",
    "gold_sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 5",
    "predicted_sql": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Enrollment (K-12)` IS NOT NULL ORDER BY T1.`Enrollment (K-12)` ASC LIMIT 5",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 20,
    "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?",
    "evidence": "",
    "gold_sql": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12",
    "predicted_sql": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Amador' AND `Low Grade` = '9' AND `High Grade` = '12'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 67,
    "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
    "evidence": "",
    "gold_sql": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
    "predicted_sql": "SELECT COUNT(*)  FROM schools  WHERE schools.City = 'San Francisco'  AND schools.DOCType = 'Community College District'  AND strftime('%Y', schools.ClosedDate) = '1989'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 31,
    "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?",
    "evidence": "K-12 refers to students in grades 1 through 12; Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "gold_sql": "SELECT CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)` FROM frpm ORDER BY `Enrollment (K-12)` DESC LIMIT 9, 2",
    "predicted_sql": "SELECT frpm.`School Name`, (CAST(frpm.`Free Meal Count (K-12)` AS REAL) / CAST(frpm.`Enrollment (K-12)` AS REAL)) AS eligible_free_rate FROM frpm ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 2 OFFSET 9",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 126,
    "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
    "evidence": "A2 contains the information about district.",
    "gold_sql": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.date LIKE '1993%' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Decin'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 0,
    "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
    "evidence": "Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
    "gold_sql": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
    "predicted_sql": "SELECT frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)` as eligible_free_rate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.County = 'Alameda County' ORDER BY eligible_free_rate DESC LIMIT 1;",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 80,
    "question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.",
    "evidence": "",
    "gold_sql": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Latitude = (SELECT MAX(Latitude) FROM schools)",
    "predicted_sql": "SELECT SOCType, School, Latitude FROM schools ORDER BY Latitude DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 77,
    "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?",
    "evidence": "Percent (%) Eligible FRPM (Ages 5-17) can be acquired by `FRPM Count (Ages 5-17)` / `Enrollment (Ages 5-17)` * 100",
    "gold_sql": "SELECT T2.School, T1.`FRPM Count (Ages 5-17)` * 100 / T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Los Angeles' AND T2.GSserved = 'K-9'",
    "predicted_sql": "SELECT schools.School, frpm.`Percent (%) Eligible FRPM (Ages 5-17)` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.GSserved = 'K-9' AND schools.County = 'Los Angeles';",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 177,
    "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
    "evidence": "",
    "gold_sql": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
    "predicted_sql": "SELECT SUM(trans.balance) AS sum_balance, client.gender FROM trans INNER JOIN disp ON trans.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id WHERE disp.client_id = 4 AND trans.trans_id > 851",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 51,
    "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.",
    "evidence": "",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "predicted_sql": "SELECT t2.mailstreet, t2.school FROM satscores AS t1 INNER JOIN schools AS t2 ON t1.cds = t2.cdscode ORDER BY t1.avgscrread ASC LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 43,
    "question": "What is the average math score of the school with the lowest average score for all subjects, and in which county is it located?",
    "evidence": "Average score for all subjects can be computed by AvgScrMath + AvgScrRead + AvgScrWrite",
    "gold_sql": "SELECT T1.AvgScrMath, T2.County FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath + T1.AvgScrRead + T1.AvgScrWrite ASC LIMIT 1",
    "predicted_sql": "SELECT s.avgscrmath, sc.county FROM satscores AS s INNER JOIN schools AS sc ON s.cds = sc.cdscode ORDER BY (s.avgscrmath + s.avgscrread + s.avgscrwrite) ASC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 112,
    "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
    "evidence": "Female refers to gender = 'F'; A2 refers to district names",
    "gold_sql": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
    "predicted_sql": "SELECT DISTINCT t4.a2 FROM client AS t1 INNER JOIN disp AS t2 ON t1.client_id = t2.client_id INNER JOIN account AS t3 ON t2.account_id = t3.account_id INNER JOIN district AS t4 ON t3.district_id = t4.district_id WHERE t1.gender = 'F' AND t1.birth_date = '1976-01-29'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 141,
    "question": "Which districts have transactions greater than USS$10,000 in 1997?",
    "evidence": "",
    "gold_sql": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
    "predicted_sql": "SELECT DISTINCT d.a2 FROM trans AS t INNER JOIN account AS a ON t.account_id = a.account_id INNER JOIN district AS d ON a.district_id = d.district_id WHERE t.amount > 10000 AND STRFTIME('%Y', t.date) = '1997'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 133,
    "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
    "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
    "gold_sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
    "predicted_sql": "SELECT A2 FROM district WHERE A13 = ( SELECT MAX(A13) FROM district )",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 220,
    "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order.",
    "evidence": "TR000 is the molecule id;",
    "gold_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR000' ORDER BY T.element LIMIT 3",
    "predicted_sql": "SELECT element FROM atom WHERE molecule_id = 'TR000' ORDER BY element LIMIT 3",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 124,
    "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
    "evidence": "A3 refers to regions; A11 refers to average salary",
    "gold_sql": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
    "predicted_sql": "SELECT loan.loan_id, district.district_id, district.A11 FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.duration = 60;",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 173,
    "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
    "evidence": "k_symbol refers to the purpose of payments",
    "gold_sql": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
    "predicted_sql": "SELECT COUNT(*) FROM trans T1 WHERE T1.account_id = 3 AND T1.k_symbol = 'statement' UNION ALL SELECT COUNT(*) FROM trans T2 WHERE T2.account_id = 3 AND T2.amount = 3539 AND T2.k_symbol = 'payment'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 252,
    "question": "What are the atoms that can bond with the atom that has the element lead?",
    "evidence": "atom that has the element lead refers to atom_id where element = 'pb'",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
    "predicted_sql": "SELECT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": false
  },
  {
    "question_id": 233,
    "question": "Please list top two bonds that happened with the molecule TR006 in alphabetical order.",
    "evidence": "TR006 is the molecule id",
    "gold_sql": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' ORDER BY T2.bond_id LIMIT 2",
    "predicted_sql": "SELECT bond.bond_id FROM bond WHERE bond.molecule_id = 'TR006' ORDER BY bond.bond_id ASC LIMIT 2",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 304,
    "question": "List all carcinogenic molecules and their elements.",
    "evidence": "label = '+' mean molecules are carcinogenic; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "gold_sql": "SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "predicted_sql": "SELECT m.molecule_id, a.element  FROM molecule m  JOIN atom a  ON m.molecule_id = a.molecule_id  WHERE m.label = '+'  GROUP BY m.molecule_id, a.element",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 218,
    "question": "What percentage of carcinogenic-type molecules does not contain fluorine?",
    "evidence": "label = '+' mean molecules are carcinogenic; contain fluorine refers to element = 'f'; percentage = DIVIDE(SUM(element = 'f') * 100, COUNT(molecule_id)) where label = '+'; Should consider the distinct atoms when counting;",
    "gold_sql": "SELECT CAST(COUNT(DISTINCT CASE WHEN T1.element <> 'f' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "predicted_sql": "SELECT (100 - (CAST(COUNT(DISTINCT CASE WHEN T2.element = 'f' THEN T1.molecule_id END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id))) AS percentage FROM molecule AS T1 LEFT JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '+'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 264,
    "question": "What are the labels for TR000, TR001 and TR002?",
    "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic",
    "gold_sql": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')",
    "predicted_sql": "SELECT label FROM molecule WHERE molecule_id IN ('TR000', 'TR001', 'TR002')",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 174,
    "question": "What year was account owner number 130 born?",
    "evidence": "",
    "gold_sql": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
    "predicted_sql": "SELECT strftime('%Y', T1.birth_date) FROM client AS T1 WHERE T1.client_id = 130",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 236,
    "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?",
    "evidence": "atoms refer to atom_id or atom_id2",
    "gold_sql": "SELECT T1.bond_type, T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.bond_id = 'TR001_6_9'",
    "predicted_sql": "SELECT T2.bond_type, T1.atom_id, T1.atom_id2 FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_id = 'TR001_6_9'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 344,
    "question": "List all the mythic rarity print cards banned in gladiator format.",
    "evidence": "mythic rarity printing refers to rarity = 'mythic'; card banned refers to status = 'Banned'; in gladiator format refers to format = 'gladiator';",
    "gold_sql": "SELECT DISTINCT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'gladiator' AND T2.status = 'Banned' AND T1.rarity = 'mythic'",
    "predicted_sql": "SELECT T1.name FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Banned' AND T2.format = 'gladiator'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 257,
    "question": "List down atom id2 for atoms with element sulfur.",
    "evidence": "element sulfur refers to element = 's'",
    "gold_sql": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'",
    "predicted_sql": "SELECT atom_id2 FROM connected JOIN atom ON connected.atom_id = atom.atom_id WHERE atom.element = 's'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 281,
    "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic.",
    "evidence": "label = '+' means molecules are carcinogenic; 4th atom of each molecule refers to substr(atom_id, 7, 1) = '4'; ",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND SUBSTR(T1.atom_id, -1) = '4' AND LENGTH(T1.atom_id) = 7",
    "predicted_sql": "SELECT atom.element, COUNT(*) FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND SUBSTRING(atom.atom_id, 7, 1) = '4' GROUP BY atom.element",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 309,
    "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?",
    "evidence": "",
    "gold_sql": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type),T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR000' GROUP BY T1.atom_id, T2.bond_type",
    "predicted_sql": "SELECT atom.atom_id, COUNT(DISTINCT bond.bond_type) AS bond_type_count FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE atom.molecule_id = 'TR346' GROUP BY atom.atom_id",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 405,
    "question": "How many Brazilian Portuguese translated sets are inside the Commander block?",
    "evidence": "Commander block refer to block = 'Commander'; sets refer to code = setCode; Portuguese refer to language = 'Portuguese (Brasil)'",
    "gold_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Portuguese (Brazil)' AND T1.block = 'Commander'",
    "predicted_sql": "SELECT COUNT(*) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)';",
    "score": 0.0,
    "prover_result": null,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 451,
    "question": "How many cards available in paper have a positive starting maximum hand size?",
    "evidence": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '3'",
    "gold_sql": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND = '3' THEN 1 ELSE 0 END) FROM cards",
    "predicted_sql": "SELECT COUNT(*) FROM cards WHERE cards.availability LIKE '%paper%' AND cards.hand LIKE '+%';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 480,
    "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?",
    "evidence": "Italian refers to language = 'Italian'; flavor text refers to flavorText; \"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'",
    "gold_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "predicted_sql": "SELECT T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'Italian'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 597,
    "question": "How many users from India have the teacher badges?",
    "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
    "gold_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
    "predicted_sql": "SELECT COUNT(DISTINCT u.Id) FROM users u INNER JOIN badges b ON u.Id = b.UserId WHERE b.Name = 'Teacher' AND u.Location = 'India'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 447,
    "question": "Give the code of sets have expansion commander type?",
    "evidence": "code of sets refers to setCode",
    "gold_sql": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
    "predicted_sql": "SELECT code FROM sets WHERE type = 'commander'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 718,
    "question": "How many superheroes have the super power of \"Super Strength\"?",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
    "predicted_sql": "SELECT COUNT(*) FROM superpower JOIN hero_power ON superpower.id = hero_power.power_id WHERE superpower.power_name = 'Super Strength'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 762,
    "question": "Which power do superheroes have the most of?",
    "evidence": "power that superheroes have the most refers to MAX(COUNT(power_name))",
    "gold_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1",
    "predicted_sql": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T2.power_name) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 470,
    "question": "When was the set of cards with \"Ancestor's Chosen\" released?",
    "evidence": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate",
    "gold_sql": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "predicted_sql": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T1.name = 'Ancestor''s Chosen'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 570,
    "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
    "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;",
    "gold_sql": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
    "predicted_sql": "SELECT DISTINCT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'DatEpicCoderGuyWhoPrograms'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 853,
    "question": "Please give the names of the races held on the circuits in Spain.",
    "evidence": "Spain is a name of country;",
    "gold_sql": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
    "predicted_sql": "SELECT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Spain'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 425,
    "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?",
    "evidence": "don't have multiple faces on a single card side is null",
    "gold_sql": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL",
    "predicted_sql": "SELECT number FROM cards WHERE side IS NULL AND subtypes LIKE '%Angel%' AND subtypes LIKE '%Wizard%'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 430,
    "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
    "evidence": "",
    "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
    "predicted_sql": "SELECT sets.id, sets.name FROM set_translations INNER JOIN sets ON set_translations.setcode = sets.code WHERE set_translations.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC LIMIT 2",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 711,
    "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?",
    "evidence": "",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.UserId) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 872,
    "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
    "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
    "gold_sql": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
    "predicted_sql": "SELECT T3.code FROM qualifying AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.raceId = 45 AND T1.q3 = '0:01:33'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 761,
    "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes.",
    "evidence": "super hero names refers to superhero_name;male superheros refers to gender = 'Male';Calculation = weight_kg > MULTIPLY(AVG(weight_kg), 0.79)",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Male' AND T1.weight_kg * 100 > ( SELECT AVG(weight_kg) FROM superhero ) * 79",
    "predicted_sql": "SELECT s.superhero_name FROM superhero s JOIN gender g ON s.gender_id = g.id WHERE g.gender = 'Male' AND s.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero)",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 453,
    "question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?",
    "evidence": "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'",
    "gold_sql": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
    "predicted_sql": "SELECT convertedManaCost FROM cards WHERE name = 'Ancestor''s Chosen'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 898,
    "question": "How old is the youngest Japanese driver? What is his name?",
    "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
    "gold_sql": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
    "predicted_sql": "SELECT drivers.forename, drivers.surname, CAST(STRFTIME('%Y', CURRENT_TIMESTAMP) AS INTEGER) - CAST(STRFTIME('%Y', drivers.dob) AS INTEGER) AS age FROM drivers WHERE drivers.nationality = 'Japanese' ORDER BY drivers.dob DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 845,
    "question": "List the power of superheroes with height greater than 80% of the average height of all superheroes.",
    "evidence": "power of superheroes refers to power_name; height greater than 80% of the average height of all superheroes = height_cm > MULTIPLY(AVG(height_cm), 0.8);",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm * 100 > ( SELECT AVG(height_cm) FROM superhero ) * 80",
    "predicted_sql": "SELECT superpower.power_name FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.height_cm > (SELECT AVG(superhero.height_cm) * 0.8 FROM superhero);",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 948,
    "question": "What are the maximum points of British constructors?",
    "evidence": "maximum points = MAX(points); British is a nationality",
    "gold_sql": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
    "predicted_sql": "SELECT AVG(constructorStandings.points) FROM constructors INNER JOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId WHERE constructors.nationality = 'British';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 465,
    "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?",
    "evidence": "set of cards with \"Ancestor''s Chosen\" in it refers to name = 'Ancestor''s Chosen'; Korean version refers to language = 'Korean'",
    "gold_sql": "SELECT IIF(SUM(CASE WHEN T2.language = 'Korean' AND T2.translation IS NOT NULL THEN 1 ELSE 0 END) > 0, 'YES', 'NO') FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'",
    "predicted_sql": "SELECT COUNT(*) > 0 FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Korean'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 868,
    "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
    "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
    "predicted_sql": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 508,
    "question": "What are the available printing types of the cards that doesn't have a text box created by Aleksi Briclot?",
    "evidence": "created by Aleksi Briclot refers to artist = 'Aleksi Briclot'; doesn't have a text box refers to isTextless = 1; available printing types refers to availability",
    "gold_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Aleksi Briclot' AND isTextless = 1",
    "predicted_sql": "SELECT cards.availability FROM cards WHERE cards.artist = 'Aleksi Briclot' AND cards.isTextless = 1;",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 894,
    "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
    "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
    "gold_sql": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
    "predicted_sql": "SELECT T2.forename, T2.surname, T3.name, T1.milliseconds FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.milliseconds IS NOT NULL ORDER BY T1.milliseconds ASC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 942,
    "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
    "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
    "gold_sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
    "predicted_sql": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 4, 2) AS REAL) * 60 + CAST(SUBSTR(T2.fastestLapTime, 7) AS REAL)) AS average_fastest_lap_time_seconds FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 507,
    "question": "For all the set of cards that has Brazil Portuguese translation, what is the percentage of them are only available online?",
    "evidence": "Brazil Portuguese translation refers to language = 'Portuguese (Brazil)'; only available online refers to isOnlineOnly = 1; percentage of online only Brazil Portuguese in all Brazil Portuguese cards refers to DIVIDE(SUM(isOnlineOnly = 1), SUM(language = 'Portuguese (Brazil)))*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Portuguese (Brazil)' )",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.uuid) AS percentage FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Portuguese (Brazil)'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 670,
    "question": "What is the date when the youngest user made his or her first post?",
    "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);",
    "gold_sql": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.Age IS NOT NULL ORDER BY T1.Age, T2.CreaionDate LIMIT 1",
    "predicted_sql": "SELECT MIN(p.CreaionDate) AS FirstPostDate FROM users u JOIN posts p ON u.Id = p.OwnerUserId WHERE u.Age = (SELECT MIN(Age) FROM users) ORDER BY p.CreaionDate LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 505,
    "question": "Show the Simplified Chinese translation of the name of the set \"Mirrodin\"?",
    "evidence": "Simplified Chinese translation refers to language = 'Chinese Simplified'; name of the set \"Mirrodin\" refers to name = 'Mirrodin'",
    "gold_sql": "SELECT translation FROM set_translations WHERE setCode IN ( SELECT code FROM sets WHERE name = 'Mirrodin' ) AND language = 'Chinese Simplified'",
    "predicted_sql": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.name = 'Mirrodin' AND T2.language = 'Chinese Simplified'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 751,
    "question": "List down at least five superpowers of male superheroes.",
    "evidence": "male refers to gender = 'Male'; superpowers refers to power_name;",
    "gold_sql": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
    "predicted_sql": "SELECT DISTINCT T3.power_name FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id INNER JOIN hero_power AS T4 ON T1.id = T4.hero_id INNER JOIN superpower AS T3 ON T4.power_id = T3.id WHERE T2.gender = 'Male' LIMIT 5",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 989,
    "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
    "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
    "gold_sql": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
    "predicted_sql": "SELECT drivers.forename, drivers.surname, results.time FROM races JOIN results ON races.raceId = results.raceId JOIN drivers ON results.driverId = drivers.driverId WHERE races.year = 2008 AND races.name = 'Canadian Grand Prix' AND results.position = 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 646,
    "question": "Describe the post title which got positive comments and display names of the users who posted those comments.",
    "evidence": "positive comments refer to Score > 60;",
    "gold_sql": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60",
    "predicted_sql": "SELECT T2.Title, T1.UserDisplayName FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.Score > 60",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 606,
    "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.",
    "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08.0'",
    "gold_sql": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08.0'",
    "predicted_sql": "SELECT DISTINCT \"badges\".\"Name\" FROM \"badges\" WHERE \"badges\".\"Date\" = '2010-07-19 19:39:08.0'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 738,
    "question": "Which superheroes have a durability attribute value of less than 50?",
    "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_attribute AS T2 INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Durability' AND T2.attribute_value < 50 AND T1.id = T2.hero_id)",
    "predicted_sql": "SELECT COUNT(superhero.id)  FROM superhero  INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 801,
    "question": "Find the ratio between male superheroes and female superheroes.",
    "evidence": "ratio = DIVIDE(SUM(gender_id = 1) / SUM(gender_id = 2)); male superheroes refers to gender = 'Female'; female superheroes refers to gender = 'Male';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T2.gender = 'Male' THEN T1.id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T2.gender = 'Female' THEN T1.id ELSE NULL END) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN superhero.gender_id = 1 THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN superhero.gender_id = 2 THEN 1 ELSE 0 END) as ratio FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1020,
    "question": "Which player has the highest overall rating? Indicate the player's api id.",
    "evidence": "highest overall rating refers to MAX(overall_rating);",
    "gold_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "predicted_sql": "SELECT player_api_id FROM Player_Attributes WHERE overall_rating IS NOT NULL ORDER BY overall_rating DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 719,
    "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?",
    "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'; a height of over 200cm refers to height_cm > 200",
    "gold_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 794,
    "question": "Which hero was the fastest?",
    "evidence": "which hero refers to superhero_name; fastest refers to MAX(attribute_value) WHERE attribute_name = 'Speed';",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
    "predicted_sql": "SELECT T2.superhero_name FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN attribute AS T3 ON T1.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T1.attribute_value DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1104,
    "question": "What was the potiential for Francesco Parravicini on 2010/8/30?",
    "evidence": "Francesco Parravicini refers to player_name = 'Francesco Parravicini'; on 2010/8/30 refers to date = '2010-08-30 00:00:00'",
    "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE SUBSTR(t2.`date`, 1, 10) = '2010-08-30' AND t1.player_name = 'Francesco Parravicini'",
    "predicted_sql": "SELECT Player_Attributes.potential FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = 'Francesco Parravicini' AND Player_Attributes.date = '2010-08-30 00:00:00';",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 999,
    "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
    "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n",
    "gold_sql": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
    "predicted_sql": "SELECT T2.name FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId ORDER BY T1.fastestLapTime ASC LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 766,
    "question": "What is the hero's full name with the highest attribute in strength?",
    "evidence": "highest attribute in strength refers to MAX(attribute_value) WHERE attribute_name = 'strength';",
    "gold_sql": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = (SELECT MAX(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Strength')",
    "predicted_sql": "SELECT superhero.full_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength')",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 865,
    "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
    "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 592 AND T2.time IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 885,
    "question": "State the name and date of the last round of race in year 1999.",
    "evidence": "the last round refers to max(round);",
    "gold_sql": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
    "predicted_sql": "SELECT races.name, races.date FROM races WHERE races.year = 1999 AND races.round = (SELECT MAX(races.round) FROM races WHERE races.year = 1999)",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1131,
    "question": "What is the average heights of Italy players?",
    "evidence": "average heights refers to Avg(height); Italy is name of country",
    "gold_sql": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'",
    "predicted_sql": "SELECT AVG(T1.height) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.player_api_id = T2.home_player_1 INNER JOIN Team AS T3 ON T2.home_team_api_id = T3.team_api_id OR T2.away_team_api_id = T3.team_api_id INNER JOIN League AS T4 ON T2.country_id = T4.country_id INNER JOIN Country AS T5 ON T4.country_id = T5.id WHERE T5.name = 'Italy'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 940,
    "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
    "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1032,
    "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league.",
    "evidence": " league with highest matches of all time refers to MAX(COUNT(league_id));",
    "gold_sql": "SELECT t2.name, t1.max_count FROM League AS t2 JOIN (SELECT league_id, MAX(cnt) AS max_count FROM (SELECT league_id, COUNT(id) AS cnt FROM Match GROUP BY league_id) AS subquery) AS t1 ON t1.league_id = t2.id",
    "predicted_sql": "SELECT L.name, COUNT(M.league_id) FROM Match AS M INNER JOIN League AS L ON M.league_id = L.id GROUP BY M.league_id ORDER BY COUNT(M.league_id) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1197,
    "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?",
    "evidence": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id",
    "gold_sql": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473",
    "predicted_sql": "SELECT Description, Diagnosis FROM Patient WHERE ID = 48473",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1116,
    "question": "List down most tallest players' name.",
    "evidence": "tallest refers to rank based on the height in descending order; Most tallest players refers to rank = 1 ",
    "gold_sql": "SELECT player_name FROM (SELECT player_name, height, DENSE_RANK() OVER (ORDER BY height DESC) as rank FROM Player) WHERE rank = 1",
    "predicted_sql": "SELECT player.player_name FROM player WHERE player.height = (SELECT MAX(player.height) FROM player)",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 860,
    "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
    "evidence": "race number refers to raceId;",
    "gold_sql": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
    "predicted_sql": "SELECT T1.nationality FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 355 AND T2.q2 = \"0:01:40\"",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 1257,
    "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?",
    "evidence": "creatinine level is abnormal refers to CRE >= 1.5; aren't 70 yet refers to SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) < 70; ",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND STRFTIME('%Y', Date('now')) - STRFTIME('%Y', T1.Birthday) < 70",
    "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND (strftime('%Y', 'now') - strftime('%Y', T1.Birthday)) < 70",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1158,
    "question": "List all patients who were born in 1937 whose total cholesterol was beyond the normal range.",
    "evidence": "who were born in 1937 refers to year(birthday) = '1937'; total cholesterol was beyond the normal range refers to `T-CHO` > = '250'",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.Birthday) = '1937' AND T2.`T-CHO` >= 250",
    "predicted_sql": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE strftime('%Y', Patient.Birthday) = '1937' AND Laboratory.`T-CHO` >= 250",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1294,
    "question": "Please list the patient's ID whose creatinine level is normal and whose anti Cardiolipin antibody concentration level is the highest.",
    "evidence": "creatinine level is normal refers to CRE < 1.5; anti Cardiolipin antibody concentration level is the highest refers to MAX(aCL IgA);",
    "gold_sql": "SELECT T2.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
    "predicted_sql": "SELECT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.CRE < 1.5 ORDER BY T2.`aCL IgA` DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1430,
    "question": "What is the last name and position of the student that bought pizza on 09/10/2019?",
    "evidence": "bought pizza on 09/10/2019 refers to expense_description = 'Pizza' where expense_date = '2019-09-10'",
    "gold_sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_date = '2019-09-10' AND T2.expense_description = 'Pizza'",
    "predicted_sql": "SELECT T1.last_name, T1.position FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.expense_description = 'Pizza' AND T2.expense_date = '2019-09-10'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 874,
    "question": "Who finished second in the San Marino Grand Prix in 2006?",
    "evidence": "finished second refers to position = 2;",
    "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
    "predicted_sql": "SELECT T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'San Marino Grand Prix' AND T3.year = 2006 AND T1.position = 2",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 984,
    "question": "What is the website of the constructor who tallied the most total wins.",
    "evidence": "introduction website refers to url;",
    "gold_sql": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
    "predicted_sql": "SELECT c.url FROM constructors c JOIN constructorstandings cs ON c.constructorid = cs.constructorid GROUP BY c.constructorid ORDER BY SUM(cs.wins) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1473,
    "question": "What was the average monthly consumption of customers in SME for the year 2013?",
    "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
    "predicted_sql": "SELECT AVG(Consumption) / 12 AS average_monthly_consumption FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date LIKE '2013%'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 909,
    "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
    "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN circuits.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(races.name) AS percentage FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE races.name = 'European Grand Prix'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1015,
    "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
    "predicted_sql": "SELECT T3.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T1.name = 'Austrian Grand Prix' ORDER BY T2.milliseconds LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1491,
    "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
    "evidence": "",
    "gold_sql": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
    "predicted_sql": "SELECT gasstations.country, COUNT(gasstations.gasstationid) AS totalstations FROM gasstations WHERE gasstations.segment = 'Value for money' GROUP BY gasstations.country",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 949,
    "question": "Which constructor has the highest point?",
    "evidence": "",
    "gold_sql": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
    "predicted_sql": "SELECT constructors.name FROM constructors INNER JOIN constructorstandings ON constructors.constructorid = constructorstandings.constructorid GROUP BY constructors.name ORDER BY SUM(constructorstandings.points) DESC LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 1261,
    "question": "How many patients with a normal RF don't have thrombosis?",
    "evidence": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0",
    "predicted_sql": "SELECT COUNT(*) FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.RF < 20 AND Examination.Thrombosis = 0;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1090,
    "question": "What is the long passing score of the oldest player?",
    "evidence": "long passing score refers to long_passing; oldest player refers to oldest birthday;",
    "gold_sql": "SELECT T2.long_passing FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.birthday = (SELECT MIN(birthday) FROM Player)",
    "predicted_sql": "SELECT t2.long_passing FROM player AS t1 INNER JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.birthday = (SELECT MIN(birthday) FROM player) LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 861,
    "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
    "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
    "gold_sql": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
    "predicted_sql": "SELECT number FROM qualifying WHERE q3 LIKE '1:54%' AND raceId = 903",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": false
  },
  {
    "question_id": 2,
    "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.",
    "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm",
    "gold_sql": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1",
    "predicted_sql": "SELECT schools.Zip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Fresno County Office of Education' AND frpm.`Charter School (Y/N)` = 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 878,
    "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
    "evidence": "race number refers to raceId; the best lap time refers to MIN(time)",
    "gold_sql": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 348 AND T2.time IS NOT NULL ORDER BY T2.time ASC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1130,
    "question": "What are the short name of team who played safe while creating chance of passing?",
    "evidence": "played safe while creating chance of passing refers to chanceCreationPassingClass = 'Safe'; short name of team refers to team_short_name",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.chanceCreationPassingClass = 'Safe'",
    "predicted_sql": "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.chanceCreationPassingClass = 'Safe'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1359,
    "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?",
    "evidence": "budget in Advertisement refer to category = 'Advertisement' in the budget table; DIVIDE(SUM(amount when event_name = 'Yearly Kickoff'), SUM(amount when event_name = 'October Meeting'))",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.event_name = 'Yearly Kickoff' THEN T1.amount ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.event_name = 'October Meeting' THEN T1.amount ELSE 0 END) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Advertisement' AND T2.type = 'Meeting'",
    "predicted_sql": "SELECT SUM(CASE WHEN e.event_name = 'Yearly Kickoff' THEN b.amount ELSE 0 END) / SUM(CASE WHEN e.event_name = 'October Meeting' THEN b.amount ELSE 0 END) AS budget_ratio FROM event AS e INNER JOIN budget AS b ON e.event_id = b.link_to_event WHERE b.category = 'Advertisement'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 86,
    "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
    "evidence": "",
    "gold_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
    "predicted_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '40'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 927,
    "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
    "evidence": "",
    "gold_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "predicted_sql": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1012,
    "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
    "evidence": "fastest lap refers to MIN(time)",
    "gold_sql": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
    "predicted_sql": "SELECT c.location FROM circuits c JOIN races r ON c.circuitId = r.circuitId JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY res.fastestLapTime ASC LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 195,
    "question": "What is the most common bond type?",
    "evidence": "most common bond type refers MAX(COUNT(bond_type))",
    "gold_sql": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T",
    "predicted_sql": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1177,
    "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?",
    "evidence": "total cholesterol normal level refers to N < 250",
    "gold_sql": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-09-04'",
    "predicted_sql": "SELECT Laboratory.`T-CHO` < 250 AS is_normal FROM Laboratory WHERE Laboratory.ID = 2927464 AND Laboratory.Date = '1995-09-04'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 273,
    "question": "What is the percentage of element chlorine in carcinogenic molecules?",
    "evidence": "chlorine refers to element = 'cl'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(element = 'pb'); COUNT(molecule_id)) as percentage where label = '+'",
    "gold_sql": "SELECT CAST(COUNT( CASE WHEN T1.element = 'cl' THEN T1.element ELSE NULL END) AS REAL) * 100 / COUNT(T1.element) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'",
    "predicted_sql": "SELECT CAST(COUNT(atom.element) AS REAL) * 100 / COUNT(DISTINCT atom.molecule_id) as percentage FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND atom.element = 'cl';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1068,
    "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?",
    "evidence": "from 2010 to 2015 refers to strftime('%Y', date) >= '2010' AND <= '2015'; average overall rating = SUM(t2.overall_rating)/ COUNT(t2.id); higher than 170 refers to Player.height > 170;",
    "gold_sql": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND STRFTIME('%Y',t2.`date`) >= '2010' AND STRFTIME('%Y',t2.`date`) <= '2015'",
    "predicted_sql": "SELECT AVG(T2.overall_rating) FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.height > 170 AND STRFTIME('%Y', T2.`date`) BETWEEN '2010' AND '2015'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 978,
    "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
    "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
    "gold_sql": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
    "predicted_sql": "SELECT COUNT(T1.location), T1.location, T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.country = 'Austria' GROUP BY T1.location, T1.lat, T1.lng",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1440,
    "question": "List emails of people who paid more than 20 dollars from 9/10/2019 to 11/19/2019.",
    "evidence": "expense_date BETWEEN '2019-09-10' and '2019-11-19'; cost > 20",
    "gold_sql": "SELECT DISTINCT T1.email FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE date(SUBSTR(T2.expense_date, 1, 10)) BETWEEN '2019-09-10' AND '2019-11-19' AND T2.cost > 20",
    "predicted_sql": "SELECT T2.email FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id WHERE T1.cost > 20 AND T1.expense_date BETWEEN '2019-09-10' AND '2019-11-19'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1244,
    "question": "List all patients who first came to the hospital after year 1992 with prothrombin time (PT) level that are normal.",
    "evidence": "first came to the hospital after year 1992 refers to year(`First Date`) > 1992; prothrombin time (PT) level that are normal refers to PT < 14;",
    "gold_sql": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', T1.`First Date`) > '1992' AND T2.PT < 14",
    "predicted_sql": "SELECT DISTINCT patient.id FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE STRFTIME('%Y', patient.\"First Date\") > '1992' AND laboratory.pt < 14",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1480,
    "question": "What was the gas consumption peak month for SME customers in 2013?",
    "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
    "gold_sql": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "predicted_sql": "SELECT T2.Date FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption DESC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 392,
    "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
    "evidence": "uncommon refers to rarity = 'uncommon';",
    "gold_sql": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
    "predicted_sql": "SELECT c.name FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1492,
    "question": "What percentage of KAM customers pay in euros?",
    "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.",
    "gold_sql": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE Segment = 'KAM'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1013,
    "question": "What is the lap record for the Austrian Grand Prix Circuit?",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "gold_sql": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
    "predicted_sql": "SELECT MIN(lt.time) FROM laptimes lt JOIN races r ON lt.raceId = r.raceId WHERE r.name = 'Austrian Grand Prix'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1284,
    "question": "For the patient with the highest lactate dehydrogenase in the normal range, when was his or her data first recorded?",
    "evidence": "highest lactate dehydrogenase in the normal range refers to MAX(LDH < 500); when the data first recorded refers to MIN(First Date);",
    "gold_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH = (SELECT MAX(LDH) FROM Laboratory WHERE LDH < 500)",
    "predicted_sql": "SELECT Laboratory.Date FROM Laboratory WHERE Laboratory.LDH < 500 GROUP BY Laboratory.ID HAVING Laboratory.LDH = MAX(Laboratory.LDH) ORDER BY Laboratory.Date ASC LIMIT 1;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 38,
    "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?",
    "evidence": "",
    "gold_sql": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'",
    "predicted_sql": "SELECT DISTINCT T3.Website FROM satscores AS T1 INNER JOIN schools AS T3 ON T1.cds = T3.CDSCode WHERE T1.cname = 'Los Angeles' AND T1.NumTstTakr BETWEEN 2000 AND 3000",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 456,
    "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?",
    "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes",
    "gold_sql": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "predicted_sql": "SELECT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 99,
    "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
    "evidence": "Loan validity more than 12 months refers to duration > 12",
    "gold_sql": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
    "predicted_sql": "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 12 AND strftime('%Y', account.date) = '1993' ORDER BY loan.amount DESC LIMIT 1;",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 563,
    "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?",
    "evidence": "user no. 3025 refers to UserId = '3025'; comment at 20:29:39 on 2014/4/23 refers to CreationDate = '2014/4/23 20:29:39.0'",
    "gold_sql": "SELECT T1.FavoriteCount FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T2.CreationDate = '2014-04-23 20:29:39.0' AND T2.UserId = 3025",
    "predicted_sql": "SELECT posts.FavoriteCount FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = 3025 AND comments.CreationDate = '2014-04-23 20:29:39.0';",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 668,
    "question": "What is the display name of the user who acquired the highest amount of badges?",
    "evidence": "highest amount of badges refers to MAX(COUNT(Name));",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1",
    "predicted_sql": "SELECT T2.DisplayName FROM badges AS T1 JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Name) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1422,
    "question": "State the category of events were held at MU 215.",
    "evidence": "'MU 215' is the location of event; ",
    "gold_sql": "SELECT DISTINCT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'",
    "predicted_sql": "SELECT type FROM event WHERE location = 'MU 215'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1472,
    "question": "In 2012, who had the least consumption in LAM?",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "predicted_sql": "SELECT customers.CustomerID FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'LAM' AND yearmonth.Date BETWEEN '201201' AND '201212' ORDER BY yearmonth.Consumption ASC LIMIT 1;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 849,
    "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
    "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
    "gold_sql": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
    "predicted_sql": "SELECT races.url FROM races INNER JOIN circuits ON races.circuitid = circuits.circuitid WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1488,
    "question": "Who among KAM's customers consumed the most? How much did it consume?",
    "evidence": "",
    "gold_sql": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "predicted_sql": "SELECT T1.CustomerID, T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' ORDER BY T2.Consumption DESC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 284,
    "question": "Determine the bond type that is formed in the chemical compound containing element Carbon.",
    "evidence": "Carbon refers to element = 'c'; double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';",
    "gold_sql": "SELECT DISTINCT T2.bond_type FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c'",
    "predicted_sql": "SELECT bond.bond_type FROM atom JOIN bond ON atom.molecule_id = bond.molecule_id WHERE atom.element = 'te';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 996,
    "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
    "evidence": "races in date between '2000-01-01' and '2010-12-31'",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
    "predicted_sql": "SELECT CAST(COUNT(raceId) AS REAL) / COUNT(DISTINCT year) FROM races WHERE year BETWEEN 2000 AND 2010",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1161,
    "question": "For in-patient age 50 and above, what is their average anti-cardiolipin antibody (IgG) concentration?",
    "evidence": "in-patient refers to Admission = '+'; age 50 and above refers to SUBTRACT(year(current_timestamp), year(Birthday)) >= '50'; average anti-cardiolipin antibody (IgG) concentration refers to AVG(aCL IgG)",
    "gold_sql": "SELECT AVG(T2.`aCL IgG`) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T1.Birthday) >= 50 AND T1.Admission = '+'",
    "predicted_sql": "SELECT AVG(t2.\"aCL IgG\") AS average_acl_igg_concentration FROM patient AS t1 INNER JOIN examination AS t2 ON t1.id = t2.id WHERE t1.admission = '+' AND (STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', t1.birthday)) >= 50",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1267,
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1529,
    "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
    "evidence": "January 2012 refers to the Date value = '201201'",
    "gold_sql": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
    "predicted_sql": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 UNION ALL SELECT SUM(Amount) FROM transactions_1k WHERE Date LIKE '201201%' AND CustomerID = 38508",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 82,
    "question": "What is the grade span offered in the school with the highest longitude?",
    "evidence": "",
    "gold_sql": "SELECT GSoffered FROM schools WHERE ABS(longitude) = (SELECT MAX(ABS(longitude)) FROM schools)",
    "predicted_sql": "SELECT GSoffered FROM schools ORDER BY ABS(Longitude) DESC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1129,
    "question": "List down the long name for slow speed class team.",
    "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name",
    "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'",
    "predicted_sql": "SELECT Team.team_long_name FROM Team JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Slow';",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1366,
    "question": "List all the members who attended the event \"October Meeting\".",
    "evidence": "'October Meeting' is an event name;",
    "gold_sql": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
    "predicted_sql": "SELECT T3.first_name, T3.last_name FROM attendance AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id WHERE T2.event_name = 'October Meeting'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1453,
    "question": "List the name of events with less than average parking cost.",
    "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
    "predicted_sql": "SELECT event.event_name FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id INNER JOIN event ON budget.link_to_event = event.event_id WHERE expense.cost < (SELECT AVG(cost) FROM expense)",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1227,
    "question": "What is the average age of the male patient with high cholesterol?",
    "evidence": "average age = DIVIDE(SUM(SUBTRACT(YEAR(NOW()), YEAR(birthday))), COUNT(ID)); male patient refers to sex = 'M'; high cholesterol refers to `T-CHO` > = 250;",
    "gold_sql": "SELECT AVG(STRFTIME('%Y', date('NOW')) - STRFTIME('%Y', T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-CHO` >= 250 AND T1.SEX = 'M'",
    "predicted_sql": "SELECT AVG(STRFTIME('%Y', CURRENT_DATE) - STRFTIME('%Y', patient.birthday)) AS average_age FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE patient.sex = 'M' AND laboratory.\"T-CHO\" >= 250",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1165,
    "question": "What is the age gap between the youngest and oldest patient with a normal triglyceride recorded?",
    "evidence": "age gap refers to SUBTRACT(MAX(year(Birthday)) - MIN(year(Birthday))); normal triglyceride refers to tg > = 200",
    "gold_sql": "SELECT STRFTIME('%Y', MAX(T1.Birthday)) - STRFTIME('%Y', MIN(T1.Birthday)) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG >= 200",
    "predicted_sql": "SELECT MAX(STRFTIME('%Y', patient.birthday)) - MIN(STRFTIME('%Y', patient.birthday)) AS agegap FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.tg < 200",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 189,
    "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
    "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
    "gold_sql": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F') AND T2.A11 = (SELECT MIN(T2.A11) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date = (SELECT MIN(birth_date) FROM client WHERE gender = 'F'))",
    "predicted_sql": "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'F' AND client.birth_date IS NOT NULL AND district.A11 IS NOT NULL ORDER BY client.birth_date ASC, district.A11 ASC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1271,
    "question": "How many patients with a normal anti-SSA came to the hospital before 2000?",
    "evidence": "normal anti-SSA refers to SSA IN('-','+-'); came to the hospital before 2000 refers to YEAR(`First Date`) < 2000; Should compute the number of distinct ones",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('negative', '0') AND STRFTIME('%Y', T2.Date) < '2000'",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSA IN ('0', '+') AND STRFTIME('%Y', T1.`First Date`) < '2000'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 271,
    "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?",
    "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'",
    "gold_sql": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')",
    "predicted_sql": "SELECT CASE WHEN COUNT(DISTINCT CASE WHEN T2.element IN ('cl', 'c') THEN T2.element END) = 2 THEN 'yes' ELSE 'no' END AS has_both FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id  WHERE T1.bond_id = 'TR001_1_8'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1241,
    "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?",
    "evidence": "abnormal platelet level refers to PLT <= 100 or PLT >= 400; platelet level lower than normal range refers to PLT < 100; calculation = SUBTRACT(SUM(PLT < 100), SUM(PLT > 400)); platelet level higher than normal range refers to PLT > 400;",
    "gold_sql": "SELECT SUM(CASE WHEN T2.PLT <= 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.PLT >= 400 THEN 1 ELSE 0 END) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID",
    "predicted_sql": "SELECT SUM(CASE WHEN PLT < 100 THEN 1 ELSE 0 END) - SUM(CASE WHEN PLT > 400 THEN 1 ELSE 0 END) FROM Laboratory",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1277,
    "question": "How many patients have a normal anti-DNA level, yet their data are not recorded.",
    "evidence": "normal anti-DNA level refers to DNA < 8; data are not recorded refers to Description IS NULL; Should compute the number of unique ones",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA < 8 AND T1.Description IS NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT \"Patient\".\"ID\") FROM \"Patient\" INNER JOIN \"Laboratory\" ON \"Patient\".\"ID\" = \"Laboratory\".\"ID\" WHERE \"Laboratory\".\"DNA\" < 8 AND \"Patient\".\"Description\" IS NULL",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 28,
    "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average.",
    "evidence": "Difference between K-12 enrollment and 15-17 enrollment can be computed by `Enrollment (K-12)` - `Enrollment (Ages 5-17)`",
    "gold_sql": "SELECT T2.School, T2.DOC FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND (T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) > (SELECT AVG(T3.`Enrollment (K-12)` - T3.`Enrollment (Ages 5-17)`) FROM frpm AS T3 INNER JOIN schools AS T4 ON T3.CDSCode = T4.CDSCode WHERE T4.FundingType = 'Locally funded')",
    "predicted_sql": "SELECT T2.School, T2.DOCType FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' AND T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)` > ( SELECT AVG(T1.`Enrollment (K-12)` - T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.FundingType = 'Locally funded' )",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 373,
    "question": "Name the cards that were illustrated by Aaron Boyd.",
    "evidence": "Aaron Boyd' is artist;",
    "gold_sql": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'",
    "predicted_sql": "SELECT name FROM cards WHERE artist = 'Aaron Boyd'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1404,
    "question": "Identify the type of expenses and their total value approved for 'October Meeting' event.",
    "evidence": "total value refers to SUM(cost); 'October Meeting' is an event name;",
    "gold_sql": "SELECT T1.type, SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting'",
    "predicted_sql": "SELECT T3.event_name, SUM(T2.cost) FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T3.event_name = 'October Meeting' AND T2.approved = 'true'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1391,
    "question": "What is the ratio between students majored in finance and physics?",
    "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))",
    "gold_sql": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.major_name = 'Finance' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.major_name = 'Physics' THEN 1 ELSE 0 END) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1465,
    "question": "Which budget category does the expense 'Posters' fall to?",
    "evidence": "'Posters' refers to expense description",
    "gold_sql": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'",
    "predicted_sql": "SELECT budget.category FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Posters';",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 83,
    "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city.",
    "evidence": "Kindergarten to 8th grade refers to K-8; 'Offers a magnet program' means Magnet = 1; Multiple Provision Types refers to `NSLP Provision Status` = 'Multiple Provision Types'",
    "gold_sql": "SELECT T2.City, COUNT(T2.CDSCode) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.Magnet = 1 AND T2.GSoffered = 'K-8' AND T1.`NSLP Provision Status` = 'Multiple Provision Types' GROUP BY T2.City",
    "predicted_sql": "SELECT City, COUNT(School) FROM schools WHERE GSoffered = 'K-8' AND Magnet = 1 GROUP BY City",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 615,
    "question": "Among the users who obtained the \"Organizer\" badges, calculate the percentage of users who are teenagers.",
    "evidence": "\"Organizer\" is the Name of badge; teenager refers to Age BETWEEN 13 AND 18; percentage = Divide (Count(UserId where Age BETWEEN 13 AND 18), Count(UserId)) *100",
    "gold_sql": "SELECT CAST(SUM(IIF(T2.Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.`Name` = 'Organizer'",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN u.Age BETWEEN 13 AND 18 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(b.UserId) AS PercentageTeenagers FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Organizer'",
    "score": 0.0,
    "prover_result": null,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 437,
    "question": "Among black card borders, which card has full artwork?",
    "evidence": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "predicted_sql": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1441,
    "question": "How many members have education major in the College of Education & Human Services?",
    "evidence": "'education' is the major name; 'Member' is a position of club;",
    "gold_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Member' AND T2.major_name LIKE '%Education%' AND T2.college = 'College of Education & Human Services'",
    "predicted_sql": "SELECT COUNT(member_id) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major_name = 'education' AND college = 'College of Education & Human Services' AND position = 'Member'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 138,
    "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
    "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
    "predicted_sql": "SELECT COUNT(client_id) FROM client WHERE district_id = (SELECT district_id FROM district ORDER BY a15 DESC LIMIT 1 OFFSET 1) AND gender = 'M'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1486,
    "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
    "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
    "gold_sql": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
    "predicted_sql": "SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN T1.Amount ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Amount ELSE 0 END) AS AmountDifference FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1481,
    "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
    "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
    "predicted_sql": "SELECT (SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T1.Currency = 'CZK' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption ASC LIMIT 1) - (SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'CZK' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption ASC LIMIT 1) AS diff1, (SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'CZK' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption ASC LIMIT 1) - (SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T1.Currency = 'CZK' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption ASC LIMIT 1) AS diff2, (SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND T1.Currency = 'CZK' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption ASC LIMIT 1) - (SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T1.Currency = 'CZK' AND T2.Date LIKE '2013%' ORDER BY T2.Consumption ASC LIMIT 1) AS diff3",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 552,
    "question": "Please list the names of the badges obtained by csgillespie.",
    "evidence": "\"csgillespie\" is the DisplayName of user",
    "gold_sql": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'",
    "predicted_sql": "SELECT DISTINCT badges.name FROM badges INNER JOIN users ON badges.userid = users.id WHERE users.displayname = 'csgillespie'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1514,
    "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
    "gold_sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
    "predicted_sql": "SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1510,
    "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
    "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
    "gold_sql": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
    "predicted_sql": "SELECT AVG(transactions_1k.Amount * transactions_1k.Price) as avg_total_price FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE';",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 176,
    "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
    "evidence": "",
    "gold_sql": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
    "predicted_sql": "SELECT loan.amount, loan.status FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN loan ON account.account_id = loan.account_id WHERE client.client_id = 992 AND loan.status = 'D'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 71,
    "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?",
    "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.",
    "gold_sql": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0",
    "predicted_sql": "SELECT schools.District FROM schools WHERE schools.Magnet = 0 AND schools.City = 'Fresno';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 720,
    "question": "Please list the full names of all the superheroes with over 15 super powers.",
    "evidence": "15 super powers refers to COUNT(full_name) > 15",
    "gold_sql": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15",
    "predicted_sql": "SELECT superhero.full_name FROM superhero INNER JOIN (SELECT hero_id FROM hero_power GROUP BY hero_id HAVING COUNT(DISTINCT power_id) > 15) AS power_count ON superhero.id = power_count.hero_id",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 639,
    "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
    "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
    "gold_sql": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN INSTR(tags, '|r|') > 0 OR tags = 'r' OR INSTR(tags, 'r|') = 1 OR INSTR(tags, '|r') = LENGTH(tags) - 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage FROM posts INNER JOIN users ON posts.owneruserid = users.id WHERE users.displayname = 'Community'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 739,
    "question": "What are the names of the superheroes with the power of death touch?",
    "evidence": "name of superheroes refers to refers to superhero_name; the power of death touch refers to power_name = 'Death Touch'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
    "predicted_sql": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 172,
    "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
    "evidence": "",
    "gold_sql": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
    "predicted_sql": "SELECT COUNT(disp_id) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT')",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 40,
    "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?",
    "evidence": "Fresno Unified is a name of district;",
    "gold_sql": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.District = 'Fresno Unified' AND T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1",
    "predicted_sql": "SELECT t2.Phone FROM satscores AS t1 INNER JOIN schools AS t2 ON t1.dname = t2.District AND t1.sname = t2.School WHERE t1.dname = 'Fresno Unified' ORDER BY t1.AvgScrRead ASC LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 250,
    "question": "Of all the carcinogenic molecules, which one has the most double bonds?",
    "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';",
    "gold_sql": "SELECT T.molecule_id FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id HAVING bond_count = (SELECT MAX(bond_count) FROM (SELECT T3.molecule_id, COUNT(T1.bond_type) AS bond_count FROM bond AS T1 INNER JOIN molecule AS T3 ON T1.molecule_id = T3.molecule_id WHERE T3.label = '+' AND T1.bond_type = '=' GROUP BY T3.molecule_id) AS subquery) ORDER BY bond_count DESC) AS T",
    "predicted_sql": "SELECT m.molecule_id FROM molecule m JOIN bond b ON m.molecule_id = b.molecule_id JOIN connected c ON b.bond_id = c.bond_id WHERE m.label = '+' AND b.bond_type = '=' GROUP BY m.molecule_id ORDER BY COUNT(b.bond_id) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 854,
    "question": "What is the coordinates location of the circuits for Australian grand prix?",
    "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
    "gold_sql": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
    "predicted_sql": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Australian Grand Prix'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 916,
    "question": "Please list the surnames of all the Italian drivers.",
    "evidence": "Italian refers to nationality = 'italian'",
    "gold_sql": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
    "predicted_sql": "SELECT DISTINCT drivers.surname FROM drivers WHERE drivers.nationality = 'Italian'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 318,
    "question": "What is the molecule id of bond id TR001_1_7?",
    "evidence": "",
    "gold_sql": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'",
    "predicted_sql": "SELECT molecule_id FROM bond WHERE bond_id = 'TR001_1_7'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 137,
    "question": "How many accounts have running contracts in Branch location 1?",
    "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
    "gold_sql": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
    "predicted_sql": "SELECT COUNT(account.account_id)  FROM account  INNER JOIN loan ON account.account_id = loan.account_id  WHERE account.district_id = 1 AND (loan.status = 'C' OR loan.status = 'D')",
    "score": 0.0,
    "prover_result": null,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 1024,
    "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.",
    "evidence": "perform better in crossing actions refers to MAX(crossing)",
    "gold_sql": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5",
    "predicted_sql": "SELECT Player.player_api_id FROM Player_Attributes INNER JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id ORDER BY Player_Attributes.crossing DESC LIMIT 5;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 223,
    "question": "What are the atom IDs of the bond TR000_2_5?",
    "evidence": "TR000_2_5 is the bond id",
    "gold_sql": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
    "predicted_sql": "SELECT atom_id, atom_id2 FROM connected WHERE bond_id = 'TR000_2_5'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 213,
    "question": "What type of bond is there between the atoms TR004_8 and TR004_20?",
    "evidence": "type of bond refers to bond_type; between the atoms TR004_8 and TR004_20 refers to atom_id = 'TR004_8' AND atom_id2 = 'TR004_20' OR another way around",
    "gold_sql": "SELECT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR004_8' AND T2.atom_id2 = 'TR004_20' OR T2.atom_id2 = 'TR004_8' AND T2.atom_id = 'TR004_20'",
    "predicted_sql": "SELECT T2.bond_type FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR004_8' AND T1.atom_id2 = 'TR004_20'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1178,
    "question": "What was the gender of the first AORTITIS diagnosed patient?",
    "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;",
    "gold_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' AND `First Date` IS NOT NULL ORDER BY `First Date` ASC LIMIT 1",
    "predicted_sql": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 359,
    "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
    "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
    "gold_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
    "predicted_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 357,
    "question": "What type of promotion is of card 'Duress'?",
    "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;",
    "gold_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL",
    "predicted_sql": "SELECT promoTypes FROM cards WHERE name = 'Duress'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1270,
    "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?",
    "evidence": "normal anti-scl70 refers to SC170 IN('negative', '0'); female refers to Sex = 'F'; does not have any symptom refers to symptoms IS NULL; Should consider DISTINCT in the final result;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE (T2.SC170 = 'negative' OR T2.SC170 = '0') AND T1.SEX = 'F' AND T3.Symptoms IS NULL",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID INNER JOIN Laboratory AS T3 ON T1.ID = T3.ID WHERE T3.SC170 IN ('-', '+-') AND T1.SEX = 'M' AND T2.Symptoms = 'vertigo'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 389,
    "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
    "evidence": "Creature - Elf is the originalType;",
    "gold_sql": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
    "predicted_sql": "SELECT cards.name, rulings.date FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.originalType = 'Creature - Elf';",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 349,
    "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
    "evidence": "with the most ruling information refers to Max(count(rulings.uuid)); the card is the promotional printing refers to isPromo = 1;",
    "gold_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 AND T1.artist = (SELECT artist FROM cards WHERE isPromo = 1 GROUP BY artist HAVING COUNT(DISTINCT uuid) = (SELECT MAX(count_uuid) FROM ( SELECT COUNT(DISTINCT uuid) AS count_uuid FROM cards WHERE isPromo = 1 GROUP BY artist ))) LIMIT 1",
    "predicted_sql": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid GROUP BY T1.name, T1.artist, T1.isPromo ORDER BY COUNT(T2.uuid) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1367,
    "question": "Which college do most of the members go to?",
    "evidence": "college most members go refers to MAX(COUNT(major.college))",
    "gold_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1",
    "predicted_sql": "SELECT T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major GROUP BY T1.college ORDER BY COUNT(T2.member_id) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 411,
    "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?",
    "evidence": "",
    "gold_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText LIKE '%DAS perfekte Gegenmittel zu einer dichten Formation%'",
    "predicted_sql": "SELECT artist FROM cards WHERE uuid = ( SELECT uuid FROM foreign_data WHERE text = 'Das perfekte Gegenmittel zu einer dichten Formation' )",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 426,
    "question": "Please provide top three sets that don't appear in Magic: The Gathering Online, along with their names in in alphabetical order.",
    "evidence": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''",
    "gold_sql": "SELECT name FROM sets WHERE mtgoCode IS NULL ORDER BY name LIMIT 3",
    "predicted_sql": "SELECT code, name FROM sets WHERE (mtgoCode IS NULL OR mtgoCode = '') AND name IS NOT NULL ORDER BY name ASC LIMIT 3",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 402,
    "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID.",
    "evidence": "Story Spotlight cards that do not have a text box refers to isStorylight = 1 and isTextless = 0; Percentage = DIVIDE(SUM(count(id) where isStorylight = 1 AND isTextless = 0 ), SUM(count(id))) * 100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN isTextless = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards WHERE isStorySpotlight = 1",
    "predicted_sql": "SELECT (CAST(COUNT(CASE WHEN isStorySpotlight = 1 AND isTextless = 1 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(*)) AS percentage, id FROM cards WHERE isStorySpotlight = 1 AND isTextless = 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1478,
    "question": "Which segment had the least consumption?",
    "evidence": "",
    "gold_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
    "predicted_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Consumption IS NOT NULL ORDER BY T2.Consumption ASC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 477,
    "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?",
    "evidence": "card set Coldsnap refers to name = 'Coldsnap'; Jeremy Jarvis, Aaron Miller or Chippy are the name of artists which refers to artist IN ('Jeremy Jarvis', 'Aaron Miller','Chippy');",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE (T2.name = 'Coldsnap' AND T1.artist = 'Chippy') OR (T2.name = 'Coldsnap' AND T1.artist = 'Aaron Miller') OR (T2.name = 'Coldsnap' AND T1.artist = 'Jeremy Jarvis') GROUP BY T1.artist",
    "predicted_sql": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.name = 'Coldsnap' AND T1.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 440,
    "question": "Which foreign language used by \"A Pedra Fellwar\"?",
    "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'",
    "gold_sql": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
    "predicted_sql": "SELECT set_translations.language FROM set_translations WHERE set_translations.translation = 'A Pedra Fellwar';",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 481,
    "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.",
    "evidence": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null",
    "gold_sql": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.flavorText IS NOT NULL",
    "predicted_sql": "SELECT DISTINCT foreign_data.language FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.name = 'Ancestor''s Chosen' AND NOT foreign_data.flavortext IS NULL",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 50,
    "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name.",
    "evidence": "Postal street and mailing street are synonyms.",
    "gold_sql": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 6, 1",
    "predicted_sql": "SELECT T2.Street, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath IS NOT NULL ORDER BY T1.AvgScrMath DESC LIMIT 5, 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1209,
    "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth.",
    "evidence": "ALT glutamic pylvic transaminase beyond the normal range refers to GPT > 60; The larger the birthday value, the younger the person is, and vice versa; ",
    "gold_sql": "SELECT DISTINCT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT > 60 ORDER BY T1.Birthday ASC",
    "predicted_sql": "SELECT DISTINCT T3.Diagnosis FROM Laboratory AS T1 INNER JOIN Patient AS T3 ON T1.ID = T3.ID WHERE T1.GPT > 60 ORDER BY T3.Birthday ASC",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 619,
    "question": "How many adults who obtained the badge Supporter?",
    "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65",
    "gold_sql": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65",
    "predicted_sql": "SELECT COUNT(DISTINCT u.Id) FROM badges b JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Supporter' AND u.Age BETWEEN 19 AND 65",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 522,
    "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format.",
    "evidence": "ranked 1st on EDHRec refers to edhrecRank = 1; banned refers to status = 'Banned'; play format refers to format; cards name refers to name",
    "gold_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T2.uuid = T1.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned' GROUP BY T1.name, T2.format",
    "predicted_sql": "SELECT T1.name, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.edhrecRank = 1 AND T2.status = 'Banned'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1315,
    "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?",
    "evidence": "Women's Soccer is an event name",
    "gold_sql": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'",
    "predicted_sql": "SELECT COUNT(DISTINCT link_to_member) AS number_of_students FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women''s Soccer')",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 91,
    "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
    "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
    "gold_sql": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
    "predicted_sql": "SELECT AVG(A12) AS avg_1995, AVG(A13) AS avg_1996 FROM district",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 634,
    "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
    "evidence": "Has higher popularity means the post has higher view count ; calculation = MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder';",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
    "predicted_sql": "SELECT T1.DisplayName, SUM(T2.ViewCount) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName IN ('Harvey Motulsky', 'Noah Snyder') GROUP BY T1.DisplayName ORDER BY SUM(T2.ViewCount) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 728,
    "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color.",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; most common color refers to COUNT(superhero.id) DESC;",
    "gold_sql": "SELECT colour.colour AS EyeColor, COUNT(superhero.id) AS Count, RANK() OVER (ORDER BY COUNT(superhero.id) DESC) AS PopularityRank FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY colour.colour",
    "predicted_sql": "SELECT c.colour FROM superhero s JOIN publisher p ON s.publisher_id = p.id JOIN colour c ON s.eye_colour_id = c.id WHERE p.publisher_name = 'Marvel Comics' GROUP BY c.colour ORDER BY COUNT(s.id) DESC",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 139,
    "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
    "evidence": "High-level credit cards refers to the cards with the gold type.",
    "gold_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
    "predicted_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'disponent'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 594,
    "question": "Which user created post ID 1 and what is the reputation of this user?",
    "evidence": "",
    "gold_sql": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1",
    "predicted_sql": "SELECT T2.DisplayName, T2.Reputation FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id = 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 897,
    "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
    "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
    "gold_sql": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "predicted_sql": "SELECT T1.surname, T1.nationality, AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId WHERE T2.wins IS NOT NULL GROUP BY T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 736,
    "question": "Who is the dumbest superhero?",
    "evidence": "the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'",
    "gold_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value = (SELECT MIN(T4.attribute_value) FROM hero_attribute AS T4 INNER JOIN attribute AS T5 ON T4.attribute_id = T5.id WHERE T5.attribute_name = 'Intelligence')",
    "predicted_sql": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value IS NOT NULL ORDER BY T2.attribute_value ASC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 197,
    "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
    "evidence": "single-bonded molecules refers to bond_type = '-' ; average number of oxygen atom = AVG(element = 'o')",
    "gold_sql": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
    "predicted_sql": "SELECT AVG(oxygen_count) FROM (SELECT COUNT(CASE WHEN T2.element = 'o' THEN 1 ELSE NULL END) AS oxygen_count FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '-' GROUP BY T1.molecule_id)",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1437,
    "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
    "evidence": "approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'",
    "gold_sql": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
    "predicted_sql": "SELECT DISTINCT T1.first_name, T1.last_name, T2.link_to_event FROM member AS T1 INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T3.approved = 'true' AND T3.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1063,
    "question": "What is Aaron Doran's potential score?",
    "evidence": "potential score refers to potential;",
    "gold_sql": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'",
    "predicted_sql": "SELECT T2.potential FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'Aaron Doran'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 907,
    "question": "List all races in 2017 and the hosting country order by date of the event.",
    "evidence": "",
    "gold_sql": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
    "predicted_sql": "SELECT races.name, circuits.country, races.date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2017 ORDER BY races.date",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1179,
    "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?",
    "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; 1994/2/19 refers to Description = '1994-02-19'; anti-Cardiolipin refers to aCL IgM; 1993/11/12 refers to Examination Date = '1993/11/12'",
    "gold_sql": "SELECT `aCL IgA`, `aCL IgG`, `aCL IgM` FROM Examination WHERE ID IN ( SELECT ID FROM Patient WHERE Diagnosis = 'SLE' AND Description = '1994-02-19' ) AND `Examination Date` = '1993-11-12'",
    "predicted_sql": "SELECT examination.\"aCL IgM\" FROM patient INNER JOIN examination ON patient.id = examination.id WHERE patient.description = '1994-02-19' AND examination.\"Examination Date\" = '1993-11-12'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 298,
    "question": "Calculate the percentage of molecules containing carcinogenic compounds that element is hydrogen.",
    "evidence": "hydrogen refers to element = 'h'; label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+' and element = 'h'), COUNT(molecule_id)) * 100.0",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T1.element = 'h' AND T2.label = '+' THEN T2.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.label = '+' AND T2.element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1281,
    "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?",
    "evidence": "abnormal level of glutamic oxaloacetic transaminase refers to GOT > = 60; The larger the birthday value, the younger the person is, and vice versa;",
    "gold_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT >= 60 ORDER BY T1.Birthday DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(patient.birthday) AS youngest_birthday FROM patient INNER JOIN laboratory ON patient.id = laboratory.id WHERE laboratory.got >= 60",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1099,
    "question": "Which foot is preferred by Abdou Diallo?",
    "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot",
    "gold_sql": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "predicted_sql": "SELECT t2.preferred_foot FROM player AS t1 INNER JOIN player_attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1399,
    "question": "Did Maya Mclean attend the 'Women's Soccer' event?",
    "evidence": "Maya Mclean is the full name; full name refers to first_name, last_name; 'Women's Soccer' is an event_name",
    "gold_sql": "SELECT CASE WHEN T3.event_name = 'Women''s Soccer' THEN 'YES' END AS result FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T1.first_name = 'Maya' AND T1.last_name = 'Mclean'",
    "predicted_sql": "SELECT COUNT(T1.link_to_member) > 0 FROM attendance AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN event AS T3 ON T1.link_to_event = T3.event_id WHERE T2.first_name = 'Maya' AND T2.last_name = 'Mclean' AND T3.event_name = 'Women''s Soccer'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1204,
    "question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?",
    "evidence": "DATEDIFF(`Examination Date`, `First Date`)",
    "gold_sql": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298",
    "predicted_sql": "SELECT JULIANDAY(T2.`Examination Date`) - JULIANDAY(T1.`First Date`) AS days_diff FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 821298 AND T2.`Examination Date` IS NOT NULL",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 685,
    "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
    "evidence": "total views refer to ViewCount; Name the user refers to DisplayName; post 'Computer Game Datasets' refers to Text = 'Computer Game Datasets';",
    "gold_sql": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
    "predicted_sql": "SELECT T1.ViewCount, T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Id IN ( SELECT PostId FROM postHistory WHERE Text = 'Computer Game Datasets' )",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 1533,
    "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
    "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
    "gold_sql": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
    "predicted_sql": "SELECT yearmonth.Consumption FROM transactions_1k INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE transactions_1k.ProductID = 5 AND transactions_1k.Price / transactions_1k.Amount > 29 AND yearmonth.Date = '201208';",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 321,
    "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
    "evidence": "",
    "gold_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
    "predicted_sql": "SELECT molecule_id FROM atom WHERE atom_id IN ('TR000_2', 'TR000_4')",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 758,
    "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
    "evidence": "185 cm tall refers to height_cm = 185; human superhero refers to race = 'human'; hair colour refers to colour where hair_colour_id = colour.id;",
    "gold_sql": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
    "predicted_sql": "SELECT c.colour FROM superhero s JOIN colour c ON s.hair_colour_id = c.id JOIN race r ON s.race_id = r.id WHERE s.height_cm = 185 AND r.race = 'Human'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 65,
    "question": "What is the ratio in percentage of Santa Clara County schools that are locally funded compared to all other types of charter school funding?",
    "evidence": "Ratio in percentage = (count(locally funded schools in Santa Clara) / count(all funding type schools in Santa Clara) * 100%",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN FundingType != 'Locally funded' THEN 1 ELSE 0 END) FROM schools WHERE County = 'Santa Clara' AND Charter = 1",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN FundingType = 'Locally funded' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM schools WHERE County = 'Santa Clara'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 835,
    "question": "Among all superheroes in Marvel Comics, identify the percentage of 'good' superheroes.",
    "evidence": "Marvel Comics refers to publisher_name = 'Marvel Comics'; percentage = MULTIPLY(DIVIDE(SUM(alignment = 'Good' WHERE publisher_name = 'Marvel Comics'), COUNT(publisher_name = 'Marvel Comics')), 100.0); good superheroes refers to alignment = 'Good';",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN T3.alignment = 'Good' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T2.publisher_name = 'Marvel Comics'",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN t3.alignment = 'Good' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS percentage_of_good_superheroes FROM superhero AS t1 INNER JOIN publisher AS t2 ON t1.publisher_id = t2.id INNER JOIN alignment AS t3 ON t1.alignment_id = t3.id WHERE t2.publisher_name = 'Marvel Comics'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1285,
    "question": "When is the latest patient's medical data recorded? This patient should have an abnormal level of lactate dehydrogenase.",
    "evidence": "latest patient refers to ID with MAX('First Date'); abnormal level of lactate dehydrogenase refers to LDH > = 500;",
    "gold_sql": "SELECT T1.`First Date` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH >= 500 ORDER BY T1.`First Date` DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(`Date`) AS latest_date FROM Laboratory WHERE ID IN ( SELECT ID FROM Patient ORDER BY `First Date` DESC LIMIT 1 ) AND LDH >= 500",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 97,
    "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
    "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction",
    "gold_sql": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
    "predicted_sql": "SELECT DISTINCT disp.client_id FROM account INNER JOIN disp ON account.account_id = disp.account_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND disp.type = 'DISPONENT'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 939,
    "question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
    "evidence": "from the UN refers to nationality = 'British'",
    "gold_sql": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
    "predicted_sql": "SELECT COUNT(DISTINCT d.driverid) AS driver_count FROM drivers AS d INNER JOIN results AS r ON d.driverid = r.driverid INNER JOIN races AS ra ON r.raceid = ra.raceid WHERE ra.year = 2008 AND ra.name = 'Australian Grand Prix' AND d.nationality = 'British'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 363,
    "question": "How many cards of legalities whose status is restricted are found in a starter deck?",
    "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;",
    "gold_sql": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1",
    "predicted_sql": "SELECT COUNT(c.id) FROM cards c INNER JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Restricted' AND c.isStarter = 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 967,
    "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
    "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
    "predicted_sql": "SELECT code, SUM(CASE WHEN nationality IN ('Netherlandic', 'Dutch') THEN 1 ELSE 0 END) AS netherlandic_count FROM (SELECT code, nationality FROM drivers ORDER BY dob ASC LIMIT 3) AS top_drivers",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 163,
    "question": "Which district has the most accounts with loan contracts finished with no problems?",
    "evidence": "status = 'A' refers to loan contracts finished with no problems",
    "gold_sql": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
    "predicted_sql": "SELECT d.district_id FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.district_id ORDER BY COUNT(l.loan_id) DESC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1022,
    "question": "What is the preferred foot when attacking of the player with the lowest potential?",
    "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);",
    "gold_sql": "SELECT preferred_foot FROM Player_Attributes WHERE penalties AND potential = (SELECT MIN(potential) FROM Player_Attributes)",
    "predicted_sql": "SELECT Player_Attributes.preferred_foot FROM Player_Attributes WHERE Player_Attributes.potential = (SELECT MIN(Player_Attributes.potential) FROM Player_Attributes);",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 394,
    "question": "How many white bordered cards are powerful?",
    "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId is not null AND cardKingdomId is not null (replace)",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL",
    "predicted_sql": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomFoilId = cardKingdomId AND cardKingdomId IS NOT NULL",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 228,
    "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places.",
    "evidence": "hydrogen refers to element = 'h'; TR206 is the molecule id; percentage = DIVIDE(SUM(element = 'h'), COUNT(atom_id)) as percent where molecule_id = 'TR206'",
    "gold_sql": "SELECT ROUND(CAST(COUNT(CASE WHEN T.element = 'h' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id),4) FROM atom AS T WHERE T.molecule_id = 'TR206'",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN element = 'h' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(atom_id) FROM atom WHERE molecule_id = 'TR206'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1050,
    "question": "What is the preferred foot when attacking of the youngest football player?",
    "evidence": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;",
    "gold_sql": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday DESC LIMIT 1",
    "predicted_sql": "SELECT T2.preferred_foot FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id ORDER BY T1.birthday DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 418,
    "question": "What kind of printing is on the card that Daren Bader created?",
    "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'",
    "gold_sql": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'",
    "predicted_sql": "SELECT cards.availability FROM cards WHERE cards.artist = 'Daren Bader';",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 300,
    "question": "What atoms comprise TR186?",
    "evidence": "TR186 is a molecule id",
    "gold_sql": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'",
    "predicted_sql": "SELECT element FROM atom WHERE molecule_id = 'TR186'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 81,
    "question": "In which city can you find the school in the state of California with the lowest latitude coordinates and what is its lowest grade? Indicate the school name.",
    "evidence": "State of California refers to state = 'CA'",
    "gold_sql": "SELECT T2.City, T1.`Low Grade`, T1.`School Name` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.State = 'CA' AND T2.Latitude IS NOT NULL AND T2.Latitude = (SELECT MIN(Latitude) FROM schools WHERE State = 'CA' AND Latitude IS NOT NULL)",
    "predicted_sql": "SELECT s.City, f.\"Low Grade\", s.School FROM schools s JOIN frpm f ON s.CDSCode = f.CDSCode WHERE s.State = 'CA' ORDER BY s.Latitude ASC LIMIT 1",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 327,
    "question": "Which non-carcinogenic molecules consisted more than 5 atoms?",
    "evidence": "label = '-' means molecules are non-carcinogenic; molecules consisted more than 5 atoms refers to COUNT(molecule_id) > 5",
    "gold_sql": "SELECT T.molecule_id FROM ( SELECT T1.molecule_id, COUNT(T2.atom_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T2.atom_id) > 5 ) t",
    "predicted_sql": "SELECT T1.molecule_id FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.label = '-' GROUP BY T1.molecule_id HAVING COUNT(T1.molecule_id) > 5",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1122,
    "question": "State the name of the most strongest player.",
    "evidence": "strongest players refers to player has MAX(overall_rating)",
    "gold_sql": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = (SELECT MAX(overall_rating) FROM Player_Attributes)",
    "predicted_sql": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 10;",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 109,
    "question": "How many clients opened their accounts in Jesenik branch were women?",
    "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'",
    "gold_sql": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
    "predicted_sql": "SELECT COUNT(T1.district_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.A2 = 'Jesenik' AND T4.gender = 'F'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1160,
    "question": "What is the percentage of female patient had total protein not within the normal range?",
    "evidence": "female refers to sex = 'F'; total protein not within the normal range refers to TP < '6.0' or TP > '8.5'; calculation = DIVIDE((ID where sex = 'F' and TP < '6.0' or TP > '8.5'), COUNT(ID)) * 100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T1.SEX = 'F' AND (T2.TP < 6.0 OR T2.TP > 8.5) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F'",
    "predicted_sql": "SELECT CAST(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM Patient WHERE Patient.SEX = 'F') AS REAL) as percentage FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F' AND (Laboratory.TP < 6.0 OR Laboratory.TP > 8.5);",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 364,
    "question": "What is the status of card \"Cloudchaser Eagle\"?",
    "evidence": "Cloudchaser Eagle is the name of card;",
    "gold_sql": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
    "predicted_sql": "SELECT legalities.status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Cloudchaser Eagle'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 398,
    "question": "What is the  unconverted mana do all the cards created by Rob Alexander cost in total?",
    "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist",
    "gold_sql": "SELECT manaCost FROM cards WHERE artist = 'Rob Alexander'",
    "predicted_sql": "SELECT SUM(CAST(REPLACE(REPLACE(manaCost, '{', ''), '}', '') AS INTEGER)) FROM cards WHERE artist = 'Rob Alexander'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1225,
    "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range.",
    "evidence": "List refers to GROUP_CONCAT(DISTINCT ID); total bilirubin (T-BIL) not within normal range refers to T-BIL > = 2.0",
    "gold_sql": "SELECT T1.ID,T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 GROUP BY T1.SEX,T1.ID",
    "predicted_sql": "SELECT Patient.SEX, GROUP_CONCAT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`T-BIL` >= 2.0 GROUP BY Patient.SEX",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 168,
    "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
    "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
    "gold_sql": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A11 > 10000",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 421,
    "question": "Please list top three unknown power cards that have promotional types for arena league in alphabetical order.",
    "evidence": "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'",
    "gold_sql": "SELECT name FROM cards WHERE (power IS NULL OR power LIKE '%*%') AND promoTypes = 'arenaleague' ORDER BY name LIMIT 3",
    "predicted_sql": "SELECT name FROM cards WHERE (power IS NULL OR power = '*') AND promoTypes LIKE '%arenaleague%' ORDER BY name LIMIT 3",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 248,
    "question": "What are the atoms of the triple bond with the molecule \"TR041\"?",
    "evidence": "TR041 is the molecule id; triple bond refers to bond_type = '#';",
    "gold_sql": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR041'",
    "predicted_sql": "SELECT DISTINCT c.atom_id, c.atom_id2 FROM connected AS c INNER JOIN bond AS b ON c.bond_id = b.bond_id WHERE b.molecule_id = 'TR041' AND b.bond_type = '#'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 306,
    "question": "Which molecules have triple bonds and list all the elements they contain.",
    "evidence": "triple bond refers to bond_type = '#'; element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "gold_sql": "SELECT DISTINCT T1.molecule_id, T2.element FROM bond AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#'",
    "predicted_sql": "SELECT atom.element, atom.molecule_id FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' GROUP BY atom.molecule_id, atom.element",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1,
    "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
    "evidence": "Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`",
    "gold_sql": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
    "predicted_sql": "SELECT (`Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`) AS EligibleFreeRate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOCType = 'Continuation School' ORDER BY EligibleFreeRate ASC LIMIT 3",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 500,
    "question": "Tell the Japanese name of the set which card \"Fellwar Stone\" is in it.",
    "evidence": "Japanese name refers to language = 'Japanese'; card \"Fellwar Stone\" refers to name = 'Fellwar Stone'",
    "gold_sql": "SELECT T2.translation FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T1.name = 'Fellwar Stone' AND T2.language = 'Japanese' AND T2.translation IS NOT NULL",
    "predicted_sql": "SELECT DISTINCT st.translation FROM cards AS c INNER JOIN set_translations AS st ON c.setcode = st.setcode WHERE c.name = 'Fellwar Stone' AND st.language = 'Japanese'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 1273,
    "question": "How many patients have a normal anti-SSB and are diagnosed with SLE in the examination?",
    "evidence": "normal anti-SSB refers to SSB IN('-', '+-'); '-' is expressed as 'negative' and '+-' is expressed as '0' in the database ; diagnosed with SLE refers to Diagnosis = 'SLE'; Should compute the number of distinct ones",
    "gold_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SSB = 'negative' OR '0' AND T1.Diagnosis = 'SLE'",
    "predicted_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T1.SSB IN ('-', '0') AND T2.Diagnosis = 'SLE'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 358,
    "question": "What is the border color of card \"Ancestor's Chosen\"?",
    "evidence": "name of card  = 'Ancestor''s Chosen' ;",
    "gold_sql": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "predicted_sql": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 529,
    "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
    "evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
    "gold_sql": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
    "predicted_sql": "SELECT T1.name FROM sets AS T1 WHERE EXISTS (SELECT 1 FROM set_translations AS T2 WHERE T1.code = T2.setCode AND T2.language = 'Korean') AND NOT EXISTS (SELECT 1 FROM set_translations AS T3 WHERE T1.code = T3.setCode AND T3.language LIKE '%Japanese%')",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1419,
    "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?",
    "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'",
    "gold_sql": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'",
    "predicted_sql": "SELECT type FROM event WHERE event_date = '2020-03-24T12:00:00'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 72,
    "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?",
    "evidence": "State Special School means EdOpsCode = 'SSS'",
    "gold_sql": "SELECT T1.`Enrollment (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.EdOpsCode = 'SSS' AND T2.City = 'Fremont' AND T1.`Academic Year` BETWEEN 2014 AND 2015",
    "predicted_sql": "SELECT SUM(frpm.\"Enrollment (Ages 5-17)\") FROM frpm INNER JOIN schools ON frpm.cdscode = schools.cdscode WHERE frpm.\"Academic Year\" = '2014-2015' AND schools.city = 'Fremont' AND schools.edopscode = 'SSS'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1458,
    "question": "Calculate the difference in the percentage of members in New Jersey and Vermont.",
    "evidence": "SUBTRACT( DIVIDE( SUM(state = 'New Jersey'), COUNT(position = 'Member')), DIVIDE( SUM(state = 'Vermont'), COUNT(position = 'Member')) )",
    "gold_sql": "SELECT CAST((SUM(CASE WHEN T2.state = 'New Jersey' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.state = 'Vermont' THEN 1 ELSE 0 END)) AS REAL) * 100 / COUNT(T1.member_id) AS diff FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip",
    "predicted_sql": "SELECT ROUND(((CAST(SUM(CASE WHEN zip_code.state = 'Maine' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL)) - (CAST(SUM(CASE WHEN zip_code.state = 'Vermont' THEN 1 ELSE 0 END) AS REAL) / CAST(SUM(CASE WHEN member.position = 'Member' THEN 1 ELSE 0 END) AS REAL))) * 100, 2) FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE member.position = 'Member';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 367,
    "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.",
    "evidence": "Phyrexian' is the language; name of artists refers to artist;",
    "gold_sql": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'",
    "predicted_sql": "SELECT cards.artist FROM set_translations INNER JOIN cards ON set_translations.setCode = cards.setCode WHERE set_translations.language = 'Phyrexian';",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 599,
    "question": "What are the post history type IDs for post ID 3720 and how many unique users have commented on the post?",
    "evidence": "",
    "gold_sql": "SELECT T1.PostHistoryTypeId, (SELECT COUNT(DISTINCT UserId) FROM comments WHERE PostId = 3720) AS NumberOfUsers FROM postHistory AS T1 WHERE T1.PostId = 3720",
    "predicted_sql": "SELECT PostHistoryTypeId FROM postHistory WHERE PostId = 3720 UNION SELECT COUNT(DISTINCT UserId) AS UniqueUserCount FROM comments WHERE PostId = 3720",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 401,
    "question": "What percentage of legendary frame effect cards that are only available in online game variations?",
    "evidence": "only available in online game variationsrefer to isOnlineOnly =1 ; legendary frame effect cards refer to frameEffects = 'legendary'; percentage refer to DIVIDE(COUNT(isOnlineOnly=1), COUNT(id)) from cards where frameEffects = 'legendary'",
    "gold_sql": "SELECT SUM(CASE WHEN isOnlineOnly = 1 THEN 1.0 ELSE 0 END) / COUNT(id) * 100 FROM cards WHERE frameEffects = 'legendary'",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN cards.hand = '+3' THEN 1 END) AS REAL) * 100 / COUNT(cards.id) FROM cards WHERE cards.frameEffects LIKE '%legendary%';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1509,
    "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
    "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
    "gold_sql": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
    "predicted_sql": "SELECT COUNT(*) FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01';",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1195,
    "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?",
    "evidence": "average blood albumin level refers to AVG(ALB); female refers to SEX = 'F'; PLT greater than 400 refers to PLT > 400; diagnosed with SLE refers to Diagnosis= 'SLE'",
    "gold_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PLT > 400 AND T1.Diagnosis = 'SLE' AND T1.SEX = 'F'",
    "predicted_sql": "SELECT AVG(T2.ALB) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'F' AND T2.PLT > 400 AND T1.Diagnosis = 'SLE'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 710,
    "question": "In posts with 1 comment, how many of the comments have 0 score?",
    "evidence": "in posts with 1 comment refers to CommentCount = 1;",
    "gold_sql": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0",
    "predicted_sql": "SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE CommentCount = 1) AND Score = 0",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 786,
    "question": "How many heroes have the highest attribute value in strength?",
    "evidence": "highest attribute value in strength refers to MAX(attribute_value) WHERE attribute_name = 'Strength';",
    "gold_sql": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = ( SELECT MAX(attribute_value) FROM hero_attribute )",
    "predicted_sql": "SELECT COUNT(*) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Strength' AND T1.attribute_value = (SELECT MAX(T3.attribute_value) FROM hero_attribute AS T3 INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Strength')",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 846,
    "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
    "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
    "gold_sql": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
    "predicted_sql": "SELECT DISTINCT t2.driverref FROM qualifying AS t1 INNER JOIN drivers AS t2 ON t1.driverid = t2.driverid WHERE t1.raceid = 20 ORDER BY t1.q1 DESC LIMIT 5",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 433,
    "question": "What is the percentage of the set of cards that have Chinese Simplified as the language and are only available for online games?",
    "evidence": "are only available for online games refers to isOnlineOnly = 1; percentage = DIVIDE(COUNT(isOnlineOnly = 1),COUNT(isOnlineOnly))*100",
    "gold_sql": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' AND T1.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T2.isOnlineOnly = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.isOnlineOnly) FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T1.uuid = T2.uuid WHERE T1.language = 'Chinese Simplified'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 167,
    "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
    "evidence": "After 1996 means date > = '1997-01-01",
    "gold_sql": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
    "predicted_sql": "SELECT DISTINCT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 515,
    "question": "When was the oldest mythic card released and what are its legal play formats?",
    "evidence": "the oldest card refers to MIN(originalReleaseDate); mythic card refers to rarity = 'mythic'; legal play refers to status = 'legal'; play format refers to format",
    "gold_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal' AND T1.originalReleaseDate = (SELECT MIN(originalReleaseDate) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T1.originalReleaseDate IS NOT NULL AND T2.status = 'Legal')",
    "predicted_sql": "SELECT T1.originalReleaseDate, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'mythic' AND T2.status = 'Legal' ORDER BY T1.originalReleaseDate ASC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 230,
    "question": "What are the elements of the toxicology and label of molecule TR060?",
    "evidence": "TR060 is the molecule id; ",
    "gold_sql": "SELECT DISTINCT T1.element, T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.molecule_id = 'TR060'",
    "predicted_sql": "SELECT T2.element, T1.label FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR060'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 591,
    "question": "How many users are awarded with supporter badge during year 2011?",
    "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011",
    "gold_sql": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'",
    "predicted_sql": "SELECT COUNT(badges.userid) FROM badges WHERE badges.name = 'Supporter' AND STRFTIME('%Y', badges.date) = '2011'",
    "score": 0.0,
    "prover_result": null,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 730,
    "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'.",
    "evidence": "the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of \"Super Strength\" refers to power_name = 'Super Strength';",
    "gold_sql": "SELECT superhero_name FROM superhero AS T1 WHERE EXISTS (SELECT 1 FROM hero_power AS T2 INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.id = T2.hero_id)AND EXISTS (SELECT 1 FROM publisher AS T4 WHERE T4.publisher_name = 'Marvel Comics' AND T1.publisher_id = T4.id)",
    "predicted_sql": "SELECT CAST(SUM(CASE WHEN T4.power_name = 'Super Strength' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) AS percentage FROM publisher AS T1 INNER JOIN superhero AS T2 ON T1.id = T2.publisher_id INNER JOIN hero_power AS T3 ON T2.id = T3.hero_id INNER JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T1.publisher_name = 'Marvel Comics'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 302,
    "question": "Name the elements that comprise the atoms of bond TR001_2_4.",
    "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
    "gold_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_2_4'",
    "predicted_sql": "SELECT DISTINCT a.element FROM connected c JOIN atom a ON c.atom_id = a.atom_id WHERE c.bond_id = 'TR001_2_4'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 638,
    "question": "List all the name of users that obtained the Organizer Badges.",
    "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';",
    "gold_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'",
    "predicted_sql": "SELECT DISTINCT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name = 'Organizer'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 990,
    "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
    "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
    "gold_sql": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
    "predicted_sql": "SELECT c.constructorRef, c.url  FROM constructorStandings cs  JOIN races r ON cs.raceId = r.raceId  JOIN constructors c ON cs.constructorId = c.constructorId  WHERE r.year = 2009 AND r.name = 'Singapore Grand Prix'  ORDER BY cs.points DESC  LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 742,
    "question": "How many vampire superheroes are there?",
    "evidence": "vampire superheroes refers to race = 'Vampire'",
    "gold_sql": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "predicted_sql": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 808,
    "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
    "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;",
    "gold_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
    "predicted_sql": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.weight_kg = 108 AND superhero.height_cm = 188;",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 832,
    "question": "Name the tallest superhero.",
    "evidence": "tallest superhero refers to MAX(height_cm);",
    "gold_sql": "SELECT superhero_name FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)",
    "predicted_sql": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 895,
    "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
    "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
    "gold_sql": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
    "predicted_sql": "SELECT AVG(lapTimes.time) FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.driverRef = 'vettel' AND races.year = 2009 AND races.name = 'Chinese Grand Prix';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1033,
    "question": "What is the average height of players born between 1990 and 1995?",
    "evidence": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';",
    "gold_sql": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'",
    "predicted_sql": "SELECT AVG(height) FROM Player WHERE birthday >= '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 913,
    "question": "In which country can I find the circuit with the highest altitude?",
    "evidence": "highest altitude refers to max(alt)",
    "gold_sql": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
    "predicted_sql": "SELECT circuits.country, circuits.name FROM circuits ORDER BY circuits.alt DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 954,
    "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
    "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
    "gold_sql": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
    "predicted_sql": "SELECT (CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*)) * 100 AS completion_percentage FROM races T1 INNER JOIN results T2 ON T1.raceId = T2.raceId INNER JOIN drivers T3 ON T2.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T1.year BETWEEN 2007 AND 2009",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1054,
    "question": "What is the defensive work rate of the football player David Wilson\n?",
    "evidence": "",
    "gold_sql": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'",
    "predicted_sql": "SELECT T2.defensive_work_rate FROM Player AS T1 INNER JOIN Player_Attributes AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.player_name = 'David Wilson'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 957,
    "question": "How many Italian drivers haven't finished the race?",
    "evidence": "haven't finished the race refers to time is null;",
    "gold_sql": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
    "predicted_sql": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Italian' AND T2.milliseconds IS NULL",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 992,
    "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
    "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
    "gold_sql": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "predicted_sql": "SELECT forename || ' ' || surname AS fullname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 365,
    "question": "What is the type of card \"Benalish Knight\"?",
    "evidence": "Benalish Knight' is the name of card;",
    "gold_sql": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'",
    "predicted_sql": "SELECT type FROM cards WHERE name = 'Benalish Knight'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 400,
    "question": "Lists the set code of all cards translated into Spanish.",
    "evidence": "Spanish refer to language; set code refers to setCode",
    "gold_sql": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
    "predicted_sql": "SELECT DISTINCT setcode FROM set_translations WHERE language = 'Spanish'",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1014,
    "question": "Please list the lap records for the circuits in Italy.",
    "evidence": "lap record means the fastest time recorded which refers to time",
    "gold_sql": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
    "predicted_sql": "SELECT c.name AS circuit_name, MIN(l.time) AS fastest_lap_time FROM laptimes AS l INNER JOIN races AS r ON l.raceid = r.raceid INNER JOIN circuits AS c ON r.circuitid = c.circuitid WHERE c.country = 'Italy' GROUP BY c.circuitid, c.name",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 431,
    "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
    "evidence": "available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'",
    "gold_sql": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
    "predicted_sql": "SELECT s.id FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND st.language = 'Japanese'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 504,
    "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.",
    "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'",
    "gold_sql": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3",
    "predicted_sql": "SELECT COUNT(*) FROM sets s JOIN cards c ON s.code = c.setCode WHERE s.name = 'World Championship Decks 2004' AND c.convertedManaCost = 3",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1065,
    "question": "Please list all team names which the speed class is fast.",
    "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';",
    "gold_sql": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'",
    "predicted_sql": "SELECT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.buildUpPlaySpeedClass = 'Fast';",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 562,
    "question": "For the post which got 1910 view counts, how many comments does it get?",
    "evidence": "",
    "gold_sql": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910",
    "predicted_sql": "SELECT CommentCount FROM posts WHERE ViewCount = 1910",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1145,
    "question": "Which top 4 leagues had the most games in the 2015-2016 season?",
    "evidence": "in the 2015-2016 season refers to season = '2015/2016'; league with most games refers to League.name where MAX(COUNT(id))",
    "gold_sql": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 4",
    "predicted_sql": "SELECT T2.name FROM Match AS T1 INNER JOIN League AS T2 ON T1.league_id = T2.id WHERE T1.season = '2015/2016' GROUP BY T2.name ORDER BY COUNT(T1.id) DESC LIMIT 1",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1041,
    "question": "For the teams with normal build-up play dribbling class in 2014, List the names of the teams with less than average chance creation passing, in descending order of chance creation passing.",
    "evidence": "normal build-up play dribbling class refers to buildUpPlayDribblingClass = 'Normal'; in 2014 refers to date > = '2014-01-01 00:00:00' AND date < = '2014-01-31 00:00:00'; names of the teams refers to team_long_name; less than average chance creation passing = DIVIDE(SUM(chanceCreationPassing), COUNT(id)) > chanceCreationPassing;",
    "gold_sql": "SELECT t3.team_long_name FROM Team AS t3 INNER JOIN Team_Attributes AS t4 ON t3.team_api_id = t4.team_api_id WHERE t4.buildUpPlayDribblingClass = 'Normal' AND t4.chanceCreationPassing < ( SELECT CAST(SUM(t2.chanceCreationPassing) AS REAL) / COUNT(t1.id) FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlayDribblingClass = 'Normal' AND SUBSTR(t2.`date`, 1, 4) = '2014') ORDER BY t4.chanceCreationPassing DESC",
    "predicted_sql": "SELECT T2.team_long_name FROM Team_Attributes AS T1 INNER JOIN Team AS T2 ON T1.team_api_id = T2.team_api_id WHERE T1.buildUpPlayDribblingClass = 'Normal' AND T1.date LIKE '2014%' GROUP BY T2.team_long_name HAVING SUM(T1.chanceCreationPassing) / COUNT(T1.id) < ( SELECT CAST(SUM(chanceCreationPassing) AS REAL) / COUNT(id) FROM Team_Attributes WHERE date LIKE '2014%' ) ORDER BY SUM(T1.chanceCreationPassing) DESC",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 1175,
    "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?",
    "evidence": "How old the patient refers to SUBTRACT(year(`Examination Date`), year(Birthday)); the highest hemoglobin count refers to MAX(HGB)",
    "gold_sql": "SELECT STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday), T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.HGB DESC LIMIT 1",
    "predicted_sql": "SELECT strftime('%Y', T1.`Examination Date`) - strftime('%Y', T3.Birthday) AS age, T1.Diagnosis FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Patient AS T3 ON T1.ID = T3.ID ORDER BY T2.HGB DESC LIMIT 1;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1087,
    "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?",
    "evidence": "height > 180; volley score refers to volleys; volleys > 70;",
    "gold_sql": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70",
    "predicted_sql": "SELECT COUNT(*) FROM Player p JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.height > 180 AND pa.volleys > 70",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 637,
    "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
    "evidence": "used by Mark Meckes refers to DisplayName = 'Mark Meckes'; Doen't have comments refers to CommentCount = 0;",
    "gold_sql": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
    "predicted_sql": "SELECT DISTINCT T2.Tags FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Mark Meckes' AND T2.CommentCount = 0",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 732,
    "question": "Which publisher published the slowest superhero?",
    "evidence": "the slowest superhero refers to attribute_name = 'Speed' where MIN(attribute_value); publisher refers to publisher_name",
    "gold_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
    "predicted_sql": "SELECT publisher_name FROM publisher INNER JOIN superhero ON publisher.id = superhero.publisher_id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Speed' ORDER BY hero_attribute.attribute_value ASC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1152,
    "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?",
    "evidence": "'SLE' diagnosed patient means Diagnosis = 'SLE'; inpatient refers to Admission = '+'; outpatient refers to Admission = '-'; calculation =  DIVIDE(COUNT(ID) where Diagnosis = 'SLE' and Admission = '+', COUNT(ID) where Diagnosis = 'SLE' and Admission = '-')",
    "gold_sql": "SELECT SUM(CASE WHEN Admission = '+' THEN 1.0 ELSE 0 END) / SUM(CASE WHEN Admission = '-' THEN 1 ELSE 0 END) FROM Patient WHERE Diagnosis = 'SLE'",
    "predicted_sql": "SELECT CAST(COUNT(CASE WHEN Admission = '-' THEN 1 END) AS REAL) / COUNT(CASE WHEN Admission = '+' THEN 1 END) AS outpatient_to_inpatient_ratio FROM Patient WHERE Diagnosis = 'SLE'",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1168,
    "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?",
    "evidence": "The larger the birthday value, the younger the person is, and vice versa; 'SJS' refers to diagnosis; (SUBTRACT(year(`First Date`)), year(Birthday)); age of the patients when they initially arrived at the hospital refers to year(Birthday)",
    "gold_sql": "SELECT T1.Date, STRFTIME('%Y', T2.`First Date`) - STRFTIME('%Y', T2.Birthday),T2.Birthday FROM Laboratory AS T1 INNER JOIN Patient AS T2 ON T1.ID = T2.ID WHERE T2.Diagnosis = 'SJS' AND T2.Birthday IS NOT NULL ORDER BY T2.Birthday ASC LIMIT 1",
    "predicted_sql": "SELECT t2.date, STRFTIME('%Y', t1.\"First Date\") - STRFTIME('%Y', t1.birthday) AS age FROM patient AS t1 INNER JOIN laboratory AS t2 ON t1.id = t2.id WHERE t1.diagnosis = 'SJS' ORDER BY t1.birthday ASC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 814,
    "question": "List the skin colour of the superheroes with 100 attribute value.",
    "evidence": "skin colour refers to colour.colour where skin_colour_id = colour.id; 100 attribute value refers to attribute_value = 100;",
    "gold_sql": "SELECT DISTINCT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id WHERE T3.attribute_value = 100",
    "predicted_sql": "SELECT colour.colour FROM hero_attribute INNER JOIN superhero ON hero_attribute.hero_id = superhero.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE hero_attribute.attribute_value = 100;",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1219,
    "question": "For all patients with normal uric acid (UA), what is the average UA index based on their latest laboratory examination result?",
    "evidence": "uric acid (UA) with normal range refers to UA < 8.0 and SEX = 'M' or UA < 6.5 and SEX = 'F'; average UA index refers to AVG(UA)",
    "gold_sql": "SELECT AVG(T2.UA) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.UA < 6.5 AND T1.SEX = 'F') OR (T2.UA < 8.0 AND T1.SEX = 'M') AND T2.Date = ( SELECT MAX(Date) FROM Laboratory )",
    "predicted_sql": "SELECT AVG(l.ua) FROM patient AS p INNER JOIN laboratory AS l ON p.id = l.id INNER JOIN (SELECT id, MAX(date) AS latestdate FROM laboratory GROUP BY id) AS latestlab ON p.id = latestlab.id AND l.date = latestlab.latestdate WHERE (p.sex = 'M' AND l.ua < 8.0) OR (p.sex = 'F' AND l.ua < 6.5)",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 899,
    "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
    "evidence": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;",
    "gold_sql": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
    "predicted_sql": "SELECT c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE r.year BETWEEN 1990 AND 2000 GROUP BY c.name HAVING COUNT(r.raceId) = 4",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 955,
    "question": "What is the average time in seconds of champion for each year, before year 1975?",
    "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
    "gold_sql": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
    "predicted_sql": "SELECT T1.year, AVG(SUBSTR(T2.time, 1, 2) * 3600 + SUBSTR(T2.time, 4, 2) * 60 + SUBSTR(T2.time, 7, 2) + SUBSTR(T2.time, 10, 3) * 0.001) AS average_seconds FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.time IS NOT NULL GROUP BY T1.year",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1318,
    "question": "What is the event that has the highest attendance of the students from the Student_Club?",
    "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))",
    "gold_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name HAVING COUNT(T2.link_to_event) = (SELECT MAX(attendance_count) FROM (SELECT COUNT(link_to_event) AS attendance_count FROM attendance GROUP BY link_to_event) AS subquery)",
    "predicted_sql": "SELECT event.event_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id GROUP BY attendance.link_to_event, event.event_name ORDER BY COUNT(member.member_id) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1253,
    "question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?",
    "evidence": "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);",
    "gold_sql": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA = (SELECT MAX(IGA) FROM Laboratory WHERE IGA BETWEEN 80 AND 500)",
    "predicted_sql": "SELECT Patient.Diagnosis FROM Patient JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Laboratory.IGA BETWEEN 80 AND 500 ORDER BY Laboratory.IGA DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1006,
    "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
    "evidence": "",
    "gold_sql": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
    "predicted_sql": "SELECT lapTimes.time FROM lapTimes ORDER BY lapTimes.time ASC LIMIT 1;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1449,
    "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
    "evidence": "full name refers to first_name, last_name; major of members refers to major_name; spend more than a hundred dollars on an expense refers to cost > 100",
    "gold_sql": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "predicted_sql": "SELECT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1387,
    "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
    "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
    "gold_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "predicted_sql": "SELECT DISTINCT T4.first_name ,  T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1455,
    "question": "Which budget allowed the most money for water, chips, and cookies?",
    "evidence": "budget allowed refers to expense_description; expense_description = 'Water, chips, cookies'; most money refers to MAX(cost)",
    "gold_sql": "SELECT T2.budget_id FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Water, chips, cookies' ORDER BY T1.cost DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(expense.cost) FROM expense WHERE expense.expense_description = 'Water, chips, cookies';",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1482,
    "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
    "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
    "gold_sql": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
    "predicted_sql": "WITH segment_stats AS ( SELECT T1.Segment, (SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2013' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2012' THEN T2.Consumption ELSE 0 END)) * 100.0 / SUM(CASE WHEN SUBSTR(T2.Date, 1, 4) = '2012' THEN T2.Consumption ELSE 0 END) AS percentage_increase FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment IN ('SME', 'LAM', 'KAM') AND T1.Currency = 'EUR' GROUP BY T1.Segment ) SELECT * FROM ( SELECT 'Highest Increase' AS result_type, Segment, percentage_increase FROM segment_stats ORDER BY percentage_increase DESC LIMIT 1 ) AS highest UNION ALL SELECT * FROM ( SELECT 'Lowest Increase' AS result_type, Segment, percentage_increase FROM segment_stats ORDER BY percentage_increase ASC LIMIT 1 ) AS lowest;",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": true
  },
  {
    "question_id": 1298,
    "question": "Among the patients whose total cholesterol is within the normal range, how many of them have a P pattern observed in the sheet of ANA examination?",
    "evidence": "total cholesterol is within the normal range refers to `T-CHO` < 250; P pattern observed in the sheet of ANA examination refers to ANA Pattern = 'P';",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T3.`ANA Pattern` = 'P' AND T2.`T-CHO` < 250",
    "predicted_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T2.`T-CHO` < 250 AND T3.`ANA Pattern` = 'P'",
    "score": 0.0,
    "prover_result": null,
    "refuter_result": true,
    "label": true
  },
  {
    "question_id": 1035,
    "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.",
    "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed >50 AND buildUpPlaySpeed <60; ",
    "gold_sql": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "predicted_sql": "SELECT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1499,
    "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
    "evidence": "Monthly consumption = SUM(consumption) / 12",
    "gold_sql": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
    "predicted_sql": "SELECT MAX(MonthlyConsumption) FROM (SELECT SUM(T2.Consumption)/12.0 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID)",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1426,
    "question": "List the last name of members with a major in environmental engineering and include its department and college name.",
    "evidence": "'Environmental Engineering' is the major_name;",
    "gold_sql": "SELECT T2.last_name, T1.department, T1.college FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Member' AND T1.major_name = 'Environmental Engineering'",
    "predicted_sql": "SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1526,
    "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
    "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
    "gold_sql": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
    "predicted_sql": "SELECT (t2012.Consumption - t2013.Consumption) / t2012.Consumption AS DecreaseRate FROM ( SELECT Consumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE `Date` = '2012-08-25' AND Amount = 634.8 ) AND `Date` = '201212' ) t2012, ( SELECT Consumption FROM yearmonth WHERE CustomerID IN ( SELECT CustomerID FROM transactions_1k WHERE `Date` = '2012-08-25' AND Amount = 634.8 ) AND `Date` = '201312' ) t2013",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 934,
    "question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
    "evidence": "the no. 4 grid formation refers to grid = 4",
    "gold_sql": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
    "predicted_sql": "SELECT d.forename, d.surname FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE r.name = 'Australian Grand Prix' AND r.year = 1989 AND res.grid = 4",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1475,
    "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
    "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012",
    "gold_sql": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
    "predicted_sql": "SELECT COUNT(customers.CustomerID) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Segment = 'KAM' AND yearmonth.Date >= '201201' AND yearmonth.Date <= '201212' AND yearmonth.Consumption < 30000",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1071,
    "question": "List the football team that has a build up play speed of 31, build up plan dribbling of 53, and build up play passing of 32. Only indicate the short name of the team.",
    "evidence": "build up play speed refers to buildUpPlaySpeed; buildUpPlaySpeed = 31; build up play dribbling refers to buildUpPlayDribbling; buildUpPlayDribbling = 53; build up play passing refers to buildUpPlayPassing; buildUpPlayPassing = 32; short name of the team refers to team_short_name;",
    "gold_sql": "SELECT DISTINCT t1.team_short_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeed = 31 AND t2.buildUpPlayDribbling = 53 AND t2.buildUpPlayPassing = 32",
    "predicted_sql": "SELECT T1.team_short_name FROM Team AS T1 INNER JOIN Team_Attributes AS T2 ON T1.team_api_id = T2.team_api_id WHERE T2.buildUpPlaySpeed = 31 AND T2.buildUpPlayDribbling = 53 AND T2.buildUpPlayPassing = 32",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1148,
    "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?",
    "evidence": "percentage refers to DIVIDE(COUNT(height < 180 AND overall_rating > 70),COUNT(id)) * 100",
    "gold_sql": "SELECT CAST(COUNT(CASE WHEN t2.overall_rating > 70 THEN t1.id ELSE NULL END) AS REAL) * 100 / COUNT(t1.id) percent FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height < 180",
    "predicted_sql": "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM Player WHERE height < 180) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1512,
    "question": "Which customer paid the most in 2012/8/25?",
    "evidence": "'2012/8/25' can be represented by '2012-08-25'",
    "gold_sql": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
    "predicted_sql": "SELECT \"transactions_1k\".\"CustomerID\" FROM \"transactions_1k\" WHERE \"transactions_1k\".\"Date\" = '2012-08-25' GROUP BY \"transactions_1k\".\"CustomerID\" ORDER BY SUM(\"transactions_1k\".\"Amount\" * \"transactions_1k\".\"Price\") DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1216,
    "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.",
    "evidence": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday DESC",
    "predicted_sql": "SELECT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND (Laboratory.ALB <= 3.5 OR Laboratory.ALB >= 5.5) ORDER BY Patient.Birthday DESC",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1250,
    "question": "Which patient has a normal proteinuria level and is diagnosed with SLE? Please give his or her patient ID.",
    "evidence": "normal proteinuria level refers to 0 < `U-PRO` < 30; diagnosed with SLE refers to Diagnosis = 'SLE';",
    "gold_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` > 0 AND T2.`U-PRO` < 30 AND T1.Diagnosis = 'SLE'",
    "predicted_sql": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.`U-PRO` > 0 AND T2.`U-PRO` < 30",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": true
  },
  {
    "question_id": 1338,
    "question": "Was each expense in October Meeting on October 8, 2019 approved?",
    "evidence": "event_name = 'October Meeting' where event_date = '2019-10-08'; approved = True means expenses was approved; approved = False means expenses was not approved",
    "gold_sql": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
    "predicted_sql": "SELECT e.expense_id, e.approved FROM expense AS e INNER JOIN attendance AS a ON e.link_to_member = a.link_to_member INNER JOIN event AS ev ON a.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting' AND ev.event_date = '2019-10-08T12:00:00'",
    "score": 0.0,
    "prover_result": true,
    "refuter_result": true,
    "label": false
  },
  {
    "question_id": 1450,
    "question": "In the events with more than forty incomes, list the city and country in which the event is happening.",
    "evidence": "more than fifty incomes refers to income > 40",
    "gold_sql": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 40",
    "predicted_sql": "SELECT T1.location, T5.city, T5.county FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN income AS T3 ON T3.link_to_member = T2.link_to_member INNER JOIN zip_code AS T5 ON T1.location = T5.zip_code GROUP BY T1.location, T5.city, T5.county HAVING COUNT(T3.income_id) > 40",
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null,
    "label": false
  },
  {
    "question_id": 1487,
    "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
    "evidence": "October 2013 refers to 201310 in the yearmonth.date",
    "gold_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
    "predicted_sql": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1",
    "score": 1.0,
    "prover_result": null,
    "refuter_result": false,
    "label": false
  },
  {
    "question_id": 1527,
    "question": "Which gas station has the highest amount of revenue?",
    "evidence": "",
    "gold_sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
    "predicted_sql": "SELECT gasstationid FROM transactions_1k GROUP BY gasstationid ORDER BY SUM(amount * price) DESC LIMIT 1",
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false,
    "label": true
  }
]