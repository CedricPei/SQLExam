[
  {
    "question_id": 637,
    "result": {
      "expected_answer": "All distinct tag names appearing in posts authored by user Mark Meckes whose CommentCount equals 0",
      "sql_description": "Gets posts whose OwnerUserId matches the user with DisplayName 'Mark Meckes' and CommentCount = 0, matches each post's <tag> list to tags.TagName, and returns DISTINCT TagName values",
      "reason": "Query filters on the correct author and zero-comment posts, extracts tags correctly, and returns distinct tag names; aligns with question requirements",
      "verdict": true,
      "evidence": "sql_result shows column TagName with value 'books' (row 0), demonstrating returned tag(s)"
    }
  },
  {
    "question_id": 1389,
    "result": {
      "expected_answer": "Return the name(s) of the event(s) whose associated expense has the minimum individual cost among all expenses",
      "sql_description": "Joins event → budget → expense and returns the event_name where an expense’s cost equals the overall MIN(cost) found in expense",
      "reason": "Matches evidence definition (lowest cost = MIN(cost) of individual expenses) and outputs event_name(s) tied to that minimum; result set aligns with requirement",
      "verdict": true,
      "evidence": "sql_result shows column event_name with rows (e.g., 'November Speaker', 'October Speaker', 'September Speaker'), representing events linked to the minimum cost"
    }
  },
  {
    "question_id": 465,
    "result": {
      "expected_answer": "A Yes/No indication of whether any printing of the card named \"Ancestor's Chosen\" has a Korean language version in the foreign_data table.",
      "sql_description": "Counts rows in foreign_data with language = 'Korean' whose uuid equals (not IN) the single uuid returned by a sub-query selecting uuid from cards where name = 'Ancestor''s Chosen'. If count > 0 returns 'Yes', else 'No'.",
      "reason": "The sub-query may return multiple uuids because a card name can have several printings; using '=' restricts the test to at most one uuid instead of checking every printing, so the query can give an incorrect answer. Required scope (any printing) is not fully covered.",
      "verdict": false
    }
  },
  {
    "question_id": 1275,
    "result": {
      "expected_answer": "A single integer: the number of distinct patients who are male and have normal anti-centromere and normal anti-SSB levels",
      "sql_description": "Joins Patient with Laboratory, keeps rows where CENTROMEA and SSB are in ('-', '+-') and SEX='M', counts distinct patient IDs",
      "reason": "Query applies the required normal-level conditions on CENTROMEA and SSB, filters for male sex, uses DISTINCT on patient IDs, and returns the count, matching the question requirements",
      "verdict": true,
      "evidence": "sql_result has column COUNT(DISTINCT T1.`ID`) with value 0 indicating no such male patients found"
    }
  },
  {
    "question_id": 1243,
    "result": {
      "expected_answer": "A single numeric percentage representing, among patients older than 55 whose PT is abnormal (>=14), the proportion that are female.",
      "sql_description": "Joins Laboratory with Patient, keeps rows where patient age (current year minus birth year) is greater than 55 and PT >= 14, then counts those rows and the subset where SEX = 'F'; returns (female count / total abnormal PT count) * 100 as percentage.",
      "reason": "The query applies the correct age filter, the abnormal PT condition, and calculates the requested female-to-total ratio as a percentage; result set matches required output format.",
      "verdict": true,
      "evidence": "sql_result shows column percentage with a numeric value (row 0: 78.36%), matching requested single percentage answer."
    }
  },
  {
    "question_id": 46,
    "result": {
      "expected_answer": "Name(s) of state special schools (DOC = 31) that offer grades K–12 which have the largest total enrollment across grades 1 through 12 (i.e., the maximum K-12 enrollment value). If several schools tie for the maximum, all should be returned.",
      "sql_description": "Joins satscores to schools, keeps state special schools (DOC='31') that offer K-12, sorts by the SAT table’s enroll12 column (grade-12 enrollment only), and returns the single top row (LIMIT 1) with its grade-12 enrollment.",
      "reason": "Uses grade-12 enrollment instead of total K-12 enrollment and limits to one row, so it may miss ties and measures the wrong metric. Thus it does not reliably answer which schools have the highest K-12 enrollment.",
      "verdict": false
    }
  },
  {
    "question_id": 937,
    "result": {
      "expected_answer": "The finish time (time gap or race time) recorded for the driver who finished second in the 2008 Chinese Grand Prix",
      "sql_description": "Gets the raceId of the 2008 race named 'Chinese Grand Prix' and returns the time field from results where that raceId matches and position equals 2 (second place).",
      "reason": "Query filters by correct year, race name, and finishing position, and returns the requested time value.",
      "verdict": true,
      "evidence": "sql_result shows a single row with column time = '+14.925', indicating the finish time for P2."
    }
  },
  {
    "question_id": 1505,
    "result": {
      "expected_answer": "A single integer: the number of customers whose currency is EUR and whose monthly consumption value is greater than 1000.",
      "sql_description": "Counts distinct CustomerID from customers joined to yearmonth where Currency = 'EUR' and Consumption > 1000.",
      "reason": "Query directly implements the stated filters (currency EUR, monthly consumption >1000) and returns the count of distinct customers, matching the question.",
      "verdict": true,
      "evidence": "sql_result row 0 shows COUNT(DISTINCT T1.CustomerID)=391"
    }
  }
]