[
  {
    "question_id": 437,
    "question": "Among black card borders, which card has full artwork?",
    "evidence": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1",
    "gold_sql": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "predicted_sql": "SELECT name FROM cards WHERE borderColor = 'black' AND isFullArt = 1",
    "label": true,
    "score": 1.0,
    "prover_result": true,
    "refuter_result": false
  },
  {
    "question_id": 1267,
    "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?",
    "evidence": "normal anti-SM refers to SM IN('-', '+-'); SM = 'negative' means '-'; SM = '0' means '+-'; SM = '1' means '+'; does not have thrombosis refers to Thrombosis = 0;",
    "gold_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative','0') AND T1.Thrombosis = 0",
    "predicted_sql": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM IN ('negative', '0') AND T1.Thrombosis = 1",
    "label": false,
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null
  },
  {
    "question_id": 139,
    "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
    "evidence": "High-level credit cards refers to the cards with the gold type.",
    "gold_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
    "predicted_sql": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'disponent'",
    "label": false,
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null
  },
  {
    "question_id": 595,
    "question": "Which user have only one post history per post and having at least 1000 views?",
    "evidence": "having at least 1000 view refers to Views > = 1000; user refers to UserId",
    "gold_sql": "SELECT T2.UserId FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T3.ViewCount >= 1000 GROUP BY T2.UserId HAVING COUNT(DISTINCT T2.PostHistoryTypeId) = 1",
    "predicted_sql": "SELECT postHistory.UserId FROM postHistory INNER JOIN users ON postHistory.UserId = users.Id WHERE users.Views >= 1000 GROUP BY postHistory.UserId HAVING COUNT(DISTINCT postHistory.PostId) = 1",
    "label": false,
    "score": 0.0,
    "prover_result": false,
    "refuter_result": null
  }
]